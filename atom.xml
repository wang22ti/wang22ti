<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王子泰</title>
  
  <subtitle>哭也欢乐，悲也潇洒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wang22ti.com/"/>
  <updated>2018-05-07T07:47:25.136Z</updated>
  <id>http://wang22ti.com/</id>
  
  <author>
    <name>wang22ti</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《编译原理》实验3-语法分析器（LL1分析法）python实现</title>
    <link href="http://wang22ti.com/2018/05/05/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%EF%BC%88LL1%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wang22ti.com/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/</id>
    <published>2018-05-05T06:13:29.000Z</published>
    <updated>2018-05-07T07:47:25.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        本次实验中，在上次实验（递归下降分析法）实现的first集follow集的基础上，我用python3.5实现了一个LL(1)语法分析类，具有以下功能：</p><ol><li><p>根据文法的起始符号、非终结符号、产生式自动生成文法终结符号的First集和Follow集，并进一步生成文法的LL(1)文法分析表。</p></li><li><p>根据文法分析表判断输入串是否满足该文法。</p></li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>​        实验中实现的词法分析类名为LLOneAnalyzer，具体描述信息如下：</p><p><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/Snipaste_2018-05-07_15-39-18.png" alt=""><br><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/Snipaste_2018-05-07_15-39-50.png" alt=""></p><h1 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h1><p><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/Snipaste_2018-05-07_15-41-27.png" alt=""></p><p><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/Snipaste_2018-05-07_15-43-20.png" alt=""></p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写过递归下降分析，可以直接写LL1的加强版啦</span></span><br><span class="line"><span class="comment"># E'用B代替，T'用U来代替</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LLOneAnalyzer</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, overs, production)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.overs = overs</span><br><span class="line">        self.production = production</span><br><span class="line">        self.nontermainals = production.keys()</span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line">        self.analyse_table = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.get_analyse_table()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first的递归函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_rec</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        ret_dict = &#123;&#125;</span><br><span class="line">        <span class="comment"># 对于每一个产生式</span></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">            <span class="comment"># 如果该产生式右部第一个符号为终结符号，用非终结符号的first集更新ret_dict，下一个产生式</span></span><br><span class="line">            <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                ret_dict.update(self.first[nontermainal])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 如果该产生式右部不为空，</span></span><br><span class="line">            <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                <span class="comment"># 对于产生式右部每一个符号</span></span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                    <span class="comment"># 递归调用获得该符号的first集并加入该非终结符号的first集</span></span><br><span class="line">                    first_ = self.get_first_rec(sign)</span><br><span class="line">                    ret_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                    <span class="comment"># 如果该符号的first集中没有空串，处理下一个产生式</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 如果产生式右部为空串，将空串加入该非终结符号的first集合为加入follow集做准备</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret_dict</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first集和follow集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮，考虑右部首符号为终结符号</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮（递归）</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> nontermainal <span class="keyword">not</span> <span class="keyword">in</span> self.first_first:</span><br><span class="line">                self.first[nontermainal] = self.get_first_rec(nontermainal)</span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[self.start].add(<span class="string">'#'</span>)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = self.follow.copy()</span><br><span class="line">            <span class="comment"># 对于每一产生式从左到右的每一个符号</span></span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="comment"># 如果是终结符号，下一个符号</span></span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.overs:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="comment"># 如果是非终结符号且为最后一个，该符号的follow集为产生式左部非终结符号的follow集</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] = self.follow[nontermainal]</span><br><span class="line">                        <span class="comment"># 如果是非终结符号且后一个符号为终结符号，该符号的follow加上该终结符号</span></span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="comment"># 如果是非终结符号且后一个符号为非终结符，将后一个符号的first集减去空串并入该符号的follow集</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_first = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_first_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_first_without_null</span><br><span class="line">                            <span class="comment"># 如果后一个符号的first集中存在空串，还需要将产生式左部非终结符号的follow集并入该符号follow集</span></span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_first:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 将follow集加入first集</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal]:</span><br><span class="line">                self.first[nontermainal][<span class="string">''</span>] = self.follow[nontermainal]</span><br><span class="line">        <span class="comment"># print(self.first)</span></span><br><span class="line">        <span class="comment"># print(self.follow)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据first集follow集生成分析表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analyse_table</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 对于first集中每一个产生式及对应的输入符号</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> a, ai <span class="keyword">in</span> self.first[nontermainal].items():</span><br><span class="line">                <span class="comment"># 如果输入符号为终结符号，将终结符号、输入符号、产生式右部写入分析表</span></span><br><span class="line">                <span class="keyword">if</span> a != <span class="string">''</span>:</span><br><span class="line">                    self.analyse_table[nontermainal][a] = ai</span><br><span class="line">                <span class="comment"># 如果输入符号是空串，将非终结符号的follow集中每一个符号在分析表中的值写为空串</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> b <span class="keyword">in</span> ai:</span><br><span class="line">                        self.analyse_table[nontermainal][b] = <span class="string">''</span></span><br><span class="line">        <span class="comment"># print(self.analyse_table)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ll(1)文法分析函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_llone</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 拿出分析栈栈顶符号分析</span></span><br><span class="line">            x = self.stack.pop()</span><br><span class="line">            <span class="comment"># 如果是栈顶符号终结符号</span></span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> self.overs:</span><br><span class="line">                <span class="comment"># 如果和待分析的符号匹配，分析下一个符号</span></span><br><span class="line">                <span class="keyword">if</span> x == self.a:</span><br><span class="line">                    self.index += <span class="number">1</span></span><br><span class="line">                    self.a = self.string[self.index]</span><br><span class="line">                <span class="comment"># 如果不匹配，返回False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 如果栈顶符号是'#'</span></span><br><span class="line">            <span class="keyword">elif</span> x == <span class="string">'#'</span>:</span><br><span class="line">                <span class="comment"># 如果和待分析的符号匹配，返回True</span></span><br><span class="line">                <span class="keyword">if</span> x == self.a:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="comment"># 如果不匹配，返回False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 如果是非终结符号，将产生式右部元素逆序压入分析栈</span></span><br><span class="line">            <span class="keyword">elif</span> self.a <span class="keyword">in</span> self.analyse_table[x].keys():</span><br><span class="line">                self.stack += list(reversed(self.analyse_table[x][self.a]))</span><br><span class="line">            <span class="comment"># 如果是未知符号，返回False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ll(1)文法分析程序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.string = string + <span class="string">'#'</span></span><br><span class="line">        self.stack = [<span class="string">'#'</span>, self.start]</span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.a = self.string[self.index]</span><br><span class="line">        <span class="keyword">if</span> self.analyse_llone():</span><br><span class="line">            print(<span class="string">'OK  '</span>, string)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Fail'</span>, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = <span class="string">'E'</span></span><br><span class="line">overs = [<span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>, <span class="string">'i'</span>]</span><br><span class="line">production = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'TB'</span>, ],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'ATB'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'FU'</span>, ],</span><br><span class="line">    <span class="string">'U'</span>: [<span class="string">'MFU'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'+'</span>, <span class="string">'-'</span>],</span><br><span class="line">    <span class="string">'M'</span>: [<span class="string">'*'</span>, <span class="string">'/'</span>],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [</span><br><span class="line">    <span class="string">''</span>,</span><br><span class="line">    <span class="string">'i+@'</span>,</span><br><span class="line">    <span class="string">'i'</span>,</span><br><span class="line">    <span class="string">'i+'</span>,</span><br><span class="line">    <span class="string">'+*i'</span>,</span><br><span class="line">    <span class="string">'i+i*i'</span>,</span><br><span class="line">    <span class="string">'i+i*ii'</span>,</span><br><span class="line">    <span class="string">'i+i*i+'</span>,</span><br><span class="line">    <span class="string">'i+i*i/i-i'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">llone_analyzer = LLOneAnalyzer(start=start, overs=overs, production=production)</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    llone_analyzer.analyse(string=string)</span><br></pre></td></tr></table></figure><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/1.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：由于上一次实验打下的良好基础，本次实验较为顺利，没有遇到明显的困难。</p><p>​        本程序的优点包括：比较完整地实现了LL(1)分析算法；分析器只需要输入起始符号、产生式、终结符号就可以初始化，自动生成First集、Follow集和分析表。</p><p>​        本程序还存在可以优化的地方，主要包括：将输入符号串改为由词法分析器生成的二元式从文件中读取，为完整编译器的实现打下良好的基础；</p><p>​        本实验中，通过实现LL(1)文法分析表生成算法与LL(1)文法分析算法，加深了我对两个算法的理解，提高了我对问题分析、抽象的能力，为实现完整编译器打下了良好的基础。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序功能描述&quot;&gt;&lt;a href=&quot;#程序功能描述&quot; class=&quot;headerlink&quot; title=&quot;程序功能描述&quot;&gt;&lt;/a&gt;程序功能描述&lt;/h1&gt;&lt;p&gt;​        本次实验中，在上次实验（递归下降分析法）实现的first集follow集的基础上，我用py
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》实验4-进程通信与线程同步</title>
    <link href="http://wang22ti.com/2018/05/01/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C4-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://wang22ti.com/2018/05/01/《操作系统》实验4-进程通信与线程同步/</id>
    <published>2018-05-01T15:32:53.000Z</published>
    <updated>2018-05-07T08:24:18.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><p>​    <strong>创建两个进程。要求两个进程分别作为“生产者”和“消费者”，由生产者生产1-100数字，通过命名管道传递给消费者进程，并由消费者屏幕输出。通过实验验证命名管道同步方式（生产者发送时阻塞或者非阻塞，消费者阻塞或者非阻塞）</strong></p><p>​        实验中我使用fork创建了两个进程分别作为生产者和消费者，从屏幕右侧的输出来看，到后期基本按照“写入一个，读出一个”的方式进行生产消费，不过消费者相对于生产者有3个周期的延迟。最终程序很好的在“生产者-消费者”模式下完成了进程的同步输出。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image1.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIFO_NAME <span class="meta-string">"my_fifo"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE PIPE_BUF </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (access(FIFO_NAME, F_OK) == <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> ( mkfifo(FIFO_NAME, <span class="number">0777</span>) )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[producer %d] could not create fifo %s\n"</span>, getpid(), FIFO_NAME);  </span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ( (pipe_id =open(FIFO_NAME, O_WRONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">         <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];</span><br><span class="line">         <span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">             <span class="built_in">sprintf</span>(buffer, <span class="string">"%d"</span>, num);</span><br><span class="line">             <span class="keyword">if</span> ( (write(pipe_id, buffer, BUFFER_SIZE)) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[producer]Write error on pipe\n"</span>);  </span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">             &#125;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"[producer %d] put %d\n"</span>, getpid(), num++); </span><br><span class="line">         &#125;</span><br><span class="line">         close(pipe_id); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[producer %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">comsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];   </span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ((pipe_id =open(FIFO_NAME, O_RDONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">do</span>&#123;  </span><br><span class="line">            read(pipe_id, buffer, BUFFER_SIZE);</span><br><span class="line">            num = atoi(buffer);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[somsumer %d] get %d\n"</span>, getpid(), num); </span><br><span class="line">        &#125;<span class="keyword">while</span>(num &lt; <span class="number">100</span>);  </span><br><span class="line">        close(pipe_id);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[somsumer %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">while</span> ((pid = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line">producer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">comsumer();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>​    <strong>创建两个进程，通过消息传递机制通信。进程A接受用户的键盘输入，并通过消息通信传递给进程B。进程B根据收到的命令如下处理，如果是“exit”则退出，否则将收到的命令串原样屏幕输出。</strong></p><p>​        由于仍然采用命名管道的方法，该题和上一题十分相似，在此不做赘述，程序运行结果如下，很好的满足了题目的要求。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image2.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIFO_NAME <span class="meta-string">"my_fifo_cmd"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE PIPE_BUF </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_cmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (access(FIFO_NAME, F_OK) == <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> ( mkfifo(FIFO_NAME, <span class="number">0777</span>) )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[get_cmd %d] could not create fifo %s\n"</span>, getpid(), FIFO_NAME);  </span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ( (pipe_id =open(FIFO_NAME, O_WRONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">         <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];</span><br><span class="line">         <span class="keyword">char</span>* exit_str = <span class="string">"exit"</span>;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"please input cmd:\n"</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buffer);</span><br><span class="line">            <span class="keyword">if</span> ( (write(pipe_id, buffer, BUFFER_SIZE)) == <span class="number">-1</span>) &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"[get_cmd]Write error on pipe\n"</span>);  </span><br><span class="line">               <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(buffer, exit_str) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         close(pipe_id); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[get_cmd %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_cmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ((pipe_id =open(FIFO_NAME, O_RDONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];   </span><br><span class="line">        <span class="built_in">memset</span>(buffer, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">        <span class="keyword">char</span>* exit_str = <span class="string">"exit"</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;  </span><br><span class="line">            read(pipe_id, buffer, BUFFER_SIZE);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(buffer, exit_str) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[print_cmd %d] %s\n"</span>, getpid(), buffer); </span><br><span class="line">        &#125;  </span><br><span class="line">        close(pipe_id);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[print_cmd %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">while</span> ((pid = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line">get_cmd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">print_cmd();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><p>​    <strong>采用线程的互斥锁和条件变量，实现最多允许10个读者同时读的读者写者线程同步问题。</strong></p><p>​        解决读写者问题的关键在于深入分析读者写者的同步需求。读者之间读不需要互斥，但为了设定读者数量最大值必须在计数的时候互斥，开始时计数需要考虑读者数是否达到最大值，结束计数的时候需要考虑结束前读者数是否为最大值、结束后是否还有读者，最后对条件变量进行相应的操作；写者之间当然也要互斥，写之前需要考虑是否有读者在读，写期间不允许有读者读。</p><p>​        本实验我将以上思路转变为代码并测试如下，为了方便结果的截取将读者最大数量设为2（当然设为10也没问题），写者数量为1。写者的工作是将共有的变量i加1并打印，读者的工作是读取变量i的值并打印。最终实验结果如下图所示，可见读者读取期间i的值不变，写者写数期间i依次增加，满足读写者同步的要求。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image3.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> rmutex;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> wmutex;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wcond;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> rcond;</span><br><span class="line"><span class="keyword">int</span> readcount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;rmutex);</span><br><span class="line">        <span class="keyword">if</span> (readcount &gt;= N) &#123;</span><br><span class="line">            pthread_cond_wait(&amp;rcond, &amp;rmutex);</span><br><span class="line">        &#125;</span><br><span class="line">        readcount++;</span><br><span class="line">        pthread_mutex_unlock(&amp;rmutex);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"reader: %d\n"</span>, i);</span><br><span class="line"></span><br><span class="line">        pthread_mutex_lock(&amp;rmutex);</span><br><span class="line">        <span class="keyword">if</span> (readcount == N) &#123;</span><br><span class="line">            pthread_cond_signal(&amp;rcond);</span><br><span class="line">        &#125;</span><br><span class="line">        readcount--;</span><br><span class="line">        <span class="keyword">if</span>(readcount == <span class="number">0</span>) &#123;</span><br><span class="line">            pthread_cond_signal(&amp;wcond);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_mutex_unlock(&amp;rmutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;wmutex);</span><br><span class="line">        <span class="keyword">while</span>(readcount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            pthread_cond_wait(&amp;wcond, &amp;wmutex);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_mutex_lock(&amp;rmutex);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"writer: %d\n"</span>, ++i);</span><br><span class="line">        <span class="comment">// sleep(1);</span></span><br><span class="line">        </span><br><span class="line">        pthread_mutex_unlock(&amp;rmutex);</span><br><span class="line">        pthread_mutex_unlock(&amp;wmutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1, thid2, thid3;</span><br><span class="line">    pthread_mutex_init(&amp;rmutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_init(&amp;wmutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;wcond, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;rcond, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)reader, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)reader, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid3, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)writer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;rmutex);</span><br><span class="line">    pthread_mutex_destroy(&amp;wmutex);</span><br><span class="line">    pthread_cond_destroy(&amp;rcond);</span><br><span class="line">    pthread_cond_destroy(&amp;wcond);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p>​    <strong>采用java管程实现生产者消费者线程同步并通过实验测试验证正确性。</strong></p><p>​    由于使用Java编程，因此转而使用windows，正好借此机会复习了Java。</p><p>​    在本次实验中，我通过实践Runnable接口创建了生产者类Producer和消费者类Comsumer，使用Java自带的LinkedQueue结构作为数据缓冲区，并使用synchronized关键字和wait()、signal()方法完成线程的同步与互斥。最后同时开启了3个生产者线程和3个消费者线程。</p><p>​    实验结果如屏幕右方所示，可以看到在生产者在生成随机数89后发现队列已满于是进入阻塞状态并放弃对buffer的互斥锁，于是消费者取出上一轮第一个生产出的随机数98并唤醒所有线程。此时有一个生产者发现buffer不满于是又生产了一个随机数44，之后消费者占据主导权并持续消费，可以看到在这一轮消费中最后一个恰好是之前生产的44。可见很好的实现了“生产者-消费者”的线程同步。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image4.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Queue bufferQueue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> bound = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">    Producer(Queue bufferQueue) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferQueue = bufferQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bufferQueue) &#123;</span><br><span class="line">                <span class="keyword">while</span> (bufferQueue.size ( ) &gt;= N) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bufferQueue.wait ( );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace ( );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> newInt = <span class="keyword">new</span> Random ( ).nextInt (bound) + <span class="number">10</span>;</span><br><span class="line">                bufferQueue.add (newInt);</span><br><span class="line">                System.out.println (<span class="string">"produce : "</span> + newInt + <span class="string">"\tqueue : "</span> + bufferQueue.size ( ));</span><br><span class="line">                bufferQueue.notifyAll ( );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Queue bufferQueue;</span><br><span class="line"></span><br><span class="line">    Comsumer(Queue buffer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferQueue = buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bufferQueue) &#123;</span><br><span class="line">                <span class="keyword">while</span> (bufferQueue.size ( ) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bufferQueue.wait ( );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace ( );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> ch = (<span class="keyword">int</span>) bufferQueue.poll ( );</span><br><span class="line">                System.out.println (<span class="string">"comsume : "</span> + ch + <span class="string">"\tqueue : "</span> + bufferQueue.size ( ));</span><br><span class="line">                bufferQueue.notifyAll ( );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Queue bufferqueue = <span class="keyword">new</span> LinkedList ( );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread (<span class="keyword">new</span> Producer (bufferqueue)).start ( );</span><br><span class="line">            <span class="keyword">new</span> Thread (<span class="keyword">new</span> Comsumer (bufferqueue)).start ( );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] Linux学习笔记6——access函数 </p><p><a href="https://blog.csdn.net/yellowston/article/details/53493293" target="_blank" rel="noopener">https://blog.csdn.net/yellowston/article/details/53493293</a></p><p>[2] Linux进程通信：命名管道FIFO小结</p><p> <a href="https://blog.csdn.net/MONKEY_D_MENG/article/details/5651430" target="_blank" rel="noopener">https://blog.csdn.net/MONKEY_D_MENG/article/details/5651430</a></p><p>[3] Java 多线程编程</p><p><a href="http://www.runoob.com/java/java-multithreading.html" target="_blank" rel="noopener">http://www.runoob.com/java/java-multithreading.html</a></p><p>[4] JAVA多线程之Runnable和Thread比较</p><p><a href="https://blog.csdn.net/u013755987/article/details/51855098" target="_blank" rel="noopener">https://blog.csdn.net/u013755987/article/details/51855098</a></p><p>[5] Java中的LinkedList的方法的应用</p><p><a href="https://blog.csdn.net/sinat_36246371/article/details/53709625" target="_blank" rel="noopener">https://blog.csdn.net/sinat_36246371/article/details/53709625</a></p><p>[6] java中的notify和notifyAll有什么区别？ </p><p><a href="https://www.zhihu.com/question/37601861" target="_blank" rel="noopener">https://www.zhihu.com/question/37601861</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、&quot;&gt;&lt;a href=&quot;#一、&quot; class=&quot;headerlink&quot; title=&quot;一、&quot;&gt;&lt;/a&gt;一、&lt;/h1&gt;&lt;p&gt;​    &lt;strong&gt;创建两个进程。要求两个进程分别作为“生产者”和“消费者”，由生产者生产1-100数字，通过命名管道传递给消费者进程
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>日记18-5</title>
    <link href="http://wang22ti.com/2018/05/01/%E6%97%A5%E8%AE%B018-5/"/>
    <id>http://wang22ti.com/2018/05/01/日记18-5/</id>
    <published>2018-05-01T09:35:51.000Z</published>
    <updated>2018-05-07T12:39:37.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-5-7"><a href="#18-5-7" class="headerlink" title="18-5-7"></a>18-5-7</h1><p>啊……软件接口完全没有头绪啊。。</p><p>收到了《控制理论与应用》的邮件，收审稿费了。。</p><p>处理了一堆琐事，</p><p>晚上和高友鑫扯了一会哈哈。</p><h1 id="18-5-6"><a href="#18-5-6" class="headerlink" title="18-5-6"></a>18-5-6</h1><p>早上睡过了。。</p><p>和浩男、浩珉讨论创意组的答辩</p><p>中午和1706的同学们聚餐</p><p>回来完成了提案，作为葛祎阳、白双朋、王鑫的附议人</p><p>完成了操作系统第4次上机作业，写了实验报告</p><p>把键盘寄出去了，</p><p>又把操作系统的书面作业写了</p><h1 id="18-5-5"><a href="#18-5-5" class="headerlink" title="18-5-5"></a>18-5-5</h1><p>写了LL(1)分析法的实验报告，画流程图画到吐血。。</p><p>准备写学代会的提案，题目为《关于推动手机近场通讯技术模拟门禁卡的提案》。</p><p>晚上和吴文睿、温浩珉健身。</p><p>复习了Java，写了生产者消费者。</p><p>谈好了旧键盘，明天寄出去。</p><h1 id="18-5-4"><a href="#18-5-4" class="headerlink" title="18-5-4"></a>18-5-4</h1><p>啊……早睡，上课困得要死。。</p><p>完成了LL(1)分析法，哈哈</p><p>开组织生活会。。还有学代会二次会议，</p><p>回来把体系结构作业交上去了</p><h1 id="18-5-3"><a href="#18-5-3" class="headerlink" title="18-5-3"></a>18-5-3</h1><p>补好了操作系统和软工的作业，</p><p>完成了递归下降分析算法，</p><p>和四位积极分子谈话，</p><p>和老妈聊了一会，</p><p>一天过去了，</p><p>明天继续补作业。。</p><h1 id="18-5-2"><a href="#18-5-2" class="headerlink" title="18-5-2"></a>18-5-2</h1><p>啊……四节课加上形教课。。好久没有一天上这么多课了，</p><p>在浩珉和浩男的帮助下交了创意组的策划书，</p><p>回来把自动生成first集和follow集搞定了！开心！</p><p>补操作系统和软件工程作业。。</p><h1 id="18-5-1"><a href="#18-5-1" class="headerlink" title="18-5-1"></a>18-5-1</h1><p>啊……又是新的一个月啦！</p><p>颓废了一上午，把小新更新到windows10四月更新了，</p><p>该干活了！</p><p>补了党员手册的首页，后面几乎没法填啊，GG。</p><p>写了操作系统第四次上机部分，</p><p>很没有成果的一天了。</p><p>末了把党员手册补好了。</p><p>今日早睡！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;18-5-7&quot;&gt;&lt;a href=&quot;#18-5-7&quot; class=&quot;headerlink&quot; title=&quot;18-5-7&quot;&gt;&lt;/a&gt;18-5-7&lt;/h1&gt;&lt;p&gt;啊……软件接口完全没有头绪啊。。&lt;/p&gt;
&lt;p&gt;收到了《控制理论与应用》的邮件，收审稿费了。。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》实验3-进程同步-子泰编写的实验指导书</title>
    <link href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/"/>
    <id>http://wang22ti.com/2018/04/27/《操作系统》实验3-进程同步-子泰编写的实验指导书/</id>
    <published>2018-04-27T09:12:09.000Z</published>
    <updated>2018-04-28T08:58:03.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>既然要进行进程同步，首先要有多个进程，所以要学会在Linux环境下使用<code>fork</code>等函数创建进程，具体参见文献[1]或实验《进程控制》，在此不做赘述。下面着重介绍Linux环境下实现进程同步、进程通信、线程同步的C语言函数及其使用方法。</p><h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><p>Linux信号量操作的相关函数都声明在头文件<code>&lt;sys/sem.h&gt;</code> 中，包括<code>semget</code>、<code>semop</code>、<code>semctl</code>，以下将分别对其进行介绍。</p><h2 id="semget——得到一个信号量“集”"><a href="#semget——得到一个信号量“集”" class="headerlink" title="semget——得到一个信号量“集”"></a>semget——得到一个信号量“集”</h2><p>调用该函数后，会得到一个信号量集，注意，这意味着可以通过一次调用获得多个信号量，具体怎么使用呢？接下来会介绍。我们先看一下该函数的原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> num_sems, <span class="keyword">int</span> sem_flags)</span></span>;</span><br></pre></td></tr></table></figure><p>其中最容易理解的是<code>num_sems</code>，它表示创建的信号量的集合中含有的信号量的个数，当然可以是1个或多个。那其他的参数呢？</p><p><code>key_t key</code>告诉操作系统：“我需要的信号量集键值（可以理解为编号）为key！”收到这个指令后，系统就会给出一个信号量标识符（也可以理解为编号，比如10086）作为semget的返回值（失败返回-1），之后我们使用信号量标识符（10086）而非key实现对信号量的间接操作（操作系统是不会允许我们直接加减信号量的）。</p><p>key和信号量标识符是一一对应的，且标识符的值是由系统根据key计算得到的，所以实际调用的时候，我们只需要考虑对于key限制。如果只使用一个信号量集合，key可以是任意的非零整数（比如1000）。当使用多个集合的时候，由于这种一一对应的关系，为了区别不同的信号量集合，key的值必须是各不相同的。如何做到各不相同呢？一种方法是手动指定不同的值，另一方法是使用函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">key_t</span> ftok( <span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> proj_id);</span><br></pre></td></tr></table></figure><p>将系统中各不相同的文件路径转化为一一对应的整数，具体参见文献[2]，由于本实验中手动指定的方法足以满足要求，所以在此不做赘述。</p><p><code>sem_flags</code>是对得到的信号量集进行权限的配置，典型值为<code>IPC_CREAT | 0666</code>，就是常量IPC_CREAT和八进制数666进行或操作。八进制数的三位依次表示对这个信号量集的操作权限。其中第一个数表示创建者的操作权限，第二个数表示同组人的操作权限，第三个数表示其他人的操作权限。操作权限用4表示读，2表示写，6表示可读也可写，0表示不能读也不能写，具体参见文献[3]。还可以是<code>IPC_CREAT| IPC_EXCL</code>，表示创建一个新的、唯一的信号量，如果信号量已存在，返回-1表示错误。</p><h2 id="semop——改变信号量的值"><a href="#semop——改变信号量的值" class="headerlink" title="semop——改变信号量的值"></a>semop——改变信号量的值</h2><p>通过semget创建了信号量集合之后，我们总需要通过<code>semop</code>改变信号量的值，其原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> sem_id, struct sembuf *sem_opa, <span class="keyword">size_t</span> num_sem_ops)</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>sem_id</code>就是通过semget得到的信号量标识符，返回值表示操作是否成功。<code>sem_opa</code>是对该集合中信号量操作的数组（operation array），根据C语言的编程技巧，一般传入数组的同时要传入数组的长度，<code>num_sem_ops</code>就是sem_opa中操作的数量。</p><p>为了让操作系统明白操作的具体内容，sem_opa中的每一个元素都是一个名为<code>sembuf</code>的结构体，其结构定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span>&#123;</span>  </span><br><span class="line">        <span class="keyword">short</span> sem_num; </span><br><span class="line">        <span class="keyword">short</span> sem_op;</span><br><span class="line">        <span class="keyword">short</span> sem_flg; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中<code>sem_num</code>表示操作的那一个信号量在信号量集当中的编号，当然是从0开始啦；<code>sem_op</code>表示对信号量进行+=sem_op的操作；<code>sem_flg</code>是对这一操作的进一步解释，典型值<code>SEM_UNDO</code>表示该进程结束的时候撤销这次操作，让信号量回到该进程执行之前的状态，当然也可以设置为0表示正常的操作，进一步解释可以参见文献[4]。需要注意的是，<strong>对sem_flg不同的设置可能会导致死锁、实验现象不可重复等现象，这需要在实验中进一步探索。</strong></p><p>​        当然，为了方便的修改信号量的值，我们可以进一步对semop函数进行封装，比如对指定信号量的<code>wait</code>原语：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = sem_num;</span><br><span class="line">sem_buff.sem_op = <span class="number">-1</span>;</span><br><span class="line">sem_buff.sem_flg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - wait"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        类似的，也可以写出对指定信号量的signal操作、或是对某一信号量集内所有信号量的signal、wait操作，具体问题具体分析啦！</p><h2 id="semctl——对信号量的复杂控制"><a href="#semctl——对信号量的复杂控制" class="headerlink" title="semctl——对信号量的复杂控制"></a>semctl——对信号量的复杂控制</h2><p>semop函数似乎已经可以解决很多问题了，但是还远远不够。如果希望对信号量进行赋值而非相对地加减，如果希望得到信号量的值，如果希望得到等待进程的数目……还需要<code>semctl</code>函数，它的原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num, <span class="keyword">int</span> cmd, <span class="keyword">union</span> semun)</span></span>;</span><br></pre></td></tr></table></figure><p>已经容易知道，<code>sem_id</code>是通过semget得到的信号量标识符，<code>sem_num</code>表示控制的那一个信号量在信号量集当中的编号。<code>cmd</code>就是控制的动作，本实验中可能用到的有：</p><p><code>IPC_RMID</code>    将信号量集从内存中删除。<br><code>GETALL</code>        用于读取信号量集中所有信号量的值。<br><code>GETVAL</code>        返回信号量集中某一个信号量的值。<br><code>SETALL</code>        设置信号量集中的所有信号量的值<br><code>SETVAL</code>        设置信号量集中的某一个信号量的值。</p><p>你可能困惑，如果cmd为SETVAL或者SETALL，如果将设置的值传入呢？答案就在可选的参数<code>semun</code>，其结构为如下（值得注意的是，<strong>sem.h中把该联合体的声明注释掉了，需要自己在程序中定义union semun</strong>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> semun &#123;</span><br><span class="line">   <span class="keyword">int</span>   val;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span>   <span class="title">semid_ds</span>  *<span class="title">buf</span>;</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">short</span>   *arrary;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果cmd是SETVAL，你想设置的值为10，那么令semun.val=10传入semctl。同理，当cmd为SETALL时，封装函数如下，实现同时对某一信号量集中所有信号量的赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_values_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.arry = arry;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="keyword">sizeof</span>(arry) - <span class="number">1</span>, SETALL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - set values of semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此，我们就可以对信号量集进行复杂的控制，进一步参见文献[5]相关内容。</p><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><p>​        由于进程之间的内存是隔离的，因此即便在编程的时候设置一个全局变量，即便在不同进程里打印这个变量的地址也是相同的，不同进程的内的变量也是完全独立的——这告诉我们fork()函数创建的子进程和父进程之间除了id不同外，是完全一样的，甚至变量的地址也是，虽然它们之间已经完全没关系了。</p><p>但有时候进程的通信是必须的——比如生产者消费者模型，所以引入共享内存的方式进行进程通信，即允许两个不同的进程访问同一个逻辑内存。Linux共享内存的实现通过的是声明于<code>sys/shm.h</code>（shared memory）中<code>shmget</code>、<code>shmat</code>、<code>shmdt</code>、<code>shmctl</code>四个函数实现。是不是看起来很眼熟？因为这几个函数的操作逻辑和进程同步的几个函数是很相似的。由于进程通信不是本次实验的重点，因此给出如下的代码模板，详细参见文献[6]相关内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> share_memory_id;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// TO-DO</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span> *<span class="title">shared</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建共享内存</span></span><br><span class="line">share_memory_id = shmget(<span class="number">12345</span>, <span class="keyword">sizeof</span>(struct share_data), <span class="number">0666</span>|IPC_CREAT);</span><br><span class="line"><span class="comment">// 将这段共享内存映射到需要共享的变量上</span></span><br><span class="line">shared = (struct share_data *) shmat(share_memory_id, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TO-DO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程互斥"><a href="#线程互斥" class="headerlink" title="线程互斥"></a>线程互斥</h1><p>Linux中的多线程实现的函数，都声明在头文件<code>pthread.h</code>中，包括<code>pthread_create</code>、<code>pthread_join</code>、<code>pthread_exit</code>、<code>pthread_cancel</code>、<code>pthread_self</code>这一类控制进程状态的函数和<code>pthread_mutex_init</code>、<code>pthread_mutex_destroy</code>、<code>pthread_mutex_lock</code>、<code>pthread_mutex_unlock</code>、<code>pthread_mutex_trylock</code>这一类进程互斥锁相关的函数。由于本部分属于预习内容，以下将按照最基本的要求对上述函数进行介绍。</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>​        要使用多线程，首先需要创建多个线程，于是使用函数pthread_create，其原型为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_create(pthread_t*thread, pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);</span><br></pre></td></tr></table></figure><p>和进程类似的地方是，执行该函数后程序就会产生分支，一方面继续执行调用pthread_create的函数，另一方面开始执行<code>start_routine</code>指定的函数。start_routine究竟是什么？一眼看上去可能不明所以，其实就是你写的一个函数的函数名，比如transfer；如果该函数(transfer)需要参数呢？就通过参数arg构造结构体传入即可。</p><p>​        和进程创建不同的是，pthread_create的返回值表示是否创建成功，而thread实际上是一个int型的指针，指向存储执行函数start_routine进程的id。示例代码如下所示，需要注意的是，因为pthread库不是Linux系统默认的库，连接时需要使用库<code>libpthread.a</code>，所以编译时要加<code>-lpthread</code>参数，比如<code>gcc createThread.c -lpthread -o createThread</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TO-DO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1, thid2;</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <code>thread_join</code>是什么意思呢？其原型为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(pthread_tthread, <span class="keyword">void</span> **retval)</span></span>;</span><br></pre></td></tr></table></figure><p>在很多情况下，子线程里要进行大量的耗时的运算，主线程往往在子线程之前结束。但是，如果主线程需要用到子线程的处理结果，就要用到pthread_join方法了。可以理解为告诉主线程：“执行到这里的时候，停下来等id为thid的线程！”其中thread为等待线程的id，retval用来存储被等待进程的返回值。</p><p>​        本实验中，还有可能用到的函数为<code>pthread_self</code>，其原型为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_tpthread_self(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><p>很容易理解啦，和<code>getpid</code>很类似，可以得到当前线程的id。另外的两个线程状态管理函数pthread_exit和pthread_cancel，以及pthread_create中参数attr的设置，由于在本实验不是必须的，在此不做赘述，进一步可以参考文献[7]和[8]。</p><h2 id="互斥锁——线程的互斥"><a href="#互斥锁——线程的互斥" class="headerlink" title="互斥锁——线程的互斥"></a>互斥锁——线程的互斥</h2><p>​        和进程通过信号量完成互斥不同，线程的互斥的实现依靠互斥锁。首先，和线程的创建类似，要使用函数<code>pthread_mutex_init(pthread_mutex_t * mutex,const pthread_mutexattr_t*attr)</code>初始化互斥锁，之后在线程函数中使用<code>int pthread_mutex_lock(pthread_mutex_t *mutex)</code>和<code>int pthread_mutex_unlock(pthread_mutex_t*mutex)</code>两个函数进行加锁和解锁（即开始和结束线程对于临界资源的占用），最后使用函数<code>pthread_mutex_destroy(pthread_mutex_t *mutex)</code>销毁一个互斥锁。一个典型的程序示例如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    <span class="comment">// TO-DO</span></span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1, thid2;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        互斥锁还有哪些操作呢？线程之间如何同步呢？（这个问题在下次实验中会详细讨论），可以进一步参见文献[9]</p><h2 id="Peterson算法——实现线程互斥的另一种方法"><a href="#Peterson算法——实现线程互斥的另一种方法" class="headerlink" title="Peterson算法——实现线程互斥的另一种方法"></a>Peterson算法——实现线程互斥的另一种方法</h2><p>​        在线程的前提下，由于不存在进程中的内存隔离，因此还可以设置某些精巧的算法实现进程的互斥，Peterson算法就是其中的一个代表。该算法使用两个控制变量数组flag与标量turn，其中flag[n]的值为1表示ID号为n的线程希望使用临界区资源，turn的值为有权访问共享资源的进程的ID号。当线程不能访问临界区资源时，会陷入死循环中作为等待。其伪代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">turn;</span><br><span class="line"></span><br><span class="line">P0: flag[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    turn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">1</span>] == <span class="literal">true</span> &amp;&amp; turn == <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 访问临界区资源</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">P1: flag[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    turn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">0</span>] == <span class="literal">true</span> &amp;&amp; turn == <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 访问临界区资源</span></span><br><span class="line">    flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>该算法的实现需要在实验中完成，更详细的解释可以参见文献[10]。</p><p>​        </p><h1 id="实验题目"><a href="#实验题目" class="headerlink" title="实验题目"></a>实验题目</h1><p>好了，有了以上的知识储备，完成以下的实验应该没有问题。</p><h2 id="进程的同步与互斥"><a href="#进程的同步与互斥" class="headerlink" title="进程的同步与互斥"></a>进程的同步与互斥</h2><p>创建4个进程P1-P4。要求进程P1在P2，P3之前，P4在其他进程之后执行。P2、P3两个进程互斥。用信号量机制实现同步与互斥，并用实验验证。</p><h2 id="进程的生产者消费者模型"><a href="#进程的生产者消费者模型" class="headerlink" title="进程的生产者消费者模型"></a>进程的生产者消费者模型</h2><p>生产者消费者同步。生产者进程将生产的数据写入文件中。消费者读取文件中的数据。注意，传送的每个数据都是一个字符，文件中最多可写入10个字符。编程实现并用实验验证结果。</p><h2 id="线程的互斥"><a href="#线程的互斥" class="headerlink" title="线程的互斥"></a>线程的互斥</h2><p>假设有两个银行账户，初始金额值分别为</p><p>int nAccount1 = 0,nAccount2 = 0; </p><p>下面是在这两个银行账户间转账一个随机金额的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">transfer() &#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="built_in">printf</span>(“账户金额之和 = %d”, nAccount1 + nAccount2)；</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试创建两个转账线程使其并发执行。（1）观察无同步控制时，两个线程并发执行的可能次序；观察账户金额的错误现象（正确的结果应该是两个账户金额之和始终为0）。分析在何种执行次序时会导致错误（2）分别利用互斥锁、Peterson方法实现两个线程互斥，并比较两者时间效率的差异。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 《linux c 创建进程》<a href="https://blog.csdn.net/u011641885/article/details/47061985" target="_blank" rel="noopener">https://blog.csdn.net/u011641885/article/details/47061985</a></p><p>[2] 《ftok()函数深度解析》<a href="https://blog.csdn.net/u013485792/article/details/50764224" target="_blank" rel="noopener">https://blog.csdn.net/u013485792/article/details/50764224</a></p><p>[3] 《IPC_CREAT | 0660 的意义是什么？》 <a href="http://www.169it.com/tech-qa-linux/article-14093527959559782876.html" target="_blank" rel="noopener">http://www.169it.com/tech-qa-linux/article-14093527959559782876.html</a></p><p>[4] 《struct sembuf的部分讲解》 <a href="https://blog.csdn.net/wanzyao/article/details/55271103" target="_blank" rel="noopener">https://blog.csdn.net/wanzyao/article/details/55271103</a></p><p>[5] 《Linux系统调用–semctl函数详解》 <a href="https://blog.csdn.net/dongzhongshu/article/details/2056516" target="_blank" rel="noopener">https://blog.csdn.net/dongzhongshu/article/details/2056516</a></p><p>[6] 《Linux进程间通信（六）：共享内存shmget()、shmat()、shmdt()、shmctl()》 <a href="https://www.cnblogs.com/52php/p/5861372.html" target="_blank" rel="noopener">https://www.cnblogs.com/52php/p/5861372.html</a></p><p>[7] 《pthread_create()之前的属性设置》 <a href="https://blog.csdn.net/valjackson123/article/details/47395053" target="_blank" rel="noopener">https://blog.csdn.net/valjackson123/article/details/47395053</a></p><p>[8] 《2线程原语：pthread_create()，pthread_self()，pthread_exit(), pthread_join(), pthread_cancel(),pthread_detach()》<a href="https://blog.csdn.net/tototuzuoquan/article/details/39553427" target="_blank" rel="noopener">https://blog.csdn.net/tototuzuoquan/article/details/39553427</a></p><p>[9] 《【Linux C 多线程编程】互斥锁与条件变量》<a href="https://blog.csdn.net/xing_hao/article/details/6626223" target="_blank" rel="noopener">https://blog.csdn.net/xing_hao/article/details/6626223</a></p><p>[10] 《Peterson算法感悟》 <a href="https://blog.csdn.net/yake827/article/details/37878017" target="_blank" rel="noopener">https://blog.csdn.net/yake827/article/details/37878017</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;既然要进行进程同步，首先要有多个进程，所以要学会在Linux环境下使用&lt;code&gt;fork&lt;/code&gt;等函数创建进程，具体参见文献[1]或
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《编译原理》实验2-语法分析器（递归下降分析法）的python实现</title>
    <link href="http://wang22ti.com/2018/04/27/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C2-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%EF%BC%88%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wang22ti.com/2018/04/27/《编译原理》实验2-语法分析器（递归下降分析法）的python实现/</id>
    <published>2018-04-27T09:00:24.000Z</published>
    <updated>2018-05-07T02:02:20.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>在本次实验中，我用python3.5实现了一个LL(1)文法的递归下降语法分析类，具有以下功能：</p><p>一、根据文法的起始符号、非终结符号、产生式自动生成文法终结符号的First集、Follow集和分析表。</p><p>二、根据文法的分析表判断输入串是否满足该文法。</p><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p><img src="/2018/04/27/《编译原理》实验2-语法分析器（递归下降分析法）的python实现/Snipaste_2018-05-07_09-57-01.png" alt=""><br><img src="/2018/04/27/《编译原理》实验2-语法分析器（递归下降分析法）的python实现/Snipaste_2018-05-07_09-57-48.png" alt=""></p><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p><img src="/2018/04/27/《编译原理》实验2-语法分析器（递归下降分析法）的python实现/1.png" alt=""></p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># E'用B代替，T'用U来代替</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecAnalyzer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, over, production)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.over = over</span><br><span class="line">        self.production = production</span><br><span class="line">        self.nontermainals = production.keys()</span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first的递归函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_rec</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        ret_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> production[nontermainal]:</span><br><span class="line">            <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                <span class="keyword">return</span> self.first[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                    first_ = self.get_first_rec(sign)</span><br><span class="line">                    ret_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret_dict</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first集和follow集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.over:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮（递归）</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> nontermainal <span class="keyword">not</span> <span class="keyword">in</span> self.first_first:</span><br><span class="line">                self.first[nontermainal] = self.get_first_rec(nontermainal)</span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[start].add(<span class="string">'#'</span>)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = self.follow.copy()</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> over:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] = self.follow[nontermainal]</span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> over:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_set = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_set_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_set_without_null</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_set:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 将follow集加入first集</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal]:</span><br><span class="line">                self.first[nontermainal][<span class="string">''</span>] = self.follow[nontermainal]</span><br><span class="line">        <span class="comment"># print(self.first)</span></span><br><span class="line">        <span class="comment"># print(self.follow)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断string中的下一个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">advance</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        self.current = self.string[self.index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归下降分析</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_rec</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        <span class="comment"># print(self.current, nontermainal)</span></span><br><span class="line">        <span class="comment"># 如果current在现在的非终结符号的first集中</span></span><br><span class="line">        <span class="keyword">if</span> self.current <span class="keyword">in</span> self.first[nontermainal].keys():</span><br><span class="line">            <span class="comment"># 逐个讨论产生式右部</span></span><br><span class="line">            <span class="keyword">for</span> new_nontermainal <span class="keyword">in</span> self.first[nontermainal][self.current]:</span><br><span class="line">                <span class="comment"># 如果是终结符号，调用advance</span></span><br><span class="line">                <span class="keyword">if</span> new_nontermainal <span class="keyword">in</span> self.over:</span><br><span class="line">                    self.advance()</span><br><span class="line">                <span class="comment"># 如果是非终结符号，递归调用</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="keyword">not</span> self.analyse_rec(new_nontermainal):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 对于可以调用follow集的非终结符号，递归调用本身</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal].keys():</span><br><span class="line">                <span class="keyword">return</span> self.analyse_rec(nontermainal)</span><br><span class="line">            <span class="comment"># 对于不可以调用follow的非终结符号，返回True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># 如果current不在现在的非终结符号的first集中</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal].keys():</span><br><span class="line">            <span class="comment"># 返回是否在follow集的判断</span></span><br><span class="line">            <span class="keyword">return</span> self.current <span class="keyword">in</span> self.first[nontermainal][<span class="string">''</span>]</span><br><span class="line">        <span class="comment"># 如果current不在符号集合内，返回False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析程序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.string = string + <span class="string">'#'</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.current = self.string[self.index]</span><br><span class="line">        <span class="keyword">if</span> self.analyse_rec(self.start):</span><br><span class="line">            print(<span class="string">'OK  '</span>, string)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Fail'</span>, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = <span class="string">'E'</span></span><br><span class="line">over = [<span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>, <span class="string">'i'</span>]</span><br><span class="line">production = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'TB'</span>, ],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'ATB'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'FU'</span>, ],</span><br><span class="line">    <span class="string">'U'</span>: [<span class="string">'MFU'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'+'</span>, <span class="string">'-'</span>],</span><br><span class="line">    <span class="string">'M'</span>: [<span class="string">'*'</span>, <span class="string">'/'</span>],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [</span><br><span class="line">    <span class="string">''</span>, <span class="string">'i+@'</span>, <span class="string">'i'</span>, <span class="string">'i+'</span>,</span><br><span class="line">    <span class="string">'+*i'</span>,</span><br><span class="line">    <span class="string">'i+i*i'</span>,</span><br><span class="line">    <span class="string">'i+i*ii'</span>,</span><br><span class="line">    <span class="string">'i+i*i+'</span>,</span><br><span class="line">    <span class="string">'i+i*i/i-i'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rec_analyzer = RecAnalyzer(start=start, over=over, production=production)</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    rec_analyzer.analyse(string=string)</span><br></pre></td></tr></table></figure><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：对递归下降算法中通用的递归程序的设计，以及first集follow集分析表的存储结构的设计，通过写一个特例后观察抽象得到；对first集follow集的理解不够透彻导致实现get_first_follow(self)的时候比较吃力。</p><p>​        本程序的优点包括：比较完整地实现了递归下降分析算法，递归函数的实现具有较高的抽象度；分析器只需要输入起始符号、产生式、终结符号就可以初始化，自动生成First集、Follow集和分析表。</p><p>​        由于时间有限，本程序还存在可以优化的地方，主要包括：将输入字符串改为由词法分析器生成的二元式从文件中读取，为完整编译器的实现打下良好的基础；</p><p>​        本实验中，通过实现递归下降算法与First集Follow集生成算法，加深了我对两个算法的理解，提高了我对问题分析、抽象的能力，为实现完整编译器打下了良好的基础。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序功能描述&quot;&gt;&lt;a href=&quot;#程序功能描述&quot; class=&quot;headerlink&quot; title=&quot;程序功能描述&quot;&gt;&lt;/a&gt;程序功能描述&lt;/h1&gt;&lt;p&gt;在本次实验中，我用python3.5实现了一个LL(1)文法的递归下降语法分析类，具有以下功能：&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>北京交通大学第十二届大学生程序设计竞赛——弱渣的a的4道题</title>
    <link href="http://wang22ti.com/2018/04/25/%E5%8C%97%E4%BA%AC%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E2%80%94%E2%80%94%E5%BC%B1%E6%B8%A3%E7%9A%84a%E7%9A%844%E9%81%93%E9%A2%98/"/>
    <id>http://wang22ti.com/2018/04/25/北京交通大学第十二届大学生程序设计竞赛——弱渣的a的4道题/</id>
    <published>2018-04-25T09:20:39.000Z</published>
    <updated>2018-04-25T10:09:31.375Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：</p><p><a href="https://citel.bjtu.edu.cn/acm/contest/1016/problem#" target="_blank" rel="noopener">北京交通大学 第十二届大学生程序设计竞赛</a></p><p>以下是弱渣的代码</p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> t, m;</span><br><span class="line">    <span class="keyword">int</span> timu;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; timu;</span><br><span class="line">        v.push_back(timu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; timu;</span><br><span class="line">        v.push_back(timu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = unique(v.begin(), v.end());</span><br><span class="line">    v.erase(it, v.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B（time-limit-exceeded）"><a href="#B（time-limit-exceeded）" class="headerlink" title="B（time limit exceeded）"></a>B（time limit exceeded）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">3</span> ;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = ((n - i) / <span class="number">2</span>) - i + <span class="number">1</span>;</span><br><span class="line">        ret += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">        ll bianshu;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; bianshu;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(bianshu) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">© <span class="number">2018</span> Beijing Jiaotong Uni</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;ll&gt; &gt; vs(t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; t; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;num; j++) &#123;</span><br><span class="line">            ll n;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">            v.push_back(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = v.size();</span><br><span class="line">        <span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k&lt;vs.size() &amp;&amp; tag; k++) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;ll&gt; v2 = vs[k];</span><br><span class="line">            <span class="keyword">int</span> len2 = v2.size();</span><br><span class="line">            <span class="keyword">if</span> (len != len2) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> tag2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> mm = <span class="number">0</span>; mm &lt; len; mm++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v[mm] != v2[mm]) &#123;</span><br><span class="line">                    tag2 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tag2) &#123;</span><br><span class="line">                tag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vs.push_back(v);</span><br><span class="line">        <span class="keyword">if</span>(tag) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"new"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"deja vu"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; t; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Y"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"N"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Y"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> Source code of #<span class="number">17291</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m * <span class="number">2</span> - i - j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    m -= <span class="number">1</span>;</span><br><span class="line">    n -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>* a = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        a[i] = num - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> out = a[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//cout &lt;&lt;a[0] &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> zengjia = min(left(a[i], a[i+<span class="number">1</span>]), right(a[i], a[i+<span class="number">1</span>], m));</span><br><span class="line">        out += zengjia;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cout &lt;&lt; zengjia &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; a[n - 1] &lt;&lt; endl;</span></span><br><span class="line">    out += a[n - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J（time-limit-exceeded）"><a href="#J（time-limit-exceeded）" class="headerlink" title="J（time limit exceeded）"></a>J（time limit exceeded）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ll x;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">    ll total_num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ll j = <span class="number">2</span>; j&lt;=x; j++) &#123;</span><br><span class="line">        ll num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= j /<span class="number">2</span>; i++) &#123;</span><br><span class="line">            ll shang = j / i;</span><br><span class="line">            <span class="keyword">if</span> (shang * i == j) &#123;</span><br><span class="line">                num += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">        total_num += num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; total_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>说到底是，数学能力是最重要的，</p><p>B题因为数学能力的退化，不知道取模分类讨论。</p><p>J题可能用特殊的处理技巧，比赛中用快速素数筛，不过还是超时了。。</p><p>还有很多需要学习啊！</p><p>钻研越深入，越觉得所学不足。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://citel.bjtu.edu.cn/acm/contest/1016/problem#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;北京交通大学 第十二届大学生程序设计竞赛&lt;/a&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>北京交通大学第十一届大学生程序设计竞赛（重现赛）</title>
    <link href="http://wang22ti.com/2018/04/20/%E5%8C%97%E4%BA%AC%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%EF%BC%88%E9%87%8D%E7%8E%B0%E8%B5%9B%EF%BC%89/"/>
    <id>http://wang22ti.com/2018/04/20/北京交通大学第十一届大学生程序设计竞赛（重现赛）/</id>
    <published>2018-04-20T02:24:26.000Z</published>
    <updated>2018-04-25T09:47:09.083Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：</p><p><a href="https://citel.bjtu.edu.cn/acm/contest/1015/problem#" target="_blank" rel="noopener">北京交通大学 第十一届大学生程序设计竞赛（重现赛）</a></p><p>以下是弱渣的代码</p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> m, n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dict;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">0</span>; q &lt; n; ++q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; location = &#123;j, q&#125;;</span><br><span class="line">dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(ch, location));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> min_dis = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">char</span> min_ch;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">'a'</span> + j;</span><br><span class="line"><span class="keyword">char</span> CH = <span class="string">'A'</span> + j;</span><br><span class="line"><span class="keyword">int</span> dis = <span class="built_in">abs</span>(dict[ch][<span class="number">0</span>] - dict[CH][<span class="number">0</span>]) + <span class="built_in">abs</span>(dict[ch][<span class="number">1</span>] - dict[CH][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (dis &lt; min_dis)</span><br><span class="line">&#123;</span><br><span class="line">min_dis = dis;</span><br><span class="line">min_ch = ch;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; min_ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt; v;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; value;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; old_value;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> num;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span> (v.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(num);</span><br><span class="line">value.push_back(<span class="number">0</span>);</span><br><span class="line">old_value.push_back(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; new_value(old_value);</span><br><span class="line"><span class="keyword">if</span> (v[v.size() - <span class="number">1</span>] == num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mm = <span class="number">0</span>; mm &lt; new_value.size(); mm++) &#123;</span><br><span class="line">new_value[mm] ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">new_value.push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">value.insert(value.end(), new_value.begin(), new_value.end());</span><br><span class="line">v.push_back(num);</span><br><span class="line">old_value = new_value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy (v.begin(), v.end(), ostream_iterator&lt;long&gt; (cout, " "));</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//copy (value.begin(), value.end(), ostream_iterator&lt;int&gt; (cout, " "));</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(value.begin(), value.end());</span><br><span class="line"><span class="comment">//copy (value.begin(), value.end(), ostream_iterator&lt;long&gt; (cout, " "));</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; value[k - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> w, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">if</span> (m == w &amp;&amp; tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"unhappy"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"happy"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v, <span class="keyword">int</span> num, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (v[left] &lt;= num &amp;&amp; v[right] &gt;= num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (right - left == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num == v[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num == v[left])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (num &gt;= v[center])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> find(v, num, center, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> find(v, num, left, center);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">v[j].push_back(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; q; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num_query;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num_query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> hang = <span class="number">0</span>; hang &lt; n; ++hang)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> lie = find(v[hang], num_query,<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (lie == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hang + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; lie + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a, k; </span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">int</span> num = <span class="built_in">pow</span>(a, k);</span><br><span class="line"><span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">num /= <span class="number">10</span>;</span><br><span class="line">bit++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G（time-limit-exceeded）"><a href="#G（time-limit-exceeded）" class="headerlink" title="G（time limit exceeded）"></a>G（time limit exceeded）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; t; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; day;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last_minus = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(day &gt; last_minus) &#123;</span><br><span class="line">day -= last_minus;</span><br><span class="line"><span class="keyword">if</span> (!(i++ % <span class="number">2</span>)) &#123;</span><br><span class="line">last_minus = <span class="number">9</span> * (last_minus + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; day &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i ==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">day = day * <span class="number">10</span> + day;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; day &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> left = <span class="built_in">pow</span>(<span class="number">10</span>, i / <span class="number">2</span>) + day - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> out = left;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">left /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">out = out * <span class="number">10</span> + left %<span class="number">10</span>;</span><br><span class="line">left /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H（time-limit-exceeded）"><a href="#H（time-limit-exceeded）" class="headerlink" title="H（time limit exceeded）"></a>H（time limit exceeded）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v2, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v3)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret_n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (find(v2.begin(), v2.end(), v1[i]) != v2.end() &amp;&amp; find(v3.begin(), v3.end(), v1[i]) != v3.end()) &#123;</span><br><span class="line">ret_n += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret_n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n, p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> least_student = n * <span class="number">1.0</span> * p / <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v(<span class="number">60</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> course;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; course;</span><br><span class="line">v[course].push_back(j);</span><br><span class="line"><span class="comment">//cout &lt;&lt; v[course].size() &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">60</span> &amp;&amp; tag; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; <span class="number">60</span> &amp;&amp; tag; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> q = k + <span class="number">1</span>; q &lt; <span class="number">60</span> &amp;&amp; tag; ++q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k_j_q = g(v[k], v[q], v[j]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (k_j_q &gt;= least_student) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"no"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; &amp;x, pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; &amp;y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x.second != y.second) &#123;</span><br><span class="line"><span class="keyword">return</span> x.second &gt; y.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x.first &lt; y.first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; sort_map_by_value(<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; &amp;m) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;::iterator i = m.begin(); i != m.end(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(make_pair(i-&gt;first, i-&gt;second));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(v.begin(), v.end(), cmp);</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> category;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; category;</span><br><span class="line"><span class="keyword">if</span> (dict.count(category))</span><br><span class="line">&#123;</span><br><span class="line">dict[category] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dict[category] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; v_sorted = sort_map_by_value(dict);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v_sorted.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt;::iterator it = v_sorted.begin(); it != v_sorted.end(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">' '</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://citel.bjtu.edu.cn/acm/contest/1015/problem#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;北京交通大学 第十一届大学生程序设计竞赛（重现赛）&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《编译原理》实验1-词法分析器的python实现</title>
    <link href="http://wang22ti.com/2018/04/20/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C1-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wang22ti.com/2018/04/20/《编译原理》实验1-词法分析器的python实现/</id>
    <published>2018-04-20T02:21:49.000Z</published>
    <updated>2018-04-28T12:58:36.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        在本次实验中，我用python3.5实现了一个词法分析类，具有以下功能：</p><ol><li>在适当扩充实验要求文法的基础上，给出输入串中标识符、保留字（’begin’, ‘end’, ‘if’, ‘then’, ‘else’, ‘for’, ‘do’, ‘while’, ‘and’,’or’, ‘not’, ‘program’, ‘int’, ‘char’, ‘double’, ‘float’, ‘long’）、整数、常见单字符（’+’, ‘-‘, ‘*’, ‘;’, ‘(‘,’)’, “‘“, ‘“‘, ‘ ‘）、双字符终结符（’&gt;’,  ‘&lt;’, ‘&gt;=’,’&lt;=’, ‘&lt;&gt;’, ‘:=’）、注释符、空格、部分转义符号（’\n’）的类别编码。</li><li>程序能够发现输入串中的错误，指出错误发生位置与基本类别，包括未知的中介符号、无法匹配注释符、文件无法打开等等。</li><li>分析结果一方面输出为二元式序列组成的中间文件，另一方面可选择输出在终端作为调试信息。</li><li>对单字符、双字符终结符的识别进行了抽象处理，分析结果只依赖参数的设置，便于词法分析器的修改和扩充。</li><li>在构造函数中为参数的设置提供的接口，包括输入文件的路径、是否大小写敏感、输出路径、调试信息等级。</li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>​        实验中实现的词法分析类名为Analyzer，具体描述信息如下：</p><p><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/0-1.png" alt=""><br><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/0-2.png" alt=""></p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyzer</span>:</span></span><br><span class="line">    token = <span class="string">''</span></span><br><span class="line">    string = <span class="string">''</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    is_end = <span class="keyword">False</span></span><br><span class="line">    ch = <span class="string">''</span></span><br><span class="line">    error_type = <span class="string">''</span></span><br><span class="line">    one_op = [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">';'</span>, <span class="string">'('</span>, <span class="string">')'</span>, <span class="string">"'"</span>, <span class="string">'"'</span>, <span class="string">' '</span>, <span class="string">'\n'</span>]</span><br><span class="line">    not_print = [<span class="string">' '</span>, <span class="string">'\n'</span>]</span><br><span class="line">    reserved = [<span class="string">'begin'</span>, <span class="string">'end'</span>, <span class="string">'if'</span>, <span class="string">'then'</span>, <span class="string">'else'</span>, <span class="string">'for'</span>, <span class="string">'do'</span>, <span class="string">'while'</span>, <span class="string">'and'</span>, <span class="string">'or'</span>, <span class="string">'not'</span>, <span class="string">'program'</span>, <span class="string">'int'</span>, <span class="string">'char'</span>, <span class="string">'double'</span>, <span class="string">'float'</span>, <span class="string">'long'</span>]</span><br><span class="line">    two_next = &#123;</span><br><span class="line">        <span class="string">'&lt;'</span>: [<span class="string">'='</span>, <span class="string">'&gt;'</span>],</span><br><span class="line">        <span class="string">'&gt;'</span>: [<span class="string">'='</span>, ],</span><br><span class="line">        <span class="string">':'</span>: [<span class="string">'='</span>, ],</span><br><span class="line">    &#125;</span><br><span class="line">    token_to_category = &#123;word: word.upper() <span class="keyword">for</span> word <span class="keyword">in</span> reserved&#125;</span><br><span class="line">    token_to_category[<span class="string">'&gt;'</span>] = <span class="string">'GT'</span></span><br><span class="line">    token_to_category[<span class="string">'&lt;'</span>] = <span class="string">'LT'</span></span><br><span class="line">    token_to_category[<span class="string">'&gt;='</span>] = <span class="string">'GE'</span></span><br><span class="line">    token_to_category[<span class="string">'&lt;='</span>] = <span class="string">'LE'</span></span><br><span class="line">    token_to_category[<span class="string">'&lt;&gt;'</span>] = <span class="string">'NE'</span></span><br><span class="line">    token_to_category[<span class="string">':='</span>] = <span class="string">'ASSIGN'</span></span><br><span class="line">    token_to_category[<span class="string">';'</span>] = <span class="string">'SEPARATOR'</span></span><br><span class="line">    token_to_category[<span class="string">'+'</span>] = <span class="string">'ADD'</span></span><br><span class="line">    token_to_category[<span class="string">'-'</span>] = <span class="string">'MINUS'</span></span><br><span class="line">    token_to_category[<span class="string">'*'</span>] = <span class="string">'MUL'</span></span><br><span class="line">    token_to_category[<span class="string">'('</span>] = <span class="string">'LB'</span></span><br><span class="line">    token_to_category[<span class="string">')'</span>] = <span class="string">'RB'</span></span><br><span class="line">    token_to_category[<span class="string">"'"</span>] = <span class="string">'QUO'</span></span><br><span class="line">    token_to_category[<span class="string">'"'</span>] = <span class="string">'DQUO'</span></span><br><span class="line">    token_to_category[<span class="string">' '</span>] = <span class="string">'BLANK'</span></span><br><span class="line">    token_to_category[<span class="string">'\n'</span>] = <span class="string">'ENTER'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, is_sensitive=False, file=<span class="string">'file.txt'</span>, out_file=<span class="string">''</span>, log_level=<span class="number">1</span>)</span>:</span></span><br><span class="line">        self.log_level = log_level</span><br><span class="line">        self.is_sensitive = is_sensitive</span><br><span class="line">        <span class="keyword">if</span> out_file == <span class="string">''</span>:</span><br><span class="line">            out_path = os.path.dirname(file)</span><br><span class="line">            out_file_name = os.path.basename(file)[:file.rindex(<span class="string">'.'</span>)]</span><br><span class="line">            self.out_file = os.path.join(out_path, out_file_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.out_f = open(self.out_file, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            exit(<span class="string">'[error] can not open file'</span>)</span><br><span class="line">        <span class="keyword">with</span> open(file, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            file = f.read()</span><br><span class="line">            self.string = file.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.is_sensitive:</span><br><span class="line">                self.string.lower()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.token <span class="keyword">in</span> self.reserved <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(self, c=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">if</span> self.token <span class="keyword">in</span> self.token_to_category.keys():</span><br><span class="line">                <span class="keyword">if</span> self.token <span class="keyword">not</span> <span class="keyword">in</span> self.not_print:</span><br><span class="line">                    self.out_f.write(self.token_to_category[self.token] + <span class="string">' '</span> + self.token + <span class="string">'\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> self.log_level:</span><br><span class="line">                        print(self.token_to_category[self.token] + <span class="string">'\t'</span> + self.token)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.out_f.write(self.token_to_category[self.token] + <span class="string">'\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> self.log_level:</span><br><span class="line">                        print(self.token_to_category[self.token])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.error_type = <span class="string">"unkown terminal character '%s'"</span> % self.token</span><br><span class="line">                self.report_error()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.out_f.write(c + <span class="string">' '</span> + self.token + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">if</span> self.log_level:</span><br><span class="line">                print(c + <span class="string">'\t'</span> + self.token)</span><br><span class="line"></span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_char</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_end:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        self.ch = self.string[self.index]</span><br><span class="line">        self.token += self.ch</span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'[get_char]index: %s, ch: %s, token: %s'</span> % (self.index, self.ch, self.token))</span><br><span class="line">        <span class="keyword">if</span> self.index == len(self.string):</span><br><span class="line">            self.is_end = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> self.ch</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retract</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.is_end = <span class="keyword">False</span></span><br><span class="line">        self.index = max(self.index - <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.ch = self.string[max(self.index - <span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line">        self.token = self.token[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> self.log_level == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'[retract]index: %s, ch: %s, token: %s'</span> % (self.index, self.ch, self.token))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alpha</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.is_end <span class="keyword">and</span> self.string[self.index].isalnum() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        self.out(<span class="string">''</span> <span class="keyword">if</span> self.lookup() <span class="keyword">else</span> <span class="string">'ID'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">digit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.is_end <span class="keyword">and</span> self.string[self.index].isdigit() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.out(<span class="string">'INTSTR'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(self)</span>:</span></span><br><span class="line">        now_ch = self.ch</span><br><span class="line">        <span class="keyword">if</span> self.get_char() <span class="keyword">in</span> self.two_next[now_ch]:</span><br><span class="line">            self.out()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.retract()</span><br><span class="line">            self.out()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">back_slant</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.get_char()</span><br><span class="line">        <span class="keyword">if</span> self.ch == <span class="string">'*'</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                end_index = self.string.index(<span class="string">'*/'</span>, self.index)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.error_type = <span class="string">"no pair with '*/'"</span></span><br><span class="line">                self.report_error()</span><br><span class="line">            self.token = self.token + self.string[self.index:end_index] + <span class="string">'*/'</span></span><br><span class="line">            self.ch = self.string[end_index + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> end_index + <span class="number">2</span> &lt; len(self.string):</span><br><span class="line">                self.index = end_index + <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.is_end = <span class="keyword">True</span></span><br><span class="line">            self.out(<span class="string">'NOTE'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error_type = <span class="string">"no '*' after '/'"</span></span><br><span class="line">            self.report_error()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report_error</span><span class="params">(self)</span>:</span></span><br><span class="line">        exit(<span class="string">'[error]index %s: %s'</span> % (self.index, self.error_type))</span><br><span class="line"></span><br><span class="line">    switch = &#123;</span><br><span class="line">        <span class="string">'alpha'</span>: alpha, <span class="string">'digit'</span>: digit,  <span class="string">'one'</span>: one,  <span class="string">'two'</span>: two,</span><br><span class="line">        <span class="string">'/'</span>: back_slant,  <span class="string">''</span>: report_error,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.get_char():</span><br><span class="line">            <span class="keyword">if</span> self.ch.isalpha():</span><br><span class="line">                case = <span class="string">'alpha'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch.isdigit():</span><br><span class="line">                case = <span class="string">'digit'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.one_op:</span><br><span class="line">                case = <span class="string">'one'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.two_next.keys():</span><br><span class="line">                case = <span class="string">'two'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch == <span class="string">'/'</span>:</span><br><span class="line">                case = <span class="string">'/'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.error_type = <span class="string">"unkown character '%s'"</span> % self.ch</span><br><span class="line">                case = <span class="string">''</span></span><br><span class="line">            self.switch[case](self)</span><br><span class="line"></span><br><span class="line">Analyzer().analyse()</span><br></pre></td></tr></table></figure><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p>​        测试结果截图分为三栏，左栏为源代码，中栏为测试文件，右栏为程序运行的调试信息，在默认等级下若测试文件完全满足文法，则将调试信息写入中间文件。</p><p>​        第一个截图构造了一个比较复杂的测试样本，包括空格、空白行、注释内部的换行空白、多个相似终结符交替运行等等。经检查，在不考虑语法的情况下，输出完全符合词法要求。</p><p><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/1.png" alt=""></p><p>​        第二个截图中测试文件中构造了一个非法的终结符号”:”，运行程序输出了错误信息“[error]index 40: unkownterminal character ‘:’”，指明在索引为40处出现了词法错误，并成功指出了错误的符号。</p><p><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/2.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：不太理解将正则文法转化为词法分析代码的方法，通过参照书本上81到82页的扫描器先模仿后理解吸收；程序抽象程度不够，通过先写两个特例，完成“特殊到一般”的抽象过程；python缺乏switch-case语句导致代码冗长难看，通过查阅网上资料利用dict&lt;str,func&gt;类型的字典代替。</p><p>​        本程序的优点包括：比较完美的完成了词法分析器的基本功能；有着较高的抽象度，方便复用、修改、扩充。</p><p>​        由于时间有限，本程序还存在可以优化的地方，主要包括：许多参数（one_op,reserved, not_print, two_next, token_to_category）的默认值可以通过文件的形式读取，从而将数据与代码完全分离，进一步提高程序的抽象度；程序默认所识别的终结符号可以进一步扩充使其完全符合Pascal的文法要求；源代码中可以增加注释，方便进一步的工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序功能描述&quot;&gt;&lt;a href=&quot;#程序功能描述&quot; class=&quot;headerlink&quot; title=&quot;程序功能描述&quot;&gt;&lt;/a&gt;程序功能描述&lt;/h1&gt;&lt;p&gt;​        在本次实验中，我用python3.5实现了一个词法分析类，具有以下功能：&lt;/p&gt;
&lt;ol&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》实验3-进程同步</title>
    <link href="http://wang22ti.com/2018/04/20/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://wang22ti.com/2018/04/20/《操作系统》实验3-进程同步/</id>
    <published>2018-04-20T01:10:21.000Z</published>
    <updated>2018-04-27T13:26:56.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程的同步与互斥"><a href="#进程的同步与互斥" class="headerlink" title="进程的同步与互斥"></a>进程的同步与互斥</h1><p><strong>创建4个进程P1-P4。要求进程P1在P2，P3之前，P4在其他进程之后执行。P2、P3两个进程互斥。用信号量机制实现同步与互斥，并用实验验证。</strong></p><p>实验说明书中对于semctl以及semget两个函数的讲解存在矛盾，需要详细了解这两个函数的参数含义才能完美地实现进程的同步与互斥，具体函数解释参见<a href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/">我的另一篇博客《操作系统》实验3-进程同步-子泰编写的实验指导书</a>。本程序实现的函数中，set_value_of_sem对单信号量赋值，set_values_of_sem可以同时对多个信号量赋值，signal和wait函数与教材中信号量同步函数含义一致。在主函数中，使用5个信号量控制整个进程，其中2个信号量在1执行完之后被同时设置为1从而实现P1在P2和P3之前，1个信号量被用作P2和P3的互斥，另外2个信号量分别在P2和P3执行完之后被设置为1，从而实现P4在所有进程之后。实验结果与源代码如下。可以看出原来不同步的顺序为2143，经过同步的进程为1234或1324，完全符合实验的要求。</p><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image1.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> semun</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_value_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num,  <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.val = val;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, sem_num, SETVAL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - set value of semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_values_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.arry = arry;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="keyword">sizeof</span>(arry) - <span class="number">1</span>, SETALL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - set values of semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, IPC_RMID, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - delete semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = sem_num;</span><br><span class="line">sem_buff.sem_op = <span class="number">1</span>;</span><br><span class="line">sem_buff.sem_flg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - signal"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = sem_num;</span><br><span class="line">sem_buff.sem_op = <span class="number">-1</span>;</span><br><span class="line">sem_buff.sem_flg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - wait"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> pid1, pid2, pid3;</span><br><span class="line"><span class="keyword">int</span> sem_id1, sem_id2, sem_id3;</span><br><span class="line">sem_id1 = semget(<span class="number">1000</span>, <span class="number">2</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">sem_id2 = semget(<span class="number">1001</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">sem_id3 = semget(<span class="number">1002</span>, <span class="number">2</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf("%d %d %d\n", sem_id1, sem_id2, sem_id3);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> init_arry[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">set_values_of_sem(sem_id1, init_arry);</span><br><span class="line">set_value_of_sem(sem_id2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">set_values_of_sem(sem_id3, init_arry);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pid1 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid1 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> ((pid2 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid2 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">wait(sem_id1, <span class="number">0</span>);</span><br><span class="line">wait(sem_id2, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p2 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line">signal(sem_id2, <span class="number">0</span>);</span><br><span class="line">signal(sem_id3, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">wait(sem_id3, <span class="number">0</span>);</span><br><span class="line">wait(sem_id3, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p4 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line"></span><br><span class="line">delete_sem(sem_id1);</span><br><span class="line">delete_sem(sem_id2);</span><br><span class="line">delete_sem(sem_id3);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pid1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> ((pid3 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid3 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p1 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> arry[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">set_values_of_sem(sem_id1, arry);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">wait(sem_id1, <span class="number">1</span>);</span><br><span class="line">wait(sem_id2, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p3 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line">signal(sem_id2, <span class="number">0</span>);</span><br><span class="line">signal(sem_id3, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进程的生产者消费者同步"><a href="#进程的生产者消费者同步" class="headerlink" title="进程的生产者消费者同步"></a>进程的生产者消费者同步</h1><p><strong>生产者消费者同步。生产者进程将生产的数据写入文件中。消费者读取文件中的数据。注意，传送的每个数据都是一个字符，文件中最多可写入10个字符。编程实现并用实验验证结果。</strong></p><p>本题使用使用上一题写好的信号量函数，为了让生产者与消费者共用一个buff内存，还需要使用shm.h中的函数进行进程通信，具体亦参见<a href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/">我的另一篇博客《操作系统》实验3-进程同步-子泰编写的实验指导书</a>。算法实现与经典的生产者消费者模型一致，实验结果与源代码如下，test.txt与test_out.txt的内容完全一致，符合实验预期。</p><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image2.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> semun</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_init_value_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> init_value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.val = init_value;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - inital semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, IPC_RMID, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - delete semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = <span class="number">0</span>;</span><br><span class="line">sem_buff.sem_op = <span class="number">1</span>;</span><br><span class="line">sem_buff.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - signal"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = <span class="number">0</span>;</span><br><span class="line">sem_buff.sem_op = <span class="number">-1</span>;</span><br><span class="line">sem_buff.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - wait"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> share_memory_id;</span><br><span class="line"><span class="keyword">void</span> *share_memory;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> in, out;</span><br><span class="line"><span class="keyword">char</span> buffer[N];</span><br><span class="line">FILE *fp;</span><br><span class="line">FILE *fp_out;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span> *<span class="title">shared</span>;</span></span><br><span class="line"><span class="keyword">int</span> empty, full, mutex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">wait(empty);</span><br><span class="line">wait(mutex);</span><br><span class="line"><span class="comment">// printf("%p\n", shared-&gt;fp);</span></span><br><span class="line"><span class="keyword">char</span> ch = fgetc(shared-&gt;fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, ch);</span><br><span class="line"><span class="keyword">if</span> (ch == EOF) &#123;</span><br><span class="line">signal(mutex);</span><br><span class="line"><span class="comment">// signal(full);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared-&gt;buffer[shared-&gt;in] = ch;</span><br><span class="line">shared-&gt;in = (shared-&gt;in + <span class="number">1</span>) % N;</span><br><span class="line">signal(mutex);</span><br><span class="line">signal(full);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">wait(full);</span><br><span class="line">wait(mutex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"out: %d "</span>, shared-&gt;out);</span><br><span class="line"><span class="keyword">char</span> out_char = shared-&gt;buffer[shared-&gt;out];</span><br><span class="line"><span class="keyword">if</span> (out_char == EOF)</span><br><span class="line">&#123;</span><br><span class="line">signal(mutex);</span><br><span class="line"><span class="comment">// signal(empty);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared-&gt;out = (shared-&gt;out + <span class="number">1</span>) % N;</span><br><span class="line"><span class="built_in">fprintf</span>(shared-&gt;fp_out, <span class="string">"%c"</span>, out_char);</span><br><span class="line">fflush(shared-&gt;fp_out);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, out_char);</span><br><span class="line"></span><br><span class="line">signal(mutex);</span><br><span class="line">signal(empty);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">share_memory_id = shmget(<span class="number">12345</span>, <span class="keyword">sizeof</span>(struct share_data), <span class="number">0666</span>|IPC_CREAT);</span><br><span class="line">share_memory = shmat(share_memory_id, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">shared = (struct share_data *)share_memory;</span><br><span class="line">shared-&gt;fp = fopen(<span class="string">"test.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">shared-&gt;fp_out = fopen(<span class="string">"test_out.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">if</span> (shared-&gt;fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"file open fail"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// printf("%p\n", shared-&gt;fp);</span></span><br><span class="line">shared-&gt;in = <span class="number">0</span>; shared-&gt;out = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">empty = semget(<span class="number">3000</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT); </span><br><span class="line">full = semget(<span class="number">3001</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">mutex = semget(<span class="number">3002</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">set_init_value_of_sem(empty, N);</span><br><span class="line">set_init_value_of_sem(full, <span class="number">0</span>);</span><br><span class="line">set_init_value_of_sem(mutex, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> pid1, pid2;</span><br><span class="line"><span class="keyword">while</span> ((pid1 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid1 &gt; <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">while</span> ((pid2 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid2 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (producer()) &#123;</span><br><span class="line"><span class="comment">// usleep(100000);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (producer()) &#123;</span><br><span class="line"><span class="comment">// usleep(100000);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (comsumer()) </span><br><span class="line">;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(shared-&gt;fp_out);</span><br><span class="line">fclose(shared-&gt;fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的同步互斥——以银行转账为例"><a href="#线程的同步互斥——以银行转账为例" class="headerlink" title="线程的同步互斥——以银行转账为例"></a>线程的同步互斥——以银行转账为例</h1><p><strong>假设有两个银行账户，初始金额值分别为int nAccount1 = 0, nAccount2 = 0; 下面是在这两个银行账户间转账一个随机金额的函数transfer。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">transfer() &#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nTemp1 = nAccount1;</span><br><span class="line">            nTemp2 = nAccount2;</span><br><span class="line">            nRandom = rand();</span><br><span class="line">            nAccount1 = nTemp1 + nRandom;</span><br><span class="line">            nAccount2 = nTemp2 - nRandom;</span><br><span class="line">            <span class="built_in">printf</span>(“账户金额之和 = %d”, nAccount1 + nAccount2)；</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>试创建两个转账线程使其并发执行。（1）观察无同步控制时，两个线程并发执行的可能次序；观察账户金额的错误现象（正确的结果应该是两个账户金额之和始终为0）。分析在何种执行次序时会导致错误（2）分别利用互斥锁、Peterson方法实现两个线程互斥，并比较两者时间效率的差异。</strong></p><p>(1)  首先我写了一个不含进程同步的程序，为了计算2个线程执行的次数并观察它们的分布，采用transfer1和transfer2分别执行进程，并在和不为0的时候退出循环，源代码与运行结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid2;</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image3.png" alt=""></p><p>可见在分别运行了近200万次之后，两个线程由于没有设置互斥而发生了错误。可能的情况是：线程1执行nAccount1=nTemp1+nRandom后，线程2执行nAccount1 = nTemp1 + nRandom，之后线程1继续执行，导致了线程1在执行sum=nAccount1 + nAccount2的时候nAccount1的值和nAccount2的值相加并不为0。</p><p>(2)    首先使用互斥锁的方法进行线程同步，源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid2;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了验证互斥锁的有效性，让程序运行充分长时间。最终线程1和线程2均运行了2亿多次，没有发生不同步的情况，证明程序在线程同步的有效性，如下图所示：</p><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image4.png" alt=""></p><p>同样，使用peterson算法进行进程同步，运行1亿次没有发生不同步的情况，源代码和运行结果如下。peterson算法依靠flag数组和turn变量完成同步，在此不做赘述，具体亦参见<a href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/">我的另一篇博客《操作系统》实验3-进程同步-子泰编写的实验指导书</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flag[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> turn = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        flag[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">1</span>] &amp;&amp; turn == <span class="number">1</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        flag[<span class="number">0</span>] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">0</span>] &amp;&amp; turn == <span class="number">0</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid0, thid1;</span><br><span class="line">    pthread_create(&amp;thid0, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image5.png" alt=""></p><p>最后，为了比较两者的执行效率，我让它们分别都让两个线程执行1千万次，源码以及执行结果如下。最终互斥锁共计执行了约56秒，peterson算法执行了155秒，可见互斥锁效率更高。</p><h2 id="互斥锁1千万次运行计时"><a href="#互斥锁1千万次运行计时" class="headerlink" title="互斥锁1千万次运行计时"></a>互斥锁1千万次运行计时</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// while(!sum) &#123;</span></span><br><span class="line">    <span class="keyword">while</span>(cnt1 &lt; N) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// while(!sum) &#123;</span></span><br><span class="line">    <span class="keyword">while</span>(cnt2 &lt; N) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid2;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> finish = clock(); </span><br><span class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(finish - start) / CLOCKS_PER_SEC;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mutex: %f seconds\n"</span>, duration); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image6.png" alt=""></p><h2 id="peterson算法1千万次运行计时"><a href="#peterson算法1千万次运行计时" class="headerlink" title="peterson算法1千万次运行计时"></a>peterson算法1千万次运行计时</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flag[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> turn = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cnt1 &lt; N) &#123;</span><br><span class="line">    <span class="comment">// while(1) &#123;</span></span><br><span class="line">        flag[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">1</span>] &amp;&amp; turn == <span class="number">1</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        flag[<span class="number">0</span>] == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    turn = <span class="number">1</span>;</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cnt2 &lt; N) &#123;</span><br><span class="line">    <span class="comment">// while(1) &#123;</span></span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">0</span>] &amp;&amp; turn == <span class="number">0</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    turn = <span class="number">0</span>;</span><br><span class="line">    flag[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">pthread_t</span> thid0, thid1;</span><br><span class="line">    pthread_create(&amp;thid0, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> finish = clock(); </span><br><span class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(finish - start) / CLOCKS_PER_SEC;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"peterson: %f seconds\n"</span>, duration);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进程的同步与互斥&quot;&gt;&lt;a href=&quot;#进程的同步与互斥&quot; class=&quot;headerlink&quot; title=&quot;进程的同步与互斥&quot;&gt;&lt;/a&gt;进程的同步与互斥&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;创建4个进程P1-P4。要求进程P1在P2，P3之前，P4在其他进程之后执行
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《计算机体系结构》实验2.1-MIPS指令集编程之冒泡排序</title>
    <link href="http://wang22ti.com/2018/04/20/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C2-1-MIPS%E6%8C%87%E4%BB%A4%E9%9B%86%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://wang22ti.com/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/</id>
    <published>2018-04-19T16:02:56.000Z</published>
    <updated>2018-04-20T01:08:23.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-学习过程"><a href="#1-学习过程" class="headerlink" title="1 学习过程"></a>1 学习过程</h1><p>​        第一次写MIPS指令集程序，于是我从简单到复杂地写了4个程序<code>helloworld</code>, <code>testio</code>, <code>swap</code>, <code>bubblesort_noinput</code>并在<code>PCSpim</code>环境（使用教程见参考文献4和5）中运行，由于时间限制，最终实现了不具有输入的冒泡排序程序。</p><h1 id="2-hello-world程序"><a href="#2-hello-world程序" class="headerlink" title="2 hello world程序"></a>2 hello world程序</h1><p>​        该程序验证环境可用性，初步了解MIPS汇编语法，无须赘述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">str:    .asciiz &quot;hello world!\n &quot;</span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str      # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image1.png" alt=""></p><h1 id="3-testio程序"><a href="#3-testio程序" class="headerlink" title="3 testio程序"></a>3 testio程序</h1><p>​        该程序实现输出输入的整数，初步了解MIPS汇编程序的syscall机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">str:    .asciiz &quot;please input a num: &quot;</span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str      # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        li $v0, 5# 读取一个整数</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        move $a0, $v0# 打印一个数</span><br><span class="line">        li   $v0, 1</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image2.png" alt=""></p><h1 id="4-swap程序"><a href="#4-swap程序" class="headerlink" title="4 swap程序"></a>4 swap程序</h1><p>​        该程序在testio的基础上实现比较两个数并交换为由小到大排序，为冒泡排序的实现做准备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">        .data</span><br><span class="line">array:  .word 5, 4</span><br><span class="line">str_old:    .asciiz &quot;old array:\n&quot;</span><br><span class="line">str_new:    .asciiz &quot;new array:\n&quot;</span><br><span class="line">blank:      .asciiz &quot; &quot;</span><br><span class="line">enter:      .asciiz &quot;\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str_old  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        jal swap</span><br><span class="line"></span><br><span class="line">        la $a0,str_new  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_array:</span><br><span class="line">        li $a1, 2       # 设置循环计数初值</span><br><span class="line">        la $a2, array   # 指针初始化</span><br><span class="line">loop1:  blez $a1, over1       # 如果$a1 &lt;= 0，跳转到retmain</span><br><span class="line">        lw   $a0, 0($a2)        # 将$a2对应的值取到$a0</span><br><span class="line">        li   $v0, 1             # 打印$a0的值</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        la $a0, blank              # 打印空格</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        addi $a2, $a2, 4        # 指针+1</span><br><span class="line">        addi $a1, $a1, -1       # 循环计数减一</span><br><span class="line">        j loop1</span><br><span class="line">over1:</span><br><span class="line">        la $a0, enter           # 打印一个换行</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line">        j retmain</span><br><span class="line"></span><br><span class="line">swap:</span><br><span class="line">        la $a2, array           # 指针初始化</span><br><span class="line">        addi $a3, $a2, 4        # 指针初始化</span><br><span class="line">        lw $t0, 0($a2)          # 将$a2对应的值取到$t0</span><br><span class="line">        lw $t1, 0($a3)          # 将$a3对应的值取到$t1</span><br><span class="line"></span><br><span class="line">        bge $t1, $t0, retmain   # 如果顺序，返回</span><br><span class="line">        sw $t0, 0($a3)          # 逆序，交换</span><br><span class="line">        sw $t1, 0($a2)</span><br><span class="line">        j retmain</span><br><span class="line"></span><br><span class="line">retmain:</span><br><span class="line">        jr $ra          # 返回主程序</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image3.png" alt=""></p><h1 id="5-bubblesort-noinput程序"><a href="#5-bubblesort-noinput程序" class="headerlink" title="5 bubblesort_noinput程序"></a>5 bubblesort_noinput程序</h1><p>​        该程序在swap程序的基础上修改，利用指针的思想加入两层循环的控制，实现了冒泡排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">        .data</span><br><span class="line">array:  .word 3, 1, 5, 3, 6</span><br><span class="line">str_old:    .asciiz &quot;old array:\n&quot;</span><br><span class="line">str_new:    .asciiz &quot;new array:\n&quot;</span><br><span class="line">blank:      .asciiz &quot; &quot;</span><br><span class="line">enter:      .asciiz &quot;\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str_old  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        jal sort</span><br><span class="line"></span><br><span class="line">        la $a0,str_new  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_array:</span><br><span class="line">        li $a1, 5       # 设置循环计数初值</span><br><span class="line">        la $a2, array   # 指针初始化</span><br><span class="line">loop1:  blez $a1, over1       # 如果$a1 &lt;= 0，跳转到retmain</span><br><span class="line">        lw   $a0, 0($a2)        # 将$a2对应的值取到$a0</span><br><span class="line">        li   $v0, 1             # 打印$a0的值</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        la $a0, blank              # 打印空格</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        addi $a2, $a2, 4        # 指针+1</span><br><span class="line">        addi $a1, $a1, -1       # 循环计数减一</span><br><span class="line">        j loop1</span><br><span class="line">over1:</span><br><span class="line">        la $a0, enter           # 打印一个换行</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line">        j retmain</span><br><span class="line"></span><br><span class="line">sort:</span><br><span class="line">        la $a1, array           # 外层指针初始化</span><br><span class="line">        addi $t4, $a1, 16       # 外层尾指针初始化</span><br><span class="line">loop_out:</span><br><span class="line">        la $a2, array           # 内层指针初始化</span><br><span class="line">        sub $t3, $t4, $a1        # 内层尾指针初始化</span><br><span class="line">        addu $t5, $a1, $t3</span><br><span class="line">loop_in:</span><br><span class="line">        addi $a3, $a2, 4        # 指针初始化</span><br><span class="line">        lw $t0, 0($a2)          # 将$a2对应的值取到$t0</span><br><span class="line">        lw $t1, 0($a3)          # 将$a3对应的值取到$t1</span><br><span class="line"></span><br><span class="line">        bge $t1, $t0, next_loop   # 如果顺序，返回</span><br><span class="line">        sw $t0, 0($a3)          # 逆序，交换</span><br><span class="line">        sw $t1, 0($a2)</span><br><span class="line"></span><br><span class="line">next_loop:</span><br><span class="line">        addi $a2, $a2, 4        # 内层指针++</span><br><span class="line">        bne $t4, $a2, loop_in   # 判断内层指针是否指向尾指针</span><br><span class="line">        addi $a1, $a1, 4        # 外层指针++</span><br><span class="line">        bne $t5, $a1, loop_out  # 判断外层指针是否指向尾指针</span><br><span class="line">        j retmain               # 排序结束，返回</span><br><span class="line"></span><br><span class="line">retmain:</span><br><span class="line">        jr $ra          # 返回主程序</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image4.png" alt=""></p><h1 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6 参考资料"></a>6 参考资料</h1><p>[1]【十分钟教会你汇编】MIPS编程入门  <a href="https://blog.csdn.net/king523103/article/details/45967991" target="_blank" rel="noopener">https://blog.csdn.net/king523103/article/details/45967991</a></p><p>[2] MIPS编程实例集锦(1)  <a href="https://wenku.baidu.com/view/ec9f638583d049649b66588b.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/ec9f638583d049649b66588b.html</a></p><p>[3] MIPS汇编：冒泡排序 <a href="https://blog.csdn.net/linwh8/article/details/68944058" target="_blank" rel="noopener">https://blog.csdn.net/linwh8/article/details/68944058</a></p><p>[4] 非常简单的MIPS小工具-SPIM <a href="https://blog.csdn.net/makethyme/article/details/6277769" target="_blank" rel="noopener">https://blog.csdn.net/makethyme/article/details/6277769</a></p><p>[5] PCspim的安装及使用操作 <a href="https://blog.csdn.net/Kiloveyousmile/article/details/69055131" target="_blank" rel="noopener">https://blog.csdn.net/Kiloveyousmile/article/details/69055131</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-学习过程&quot;&gt;&lt;a href=&quot;#1-学习过程&quot; class=&quot;headerlink&quot; title=&quot;1 学习过程&quot;&gt;&lt;/a&gt;1 学习过程&lt;/h1&gt;&lt;p&gt;​        第一次写MIPS指令集程序，于是我从简单到复杂地写了4个程序&lt;code&gt;helloworl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《虚拟化与云计算》学习</title>
    <link href="http://wang22ti.com/2018/04/13/%E3%80%8A%E8%99%9A%E6%8B%9F%E5%8C%96%E4%B8%8E%E4%BA%91%E8%AE%A1%E7%AE%97%E3%80%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wang22ti.com/2018/04/13/《虚拟化与云计算》学习/</id>
    <published>2018-04-13T02:56:53.000Z</published>
    <updated>2018-04-20T00:48:05.414Z</updated>
    
    <content type="html"><![CDATA[<p>嘉哥要做一个简单的云盘，所以就一步一步来吧。</p><h1 id="1-FTP"><a href="#1-FTP" class="headerlink" title="1 FTP"></a>1 FTP</h1><p>#1.1 FTP命令行上传下载</p><p>嘉哥用阿里云开了一台云服务器，安装了ftp服务器，打开了端口，关闭了用户验证，于是我就可以用匿名（Anonymous）的方式登录。解释参见<a href="https://jingyan.baidu.com/article/fdbd4277d8a4f7b89e3f48ab.html" target="_blank" rel="noopener">百度经验：怎样在命令行中使用FTP</a></p><p><img src="/2018/04/13/《虚拟化与云计算》学习/屏幕截图(540" alt="">.png)</p><p>下载需要使用<code>LITERAL PASV</code>设置为被动模式，具体参见<a href="https://blog.csdn.net/wxqian25/article/details/16821333" target="_blank" rel="noopener">ftp错误150 Opening ASCII mode data connection for /bin/ls.</a>以及<a href="https://bbs.csdn.net/topics/310044648/" target="_blank" rel="noopener">CMD里的FTP命令，怎么切换FTP的主被动模式？</a></p><p>默认下载目录为c:\user\45504，其中45504是我的用户名。</p><p><img src="/2018/04/13/《虚拟化与云计算》学习/屏幕截图(543" alt="">.png)</p><h1 id="1-2-python的FTP库ftplib上传"><a href="#1-2-python的FTP库ftplib上传" class="headerlink" title="1.2 python的FTP库ftplib上传"></a>1.2 python的FTP库ftplib上传</h1><p>有了上面的过程，python代码也很好理解啦，使用python自带的<code>ftplib</code>库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'101.200.57.174'</span></span><br><span class="line">user = <span class="string">'Anonymous'</span></span><br><span class="line">password = <span class="string">'wang22ti@163.com'</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'wang22ti.docx'</span></span><br><span class="line"></span><br><span class="line">ftp = FTP()</span><br><span class="line">ftp.set_pasv(<span class="keyword">False</span>)</span><br><span class="line">ftp.set_debuglevel(<span class="number">2</span>)</span><br><span class="line">ftp.connect(ip)</span><br><span class="line">ftp.login(user, password)</span><br><span class="line">print(ftp.getwelcome())</span><br><span class="line">ftp.storbinary(<span class="string">'STOR %s'</span> % file_name, open(file_name, <span class="string">'rb'</span>))</span><br></pre></td></tr></table></figure><p>其中<code>ftp.set_debuglevel</code>设置日志等级，<code>ftp.storbinary</code>以二进制的方式打开文件并上传。</p><p><code>ftp.set_pasv</code>比较复杂，详情参见<a href="http://blog.sina.com.cn/s/blog_9f6591a30101cj5r.html" target="_blank" rel="noopener">纯真的花花牛的博客</a></p><p><strong>然而还没完！</strong></p><p>当上传中文文件名的时候，出现了问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;D:/45504/Documents/MiCloud/Coding/python/虚拟化与云计算/test_ftp.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">    ftp.storbinary(&apos;STOR %s&apos; % file_name, open(file_name, &apos;rb&apos;))</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 503, in storbinary</span><br><span class="line">    with self.transfercmd(cmd, rest) as conn:</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 398, in transfercmd</span><br><span class="line">    return self.ntransfercmd(cmd, rest)[0]</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 382, in ntransfercmd</span><br><span class="line">    resp = self.sendcmd(cmd)</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 271, in sendcmd</span><br><span class="line">    self.putcmd(cmd)</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 198, in putcmd</span><br><span class="line">    self.putline(line)</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 193, in putline</span><br><span class="line">    self.sock.sendall(line.encode(self.encoding))</span><br><span class="line">UnicodeEncodeError: &apos;latin-1&apos; codec can&apos;t encode characters in position 5-7: ordinal not in range(256)</span><br></pre></td></tr></table></figure><p>昂，原因是<code>latin-1</code>的编码方式，看起来就不支持中文，打开最后一个报错地址可以看到最后发消息是以<code>self.encoding</code>的方式编码的：</p><p><img src="/2018/04/13/《虚拟化与云计算》学习/Snipaste_2018-04-13_11-54-53.png" alt=""></p><p>本以为找到它修改为<code>utf-8</code>就好了，结果又发生了新的错误：</p><p><img src="/2018/04/13/《虚拟化与云计算》学习/1523593140997.png" alt=""></p><p>百思不得其解，<a href="https://blog.csdn.net/chenhongwu666/article/details/43524035" target="_blank" rel="noopener">CSDN的一个博客</a>说是服务器的问题，需要将服务器是否接受<code>utf-8</code>打开（看来命令行走的不是utf-8），结果结果改来改去还是这个问题！最后发现一个神贴：<a href="https://blog.csdn.net/iamsujin/article/details/19616247" target="_blank" rel="noopener">CSDN：python实现ftp中的乱码问题</a>。用更优雅的方法修改为<code>GB18030</code>就ok啦。之后又从<a href="http://www.jb51.net/article/88215.htm" target="_blank" rel="noopener">Python中的FTP通信模块ftplib的用法整理</a>学习了其他的操作，这是最后的代码，部分操作没有测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'101.200.57.174'</span></span><br><span class="line">user = <span class="string">'Anonymous'</span></span><br><span class="line">password = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file_name = '王王王.docx'</span></span><br><span class="line">file_name = <span class="string">'wang22ti.docx'</span></span><br><span class="line"></span><br><span class="line">ftp = FTP()</span><br><span class="line">ftp.set_pasv(<span class="keyword">False</span>)</span><br><span class="line">ftp.encoding = <span class="string">'GB18030'</span></span><br><span class="line">ftp.set_debuglevel(<span class="number">2</span>)</span><br><span class="line">ftp.connect(ip)</span><br><span class="line">ftp.login(user, password)</span><br><span class="line">print(ftp.getwelcome())</span><br><span class="line">ftp.storbinary(<span class="string">'STOR %s'</span> % file_name, open(file_name, <span class="string">'rb'</span>))</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'wang22ti_downloaded.docx'</span>, <span class="string">'wb'</span>)</span><br><span class="line">bufsize = <span class="number">1024</span></span><br><span class="line">ftp.retrbinary(<span class="string">'RETR %s'</span> % file_name, f.write, bufsize)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ftp.cwd(pathname) #设置FTP当前操作的路径</span></span><br><span class="line"><span class="comment"># ftp.dir() #显示目录下文件信息</span></span><br><span class="line"><span class="comment"># file_list = ftp.nlst() #获取目录下的文件</span></span><br><span class="line"><span class="comment"># from pprint import pprint</span></span><br><span class="line"><span class="comment"># pprint(file_list)</span></span><br><span class="line"><span class="comment"># ftp.mkd(pathname) #新建远程目录</span></span><br><span class="line"><span class="comment"># ftp.pwd() #返回当前所在位置</span></span><br><span class="line"><span class="comment"># ftp.rmd(dirname) #删除远程目录</span></span><br><span class="line">ftp.delete(file_name) <span class="comment">#删除远程文件</span></span><br><span class="line"><span class="keyword">if</span> file_name <span class="keyword">not</span> <span class="keyword">in</span> ftp.nlst():</span><br><span class="line">    print(<span class="string">'delete OK - %s'</span> % file_name)</span><br><span class="line"><span class="comment"># ftp.rename(fromname, toname)#将fromname修改名称为toname。</span></span><br></pre></td></tr></table></figure><h1 id="1-3-对ftplib的进一步封装"><a href="#1-3-对ftplib的进一步封装" class="headerlink" title="1.3 对ftplib的进一步封装"></a>1.3 对ftplib的进一步封装</h1><p>可以说，ftplib已经比较方便了，但是一方面类似于<code>storbinary</code>和<code>retrbinary</code>一类的函数封装性仍然不够好，另一方面在实际使用中还会出现长时间无响应的情况。为了能够在作业中的体验更好，进一步封装ftplib如下：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嘉哥要做一个简单的云盘，所以就一步一步来吧。&lt;/p&gt;
&lt;h1 id=&quot;1-FTP&quot;&gt;&lt;a href=&quot;#1-FTP&quot; class=&quot;headerlink&quot; title=&quot;1 FTP&quot;&gt;&lt;/a&gt;1 FTP&lt;/h1&gt;&lt;p&gt;#1.1 FTP命令行上传下载&lt;/p&gt;
&lt;p&gt;嘉哥用阿里
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《计算机体系结构》实验2-MIPS指令集</title>
    <link href="http://wang22ti.com/2018/04/10/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C2-MIPS%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <id>http://wang22ti.com/2018/04/10/《计算机体系结构》实验2-MIPS指令集/</id>
    <published>2018-04-09T16:53:46.000Z</published>
    <updated>2018-04-11T14:34:40.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-lab1的内容"><a href="#0-lab1的内容" class="headerlink" title="0 lab1的内容"></a>0 lab1的内容</h1><h2 id="0-1-Exercise1"><a href="#0-1-Exercise1" class="headerlink" title="0.1  Exercise1"></a>0.1  Exercise1</h2><p>由下图易知LW R2,100(R3)对应的二进制代码为10001100011 00010 0000000001100100，转化为十六进制为0x8C62 0064。</p><p><img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image1.png" alt="">                              </p><p>由下图易知SW R5,100(R6)对应的二进制代码为10101100110 00101 000000001100100，转化为十六进制为0xACC5 0064。</p><p><img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image2.png" alt=""></p><h2 id="0-2-Exercise2"><a href="#0-2-Exercise2" class="headerlink" title="0.2  Exercise2"></a>0.2  Exercise2</h2><p>由下图易知OR R7,R18, R12对应的二进制代码为00000010010 01100 00111 00000 100101，转化为十六进制为0x024C 3825。</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image3.png" alt=""></p><p>由下图易知SUB R5,R4, R31对应的二进制代码为00000000100 11111 00101 00000 100010，转化为十六进制为0x009F 2822。</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image4.png" alt=""></p><h2 id="0-3-Exercise3"><a href="#0-3-Exercise3" class="headerlink" title="0.3  Exercise3"></a>0.3  Exercise3</h2><p>由下图易知BNEQ R7, R8,-5对应的二进制代码为00010100111 01000 11111111111111011，转化为十六进制为0x14E8 FFFB。当PC为124的时候，分支后的PC值为124 + (-5&lt;&lt;2) = 104。</p><p><img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image5.png" alt=""> </p><h2 id="0-4-Exercise5"><a href="#0-4-Exercise5" class="headerlink" title="0.4  Exercise5"></a>0.4  Exercise5</h2><p>不知道为啥没发现exercise4，但由下图易知ADDI R7, R8, 600对应的二进制代码为001000 01000 001110000001001011000，转化为十六进制为0x21070258。为啥没有SUBI呢？可能是因为该指令并不常用，且可以被ADDI代替，为了满足精简指令集的设计要求，就被去掉了。</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image6.png" alt=""></p><h1 id="1指令集学习"><a href="#1指令集学习" class="headerlink" title="1指令集学习"></a>1指令集学习</h1><p>​        因为我们班分配到的是分支指令（Branch），所以我遵循从简单到复杂的一般思路，学习了B和BAL两条指令，以及与他们相关的BEQ和BGEZAL两条指令。</p><h2 id="1-1-B和BEQ的学习"><a href="#1-1-B和BEQ的学习" class="headerlink" title="1.1 B和BEQ的学习"></a>1.1 B和BEQ的学习</h2><p>​        B指令在指令集说明里的介绍重点如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image7.png" alt=""></p><p>​        可见该32位的指令最高6位000100是用来告诉处理器——这是一条分支指令！而最低16位offset再加上2位的偏移量（之所以用2位是因为一条指令为32位即4位，4刚好是2的2次方）组成了一个±128Kb的相对寻址空间，用来指明指令相对寻址的位置。</p><p>​        那中间的两个00000呢？注意到该指令实际被机器翻译为BEQ r0, r0, offset，我又查看了BEQ指令，其重点介绍如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image8.png" alt=""></p><p>​        GPR看起来非常关键，我检索到如下信息：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image9.png" alt=""></p><p>​        Amazing！原来是通用寄存器的缩写，而且编号为0的通用寄存器的值永远为0。于是知道BEQ表示如果寄存器rs和寄存器rt的值如果相等就执行分支操作。进一步地，因为指令B的rs和rt均为编号为0的通用寄存器，所以就变成了无条件分支了！</p><h2 id="1-2-BAL和BGEZAL的学习"><a href="#1-2-BAL和BGEZAL的学习" class="headerlink" title="1.2 BAL和BGEZAL的学习"></a>1.2 BAL和BGEZAL的学习</h2><p>​        类似于1.1中的学习过程，我先查看了BAL的重点介绍：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image10.png" alt=""></p><p>​        指令BAL构造方式和指令B并不一样。但目前为止可以很容易理解的是，BAL执行的也是±128Kb范围内的相对寻址，和指令B不同的是BAL会把分支子程序运行结束、回到分支点后执行的下一条指令的地址（returnaddress link）存放在编号为31的通用寄存器里。它是怎么做到的呢？于是查看BGEZAL的重点介绍：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image11.png" alt=""></p><p>和1.1中的情况类似，指令BGEZAL是一个条件分支指令，当寄存器rs中的值大于等于0的情况下执行分支操作，而在指令BAL将寄存器rs强制为r0=0，于是就变成了无条件的分支。然而还有疑惑——如果10001表明这是一条BGEZAL指令，那么该指令最高6位的000001是什么意思呢？进一步检索到如下信息：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image12.png" alt=""></p><p>​        从这里可以明白REGIMM指明了immediate instruction的条件，看来opcode是一个很重要的信息！进一步检索，得到了更通用的信息——</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image13.png" alt=""></p><p>​        这幅图告诉我们，所有的MIPS指令都具有类似于6+5+5+16的形式，其中前6位被称为opcode——显然就是operation code！很顺利地，还找到了以下的几张表格——</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image14.png" alt=""></p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image15.png" alt=""></p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image16.png" alt=""></p><p>Unbelievable！将这几张图结合起来后，我们就可以明白计算机理解指令BAL的过程：</p><p>一、 读取opcode，发现是REGIMM，它表示要执行的指令是具有一个判断参数条件指令，参数用rs表示，而具体是什么指令呢？用rt表示。</p><p>二、 读取rt，发现是BGEZAL，它表示在rs≥0的情况下执行带有返回地址的分支操作，这已经是一条很具体的操作了。</p><p>三、 读取rs，发现是00000，于是就去读取编号为0的通用寄存器的值。而我们知道这个值恒为0，于是无条件地满足了分支条件。</p><p>四、 读取offset，对其做左移2位操作后执行分支操作。</p><p>五、 执行完分支程序，读取编号为31的通用寄存器里的返回地址并寻址执行。</p><h2 id="1-3-指令学习小结"><a href="#1-3-指令学习小结" class="headerlink" title="1.3 指令学习小结"></a>1.3 指令学习小结</h2><p>​        MIPS是经典的精简指令集，根据以上的学习，它使用了哪些技巧使得指令长度变短、数量减少呢？</p><p>一、 统一的指令格式。指令长度均为32位且为6+5+5+16的形式，一方面地址实现了对齐，指令中的地址就可以减少2位；另一方面降低了机器对指令理解的难度，必然可以提高一般任务下的执行效率。</p><p>二、 指令复用。B和BEQ、BAL和BGEZAL从机器码的角度来说是一模一样的，但是通过默认值的巧妙设定，用相同的机器码实现不同的指令，从而减少指令的总数。</p><p>三、 多级操作码。很多opcode仅仅表示一类指令，具体是哪一个指令需要进一步理解其他域中的值，因此opcode只需要6位即可。那为什么BEQ不采用这样的方式呢？显然是因为BEQ这一类指令需要更多的参数。</p><p>此外，本次实验中“顺藤摸瓜式”的搜索路径、“关键词查找”的搜索方法和类比的学习方法，让整个实验十分顺畅且严谨合理，也是值得总结回味的，它让我体会到一种探索的乐趣。</p><h1 id="2-大小端编址的实验测试"><a href="#2-大小端编址的实验测试" class="headerlink" title="2 大小端编址的实验测试"></a>2 大小端编址的实验测试</h1><p>根据实验要求，编写程序并运行如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image17.png" alt=""></p><p>可以看出，x1取的是x的低地址，输出的是0x1122的低地址对应的十进制数34，可见我的电脑的CPU（Intel 酷睿i7 7500U）采用的编址方式为小端编址。</p><h1 id="3观察指令执行过程——以winmips64为例"><a href="#3观察指令执行过程——以winmips64为例" class="headerlink" title="3观察指令执行过程——以winmips64为例"></a>3观察指令执行过程——以winmips64为例</h1><h2 id="3-1-观察指令执行过程——以计算阶乘为例"><a href="#3-1-观察指令执行过程——以计算阶乘为例" class="headerlink" title="3.1 观察指令执行过程——以计算阶乘为例"></a>3.1 观察指令执行过程——以计算阶乘为例</h2><p>​       虽然只知道这是一款MIPS指令集的仿真软件，参考文档糟糕的排版和字体让人提不起学习的兴趣，我还是打开了这款软件。由于此前的学习加上一些文献的查找，我觉得大体还是能看懂每个window的作用。它在我的眼里长这样：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image18.png" alt=""></p><p>然后我打开一段叫做factorial.s的程序，从字面上看这段程序是用来计算阶乘的：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image19.png" alt=""></p><p>​       实验要求为观察指令执行的过程，给出指令集和硬件高效执行关系的观察体会。于是我就开始一个周期一个周期地执行这个程序，直到第5个周期如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image20.png" alt=""></p><p>​       可以看出，指令采用五级流水线的方式执行，分为读指令、指令译码、指令执行、访问内存和写回寄存器五个阶段，每个阶段的时间均相同。同时，针对不同数据类型的指令，采用相应的硬件进行处理。</p><p>​       继续执行一个周期，发现statistics窗口多了一项数据：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image21.png" alt=""></p><p>恰好就是课上学的CPI！由于刚刚执行完一条指令，流水线的效果还没有显现，所以CPI = 5。继续执行几个周期，CPI逐渐减小并趋向于1，并要求我在终端（Terminal）输入计算阶乘的初值： </p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image22.png" alt=""></p><p>​       我输入了3后继续执行，出现了不一样的结果：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image23.png" alt=""></p><p>Amazing！可以看出，指令jal factorial让程序开始从003c读指令，而此前已经被读取、本应该在这个周期译码的、位于002c的指令daddi r24, r0, 1被阻塞了！于是Statistics窗口中Branch Taken Stall的值增加了1！再执行几个周期：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image24.png" alt=""></p><p>​        可以观察到流水线开始被重新构建。此外，结合参考手册中对于指令slti的介绍</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image25.png" alt=""></p><p>可知指令slti在对编号为10的寄存器进行写操作的同时指令bnez要对r10进行读操作，于是就产生了如图所示的“写后读”阻塞。进行执行若干个周期，上述两种情况交替出现若干次，目的在于将需要的数据即，n到1压入堆栈。运行若干周期之后终于跳出了这个循环，出现了新的情况：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image26.png" alt=""></p><p>​        Surprise！在执行指令dmulu的时候，使用了专门的硬件！同时由于乘法计算的时间仍然较长且与下一条指令dadd均需要访问编号为3的寄存器，所以整个程序都处于“写后读”阻塞！最终，当dmulu指令进入访问内存阶段时，statistics窗口中的Structural Stall的值变为了1！</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image27.png" alt=""></p><p>​        继续执行若干个周期，除了程序在循环计算阶乘的过程中又出现了StructuralStall外，并没有发现新的有趣的现象。最后，终端输出了正确的结果，statistics窗口中数据如下所示：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image28.png" alt=""></p><p>​        最终的CPI为1.640，远远小于5，可见流水线的威力。</p><h2 id="3-2-指令观察小结"><a href="#3-2-指令观察小结" class="headerlink" title="3.2 指令观察小结"></a>3.2 指令观察小结</h2><p>​        这次仿真观察真是惊喜连连，我收获了哪些呢？</p><p>一、 流水线是一个复杂的系统，包括指令周期的划分、指令周期的对齐、资源冲突的应对等等，可以有效地减小CPI。</p><p>二、 为了对齐指令周期，需要尽量减少各个阶段的时间长度，例如通过指令长度的对齐和指令格式的统一提高译码效率。</p><p>三、 对了避免部分周期，尤其是执行周期流水线效率的影响，在设计指令集的时候就考虑使用不同的硬件以提高执行效率，例如采用协处理器专门处理浮点运算，采用专门的硬件计算加速乘法计算（这样的思想也被应用到近几年的异构计算中）。</p><h1 id="4-参考文献"><a href="#4-参考文献" class="headerlink" title="4 参考文献"></a>4 参考文献</h1><p>[1] MIPS指令集</p><p><a href="http://blog.sina.com.cn/s/blog_7f293c900100zdm8.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_7f293c900100zdm8.html</a></p><p>[2] C++中数据类型int, short, long, long long的数据范围</p><p><a href="https://blog.csdn.net/elohims/article/details/23558779" target="_blank" rel="noopener">https://blog.csdn.net/elohims/article/details/23558779</a></p><p>[3] 大端模式和小端模式</p><p><a href="https://www.cnblogs.com/itcsl/p/6567963.html" target="_blank" rel="noopener">https://www.cnblogs.com/itcsl/p/6567963.html</a></p><p>[4] MIPS入门</p><p><a href="https://wenku.baidu.com/view/f719c320647d27284b735199.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/f719c320647d27284b735199.html</a></p><p>[5] MIPS的五级流水线</p><p><a href="http://imgtec.eetrend.com/article/1247" target="_blank" rel="noopener">http://imgtec.eetrend.com/article/1247</a></p><p>[6] MIPS指令集实验</p><p><a href="https://wenku.baidu.com/view/6d94c44c1fd9ad51f01dc281e53a580216fc509d.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/6d94c44c1fd9ad51f01dc281e53a580216fc509d.html</a></p><p>[7] cpu结构和功能</p><p><a href="https://max.book118.com/html/2017/0628/118707202.shtm" target="_blank" rel="noopener">https://max.book118.com/html/2017/0628/118707202.shtm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-lab1的内容&quot;&gt;&lt;a href=&quot;#0-lab1的内容&quot; class=&quot;headerlink&quot; title=&quot;0 lab1的内容&quot;&gt;&lt;/a&gt;0 lab1的内容&lt;/h1&gt;&lt;h2 id=&quot;0-1-Exercise1&quot;&gt;&lt;a href=&quot;#0-1-Exercise
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》作业2.5-进程控制块的类C语言描述</title>
    <link href="http://wang22ti.com/2018/04/02/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E4%BD%9C%E4%B8%9A2-5-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%9D%97%E7%9A%84%E7%B1%BBC%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0/"/>
    <id>http://wang22ti.com/2018/04/02/《操作系统》作业2-5-进程控制块的类C语言描述/</id>
    <published>2018-04-02T04:42:26.000Z</published>
    <updated>2018-05-07T08:26:40.047Z</updated>
    
    <content type="html"><![CDATA[<p>这个作业差点要手写，倒腾了一晚上，肯定还有很多问题，就先贴在这里吧。</p><p><strong>试根据你自己的理解，采用类C语言设计和描述操作系统关于进程控制块的数据结构、组织方式及管理机制。在此基础上，给出进程的创建、终止、阻塞、唤醒、挂起与激活等函数原型及函数代码。注意，对于过于复杂的功能或你无法解决的细节可采用指定功能的函数模块如处理机调度scheduler()来替代。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line"> <span class="keyword">pid_t</span> pid;<span class="comment">//进程pid</span></span><br><span class="line"><span class="keyword">pid_t</span> ppid;<span class="comment">//父进程pid</span></span><br><span class="line"> <span class="keyword">enum</span> status&#123;<span class="comment">//进程状态</span></span><br><span class="line"> CREATING,<span class="comment">//创建</span></span><br><span class="line"> TERMINATING,<span class="comment">//终止</span></span><br><span class="line"> RUNNING,<span class="comment">//执行</span></span><br><span class="line"> ACTIVE_READY,<span class="comment">//活动就绪</span></span><br><span class="line"> INACTIVE_READY,<span class="comment">//静止就绪</span></span><br><span class="line"> ACTIVE_BLOCK,<span class="comment">//活动阻塞</span></span><br><span class="line"> INACTIVE_BLOCK,<span class="comment">//静止阻塞</span></span><br><span class="line">&#125;;<span class="comment">//进程的状态</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> memory_address;<span class="comment">//进程下一次执行程序的开始地址</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allocate_address</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TO-DO: 为新的进程分配一块内存空间，返回首地址的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deallocate_address</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TO-DO: 解除进程的内存分配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> process(<span class="keyword">pid_t</span> pid, <span class="keyword">pid_t</span> ppid) &#123;</span><br><span class="line"> <span class="keyword">this</span>.pid = pid;</span><br><span class="line"> <span class="keyword">this</span>.ppid = ppid;</span><br><span class="line"> <span class="keyword">this</span>.status = CREATING;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">this</span>.pid != ERROR)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">this</span>.memory_address = allocate_address();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> ~process()&#123;</span><br><span class="line"> <span class="keyword">this</span>.status = TERMINATING;</span><br><span class="line"> deallocate_address();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">system</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">pid_t</span> start_pid = <span class="number">0</span>;<span class="comment">//初始进程的pid</span></span><br><span class="line"><span class="keyword">pid_t</span> next_pid;<span class="comment">//下一个创建的的进程pid</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span> <span class="title">running_porcess</span>;</span><span class="comment">//正在执行的进程</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">running_start_time</span>;</span><span class="comment">//正在执行进程开始执行的时间</span></span><br><span class="line"><span class="keyword">long</span> max_time = <span class="number">100</span>;<span class="comment">//一个时间片的长度（微秒）</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct process&gt; ready_queue;<span class="comment">//就绪进程的队列</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct process&gt; block_queue;<span class="comment">//阻塞进程的队列</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct process&gt; suspend_queue;<span class="comment">//挂起进程的的队列</span></span><br><span class="line"><span class="keyword">int</span> genearl_register[<span class="number">4</span>][<span class="number">2</span>];<span class="comment">//标准寄存器</span></span><br><span class="line"><span class="keyword">int</span> PSW[<span class="number">16</span>];<span class="comment">//状态寄存器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> system&#123;<span class="comment">//状态转移</span></span><br><span class="line"> CREATE,<span class="comment">//创建</span></span><br><span class="line"> BLOCK,<span class="comment">//阻塞</span></span><br><span class="line"> RELEASE,<span class="comment">//释放</span></span><br><span class="line"> SUSPEND,<span class="comment">//挂起</span></span><br><span class="line"> ACTIVATE,<span class="comment">//激活</span></span><br><span class="line"> TERMINATE,<span class="comment">//终止</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; operater_queue;<span class="comment">//待执行的操作的队列</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct process <span class="title">create</span><span class="params">(<span class="keyword">pid_t</span> ppid)</span></span>;<span class="comment">//创建进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">block</span><span class="params">()</span></span>;<span class="comment">//阻塞正在执行的进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(struct process)</span></span>;<span class="comment">//释放阻塞的进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspend</span><span class="params">(struct process)</span></span>;<span class="comment">//挂起进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activate</span><span class="params">(struct process)</span></span>;<span class="comment">//激活被挂起的进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">terminate</span><span class="params">(struct process)</span></span>;<span class="comment">//终止进程</span></span><br><span class="line"></span><br><span class="line">system();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span> <span class="title">system</span>:</span>:create(<span class="keyword">pid_t</span> ppid) &#123;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">new_process = process(<span class="keyword">this</span>.next_pid , ppid);</span><br><span class="line"><span class="keyword">this</span>.next_pid += <span class="number">1</span>;</span><br><span class="line">new_process.status = ACTIVE_READY;</span><br><span class="line"><span class="keyword">this</span>.ready_queue.push(new_process);</span><br><span class="line"><span class="keyword">this</span>.timeval = gettiemofday();</span><br><span class="line"><span class="keyword">return</span> new_process;</span><br><span class="line"><span class="keyword">catch</span>:</span><br><span class="line"><span class="keyword">return</span> process(ERROR, ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::block() &#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess.memory_address = getNowAddress();</span><br><span class="line"><span class="comment">// 阻塞执行进程，调度下一个进程</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.running_porcess != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess.status = ACTIVE_BLOCK;</span><br><span class="line">block_queue.push(<span class="keyword">this</span>.running_porcess);</span><br><span class="line"><span class="keyword">this</span>.running_porcess = <span class="keyword">this</span>.ready_queue.pop():</span><br><span class="line">&#125;</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::release(struct process) &#123;</span><br><span class="line"><span class="comment">// 释放活动阻塞进程，转入活动就绪</span></span><br><span class="line"><span class="keyword">if</span> (process.status == ACTIVE_BLOCK)</span><br><span class="line">&#123;</span><br><span class="line">process.status = ACTIVE_READY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放静止阻塞进程，转入静止就绪</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.status == INACTIVE_BLOCK)</span><br><span class="line">&#123;</span><br><span class="line">process.status == INACTIVE_READY;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ready_queue.push(process);</span><br><span class="line">block_queue.pop(process);</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::suspend(struct process) &#123;</span><br><span class="line">porcess.memory_address = getNowAddress();</span><br><span class="line"><span class="comment">// 挂起执行进程，转入静止就绪，调度下一个程序</span></span><br><span class="line"><span class="keyword">if</span> (process == <span class="keyword">this</span>.running_porcess) &#123;</span><br><span class="line">process.status = INACTIVE_READY;</span><br><span class="line">next_process = ready_queue.pop();</span><br><span class="line"><span class="keyword">if</span> (! suspend_queue.isMember(new_process))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess = new_process;</span><br><span class="line">exec_from(new_process.memory_address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 挂起活动就绪进程，转入静止就绪</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ready_queue.isMember(process))</span><br><span class="line">&#123;</span><br><span class="line">process.status = INACTIVE_READY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 挂起活动阻塞进程，转入静止阻塞</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (block_queue.isMember(process)) &#123;</span><br><span class="line">process.status = INACTIVE_BLOCK;</span><br><span class="line">&#125;</span><br><span class="line">suspend_queue.push(process);</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::activate(struct process) &#123;</span><br><span class="line"><span class="comment">// 如果是就绪进程，转入活动就绪</span></span><br><span class="line"><span class="keyword">if</span> (ready_queue.isMember(process))</span><br><span class="line">&#123;</span><br><span class="line">process.status == ACTIVE_READY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是阻塞进程，转入活动阻塞</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (block_queue.isMember(process))</span><br><span class="line">&#123;</span><br><span class="line">process.status == ACTIVE_BLOCK;</span><br><span class="line">&#125;</span><br><span class="line">suspend_queue.pop(process);</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::terminate(struct process) &#123;</span><br><span class="line"><span class="comment">// 调用该进程的析构函数，并调度下一个进程</span></span><br><span class="line">process.~process();</span><br><span class="line"><span class="keyword">this</span>.next_process = ready_queue.pop();</span><br><span class="line"><span class="keyword">if</span> (! suspend_queue.isMember(new_process))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess = new_process;</span><br><span class="line">exec_from(new_process.memory_address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system::system() &#123;</span><br><span class="line"><span class="keyword">this</span>.next_pid = <span class="keyword">this</span>.start_pid;</span><br><span class="line">ready_queue = <span class="built_in">queue</span>&lt;struct process&gt;();</span><br><span class="line">block_queue = <span class="built_in">queue</span>&lt;struct process&gt;();</span><br><span class="line">suspend_queue = <span class="built_in">queue</span>&lt;struct process&gt;();</span><br><span class="line"><span class="comment">//初始化状态转移队列，并将系统启动时必要的一些状态转移入列</span></span><br><span class="line">operater_queue = <span class="built_in">queue</span>&lt;strct process&gt;(<span class="comment">/*TO-DO: 一些状态转移*/</span>);</span><br><span class="line"><span class="comment">// 创建第一个进程</span></span><br><span class="line"><span class="keyword">while</span>((<span class="keyword">this</span>.running_porcess = <span class="keyword">this</span>.create(<span class="keyword">this</span>.start_pid).pid != ERROR);</span><br><span class="line"><span class="keyword">this</span>.timeval = gettiemofday();</span><br><span class="line"><span class="keyword">this</span>.running_porcess.status = RUNNING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 选择下一个状态转移</span></span><br><span class="line"><span class="keyword">if</span> ( !operater_queue.isEmpty() )</span><br><span class="line">&#123;</span><br><span class="line">operater = operater_queue.pop();</span><br><span class="line"><span class="keyword">switch</span> operater &#123;</span><br><span class="line">CREATE: <span class="keyword">this</span>.create(<span class="keyword">this</span>.running_porcess.pid);<span class="keyword">break</span>;</span><br><span class="line">BLOCK: <span class="keyword">this</span>.block();<span class="keyword">break</span>;</span><br><span class="line">RELEASE: <span class="keyword">this</span>.release();<span class="keyword">break</span>;</span><br><span class="line">SUSPEND: <span class="keyword">this</span>.suspend(process);<span class="keyword">break</span>;</span><br><span class="line">ACTIVATE: <span class="keyword">this</span>.activate();<span class="keyword">break</span>;</span><br><span class="line">TERMINATE: <span class="keyword">this</span>.terminate();<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间片结束，当前进程转移到活动就绪，并调度下一个进程</span></span><br><span class="line"><span class="keyword">if</span> (gettiemofday - <span class="keyword">this</span>.timeval &gt;= <span class="keyword">this</span>.max_time <span class="keyword">or</span> <span class="keyword">this</span>.running_porcess == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess.memory_address = getNowAddress();</span><br><span class="line"><span class="keyword">this</span>.running_porcess.status = ACTIVE_READY;</span><br><span class="line">ready_queue.push(<span class="keyword">this</span>.running_porcess);</span><br><span class="line">next_process = ready_queue.pop();</span><br><span class="line"><span class="keyword">if</span> (! suspend_queue.isMember(new_process))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess = new_process;</span><br><span class="line">exec_from(new_process.memory_address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个作业差点要手写，倒腾了一晚上，肯定还有很多问题，就先贴在这里吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;试根据你自己的理解，采用类C语言设计和描述操作系统关于进程控制块的数据结构、组织方式及管理机制。在此基础上，给出进程的创建、终止、阻塞、唤醒、挂起与激活等函数原型及函数代码。
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>每天都写点算法18-4</title>
    <link href="http://wang22ti.com/2018/04/02/%E6%AF%8F%E5%A4%A9%E9%83%BD%E5%86%99%E7%82%B9%E7%AE%97%E6%B3%9518-4/"/>
    <id>http://wang22ti.com/2018/04/02/每天都写点算法18-4/</id>
    <published>2018-04-02T04:39:16.000Z</published>
    <updated>2018-04-28T13:21:53.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-4-27-30"><a href="#18-4-27-30" class="headerlink" title="18-4-27-30"></a>18-4-27-30</h1><p>数学建模</p><h1 id="18-4-21-26"><a href="#18-4-21-26" class="headerlink" title="18-4-21-26"></a>18-4-21-26</h1><p><a href="http://wang22ti.com/2018/04/25/%E5%8C%97%E4%BA%AC%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E2%80%94%E2%80%94%E5%BC%B1%E6%B8%A3%E7%9A%84a%E7%9A%844%E9%81%93%E9%A2%98/">参见另外一篇博客</a></p><h1 id="18-4-20"><a href="#18-4-20" class="headerlink" title="18-4-20"></a>18-4-20</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给定平面上n个点，找其中一对点，使得在n个点组成的所有点对中，该点对间的距离最小</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="keyword">double</span> y;</span><br><span class="line">&#125; point;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LessSort</span><span class="params">(point a, point b)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(a.x != b.x)  </span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;  </span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(point a, point b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(a.x - b.x, <span class="number">2</span>) + <span class="built_in">pow</span>(a.y - b.y, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> inf = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">nearestPointPair</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt; &amp;points, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (right &lt;= left) &#123;</span><br><span class="line"><span class="keyword">return</span> inf;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(right - left == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> distance(points[left], points[right]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> left_min = nearestPointPair(points, left, center);</span><br><span class="line"><span class="keyword">double</span> right_min = nearestPointPair(points, center, right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d = min(left_min, right_min);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> center_min = inf;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> left_ = center - <span class="number">1</span>; left_ &gt;= left &amp;&amp; points[center].x - points[left_].x &lt; d; left_--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> right_ = center + <span class="number">1</span>; right_ &lt;= right &amp;&amp; points[right_].x - points[center].x &lt; d; right_++) &#123;</span><br><span class="line">center_min = min(center_min, distance(points[left_], points[right_]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> min(center_min, d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; points;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num_points;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num_points;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_points; ++i)</span><br><span class="line">&#123;</span><br><span class="line">point p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line">points.push_back(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(points.begin(), points.end(), LessSort);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> distance = nearestPointPair(points, <span class="number">0</span>, points.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; distance &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">100 100</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="18-4-11-19"><a href="#18-4-11-19" class="headerlink" title="18-4-11-19"></a>18-4-11-19</h1><p><a href="http://wang22ti.com/2018/04/20/%E5%8C%97%E4%BA%AC%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%EF%BC%88%E9%87%8D%E7%8E%B0%E8%B5%9B%EF%BC%89/">参见另外一篇博客</a></p><h1 id="18-4-10"><a href="#18-4-10" class="headerlink" title="18-4-10"></a>18-4-10</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">vector</span>&lt;T&gt; <span class="title">quickSort</span>(<span class="title">vector</span>&lt;T&gt; &amp;<span class="title">v</span>) &#123;</span></span><br><span class="line"><span class="keyword">if</span> (v.size() &lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; anchor = &#123;v[<span class="number">0</span>], &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1 = <span class="built_in">vector</span>&lt;T&gt;();</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v2 = <span class="built_in">vector</span>&lt;T&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">typename</span> <span class="built_in">vector</span>&lt;T&gt;::iterator i = v.begin() + <span class="number">1</span>; i != v.end(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*i == v[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">anchor.push_back(*i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (*i &gt; v[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">v2.push_back(*i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (*i &lt; v[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(*i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1_sorted = quickSort(v1);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v2_sorted = quickSort(v2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v_ret = <span class="built_in">vector</span>&lt;T&gt;();</span><br><span class="line">v_ret.insert(v_ret.end(), v1_sorted.begin(), v1_sorted.end());</span><br><span class="line">v_ret.insert(v_ret.end(), anchor.begin(), anchor.end());</span><br><span class="line">v_ret.insert(v_ret.end(), v2_sorted.begin(), v2_sorted.end());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> v_ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3 = &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">72</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = quickSort(v3);</span><br><span class="line">copy (v.begin(), v.end(), ostream_iterator&lt;<span class="keyword">int</span>&gt; (<span class="built_in">cout</span>, <span class="string">" "</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-4-6"><a href="#18-4-6" class="headerlink" title="18-4-6"></a>18-4-6</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题描述：设A[1, 2, ..., n]的是一个包含个n不同非负整数的数组。</span></span><br><span class="line"><span class="comment">// 如果在i&lt;j的情况下，有，A[i]&gt;A[j]，则(A[i]，、A[j])就称为A中的一个逆序对。</span></span><br><span class="line"><span class="comment">// 例如，数组（3，1，4，5，2）的“逆序对”有&lt;3，1&gt;、&lt;3，2&gt;、&lt;4，2&gt;、&lt;5，2&gt;共4个。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数列中的许多问题貌似都需要先排序</span></span><br><span class="line"><span class="comment">// 在归并排序的基础上稍加修改即可，</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">vector</span>&lt;T&gt; <span class="title">merge</span>(<span class="title">vector</span>&lt;T&gt; &amp;<span class="title">v1</span>, <span class="title">vector</span>&lt;T&gt; &amp;<span class="title">v2</span>, <span class="title">int</span> *<span class="title">num</span>) &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v = <span class="built_in">vector</span>&lt;T&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">vector</span>&lt;T&gt;::iterator i = v1.begin();</span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">vector</span>&lt;T&gt;::iterator j = v2.begin();</span><br><span class="line"><span class="comment">// end()指向的是最后一个元素的后一个位置</span></span><br><span class="line"><span class="keyword">while</span> (i != v1.end() &amp;&amp; j != v2.end()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*i &lt;= *j) &#123;</span><br><span class="line">v.push_back(*i);</span><br><span class="line">*num += (j - v2.begin());</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">v.push_back(*j);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == v1.end()) &#123;</span><br><span class="line">v.insert(v.end(), j, v2.end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">v.insert(v.end(), i, v1.end());</span><br><span class="line"><span class="comment">// 将迭代器转换为索引值</span></span><br><span class="line">*num += (v1.end() - i) * v2.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">vector</span>&lt;T&gt; <span class="title">mergeSort</span>(<span class="title">vector</span>&lt;T&gt; &amp;<span class="title">v</span>, <span class="title">int</span>* <span class="title">num</span>) &#123;</span></span><br><span class="line"><span class="keyword">if</span> (v.size() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; v[0] &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v.size() == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[<span class="number">0</span>] &gt; v[<span class="number">1</span>]) &#123;</span><br><span class="line">T temp =  v[<span class="number">0</span>];</span><br><span class="line">v[<span class="number">0</span>] = v[<span class="number">1</span>];</span><br><span class="line">v[<span class="number">1</span>] = temp;</span><br><span class="line">(*num)++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> center = v.size() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v_left(v.begin(), v.begin() + center);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v_right(v.begin() + center, v.end());</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v_l = mergeSort(v_left, num);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v_r = mergeSort(v_right, num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> merge(v_l, v_r, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// vector&lt;int&gt; v1 = &#123;3, 1, 4, 5, 2&#125;;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1000</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意指针的初始化方法</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *p_num = &amp;num;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = mergeSort(v1, p_num);</span><br><span class="line">copy (v.begin(), v.end(), ostream_iterator&lt;<span class="keyword">int</span>&gt; (<span class="built_in">cout</span>, <span class="string">" "</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-4-5"><a href="#18-4-5" class="headerlink" title="18-4-5"></a>18-4-5</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个模板函数之前都需要声明</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">vector</span>&lt;T&gt; <span class="title">merge</span>(<span class="title">vector</span>&lt;T&gt; &amp;<span class="title">v1</span>, <span class="title">vector</span>&lt;T&gt; &amp;<span class="title">v2</span>) &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v = <span class="built_in">vector</span>&lt;T&gt;();</span><br><span class="line"><span class="comment">// 模板迭代器需要在前面加上typename</span></span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">vector</span>&lt;T&gt;::iterator i = v1.begin();</span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">vector</span>&lt;T&gt;::iterator j = v2.begin();</span><br><span class="line"><span class="keyword">while</span> (i != v1.end() &amp;&amp; j != v2.end()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*i &lt;= *j) &#123;</span><br><span class="line">v.push_back(*i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">v.push_back(*j);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == v1.end()) &#123;</span><br><span class="line"><span class="comment">// 在v.end()处插入v2从j到v2.end()处的值，闭区间</span></span><br><span class="line">v.insert(v.end(), j, v2.end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">v.insert(v.end(), i, v1.end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">vector</span>&lt;T&gt; <span class="title">mergeSort</span>(<span class="title">vector</span>&lt;T&gt; &amp;<span class="title">v</span>) &#123;</span></span><br><span class="line"><span class="keyword">if</span> (v.size() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v.size() == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[<span class="number">0</span>] &gt; v[<span class="number">1</span>]) &#123;</span><br><span class="line">T temp =  v[<span class="number">0</span>];</span><br><span class="line">v[<span class="number">0</span>] = v[<span class="number">1</span>];</span><br><span class="line">v[<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> center = v.size() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左闭右开区间</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v_left(v.begin(), v.begin() + center);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v_right(v.begin() + center, v.end());</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v_l = mergeSort(v_left);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v_r = mergeSort(v_right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> merge(v_l, v_r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = merge(v1, v2);</span><br><span class="line">copy (v.begin(), v.end(), ostream_iterator&lt;<span class="keyword">int</span>&gt; (<span class="built_in">cout</span>, <span class="string">" "</span>)); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3 = &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">72</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line">v = mergeSort(v3);</span><br><span class="line">    <span class="comment">// 记住这种打印容器的方式</span></span><br><span class="line">copy (v.begin(), v.end(), ostream_iterator&lt;<span class="keyword">int</span>&gt; (<span class="built_in">cout</span>, <span class="string">" "</span>)); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给定正整数n和m，</span></span><br><span class="line"><span class="comment">// 计算出n个元素的集合&#123;1,2,…,n &#125;可以划分为多少个不同的由m个非空子集构成的集合。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算类的递归问题，重点在于写递推公式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Striling</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( n == m || m == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; m || m &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m * Striling(n - <span class="number">1</span>, m) + Striling(n - <span class="number">1</span>, m - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Striling(<span class="number">3</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-4-4"><a href="#18-4-4" class="headerlink" title="18-4-4"></a>18-4-4</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阶乘和斐波拉契的递归解法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; factorial(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fibonacci(<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-4-3"><a href="#18-4-3" class="headerlink" title="18-4-3"></a>18-4-3</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给定长度为n的单调不下降数列𝑎0,⋯,𝑎(𝑛−1) 和一个数𝑘，求满足条件𝑎𝑖≥𝑘的最小值𝑖，不存在的情况下输出n。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于有序数据当然使用二分法，</span></span><br><span class="line"><span class="comment">// 因为求最小值，转换为求k大于的数的最大下标+1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minBiggerInSortedSequence</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = v.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 注意二分法结束条件的判断</span></span><br><span class="line"><span class="keyword">while</span> (left + <span class="number">1</span> != right) &#123;</span><br><span class="line"><span class="keyword">if</span> (k &gt; v[center]) &#123;</span><br><span class="line">left = center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">right = center;</span><br><span class="line">&#125;</span><br><span class="line">center = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 注意每轮结束out的赋值</span></span><br><span class="line">out = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; minBiggerInSortedSequence(v, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-4-2"><a href="#18-4-2" class="headerlink" title="18-4-2"></a>18-4-2</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给一个很长的数字串S：123456891011121314…，</span></span><br><span class="line"><span class="comment">// 它是由所有的自然数从小到大依次排列起来的。</span></span><br><span class="line"><span class="comment">// 任意给一个数字串S1(其长度不大于10)，求出S1在S中第一次出现的位置。</span></span><br><span class="line"><span class="comment">// 比如：输入101，输出为10。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// string::substr(i, n)表示从i开始的、长度为n的子串</span></span><br><span class="line"><span class="comment">// 将string转为int需要先通过string::c_str()将其转换为C语言字符串，再使用atoi()函数</span></span><br><span class="line"><span class="comment">// string::to_string()可以将数字类型的变量转为string</span></span><br><span class="line"><span class="comment">// 要注意返回值类型与定义类型相同，不能留下python后遗症</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FirstSubstrInNumstr</span><span class="params">(<span class="built_in">string</span> S1)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 按照匹配位数枚举</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= S1.length(); ++len) &#123;</span><br><span class="line"><span class="comment">// 按照前缀长度枚举</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> first_len = <span class="number">1</span>; first_len &lt;= len; ++first_len) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断前缀</span></span><br><span class="line"><span class="built_in">string</span> before = S1.substr(<span class="number">0</span>, first_len);</span><br><span class="line"><span class="built_in">string</span> after = S1.substr(first_len, len);</span><br><span class="line"><span class="keyword">int</span> n_before = atoi(before.c_str());</span><br><span class="line"><span class="keyword">int</span> n_after = atoi(after.c_str()) % <span class="keyword">int</span>(<span class="built_in">pow</span>(<span class="number">10</span>, first_len));</span><br><span class="line"><span class="keyword">int</span> out = atoi(after.c_str()) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((n_before + <span class="number">1</span>) % <span class="keyword">int</span>(<span class="built_in">pow</span>(<span class="number">10</span>, first_len)) != n_after) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断中部</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>, before = after; first_len + len * ( k + <span class="number">1</span>) - <span class="number">1</span> &lt; S1.length(); ++k, before = after) &#123;</span><br><span class="line">after = S1.substr(first_len + len * k, len);</span><br><span class="line">n_before = atoi(before.c_str());</span><br><span class="line">n_after = atoi(after.c_str());</span><br><span class="line"><span class="keyword">if</span> (n_before + <span class="number">1</span> != n_after) &#123;</span><br><span class="line">tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tag == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断后缀</span></span><br><span class="line">before = to_string(<span class="keyword">int</span>(atoi(after.c_str()) + <span class="number">1</span>));</span><br><span class="line">after = S1.substr(first_len + len * k);</span><br><span class="line"><span class="keyword">if</span> (before.substr(<span class="number">0</span>, after.length()) != after) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 均不匹配，返回S1对应的int</span></span><br><span class="line"><span class="keyword">return</span> atoi(S1.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"910111213"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; FirstSubstrInNumstr(s1) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-4-1"><a href="#18-4-1" class="headerlink" title="18-4-1"></a>18-4-1</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Narcissus数则特指一个n位数中各数字的n次幂之和等于自身的数。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力枚举的关键在于选定枚举的角度</span></span><br><span class="line"><span class="comment">// 对于等式而言，就是选择左边还右边，还可以通过移项减少复杂度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printNarcissus1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i * <span class="number">100</span> + j * <span class="number">10</span> + k == <span class="built_in">pow</span>(i, <span class="number">3</span>) + <span class="built_in">pow</span>(j, <span class="number">3</span>) + <span class="built_in">pow</span>(k, <span class="number">3</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i * <span class="number">100</span> + j * <span class="number">10</span> + k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printNarcissus2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">pow</span>(<span class="number">10</span>, n - <span class="number">1</span>); i &lt; <span class="built_in">pow</span>(<span class="number">10</span>, n); ++i)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">int</span> num = i;</span><br><span class="line"> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line"> &#123;</span><br><span class="line"> sum += <span class="built_in">pow</span>(num % <span class="number">10</span>, n);</span><br><span class="line"> num /= <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (sum == i)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printNarcissus1();</span><br><span class="line">printNarcissus2(<span class="number">4</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我国古代数学家张丘建在《算经》中出了一道题</span></span><br><span class="line"><span class="comment">// “鸡翁一，值钱五；鸡母一，值钱三；鸡雏三，值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？”，</span></span><br><span class="line"><span class="comment">// 现在假定各鸡种的价格不变，拥有的钱数为m，需要购买的鸡数为n，试求出所有可能的购买方案总数。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mMoneynChicken</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num_plan = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num_rooster = <span class="number">0</span>; num_rooster &lt;= m / <span class="number">5</span>; ++num_rooster)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num_hen = <span class="number">0</span>; num_hen &lt;= (m - <span class="number">5</span> * num_rooster) / <span class="number">3</span>; ++num_hen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> money_chick = <span class="number">0</span>; ; ++money_chick)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">5</span> * num_rooster + <span class="number">3</span> * num_hen + money_chick) &#123;</span><br><span class="line"><span class="keyword">if</span> (num_rooster + num_hen + money_chick * <span class="number">3</span> == n) &#123;</span><br><span class="line">num_plan += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num_plan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mMoneynChicken(<span class="number">10</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-3-31"><a href="#18-3-31" class="headerlink" title="18-3-31"></a>18-3-31</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//试求解输入数组的连续子序列和的最大值。如果所有的整数都是负数，那么最大连续子数列和为0。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三重循环</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSum1</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; a.size(); ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> thisSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; ++k) &#123;</span><br><span class="line">                thisSum += a[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</span><br><span class="line">                maxSum = thisSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二重循环</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSum2</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> thisSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; a.size(); ++j) &#123;</span><br><span class="line">            thisSum += a[j];</span><br><span class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</span><br><span class="line">                maxSum = thisSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一重循环，最优</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSum3</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxSum = <span class="number">0</span>, nowSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); ++i) &#123;</span><br><span class="line">        nowSum += a[i];</span><br><span class="line"><span class="comment">//      抛弃小于0的前缀</span></span><br><span class="line">        <span class="keyword">if</span> (nowSum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            nowSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nowSum &gt; maxSum) &#123;</span><br><span class="line">            maxSum = nowSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSumRec</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先讨论非递归情况</span></span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[left] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[left];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> maxLeftSum = maxSubSumRec(a, left, center);</span><br><span class="line">    <span class="keyword">int</span> maxRightSum = maxSubSumRec(a, center + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nowRightBorderSum = <span class="number">0</span>, maxRightBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 精髓在于认识到关键词不仅在于最大，还在于连续</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = center + <span class="number">1</span>; i &lt;= right; ++i) &#123;</span><br><span class="line">        nowRightBorderSum += a[i];</span><br><span class="line">        <span class="keyword">if</span> (nowRightBorderSum &gt; maxRightBorderSum) &#123;</span><br><span class="line">            maxRightBorderSum = nowRightBorderSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nowLeftBorderSum = <span class="number">0</span>, maxLeftBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = center; j &gt;= left; --j) &#123;</span><br><span class="line">        nowLeftBorderSum += a[j];</span><br><span class="line">        <span class="keyword">if</span> (nowLeftBorderSum &gt; maxLeftBorderSum) &#123;</span><br><span class="line">            maxLeftBorderSum = nowLeftBorderSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max(maxRightBorderSum + maxLeftBorderSum, max(maxLeftSum, maxRightSum));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a = &#123;<span class="number">-2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">-1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxSubSum1(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxSubSum2(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxSubSum3(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxSubSumRec(a, <span class="number">0</span>, a.size()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;18-4-27-30&quot;&gt;&lt;a href=&quot;#18-4-27-30&quot; class=&quot;headerlink&quot; title=&quot;18-4-27-30&quot;&gt;&lt;/a&gt;18-4-27-30&lt;/h1&gt;&lt;p&gt;数学建模&lt;/p&gt;
&lt;h1 id=&quot;18-4-21-26&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>日记18-4</title>
    <link href="http://wang22ti.com/2018/04/01/%E6%97%A5%E8%AE%B018-4/"/>
    <id>http://wang22ti.com/2018/04/01/日记18-4/</id>
    <published>2018-04-01T13:23:32.000Z</published>
    <updated>2018-05-01T09:35:13.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-4-30"><a href="#18-4-30" class="headerlink" title="18-4-30"></a>18-4-30</h1><p>疯狂操作了一波，建模校赛终于结束了。</p><p>回来睡到下午5点。。这真是极其罕见的了。</p><p>晚上装了Ubuntu18.04，毕竟16.04几乎要被我玩坏了。。</p><h1 id="18-4-29"><a href="#18-4-29" class="headerlink" title="18-4-29"></a>18-4-29</h1><p>建模。。敲定了方法，但是还需要更多的数据。</p><p>和浩珉完成了软件比赛设计组的立项书。</p><h1 id="18-4-28"><a href="#18-4-28" class="headerlink" title="18-4-28"></a>18-4-28</h1><p>上午终于完成了实验指导书</p><p>闪送，第一次体验，用外卖的方式在做快递，真心快。</p><p>下午第一次上瞿有利的课，真是位有趣的老师。</p><p>之后继续和子芃、文婷做数学建模。</p><p>其间统计了班级五一出行、领了党员手册、完善了基础版的LL(1)文法递归下降分析器</p><p>晚上给勤禹做了两道中考压轴题，老实说，难度真的下降了。</p><h1 id="18-4-27"><a href="#18-4-27" class="headerlink" title="18-4-27"></a>18-4-27</h1><p>上午又去了一趟联想售后。。</p><p>知春路那家停电了，于是又跑去中关村那家。</p><p>键盘要我花钱，贵，没现货，不包邮费。。</p><p>几乎找不到让我开心的地方了，除了去看一看ThinkPad。</p><p>下午和子芃在创客建模，初步确定了方法。</p><p>晚上和子芃、文婷继续讨论了建模的细节。</p><p>晚上学代会的监票人，最后还是争取了一下，</p><p>成为了学院的提名者。</p><p>回来疯狂写操作系统的实验指导书</p><h1 id="18-4-26"><a href="#18-4-26" class="headerlink" title="18-4-26"></a>18-4-26</h1><p>上午编译原理上机，基本写好了递归下降。</p><p>下午起来和奶奶打了一通电话，感觉不错哈哈。</p><p>继续写操作系统，嘿呀。</p><p>晚上软件比赛设计组开了个会，初步确定了方向。</p><p>但是键盘坏了几个键。。再也不敢用湿纸巾擦键盘了。。</p><h1 id="18-4-25"><a href="#18-4-25" class="headerlink" title="18-4-25"></a>18-4-25</h1><p>和嘉哥做了虚拟化的中期报告。</p><p>之后一起吃痴面，红烧牛肉面蛮不错的哈哈</p><p>回来做操作系统的线程，却怎么都看不到“应该的错误”。。</p><p>acm校赛三等奖，我们这一届的编程能力真堪忧。。</p><h1 id="18-4-24"><a href="#18-4-24" class="headerlink" title="18-4-24"></a>18-4-24</h1><p>这两天有些无所事事，</p><p>不能这样了！</p><p>更新了win10 1803，貌似没什么大变化。。</p><p>虽然之前公众号吹上天了。。</p><p>交了学代会代表的信息表以及班级选票汇总表，</p><p>自己汇总选自己的选票，意外外的。。</p><p>交了软件比赛的线上投票材料。</p><p>交了体系结构第3次上机的报告。</p><p>#18-4-23</p><p>嗯……写了操作系统的作业</p><p>晚上和小卫大哥聊了蛮长时间，</p><p>之后和浩珉去健身，</p><p>完了忽然起了兴致，一起去聚点吃烧烤哈哈</p><p>可能是半年以来最惬意的一晚上了。</p><h1 id="18-4-22"><a href="#18-4-22" class="headerlink" title="18-4-22"></a>18-4-22</h1><p>今天acm校赛啦！想想有点小激动，第一次参加，祝好运。</p><p>做出来4题，校内36名，不赚不赔吧，还需努力。</p><p>回来玩了好一会，晚上写了编译原理的实验报告。</p><h1 id="18-4-21"><a href="#18-4-21" class="headerlink" title="18-4-21"></a>18-4-21</h1><p>一早起来得知数学建模美赛获得了H奖，开心！</p><p>一开心就开心到了下午3点，</p><p>先看了嘉哥写的API，</p><p>之后就一直在准备板子了。</p><p>发现一个不错的网站<a href="http://classfoo.com/" target="_blank" rel="noopener">classfoo</a></p><h1 id="18-4-20"><a href="#18-4-20" class="headerlink" title="18-4-20"></a>18-4-20</h1><p>上午上完系统结构和萌主讨论了编译原理，</p><p>下午终于把生产者消费者进程同步搞定了！！开心！！</p><p>回来把数学建模以及软件设计比赛报了名，</p><p>晚上写了最近点问题，之后向优秀的郝静宇同学请教超时的两道题目。</p><p>获得大量经验！</p><h1 id="18-4-19"><a href="#18-4-19" class="headerlink" title="18-4-19"></a>18-4-19</h1><p>下午竟然睡到了4点多，几乎一天就过去了。。</p><p>之后和嘉哥、时清、翔哥讨论了云计算作业的细节。</p><p>晚上用MIPS指令写了冒泡排序，最后一分钟提交上去，刺激。</p><h1 id="18-4-18"><a href="#18-4-18" class="headerlink" title="18-4-18"></a>18-4-18</h1><p>上午和体系结构董老师申请了补做冒泡排序，一节课都在统计信息。</p><p>云计算课上进一步学习了ftplib包，这个包不错，但是可以进一步封装。</p><p>于是和嘉哥讨论了一下软件的架构，明天具体讨论一下接口。</p><p>晚上和浩珉健身，之后开了学习部的例会。</p><p>回来几乎没有学习，只是把操作系统实验第二题完成了。</p><h1 id="18-4-17"><a href="#18-4-17" class="headerlink" title="18-4-17"></a>18-4-17</h1><p>上午终于把软件工程作业交了。。</p><p>又优化了一点词法分析器。</p><p>一觉醒来得知创青春得了三等奖，美滋滋。</p><p>之后几乎一直都在写操作系统的实验，emmmm，说明文档写得太差了。</p><h1 id="18-4-16"><a href="#18-4-16" class="headerlink" title="18-4-16"></a>18-4-16</h1><p>一早起来交了朋辈辅导师的报名表，</p><p>之后疯狂操作操作系统作业。。</p><p>中午和子芃、文婷开了会，主要讨论协作方案。</p><p>下午一个半小时又写了2道校赛acm，考虑到没有签到题，可以认为速度有所提高。</p><p>但是晚上写了2道都超时了。。看来还需要基础算法的加强。。</p><h1 id="18-4-15"><a href="#18-4-15" class="headerlink" title="18-4-15"></a>18-4-15</h1><p>早上起来把Ubuntu的远程桌面搞定了，这下真的可以当做服务器来使了。</p><p>结果出门忘了再设置一下，GG</p><p>报名了朋辈辅导师。</p><p>下午去团支部评定的现场溜达一下，</p><p>其他就一直在做acm校赛的热身赛，</p><p>3三小时4道，前3道1小时，</p><p>第一次过oj，刺激。</p><p>和子芃、文婷组队参加数学建模校赛。</p><p>吃完饭把软工作业写了，</p><p>真是的，连题目都没讲清楚。。</p><p>临睡得知被学院提名为学代会委员了，填了份提名表。</p><h1 id="18-4-14"><a href="#18-4-14" class="headerlink" title="18-4-14"></a>18-4-14</h1><p>上午大概看了操作系统的实验，啊都要自学。</p><p>下午直到晚上反复打磨编译原理的词法分析程序，终于有了一个比较满意的程序，学到了不少</p><p>末了把学代会的名单报了上去。</p><h1 id="18-4-13"><a href="#18-4-13" class="headerlink" title="18-4-13"></a>18-4-13</h1><p>上午写了ftp的博文，搞定了中文路径出错的问题。</p><p>2点和袁锐去看五四奖章的答辩，伏地膜</p><p>之后的时间把编译第三章作业完成了，画图到恶心，不过还是有些收获。</p><p>#18-4-12</p><p>在徐老师的监督下，40分钟写了第一次实验，第一轮用C++根本完不成，用python还是搞定了</p><p>下午起来和任老师讨论了项目，还是要抓紧了。</p><p>之后和嘉哥、时清、翔哥讨论了云计算的作业，学了ftp的命令行和python调用。</p><p>晚上去看党支部组织的《厉害了，我的国》。</p><p>讲道理，几乎都是纪录片的剪辑，配音配乐并不出色。</p><p>但是南仁东老先生的生前最后一次采访，真是让人有一种撕心裂肺的的感动，国士无双。</p><p>回来和袁锐自习，处理一些杂项。</p><p>又没有写算法。。这不行</p><h1 id="18-4-11"><a href="#18-4-11" class="headerlink" title="18-4-11"></a>18-4-11</h1><p>上午上完两节课就去开学代会的布置会，</p><p>回来倒头就睡，醒来已经是3点45了。</p><p>班级出人填文件还是很困难，心态复杂，忽然感到阵阵孤独感。</p><p>晚上开了学生会的例会，做了编译原理第三章作业部分。</p><p>原来准备把最近点问题写好的，</p><p>但是里面涉及很多忘了的C++知识，明天再干吧。</p><h1 id="18-4-10"><a href="#18-4-10" class="headerlink" title="18-4-10"></a>18-4-10</h1><p>上午上完编译，20分钟把快速排序写好了，看来分治算法初步掌握了。</p><p>中午把团日活动案例和总结交了，班级的事情暂时告一段落了。</p><p>下午写了软件工程的作业，真是难受。。</p><p>晚上开了党支部的述职会议。</p><h1 id="18-4-9"><a href="#18-4-9" class="headerlink" title="18-4-9"></a>18-4-9</h1><p>中午去开了一个班长支书的临时会议，又多了点事情。。</p><p>姗哥做的推送蛮好哒，虽然她觉得排版有问题，但是最后还是有177和13的阅读量和赞呀！</p><p>下午写好了体系结构的作业！十分高质量的。</p><p>晚上彻底搞定了团日活动的案例和总结，</p><p>还有修改了英才奖的申请表。</p><p>看来周六去吃鱼肉火锅是正确的！</p><h1 id="18-4-8"><a href="#18-4-8" class="headerlink" title="18-4-8"></a>18-4-8</h1><p>翔哥一大早又去了医院，啊，上午困得要死。。课上睡着了。。</p><p>之后在1706班做党支部的述职。</p><p>下午睡醒后好多啦！一顿疯狂操作，搞定了支部等级评估、活动案例和活动总结，班级这波事情基本算是结束啦！</p><p>语音输入真是神器！</p><p>本来想把软件工程的作业写好的，然而实在恶心，于是把体系结构的作业写了一半，对MIPS有了初步的理解。</p><p>晚上给同学们分翔哥送我的草莓，蛮好吃的~</p><p>今天真的早睡啦，晚安。</p><p>但是又没有写算法！！！</p><h1 id="18-4-7"><a href="#18-4-7" class="headerlink" title="18-4-7"></a>18-4-7</h1><p>一早被翔哥喊醒，带他去校医院、北京大学附属人民医院、清华大学第二附属医院去看尿结石。。</p><p>匆匆赶到学校，吃了外卖就开班会</p><p>开完班会和大家一起去新中关看《头号玩家》，</p><p>虽然由于玩的游戏不多导致看不懂许多梗吧，但是CG特效真的特别棒！</p><p>本来因为感觉姗哥闷闷不乐留下来，</p><p>结果和袁锐去吃鱼肉火锅啊哈哈。</p><p>好久没有慢悠悠地涮火锅了啊。。</p><p>回来骑ofo，mmd，坏了4辆，骑上的巨沉，几乎可以当做健身了。。</p><p>没有写文件、没有写代码、没有操任何社团的心，</p><p>真是生活的一天啊。。</p><p>这样的日子，多一点好还是少一点好呢？</p><h1 id="18-4-6"><a href="#18-4-6" class="headerlink" title="18-4-6"></a>18-4-6</h1><p>写了个逆序对的题，</p><p>其他时间主要在做班会PPT。。</p><p>学习不能耽误了。</p><p>老妈喝醉了，但是肺腑之言却让我很感动。</p><h1 id="18-4-5"><a href="#18-4-5" class="headerlink" title="18-4-5"></a>18-4-5</h1><p>啊，吃晚饭之前都在玩，可以说是很悠闲了。</p><p>下午睡觉，很有精神，就写了归并排序，</p><p>重点重温了模板，C++水平已经超越巅峰值。</p><p>之后打羽毛球，好久没锻炼了。。</p><p>末了梳理了一下班级和党支部的事务。</p><h1 id="18-4-4"><a href="#18-4-4" class="headerlink" title="18-4-4"></a>18-4-4</h1><p>妈耶，大雪纷飞。</p><p>上了三节课，浑浑噩噩睡到3点，白天就过去了，不开心。</p><p>晚上处理了班级、党支部的一些事情，填好了英才奖的申请表。</p><p>时清给我的钱没及时给老妈，买了电影票又不够给大哥，于是从老妈那里空手套白狼一波，嘿嘿</p><p>之后玩了一会《守望先锋》</p><h1 id="18-4-3"><a href="#18-4-3" class="headerlink" title="18-4-3"></a>18-4-3</h1><p>下午开了班级负责人的会</p><p>团日活动、支部等级评定、团员评优、党员述职、看电影……</p><p>一大堆事情一下子铺开了。</p><p>大创估计就是校级了，有点忧伤，但没事！这算什么</p><p>晚上接到李老师关于英才奖的通知，希望好结果。</p><p>末了写了MIUI俱乐部的帖子。</p><h1 id="18-4-2"><a href="#18-4-2" class="headerlink" title="18-4-2"></a>18-4-2</h1><p>论文的进度变为预审了，清明把另一篇写好吧。</p><p>上午终于把时清手机的事情处理了，啊，貌似没听课，GG。</p><p>中午开班长支书会，关于支部评定。。</p><p>晚上开了党支部学习会，补了一些材料。。</p><p>其余的时间好不容易写了一题acm，主要好久没写C++啦</p><p>目前来看，主要任务包括课程作业、新论文、班级社团党支部事务、算法与创新竞赛。</p><h1 id="18-4-1"><a href="#18-4-1" class="headerlink" title="18-4-1"></a>18-4-1</h1><p>上午很无奈地回绝了徐老师的邀请。</p><p>下午似乎没有干啥就过去了。。操作系统作业2-5贼复杂。</p><p>晚上去听庆岩的算法讲座，发现高中算法竞赛的内容真是重要。</p><p>熬夜把操作系统作业2.5搞定了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;18-4-30&quot;&gt;&lt;a href=&quot;#18-4-30&quot; class=&quot;headerlink&quot; title=&quot;18-4-30&quot;&gt;&lt;/a&gt;18-4-30&lt;/h1&gt;&lt;p&gt;疯狂操作了一波，建模校赛终于结束了。&lt;/p&gt;
&lt;p&gt;回来睡到下午5点。。这真是极其罕见的了。&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》实验2-进程控制</title>
    <link href="http://wang22ti.com/2018/03/30/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C2-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://wang22ti.com/2018/03/30/《操作系统》实验2-进程控制/</id>
    <published>2018-03-30T03:04:08.000Z</published>
    <updated>2018-03-30T03:27:09.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><strong>打开一个vi进程。通过ps命令以及选择合适的参数，只显示名字为vi的进程。寻找vi进程的父进程，直到init进程为止。记录过程中所有进程的ID和父进程ID。将得到的进程树和由pstree命令的得到的进程树进行比较。</strong></p><p>解：pgrep 是通过程序的名字来查询进程的工具，一般是用来判断程序是否正在运行；xargs能够捕获一个命令的输出，然后传递给另外一个命令。通过两个命令的配合，完成了显示名字为vi的进程的输出，并通过ps命令一步一步找到父进程。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image1.png" alt="mage"></p><p>通过pstree命令得到以下的进程树：</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image2.png" alt="mage"> </p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image3.png" alt="mage"></p><p>比对两种方法获得的父进程，发现均为systemd→lightdm→upstart→gnome-terminal→bash→vi。其中，systemd是一组系统管理命令，取代了init命令成为系统的第一个进程；LightDM即Light Display Manager，是一个全新的、轻量的Linux桌面的桌面显示管理器；有趣的是，upstart是一种基于事件通知机制启动相应服务的init进程，即较早版本的Ubuntu的初始化进程为init→upstart；gnome-terminal为终端的管理进程；bash是其中一套shell规范（类似于Ubuntu和Linux的关系），而shell是一套linux接口。</p><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p><strong>编写程序，使用getpid、getppid系统调用，输出当前进程的ID以及父进程的ID。</strong></p><p>解：编写程序及其输入结果如下，不做赘述。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image4.png" alt="mage"></p><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><p><strong>编写程序，首先使用fork系统调用，创建子进程。在父进程中继续执行空循环操作；在子进程中调用exec编辑器。然后在另外一个终端中，通过ps –Al命令、ps aux命令，查看vi进程及其父进程的运行状态，理解每个参数所表达的意义。选择合适的命令参数，对所有进程按照cpu占用率排序。</strong></p><p>解：根据题目要求，编写程序如下，并使用命令ps -AL查看现有进程信息。查阅资料可知，</p><p>#F代表程序的旗标(flag)，4代表使用者为 superuser，1代表user；</p><p>#S代表这个程序的状态 (STAT)；</p><p>#UID代表执行者身份；</p><p>#PID代表进程的ID号</p><p>#PPID代表父进程的ID；</p><p>#C代表使用的CPU资源百分比；</p><p>#PRI代表进程的执行优先权(Priority的简写)，其值越小越早被执行；</p><p>#NI代表进程的nice值，其表示进程可被执行的优先级的修正数值；</p><p>#ADDR代表内核函数； </p><p>#SZ表示占用内存的大小；</p><p>#WCHAN表示这个程序是否正在运作当中，其中’ -’表示正在运作；</p><p>#TTY表示登入者的终端机位置；</p><p>#TIME表示使用掉的 CPU 时间；</p><p>#CMD 表示下达指令的名称；</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image5.png" alt="mage"></p><p>在右下角的中找到vi进程及其状态：</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image6.png" alt="mage"></p><p>使用命令ps aux查看内存中运行的程序，查阅资料可知：</p><p>• USER：该进程属于的使用者账号；</p><p>• PID：该进程的进程ID号；</p><p>• CPU：该进程使用掉的CPU资源百分比；</p><p>• MEM：该进程所占用的物理内存百分比；</p><p>• VSZ：该进程使用掉的虚拟内存量 (Kbytes)</p><p>• RSS ：该进程占用的固定的内存量 (Kbytes)</p><p>• TTY ：该进程是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</p><p>• STAT：该程序目前的状态，主要的状态有：</p><p>   R ：该程序目前正在运作，或者是可被运作；</p><p>   S ：该程序目前正在睡眠当中；</p><p>   T ：该程序目前正在侦测或者是停止了；</p><p>   Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie(疆尸) 程序的状态；</p><p>• START：该进程被触发启动的时间；</p><p>• TIME ：该进程实际使用 CPU 运作的时间。</p><p>• COMMAND：该进程所属的指令</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image7.png" alt="mage"></p><p>​       使用top命令将所有进程按照cpu占有率排名，可见死循环程序fork_exec已经几乎完全占有了CPU：</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image8.png" alt="mage"></p><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p><strong>使用fork系统调用，创建如下进程树，并使每个进程输出自己的ID和父进程的ID。观察进程的执行顺序。</strong></p><p>解：根据题目要求编写程序，多次运行得到如下输出。可以看出P1为P2和P3的父进程，P2位P4和P5的父进程，与实验要求的进程树相同。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image9.png" alt="mage"></p><h1 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h1><p><strong>修改上述进程树中的进程，使得所有进程都循环输出自己的ID和父进程的ID。然后终止p2进程(kill或者自动退出)，观察p1、p3、p4、p5进程的运行状态和其他相关参数有何改变。</strong></p><p>解：由于需要循环输出自己的ID和父进程的ID，所以程序逻辑发生变化，重新编写程序并运行如下。5个程序并发执行，前后并无固定的顺序，但是进程ID及其父进程ID始终满足题目进程树的要求。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image10.png" alt="mage1"></p><p>​       修改程序如下，P2只循环输出3次。观察到从第4轮输出开始除了P2没有继续输出外，其他进程仍然满足题目要求的进程树。这和我预计的结果并不一样，所以猜测可能进程P2并没有结束。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image11.png" alt="mage1"></p><p>​       进一步修改程序如下，P2在3次输出之后执行return语句，惊奇地发现P2的子进程P4和P5的父进程均变为了1537！可见此前的程序并没有结束进程P2。使用ps命令，发现该进程名为upstart，它负责收养孤儿进程，其父进程就是ubuntu图形化界面的进程lightdm。这意味着在文本界面下，一切都和upstart无关了。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image12.png" alt="mage1"></p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image13.png" alt="mage1"></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] linux pgrep命令的使用 </p><p><a href="https://blog.csdn.net/edman_linux/article/details/78722021" target="_blank" rel="noopener">https://blog.csdn.net/edman_linux/article/details/78722021</a></p><p>[2] Linux xargs命令小结</p><p><a href="https://blog.csdn.net/wh_19910525/article/details/8494444" target="_blank" rel="noopener">https://blog.csdn.net/wh_19910525/article/details/8494444</a></p><p>[3] Systemd 入门教程：命令篇</p><p><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html</a></p><p>[4] 百度百科：LightDM</p><p><a href="https://baike.baidu.com/item/LightDM/9557430?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/LightDM/9557430?fr=aladdin</a></p><p>[5] linux第一个用户进程init—upstart</p><p><a href="https://blog.csdn.net/itsenlin/article/details/42329851" target="_blank" rel="noopener">https://blog.csdn.net/itsenlin/article/details/42329851</a></p><p>[6] 知乎：想了解一下ubuntu下的终端，shell，bash是什么以及区别？</p><p><a href="https://www.zhihu.com/question/40448945" target="_blank" rel="noopener">https://www.zhihu.com/question/40448945</a></p><p>[7] Linux ps命令详解与示例说明</p><p><a href="https://blog.csdn.net/lsbhjshyn/article/details/18549869" target="_blank" rel="noopener">https://blog.csdn.net/lsbhjshyn/article/details/18549869</a></p><p>[8] Ubuntu15.04 删除/sbin/upstart与孤儿进程收养的问题</p><p><a href="https://www.cnblogs.com/chilumanxi/p/5136102.html" target="_blank" rel="noopener">https://www.cnblogs.com/chilumanxi/p/5136102.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;打开一个vi进程。通过ps命令以及选择合适的参数，只显示名字为vi的进程。寻找vi进程的父进程，直到init进程为止。记录过程中所有
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《计算机体系结构》实验1-计算机性能测试</title>
    <link href="http://wang22ti.com/2018/03/29/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://wang22ti.com/2018/03/29/《计算机体系结构》实验1-计算机性能测试/</id>
    <published>2018-03-28T17:04:40.000Z</published>
    <updated>2018-03-30T03:28:01.493Z</updated>
    
    <content type="html"><![CDATA[<p>#背景介绍</p><p>本次实验中，我共计采用5种方式（4个成熟的测试软件和1个自己写的小程序）对3台计算机（期间对联想小新V4000进行固态的改装升级）进行了全方位的测试，具体方案如下表所示：</p><table><thead><tr><th></th><th><strong>MIIX 5Pro</strong></th><th><strong>小新V4000</strong>  <strong>（改装固态）</strong></th><th><strong>小新V4000</strong>  <strong>（未改装）</strong></th><th><strong>方正</strong>  <strong>Wenxiang E620</strong></th></tr></thead><tbody><tr><td><strong>鲁大师</strong></td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td><strong>CrystalDisk</strong></td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td><strong>CPU-Z</strong></td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td><strong>Performance Test 9</strong></td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td><strong>My benchmark</strong></td><td>√</td><td>√</td><td>×</td><td>×</td></tr></tbody></table><p>​        此外，根据鲁大师、CPU-Z的检测结果，3台计算机主要的软硬件配置如下表所示：</p><p> <img src="/2018/03/29/《计算机体系结构》实验1-计算机性能测试/1.png" alt="1"></p><p>#测试过程与结果分析</p><p>##鲁大师磁盘测试</p><p>鲁大师磁盘检测的健康程度取决于访问该存储单元的响应时间。小于三毫秒为优秀，小于12毫秒为良好，是小于20毫秒为正常，小于120毫秒为瑕疵，小于600毫秒为丢失，大于600毫秒为严重，无法读取为损坏。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">优良</th><th style="text-align:center">良好</th><th style="text-align:center">正常</th><th style="text-align:center">瑕疵</th><th style="text-align:center">丢失</th></tr></thead><tbody><tr><td style="text-align:center">方正</td><td style="text-align:center"><strong>1779866</strong></td><td style="text-align:center"><strong>69891</strong></td><td style="text-align:center"><strong>20114</strong></td><td style="text-align:center"><strong>12976</strong></td><td style="text-align:center"><strong>712</strong></td></tr><tr><td style="text-align:center">小新_旧</td><td style="text-align:center"><strong>2185385</strong></td><td style="text-align:center"><strong>275919</strong></td><td style="text-align:center"><strong>11963</strong></td><td style="text-align:center"><strong>37386</strong></td><td style="text-align:center"><strong>1750</strong></td></tr><tr><td style="text-align:center">小新_新</td><td style="text-align:center"><strong>951431</strong></td><td style="text-align:center"><strong>9</strong></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>0</strong></td></tr><tr><td style="text-align:center">MIIX</td><td style="text-align:center"><strong>1953524</strong></td><td style="text-align:center"><strong>6</strong></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>0</strong></td></tr></tbody></table><p>从上表的测试结果可以看出，在经过一段时间的使用后，机械硬盘具有明显的损耗，小部分存储单元延迟较长；而固态硬盘，具有良好的稳定性，在一段时间的使用之后仍然保持优良的健康状态。</p><p>##鲁大师性能测试</p><p>鲁大师的计算机性能测试，包括处理器、显卡、内存和硬盘。总分是根据各个属性加权求和得到。</p><table><thead><tr><th></th><th>总分</th><th>处理器</th><th>显卡</th><th>内存</th><th>硬盘</th></tr></thead><tbody><tr><td>方正</td><td><strong>58240</strong></td><td><strong>46696</strong></td><td><strong>3651</strong></td><td><strong>6963</strong></td><td><strong>930</strong></td></tr><tr><td>小新_旧</td><td><strong>70953</strong></td><td><strong>32486</strong></td><td><strong>28744</strong></td><td><strong>8223</strong></td><td><strong>1500</strong></td></tr><tr><td>小新_新</td><td><strong>96665</strong></td><td><strong>32728</strong></td><td><strong>26217</strong></td><td><strong>8223</strong></td><td><strong>10860</strong></td></tr><tr><td>MIIX</td><td><strong>126353</strong></td><td><strong>39076</strong></td><td><strong>11722</strong></td><td><strong>9006</strong></td><td><strong>42960</strong></td></tr></tbody></table><p>通过分析上表数据，可以得到一些结论：</p><p>越新的计算机测试总分越高，这符合计算机发展的常识与我日常使用的体验；</p><p>近几代英特尔处理器升级幅度并不是很大；</p><p>得益于较大的功率，桌面级处理器相较于笔记本级处理器具有较大优势；</p><p>独立显卡具有碾压于核心显卡的处理能力，不过近几年核心显卡有了较大的发展；</p><p>近几年内存升级幅度并不是很大；</p><p>固态硬盘具有碾压机械硬盘的传输速度。</p><p>##CrystalDisk</p><p>​      CrystalDisk测试主要包括硬盘的顺序读写、4k读写，其中比较容易理解的顺序读写结果如下：</p><table><thead><tr><th></th><th><strong>Read(MB/s)</strong></th><th><strong>Write(MB/s)</strong></th></tr></thead><tbody><tr><td>小新_新</td><td><strong>561.9</strong></td><td><strong>305.5</strong></td></tr><tr><td>MIIX</td><td><strong>2041.2</strong></td><td><strong>1588.4</strong></td></tr></tbody></table><p>可以看出，固态硬盘之间也有较大差距。查阅相关资料可知，这主要取决于固态硬盘的闪存颗粒、主控芯片以及接口规格。不过从实际体验来看，SATA3固态硬盘的500MB/s读取速度与300MB/s写入速度已经满足了日常的基本需求，实际体验没有太大的差别。</p><p>##CPU-Z</p><p>​        CPU-Z测试主要包括处理器的单核性能和多核性能。</p><table><thead><tr><th></th><th><strong>单核</strong></th><th><strong>多核</strong></th></tr></thead><tbody><tr><td><strong>小新_新</strong></td><td><strong>322.7</strong></td><td><strong>895.3</strong></td></tr><tr><td><strong>MIIX</strong></td><td><strong>344.2</strong></td><td><strong>1002.7</strong></td></tr></tbody></table><p>从上表可知，虽然代数相差两代，但是i7 7500U相较于i7 5500U并没有显著的提升。两款CPU的功耗、工艺、核心数量、线程数量制成完全相同，区别主要在于架构和主频。单从处理性能来看，英特尔牙膏厂的称号名副其实，可见垄断并不利于技术的进步。</p><p>##Performance Test 9</p><p>​        PerformanceTest 9测试内容主要包括CPU、2d图形、3d图形、内存和磁盘。这些属性和鲁大师的相似，2d图形和3d图形相比更看重CPU的处理能力。</p><table><thead><tr><th></th><th><strong>PassMark</strong></th><th><strong>CPU</strong></th><th><strong>2D图形</strong></th><th><strong>3D图形</strong></th><th><strong>内存</strong></th><th><strong>磁盘</strong></th></tr></thead><tbody><tr><td><strong>小新_新</strong></td><td><strong>2214.3</strong></td><td><strong>4284.8</strong></td><td><strong>617.2</strong></td><td><strong>550.9</strong></td><td><strong>1720.1</strong></td><td><strong>5443.1</strong></td></tr><tr><td><strong>MIIX</strong></td><td><strong>2186.2</strong></td><td><strong>5534.9</strong></td><td><strong>460.3</strong></td><td><strong>453.0</strong></td><td><strong>2341.8</strong></td><td><strong>19460.6</strong></td></tr></tbody></table><p>令人意外的是，上表显示比较老旧的联想小新获得了更高的总分，这一方面可能是因为硬盘在该项测试中所占权重较小，另一方面可能是因为联想小新具有更大的机身体积，故而具有较好的散热。由此可见，计算机性能测试的标准并不唯一，每一项属性所占的权重因人而异；同时，计算机的性能参数并不是决定计算机最终实际使用性能的唯一指标。</p><p>##My benchmark</p><p>​      除了使用上述的成熟软件，我还编写了以下的python3.5程序，以测试不同电脑的性能。</p><p>​        每次测试要按不同次数执行三个操作。其中，第一个操作是整数0到1000万的累加，主要考察CPU的整数加法计算能力；第二个操作是1到1万的阶乘，主要考察CPU的整数乘法计算能力；第三个操作是，对17MB纯文本文件的读写，文本内容为所有维基百科的词条，主要考察计算机的IO读写速度。四次测试中，三种操作的频数之比分别为10:10:10，28:1:1，1:28:1，1:1:28。</p><table><thead><tr><th></th><th>T1(s)</th><th>T2(s)</th><th>T3(s)</th><th>Ttotal(s)</th></tr></thead><tbody><tr><td>小新V4000</td><td></td><td></td><td></td><td></td></tr><tr><td>[10,  10, 10]</td><td>11.19</td><td>1.33</td><td>22.34</td><td>34.87</td></tr><tr><td>[28,  1, 1]</td><td>31.30</td><td>0.13</td><td>2.23</td><td>33.67</td></tr><tr><td>[1,  28, 1]</td><td>1.15</td><td>3.70</td><td>2.26</td><td>7.11</td></tr><tr><td>[1,  1, 28]</td><td>1.11</td><td>0.13</td><td>62.62</td><td>63.87</td></tr><tr><td>MIIX  5pro</td><td></td><td></td><td></td><td></td></tr><tr><td>[10,  10, 10]</td><td>10.37</td><td>1.12</td><td>6.84</td><td>28.33</td></tr><tr><td>[28,  1, 1]</td><td>28.7</td><td>0.11</td><td>1.68</td><td>30.56</td></tr><tr><td>[1,  28, 1]</td><td>1.01</td><td>3.08</td><td>1.68</td><td>5.77</td></tr><tr><td>[1,  1, 28]</td><td>1.06</td><td>0.11</td><td>47.3</td><td>48.5</td></tr></tbody></table><p>测试的结果比较符合预期，即两者在CPU的处理能力上相差不大，而MIIX在磁盘读写的能力上有明显的优势。此外，本实验中操作三在总时长中占比较大，真实应用场景中，应该对相应的操作进行优化，从而有效的提高全局加速比。</p><h1 id="购机建议"><a href="#购机建议" class="headerlink" title="购机建议"></a>购机建议</h1><p>根据上述实验结论，提出以下的购机建议：</p><p>受制于笔记本功耗与工艺制成的阻碍，低压版处理器实际性能相距不大，散热成为实际性能的瓶颈。</p><p>独立显卡具有碾压核心显卡的处理能力，有游戏、大型图像处理以及机器学习需求的用户需要购买较为高端的显卡。</p><p>硬盘的读写速度是制约当前计算机实际使用体验的重要瓶颈。在预算充足的情况下，尽量购买带有固态硬盘的计算机。</p><p>由于软件的更新升级，内存容量的大小建议8G起步。</p><p>计算机的实际使用体验不仅取决于各项性能参数，还取决于显示器键盘触控板等外设的质量、配备接口的数量与质量、实际做工以及硬件之间的配合程度，不能陷入单纯比较参数的陷阱当中，一切以实际的使用体验为准。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次实验中，我首先使用四种成熟的测试软件对个人的两台计算机和机房的计算机进行性能测试，然后又自己编写python程序测试个人的两台计算机性能，得到了一系列实验数据，并分析得到相关实验结论。</p><p>通过本次实验，我从总体上了解了计算机测试的各项指标，验证了课堂上所学的相关知识与课下了解的近几年计算机发展状况，同时对个人的计算机状况有了较为深入的理解，这些必将有利于我进一步的学习与实践。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#背景介绍&lt;/p&gt;
&lt;p&gt;本次实验中，我共计采用5种方式（4个成熟的测试软件和1个自己写的小程序）对3台计算机（期间对联想小新V4000进行固态的改装升级）进行了全方位的测试，具体方案如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小团队管理概论</title>
    <link href="http://wang22ti.com/2018/03/26/%E5%B0%8F%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E6%A6%82%E8%AE%BA/"/>
    <id>http://wang22ti.com/2018/03/26/小团队管理概论/</id>
    <published>2018-03-26T15:37:51.000Z</published>
    <updated>2018-03-26T15:37:51.135Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小团队协作概论</title>
    <link href="http://wang22ti.com/2018/03/26/%E5%B0%8F%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E6%A6%82%E8%AE%BA/"/>
    <id>http://wang22ti.com/2018/03/26/小团队协作概论/</id>
    <published>2018-03-26T15:37:43.000Z</published>
    <updated>2018-03-26T15:37:43.917Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>联想小新V4000安装固态硬盘</title>
    <link href="http://wang22ti.com/2018/03/26/%E8%81%94%E6%83%B3%E5%B0%8F%E6%96%B0V4000%E5%AE%89%E8%A3%85%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/"/>
    <id>http://wang22ti.com/2018/03/26/联想小新V4000安装固态硬盘/</id>
    <published>2018-03-26T15:37:17.000Z</published>
    <updated>2018-03-30T15:30:43.566Z</updated>
    
    <content type="html"><![CDATA[<p>计算机体系结构第一次上机做性能检测，好吧惊讶地发现小新V4000的硬盘已经老化了不少，考虑到非优秀良好的单元虽然数量占比并不是很高但是响应时间占比却吓人，于是就考虑换一下硬盘。<img src="/2018/03/26/联想小新V4000安装固态硬盘/磁盘检测.PNG" alt=""></p><p>原来是想换联想原装的，然而悲哀的发现同等容量（200多G）同等接口（SATA3）下三星的反而更快（500对300）更便宜（可能刚好赶上秒杀？），于是就入了<a href="https://item.jd.com/6287165.html" target="_blank" rel="noopener">三星(SAMSUNG) 860 EVO 250G SATA3 固态硬盘（MZ-76E250B）</a>。</p><p>由于此前没有拆机的经历啦（愧为计算机人），所以请南门的小哥帮忙装一下（顺便观察一波）。</p><p>最后把固态安装在主硬盘，原来的机械扔在光驱上。然而小新V4000的光驱位很草率，就是一个塑料壳，根本没考虑拓展，于是又从小哥那里买了一个支架。</p><p>回来后就很愉快啦，装了Win10，发现STAT3接口的速度已经足够使用，完全不是瓶颈了。</p><p><img src="/2018/03/26/联想小新V4000安装固态硬盘/硬盘测试.png" alt=""></p><p>不过原装的希捷硬盘貌似应为工作电流较大的原因，经常掉盘。。大概只能买一个盒子当移动硬盘了。</p><p>参考资料主要有：<a href="https://club.lenovo.com.cn/thread-1881162-1-1.html" target="_blank" rel="noopener">完美解决联想小新V4000光驱位无法识别硬盘+加固态最简单教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机体系结构第一次上机做性能检测，好吧惊讶地发现小新V4000的硬盘已经老化了不少，考虑到非优秀良好的单元虽然数量占比并不是很高但是响应时间占比却吓人，于是就考虑换一下硬盘。&lt;img src=&quot;/2018/03/26/联想小新V4000安装固态硬盘/磁盘检测.PNG&quot; a
      
    
    </summary>
    
    
  </entry>
  
</feed>
