<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王子泰</title>
  
  <subtitle>哭也欢乐，悲也潇洒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wang22ti.com/"/>
  <updated>2018-05-12T03:32:57.207Z</updated>
  <id>http://wang22ti.com/</id>
  
  <author>
    <name>wang22ti</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>朝花夕拾——遗传算法入门</title>
    <link href="http://wang22ti.com/2018/05/12/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>http://wang22ti.com/2018/05/12/朝花夕拾——遗传算法入门/</id>
    <published>2018-05-12T02:06:17.000Z</published>
    <updated>2018-05-12T03:32:57.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>遗传算法（Genetic  Algorithm）是受生物净化学说和遗传学说的启发发展起来的，生物在进化的过程中不断繁殖、生存竞争、适者生存、遗传和变异。可以如下类比：</p><p>生物的遗传类比为算法中的分离规律、自由规律</p><p>生物的变异类比为算法中的基因重组、基因突变、染色体变异 </p><h2 id="研究对象"><a href="#研究对象" class="headerlink" title="研究对象"></a>研究对象</h2><p>各种功能非线性、多变量、多目标、复杂的自适应体用问题</p><p>##基本特征</p><ul><li>智能式搜索：依据适应度（目标函数）进行智能搜索</li><li>渐进式优化：利用复制、交换、突变等操作，使得下一代结果有优于上一代的趋势</li><li>全局最优解：采用交换和突变操作产生新个体，使得搜索得到的优化结果逼近全局最优解</li><li>黑箱式结构：根据问题的特征进行编码（输入）和确定适应度（输出），只考虑输入输出关系，并不深究该关系的原因</li><li>通用性强：不要求明确的数学表达式，只需要一些简单的原则要求，可以应用于解决离散问题、函数关系不明确的复杂问题。</li><li><p>并行式运算：每次迭代计算都是对群体中的所有个体同时进行运算，搜索速度快</p><p>##应用举例</p></li><li><p>求解Michalewicz Function </p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/clip_image001.png" alt=""></p></li><li><p>建筑学桁架结构优化问题</p><p>##发展简史</p></li><li><p>萌芽期：50年代后期到70年代中期</p></li><li>成长期：70年代中期到80年代末期</li><li>发展期：90年代</li></ul><h2 id="遗传算法和遗传规划特别有效的领域"><a href="#遗传算法和遗传规划特别有效的领域" class="headerlink" title="遗传算法和遗传规划特别有效的领域"></a>遗传算法和遗传规划特别有效的领域</h2><ul><li>结构优化设计</li><li>人工智能</li><li>复杂问题优化</li><li>复杂系统分析</li><li>综合应用</li></ul><h2 id="遗传算法和遗传规划自身需要完善的环节"><a href="#遗传算法和遗传规划自身需要完善的环节" class="headerlink" title="遗传算法和遗传规划自身需要完善的环节"></a>遗传算法和遗传规划自身需要完善的环节</h2><ul><li>编码技术和程序表达技术的改进</li><li>复制、交换、突变等遗传操作的改进</li><li>适应度的表达和计算的改进</li><li>寻求其他有效遗传算子，防止近源杂交、过早收敛</li><li>进一步讨论遗传算法和遗传规划的机理</li><li>开发遗传算法和遗传规划的商业软件</li></ul><h1 id="基本运算过程"><a href="#基本运算过程" class="headerlink" title="基本运算过程"></a>基本运算过程</h1><p>##基本流程</p><ol><li>编码，随机产生初始群体</li><li>个体评价（适应度验算）、选择、确定是否输出</li><li>随机交叉运算</li><li>随机变异运算</li><li>选择、复制、按照适应度大小排序</li><li>转向个体评价，开始新循环</li></ol><p>##编码</p><p>遗传算法的工作对象是字符串，对字符串的编码要求：</p><ul><li>字符串要反映所研究问题的性质</li><li>字符串的表达要便于计算机处理</li></ul><p>##适应度</p><p>在遗传算法中衡量个体优劣的尺度就是适应度，根据适应度的大小决定个体繁殖的数量或者决定其是否消亡，适应度是驱动遗传算法的动力。</p><p>##复制</p><p>复制算子将优良个体在下一代予以繁殖，体现了“适者生存”的自然选择原则，个体被复制的数量是按照适应度的大小决定的，适应度大的复制得多，适应度小的复制的少，群体中个体总数保持不变。复制方式有：</p><ul><li>等差方式：收敛较快，常用于初选</li><li>轮盘方式：选择复制对象，直到满足所需要的个体数目，以防止过早的收敛，常用于精选，示意如下</li></ul><table><thead><tr><th>个体序号i</th><th>1 2 3 4  5 6 7 8 9 10</th></tr></thead><tbody><tr><td>适应度xi</td><td>8 2 17  7 2 12 11 7 3 7</td></tr><tr><td>适应度累计值Si</td><td>8 10 27  34 36 48 59 66 69 76</td></tr><tr><td>随机数R[0,Sn]</td><td>23 49  76 13 1 27 57</td></tr><tr><td>被选中的个体号i</td><td>3 7 10  3 1 3 7</td></tr></tbody></table><p>##交换</p><p>交换是遗传算法中产生新个体的主要手段，将两个个体的部分字符互相交换。</p><ul><li>执行交换的个体是随机选择的</li><li>交换的概率一般为50%到80%（通用值，可以根据需求改变）</li><li>通过某种方式，先选择交换个体，再选择被交换个体，同时判断不要自交、多交</li></ul><p>##变异</p><p>变异是遗传算法中产生新个体的另一种方法，借鉴了生物学中的突变现象，将被选择的个体的部分字符进行补运算。</p><ul><li>变异对象的选择是随机的</li><li>变异的位数是随机的</li><li>变异起始位数是随机的</li><li>变异的概率可以根据需求改变</li></ul><p>##终止条件</p><p>遗传算法是一种反复迭代的搜索算法，他通过多次进化逐渐逼近最优解。</p><ul><li>最常见的终止条件是迭代次数</li><li>当目标函数有最优目标值时，可采用控制偏差的方式实现终止</li><li>第三种终止方式是检查适应度的变化程度</li></ul><h2 id="模式理论"><a href="#模式理论" class="headerlink" title="模式理论"></a>模式理论</h2><p>详情参考<a href="http://wenku.baidu.com/link?url=0qGrc-t4903O4VtCCO93D853treODmX1fmsG1CndGYA7U44K0n-vD4srVptqjVgnGbG_85Cev79UG1_QwYrve7XjSfUwh71xeQkLtBNyuoC" target="_blank" rel="noopener">百度文库</a></p><h1 id="算子及参数技术"><a href="#算子及参数技术" class="headerlink" title="算子及参数技术"></a>算子及参数技术</h1><p>##遗传算子（GeneticOperators）</p><ul><li>选择算子（Selection     Operator）</li><li>交叉算子（Crossover     Operator）</li><li>复制算子（reproduction     Operator）</li><li>变异算子（Mutation     Operator）</li><li>重排序算子（Reordering     Operator）</li><li>倒序算子（Inversion     Operator）</li><li>生态算子（Niche     Operator）</li><li>显性算子（Dominance     Operator）</li></ul><h2 id="参数技术"><a href="#参数技术" class="headerlink" title="参数技术"></a>参数技术</h2><ul><li>编码（Coding）&amp;解码（Decoding）</li><li>适应度函数（Fitness     Function）&amp;评估（Evaluation）</li><li>选择（Selection）&amp;复制（Reproduction）</li><li>交换（Crossover）</li><li>变异（Mutation）</li><li>其他算子（操作）</li></ul><p>##编码&amp;解码</p><p>###编码原则</p><p>原则一：有意义积木块编码原则</p><p>   应使用能易于产生与所求问题相关的、且具有低阶、短定义长度模式的编码方案。</p><p>原则二：最小字符集编码原则</p><p>   应使用能使问题得到自然表示或描述的具有最小编码字符集的编码方案。</p><p>###编码方法</p><p>编码在各个阶段也是可以变的。</p><p><strong>【十进制码（Decimal Code）】</strong></p><ul><li>直接用十进制数编码，使用较少。</li><li>优点：无需解码</li><li>缺点：突变的可能性太多，有9种（变异是9种补运算，即1可以变成2—9和0；个体选择是随机的，个体的起始位是随机的，个体变异的位数是随机的，变异成什么东西，补运算后是什么东西是随机的等四种随机性，而二进制编码只有三种随机性）；交换较粗略（交换变化很大，初选时可以用，但是交换很多次后就不可以用），在多次循环后收敛太慢。【适用于变量多，数字大，初选阶段】</li></ul><p><strong>【二进制码（Binary Code）】</strong></p><ul><li>缺点：需要解码，增大了运算量。</li><li>优点：突变时取反即可，唯一确定；交换时可精确变化，在多代循环后收敛速度较快。｛在突变的时候唯一确定（补运算），交换比十进制是最精确的，多代循环后收敛速度快。用在变量少，精选阶段，但是解码需要大量运算。｝</li></ul><ul><li>由于符号位和小数点位的存在，使用由十进制转化而来的直接二进制码，在交换和变异的环节中容易出现问题，故使用间接二进制码，每一个二进制码均为正整数。间接码的位数公式：</li></ul><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/image003 (1" alt="">.png)</p><p>​    其中d为问题的解的精确度，定义域为[Umin, Umax]，则码的位数为m+1。</p><p>​    间接码的解码公式：</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/image003 (2" alt="">.png)</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/image003 (3" alt="">.png)</p><p><strong>【格雷码（Gray Code）】</strong></p><ul><li>增强遗传算法的局部搜索能力，便于对连续函数进行局部空间搜索。使用非常广泛。解码时，先将格雷码转化成二进制码，再将二进制码转化为十进制真实数；或直接将格雷码转化为十进制真实数。</li></ul><ul><li>二进制码转换为格雷码</li></ul><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/image003 (4" alt="">.png)</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/image003 (5" alt="">.png)</p><ul><li>格雷码转换为二进制码</li></ul><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/image003 (6" alt="">.png)</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/image003 (7" alt="">.png)</p><p><strong>【浮点数编码（Floating-point Code）】</strong></p><p><strong>【符号编码（CharacterCode）】</strong></p><p>个体染色体编码串中的基因值取自一个无数值含义、而只有代码含义的符号集。常用于桥梁、机器人等的设计。</p><p><strong>【多参数级联编码（United Multiparameter Encoding）】</strong></p><p>将各个参数分别编码，然后将它们按照一定的顺序连接在一起的编码方法。</p><p><strong>【多参数交叉编码（Multiparameter Crossover Code）】</strong></p><p>将各个参量分别编码，然后将它们起主要作用的码集中在一起，并按一定的顺序连接的编码方法，防止操作的时候集中于某一个变量。【比如相同的位数放到一起】</p><h1 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h1><p>一下实现了利用遗传算法求解函数<br>$$<br>f(x) = x(4-x)<br>$$<br>的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Getmaximum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> codingBit;</span><br><span class="line"><span class="keyword">private</span> String[] sample;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfSample;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfReproduction;<span class="comment">//每轮交换中交换对数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfLocation;<span class="comment">//每对交换中交换的位数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberofMutation;<span class="comment">//每轮变异种变异个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfDelete;<span class="comment">//每轮评估中淘汰的个数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> HashMap&lt;Integer, String&gt; CodingDictionary1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> HashMap&lt;String, Integer&gt; CodingDictionary2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*(<span class="number">4</span>-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBinaryString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String string = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; codingBit; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">string = <span class="string">'1'</span> + string;</span><br><span class="line">i /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">string = <span class="string">'0'</span> + string;</span><br><span class="line">i /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateDictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.pow(<span class="number">2</span>, codingBit); i++) &#123;</span><br><span class="line">CodingDictionary1.put(i, getBinaryString(i));</span><br><span class="line">CodingDictionary2.put(getBinaryString(i), i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateFirstGeneration</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">sample = <span class="keyword">new</span> String[numberOfSample];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length; i++) &#123;</span><br><span class="line">sample[i] = CodingDictionary1.get( (<span class="keyword">int</span>) (Math.random()*CodingDictionary1.size()) );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reproduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfReproduction; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>) (Math.random() * sample.length);</span><br><span class="line"><span class="keyword">int</span> n = (<span class="keyword">int</span>) (Math.random() * sample.length);</span><br><span class="line"><span class="keyword">char</span>[] m_s = sample[m].toCharArray();</span><br><span class="line"><span class="keyword">char</span>[] n_s = sample[n].toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfLocation; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> location = (<span class="keyword">int</span>) (Math.random() * codingBit);</span><br><span class="line"><span class="keyword">char</span> temp = n_s[location];</span><br><span class="line">n_s[location] = m_s[location];</span><br><span class="line">m_s[location] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sample[m] = <span class="keyword">new</span> String(m_s);</span><br><span class="line">sample[n] = <span class="keyword">new</span> String(n_s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mutation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberofMutation; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>) (Math.random() * sample.length);</span><br><span class="line"><span class="keyword">char</span>[] m_s = sample[m].toCharArray();</span><br><span class="line"><span class="keyword">int</span> location = (<span class="keyword">int</span>)(Math.random() * codingBit);</span><br><span class="line"><span class="keyword">if</span> (m_s[location] == <span class="number">0</span>) &#123;</span><br><span class="line">m_s[location] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m_s[location] == <span class="number">1</span>) &#123;</span><br><span class="line">m_s[location] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sample[m] = <span class="keyword">new</span> String(m_s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Selection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; sample.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> ( f(CodingDictionary2.get(sample[i]).intValue()) &lt; f(CodingDictionary2.get(sample[j]).intValue() )) &#123;</span><br><span class="line">String temp = sample[i];</span><br><span class="line">sample[i] = sample[j];</span><br><span class="line">sample[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfDelete; i++) &#123;</span><br><span class="line">sample[sample.length - i - <span class="number">1</span>] = sample[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length; i++) &#123;</span><br><span class="line">System.out.println(CodingDictionary2.get(sample[i]));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Getmaximum</span><span class="params">(<span class="keyword">int</span> codingBit, <span class="keyword">int</span> numberOfRandomNumbers, <span class="keyword">int</span> numberOfReproduction, <span class="keyword">int</span> numberOfLocation,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> numberofMutation, <span class="keyword">int</span> numberOfDelete)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.codingBit = codingBit;</span><br><span class="line"><span class="keyword">this</span>.numberOfSample = numberOfRandomNumbers;</span><br><span class="line"><span class="keyword">this</span>.numberOfReproduction = numberOfReproduction;</span><br><span class="line"><span class="keyword">this</span>.numberOfLocation = numberOfLocation;</span><br><span class="line"><span class="keyword">this</span>.numberofMutation = numberofMutation;</span><br><span class="line"><span class="keyword">this</span>.numberOfDelete = numberOfDelete;</span><br><span class="line">CodingDictionary1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">CodingDictionary2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Getmaximum getmaximum = <span class="keyword">new</span> Getmaximum(<span class="number">5</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">getmaximum.generateDictionary();</span><br><span class="line"><span class="comment">//System.out.println(getmaximum.CodingDictionary1);</span></span><br><span class="line"><span class="comment">//System.out.println(getmaximum.CodingDictionary2);</span></span><br><span class="line">getmaximum.generateFirstGeneration(<span class="number">0</span>, (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, getmaximum.codingBit));</span><br><span class="line">getmaximum.print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( i &lt; <span class="number">60</span>) &#123;</span><br><span class="line">getmaximum.reproduction();</span><br><span class="line"><span class="comment">//getmaximum.print();</span></span><br><span class="line">getmaximum.Mutation();</span><br><span class="line"><span class="comment">//getmaximum.print();</span></span><br><span class="line">getmaximum.Selection();</span><br><span class="line">getmaximum.print();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="python实现代码"><a href="#python实现代码" class="headerlink" title="python实现代码"></a>python实现代码</h1><h2 id="单变量"><a href="#单变量" class="headerlink" title="单变量"></a>单变量</h2><p>求一个比较复杂的函数<br>$$<br>f(x)=(x - 30)  (x - 20)  (x - 15) (x - 10)<br>$$<br>的最小值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    len_of_code = <span class="number">10</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">20</span></span><br><span class="line">    num_of_select = <span class="number">3</span></span><br><span class="line">    num_of_selected = <span class="number">2</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">2</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.5</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">3</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (x - <span class="number">30</span>) * (x - <span class="number">20</span>) * (x - <span class="number">15</span>) * (x - <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].rjust(self.len_of_code, <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].rjust(self.len_of_code - <span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="comment"># random.seed(1)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            self.sample_list.append(int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code))</span><br><span class="line">        print(<span class="number">0</span>, self.sample_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.f(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.f(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.f(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        <span class="comment"># print(dict_value_to_int)</span></span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) == self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line">        <span class="comment"># print(self.sample_list)</span></span><br><span class="line">        print(len(self.sample_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="comment"># random.seed(1)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="comment"># print(self.sample_list[i], code, bit)</span></span><br><span class="line">                    <span class="keyword">if</span> code[bit] == <span class="string">'1'</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line">        <span class="comment"># print(self.sample_list)</span></span><br><span class="line">        print(len(self.sample_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="comment"># random.seed(1)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                <span class="comment"># print(code_a, code_b, bit)</span></span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line">        <span class="comment"># print(self.sample_list)</span></span><br><span class="line">        <span class="comment"># print(len(self.sample_list))</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">300</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            print(self.num_of_iteration, self.sample_list)</span><br><span class="line">            <span class="comment"># if len(set(self.sample_list)) == 1:</span></span><br><span class="line">            <span class="comment">#     break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">x = np.linspace(<span class="number">5</span>, <span class="number">35</span>, <span class="number">1000</span>)</span><br><span class="line">y = g.f(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">point_x = g.sample_list[<span class="number">0</span>]</span><br><span class="line">plt.scatter(point_x, g.f(point_x))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/1.png" alt=""></p><h2 id="双变量"><a href="#双变量" class="headerlink" title="双变量"></a>双变量</h2><p>在单变量的基础上改进，求函数<br>$$<br>f(x,y)=x sin(y) + ysin(x)<br>$$<br>的最值，并与枚举结果比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入双变量</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    len_of_code = <span class="number">22</span></span><br><span class="line">    num_of_var = <span class="number">2</span></span><br><span class="line">    len_of_code_for_per_var = int(len_of_code / num_of_var)</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">20</span></span><br><span class="line">    num_of_select = <span class="number">3</span></span><br><span class="line">    num_of_selected = <span class="number">2</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.2</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">3</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.5</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">3</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="comment"># return (x - 1) ** 2 + (y - 2) ** 2</span></span><br><span class="line">        x = x * self.accuracy</span><br><span class="line">        y = y * self.accuracy</span><br><span class="line">        <span class="keyword">return</span> x * math.sin(y) + y * math.sin(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].rjust(self.len_of_code_for_per_var, <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].rjust(self.len_of_code_for_per_var - <span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        x, y = num</span><br><span class="line">        <span class="keyword">return</span> self.get_code_by_int_for_per_var(x) + self.get_code_by_int_for_per_var(y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_int_by_code_for_per_var(str[:self.len_of_code_for_per_var]), \</span><br><span class="line">               self.get_int_by_code_for_per_var(str[self.len_of_code_for_per_var:])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            x = int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var)</span><br><span class="line">            y = int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var)</span><br><span class="line">            self.sample_list.append((x, y))</span><br><span class="line">        print(self.num_of_iteration, <span class="string">'iteration: '</span>,</span><br><span class="line">              [(i * self.accuracy, j * self.accuracy) <span class="keyword">for</span> i, j <span class="keyword">in</span> self.sample_list])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            x, y = sample</span><br><span class="line">            <span class="keyword">if</span> self.f(x, y) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.f(x, y)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.f(x, y)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) == self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> code[bit] == <span class="string">'1'</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line">        print(len(self.sample_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">300</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            print(self.num_of_iteration, <span class="string">'iteration: '</span>,</span><br><span class="line">                  [(i * self.accuracy, j * self.accuracy) <span class="keyword">for</span> i, j <span class="keyword">in</span> self.sample_list])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">data = np.ndarray((<span class="number">1024</span> * <span class="number">2</span>, <span class="number">1024</span> * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">-1024</span>, <span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">-1024</span>, <span class="number">1024</span>):</span><br><span class="line">        data[i][j] = g.f(i, j)</span><br><span class="line"></span><br><span class="line">print(g.f(g.sample_list[<span class="number">0</span>][<span class="number">0</span>], g.sample_list[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line">print(data.min())</span><br></pre></td></tr></table></figure><p>经过300轮的循环后基本找到了最小值所在的点，和枚举得到的最小值相比几乎一致。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/2.png" alt=""></p><h2 id="任意变量"><a href="#任意变量" class="headerlink" title="任意变量"></a>任意变量</h2><p>在双变量的基础上改进，求函数<br>$$<br>f(x,y,z)=x sin(yz) + ysin(xz)+ zsin(xy)<br>$$<br>的最值，并与枚举结果比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进一步改为任意变量</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = <span class="number">3</span></span><br><span class="line">    len_of_code_for_per_var = <span class="number">11</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">10</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">10</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以重载该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="comment"># return vars[0] * math.sin(vars[1]) + vars[1] * math.sin(vars[0])</span></span><br><span class="line">        <span class="keyword">return</span> vars[<span class="number">0</span>] * math.sin(vars[<span class="number">1</span>] * vars[<span class="number">2</span>]) + vars[<span class="number">1</span>] * math.sin(vars[<span class="number">2</span>] * vars[<span class="number">0</span>]) + vars[<span class="number">2</span>] * math.sin(</span><br><span class="line">            vars[<span class="number">1</span>] * vars[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].rjust(self.len_of_code_for_per_var, <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].rjust(self.len_of_code_for_per_var - <span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) == self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> code[bit] == <span class="string">'1'</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">1000</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">len_of_data = <span class="number">2</span> ** (g.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line">data = np.zeros((len_of_data * <span class="number">2</span>, len_of_data * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(-len_of_data, len_of_data):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">        lists = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">            lists.append(g.fit_func((i, i * j, i * k)))</span><br><span class="line">        data[i][j] = min(lists)</span><br><span class="line"></span><br><span class="line">print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br><span class="line">print(data.min())</span><br></pre></td></tr></table></figure><p>经过300轮的循环后基本找到了最小值所在的点，甚至比枚举得到的还要小。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/3.png" alt=""></p><h2 id="参数自适应"><a href="#参数自适应" class="headerlink" title="参数自适应"></a>参数自适应</h2><p>在上一个问题中遇到了不容易收敛的情况，改进如下，基本思路是加大群体稳定后的突变率以提高“天才”诞生的概率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改进参数自动优化</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = <span class="number">3</span></span><br><span class="line">    len_of_code_for_per_var = <span class="number">11</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">10</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">10</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># now_best_result = 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以重载该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="comment"># return vars[0] * math.sin(vars[1]) + vars[1] * math.sin(vars[0])</span></span><br><span class="line">        <span class="keyword">return</span> vars[<span class="number">0</span>] * math.sin(vars[<span class="number">1</span>] * vars[<span class="number">2</span>]) + vars[<span class="number">1</span>] * math.sin(vars[<span class="number">2</span>] * vars[<span class="number">0</span>]) + vars[<span class="number">2</span>] * math.sin(</span><br><span class="line">            vars[<span class="number">1</span>] * vars[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].zfill(self.len_of_code_for_per_var)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].zfill(self.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># print(self.num_of_iteration)</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list[:<span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &gt;= self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># if code[bit] == '1':</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '0' + code[bit + 1:]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '1' + code[bit + 1:]</span></span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize_para</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.sample_list[<span class="number">0</span>] == self.sample_list[int(self.num_of_sample * <span class="number">0.95</span>)]:</span><br><span class="line">            self.probability_for_mutation = min(<span class="number">0.99</span>, self.probability_for_mutation * <span class="number">2</span>)</span><br><span class="line">            self.num_of_bit_for_mutation = max(int(random.random() * <span class="number">4</span>), int(self.num_of_bit_for_mutation * <span class="number">0.8</span>))</span><br><span class="line">            <span class="comment"># self.num_of_bit_for_mutation = max(int(self.len_of_code * 0.1), self.num_of_bit_for_mutation - 1)</span></span><br><span class="line">            <span class="comment"># self.num_of_select = max(3, self.num_of_select - 1)</span></span><br><span class="line">            <span class="comment"># self.num_of_selected = min(10, self.num_of_selected + 1)</span></span><br><span class="line">            <span class="comment"># self.probability_for_exchange = max(0.5, self.probability_for_exchange - 1)</span></span><br><span class="line">            <span class="comment"># self.num_of_bit_for_exchange = max(5, self.num_of_bit_for_exchange - 1)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># self.probability_for_mutation = max(0.01, self.probability_for_mutation / 2)</span></span><br><span class="line">            <span class="comment"># self.num_of_bit_for_mutation = min(int(self.len_of_code * 0.9), int(self.num_of_bit_for_mutation * 1.2))</span></span><br><span class="line">            self.probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">            self.num_of_bit_for_mutation = <span class="number">20</span></span><br><span class="line">            <span class="comment"># self.num_of_select = 5</span></span><br><span class="line">            <span class="comment"># self.num_of_selected = 10</span></span><br><span class="line">            <span class="comment"># self.probability_for_exchange = 0.9</span></span><br><span class="line">            <span class="comment"># self.num_of_bit_for_exchange = 15</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">500</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line">            self.optimize_para()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">len_of_data = <span class="number">2</span> ** (g.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line">data = np.zeros((len_of_data * <span class="number">2</span>, len_of_data * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(-len_of_data, len_of_data):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">        lists = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">            lists.append(g.fit_func((i, i * j, i * k)))</span><br><span class="line">        data[i][j] = min(lists)</span><br><span class="line"></span><br><span class="line">print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br><span class="line">print(data.min())</span><br></pre></td></tr></table></figure><p>可以发现无论是在收敛速度还是收敛全局最优解的概率都有所提高。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/4.png" alt=""></p><h1 id="解决规划问题"><a href="#解决规划问题" class="headerlink" title="解决规划问题"></a>解决规划问题</h1><h2 id="简单线性规划问题"><a href="#简单线性规划问题" class="headerlink" title="简单线性规划问题"></a>简单线性规划问题</h2><p>初步尝试求解线性规划问题如代码中所示，并用Gurobi求解验证准确性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初步尝试求解线性规划问题</span></span><br><span class="line"><span class="comment"># max = x1 + 0.3*x2</span></span><br><span class="line"><span class="comment"># s.t</span></span><br><span class="line"><span class="comment">#   x1 + x2 = 35</span></span><br><span class="line"><span class="comment">#   5*x1 + x2 &gt;= 70</span></span><br><span class="line"><span class="comment">#   5*x1 + 4*x2 &gt;= 140</span></span><br><span class="line"><span class="comment">#   x2 &lt;= 25</span></span><br><span class="line"><span class="comment">#   x1, x2 &gt;= 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = <span class="number">2</span></span><br><span class="line">    len_of_code_for_per_var = <span class="number">6</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">1</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">10</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">10</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constrs</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> vars[<span class="number">0</span>] + vars[<span class="number">1</span>] != <span class="number">35</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * vars[<span class="number">0</span>] + vars[<span class="number">1</span>] &lt; <span class="number">70</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * vars[<span class="number">0</span>] + <span class="number">4</span> * vars[<span class="number">1</span>] &lt; <span class="number">140</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> vars[<span class="number">1</span>] &gt; <span class="number">25</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以重载该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objective_func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.constrs(vars):</span><br><span class="line">            <span class="keyword">return</span> vars[<span class="number">0</span>] + <span class="number">0.3</span> * vars[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> self.is_get_max:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.objective_func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].zfill(self.len_of_code_for_per_var)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].zfill(self.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># if str[0] == '0':</span></span><br><span class="line">        <span class="comment">#     return int(str, 2)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     return int(int(str[1:], 2) * -1)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list[:<span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int(random.random() * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &gt;= self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># if code[bit] == '1':</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '0' + code[bit + 1:]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '1' + code[bit + 1:]</span></span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize_para</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.sample_list[<span class="number">0</span>] == self.sample_list[int(self.num_of_sample * <span class="number">0.95</span>)]:</span><br><span class="line">            self.probability_for_mutation = min(<span class="number">0.99</span>, self.probability_for_mutation * <span class="number">2</span>)</span><br><span class="line">            self.num_of_bit_for_mutation = max(int(random.random() * <span class="number">4</span>), int(self.num_of_bit_for_mutation * <span class="number">0.8</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">            self.num_of_bit_for_mutation = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">300</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line">            self.optimize_para()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line">print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gurobipy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># max = x1 + 0.3*x2</span></span><br><span class="line"><span class="comment"># s.t</span></span><br><span class="line"><span class="comment">#   x1 + x2 = 35</span></span><br><span class="line"><span class="comment">#   5*x1 + x2 &gt;= 70</span></span><br><span class="line"><span class="comment">#   5*x1 + 4*x2 &gt;= 140</span></span><br><span class="line"><span class="comment">#   x2 &lt;= 25</span></span><br><span class="line"><span class="comment">#   x1, x2 &gt;= 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">m = Model(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line">x1 = m.addVar(name=<span class="string">'x1'</span>, lb=<span class="number">0</span>)</span><br><span class="line">x2 = m.addVar(name=<span class="string">'x2'</span>, lb=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    x1 + x2 == <span class="number">35</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    <span class="number">5</span> * x1 + x2 &gt;= <span class="number">70</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    <span class="number">5</span> * x1 + <span class="number">4</span> * x2 &gt;= <span class="number">140</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    x2 &lt;= <span class="number">25</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.setObjective(x1 + <span class="number">0.3</span> * x2, GRB.MAXIMIZE)</span><br><span class="line"></span><br><span class="line">m.optimize()</span><br><span class="line"><span class="keyword">if</span> m.status == GRB.Status.OPTIMAL:</span><br><span class="line">    print(x1, x2)</span><br><span class="line">    print(m.getObjective().getValue())</span><br></pre></td></tr></table></figure><p>gurobi求解的结果为：</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/5.png" alt=""></p><p>而遗传算法在300轮（往往不需要）之后也得到了相同的解。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/6.png" alt=""></p><h2 id="稍微复杂的线性规划问题"><a href="#稍微复杂的线性规划问题" class="headerlink" title="稍微复杂的线性规划问题"></a>稍微复杂的线性规划问题</h2><p>和上一个部分相似，只不过问题变复杂了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 尝试求解比较复杂的线性规划问题</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key_list</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [key <span class="keyword">for</span> key <span class="keyword">in</span> dict.keys()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">min_nutrition = &#123;</span><br><span class="line">    <span class="string">'calories'</span>: <span class="number">1800</span>,</span><br><span class="line">    <span class="string">'protein'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'fat'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'sodium'</span>: <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line">categories = get_key_list(min_nutrition)</span><br><span class="line">cost = &#123;</span><br><span class="line">    <span class="string">'hamburger'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">2.89</span>,</span><br><span class="line">    <span class="string">'hot dog'</span>: <span class="number">2.50</span>,</span><br><span class="line">    <span class="string">'fries'</span>: <span class="number">1.89</span>,</span><br><span class="line">    <span class="string">'macaroni'</span>: <span class="number">2.09</span>,</span><br><span class="line">    <span class="string">'pizza'</span>: <span class="number">1.99</span>,</span><br><span class="line">    <span class="string">'salad'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'milk'</span>: <span class="number">0.89</span>,</span><br><span class="line">    <span class="string">'ice cream'</span>: <span class="number">1.59</span></span><br><span class="line">&#125;</span><br><span class="line">foods = get_key_list(cost)</span><br><span class="line">nutritionValues = &#123;</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'calories'</span>): <span class="number">410</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'protein'</span>): <span class="number">24</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'fat'</span>): <span class="number">26</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'sodium'</span>): <span class="number">730</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'calories'</span>): <span class="number">420</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'protein'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'sodium'</span>): <span class="number">1190</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'calories'</span>): <span class="number">560</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'protein'</span>): <span class="number">20</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'fat'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'sodium'</span>): <span class="number">1800</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'calories'</span>): <span class="number">380</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'protein'</span>): <span class="number">4</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'fat'</span>): <span class="number">19</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'sodium'</span>): <span class="number">270</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'protein'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'sodium'</span>): <span class="number">930</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'protein'</span>): <span class="number">15</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'sodium'</span>): <span class="number">820</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'protein'</span>): <span class="number">31</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'sodium'</span>): <span class="number">1230</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'calories'</span>): <span class="number">100</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'fat'</span>): <span class="number">2.5</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'sodium'</span>): <span class="number">125</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'calories'</span>): <span class="number">330</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'sodium'</span>): <span class="number">180</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_vars</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list, dict(zip(list, [<span class="number">0</span>, ] * len(list)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buy_key, buy = add_vars(foods)</span><br><span class="line">print(buy_key, buy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = len(buy_key)</span><br><span class="line">    len_of_code_for_per_var = <span class="number">13</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = int(len_of_code * <span class="number">0.3</span>)</span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = int(len_of_code * <span class="number">0.6</span>)</span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constrs</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> categories:</span><br><span class="line">            <span class="keyword">if</span> sum(vars[i] * nutritionValues[food, c] <span class="keyword">for</span> i, food <span class="keyword">in</span> enumerate(foods)) &lt; min_nutrition[c]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objective_func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.constrs(vars):</span><br><span class="line">            <span class="keyword">return</span> sum(vars[i] * cost[food] <span class="keyword">for</span> i, food <span class="keyword">in</span> enumerate(foods))</span><br><span class="line">        <span class="keyword">elif</span> self.is_get_max:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.objective_func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].zfill(self.len_of_code_for_per_var)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].zfill(self.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># if str[0] == '0':</span></span><br><span class="line">        <span class="comment">#     return int(str, 2)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     return int(int(str[1:], 2) * -1)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list[:<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产生第一代样本</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int(random.random() * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &gt;= self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># if code[bit] == '1':</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '0' + code[bit + 1:]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '1' + code[bit + 1:]</span></span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize_para</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.sample_list[<span class="number">0</span>] == self.sample_list[int(self.num_of_sample * <span class="number">0.95</span>)]:</span><br><span class="line">            self.probability_for_mutation = min(<span class="number">0.99</span>, self.probability_for_mutation * <span class="number">2</span>)</span><br><span class="line">            self.num_of_bit_for_mutation = max(int(random.random() * int(self.len_of_code * <span class="number">0.3</span>)), int(self.num_of_bit_for_mutation * <span class="number">0.8</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">            self.num_of_bit_for_mutation = int(self.len_of_code * <span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">1000</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line">            self.optimize_para()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gurobipy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">categories, minNutrition = multidict(&#123;</span><br><span class="line">    <span class="string">'calories'</span>: <span class="number">1800</span>,</span><br><span class="line">    <span class="string">'protein'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'fat'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'sodium'</span>: <span class="number">1000</span>&#125;)</span><br><span class="line"></span><br><span class="line">foods, cost = multidict(&#123;</span><br><span class="line">    <span class="string">'hamburger'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">2.89</span>,</span><br><span class="line">    <span class="string">'hot dog'</span>: <span class="number">2.50</span>,</span><br><span class="line">    <span class="string">'fries'</span>: <span class="number">1.89</span>,</span><br><span class="line">    <span class="string">'macaroni'</span>: <span class="number">2.09</span>,</span><br><span class="line">    <span class="string">'pizza'</span>: <span class="number">1.99</span>,</span><br><span class="line">    <span class="string">'salad'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'milk'</span>: <span class="number">0.89</span>,</span><br><span class="line">    <span class="string">'ice cream'</span>: <span class="number">1.59</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nutrition values for the foods</span></span><br><span class="line">nutritionValues = &#123;</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'calories'</span>): <span class="number">410</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'protein'</span>): <span class="number">24</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'fat'</span>): <span class="number">26</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'sodium'</span>): <span class="number">730</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'calories'</span>): <span class="number">420</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'protein'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'sodium'</span>): <span class="number">1190</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'calories'</span>): <span class="number">560</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'protein'</span>): <span class="number">20</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'fat'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'sodium'</span>): <span class="number">1800</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'calories'</span>): <span class="number">380</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'protein'</span>): <span class="number">4</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'fat'</span>): <span class="number">19</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'sodium'</span>): <span class="number">270</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'protein'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'sodium'</span>): <span class="number">930</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'protein'</span>): <span class="number">15</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'sodium'</span>): <span class="number">820</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'protein'</span>): <span class="number">31</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'sodium'</span>): <span class="number">1230</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'calories'</span>): <span class="number">100</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'fat'</span>): <span class="number">2.5</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'sodium'</span>): <span class="number">125</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'calories'</span>): <span class="number">330</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'sodium'</span>): <span class="number">180</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model</span></span><br><span class="line">m = Model(<span class="string">"diet"</span>)</span><br><span class="line"></span><br><span class="line">buy = m.addVars(foods, name=<span class="string">"buy"</span>)</span><br><span class="line"></span><br><span class="line">m.setObjective(buy.prod(cost), GRB.MINIMIZE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nutrition constraints</span></span><br><span class="line">m.addConstrs(</span><br><span class="line">    (quicksum(nutritionValues[f, c] * buy[f] <span class="keyword">for</span> f <span class="keyword">in</span> foods) &gt;= minNutrition[c]</span><br><span class="line">     <span class="keyword">for</span> c <span class="keyword">in</span> categories), <span class="string">"_"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printSolution</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> m.status == GRB.Status.OPTIMAL:</span><br><span class="line">        print(<span class="string">'\nCost: %g'</span> % m.objVal)</span><br><span class="line">        print(<span class="string">'\nBuy:'</span>)</span><br><span class="line">        buyx = m.getAttr(<span class="string">'x'</span>, buy)</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> foods:</span><br><span class="line">            <span class="keyword">if</span> buy[f].x &gt; <span class="number">0.0001</span>:</span><br><span class="line">                print(<span class="string">'%s %g'</span> % (f, buyx[f]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'No solution'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m.optimize()</span><br><span class="line">printSolution()</span><br></pre></td></tr></table></figure><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/7.png" alt=""></p><p>在遗传算法1000轮之后，总体来说结果基本符合预期，精度还有值得提高的空间，速度也有很大的提高空间。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/8.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;p&gt;遗传算法（Genetic  Algorithm）是受生物净化学说和遗传学说的启发发展起来的，生物在进化的过程中不断繁殖、生存竞争、适者生存、
      
    
    </summary>
    
      <category term="遗传算法" scheme="http://wang22ti.com/categories/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>朝花夕拾——《数据库系统原理》课程设计</title>
    <link href="http://wang22ti.com/2018/05/12/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    <id>http://wang22ti.com/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/</id>
    <published>2018-05-11T16:29:02.000Z</published>
    <updated>2018-05-11T17:12:40.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统效果"><a href="#系统效果" class="headerlink" title="系统效果"></a>系统效果</h1><p>最终实现网页端的图书管理系统，采用的框架为Windows + MySQL + Django + Python的组合。其中逻辑控制以及同数据库的交互由Python和Django提供的接口实现，用户界面网页使用html + CSS+ JavaScript的组合渲染完成。</p><p>一方面，为了方便图书馆管理员对图书进行入库、借阅、归还、查询等操作，同时也方便学生对图书信息和个人借阅信息的查询，对该系统进行了细致的设计。主要体现在：自动判定管理员与其他用户进而跳转到不同界面、美化用户界面、提供即时的搜索结果反馈、对一些项目的填写采用下拉框的方式、提供部分项目的模糊搜索、自动计算例如归还截止日期等信息等等。总体来说，功能完备，具有较好的用户体验。</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>本图书借阅管理系统，允许管理员和已注册用户使用。管理员具有较高权限，可以进行查询、插入和更新等操作，如图书入库、办理借书证、图书信息查询、用户信息查询、办理图书借阅归还，处理挂失等等；其他用户权限较低，可查询图书信息和本人的历史借阅信息。</p><h2 id="系统目标"><a href="#系统目标" class="headerlink" title="系统目标"></a>系统目标</h2><h3 id="目标概述"><a href="#目标概述" class="headerlink" title="目标概述"></a>目标概述</h3><p>（1）  对系统的用户身份进行认证，根据用户类别跳转到对应界面</p><p>（2）  图书入库</p><p>（3）  办理借书证</p><p>（4）  图书借阅和归还</p><p>（5）  查询图书和读者信息</p><p>（6）  维护图书和读者信息</p><p>（7）  逾期不还的处理</p><p>（8）  处理图书遗失和证件挂失</p><h3 id="系统包含信息"><a href="#系统包含信息" class="headerlink" title="系统包含信息"></a>系统包含信息</h3><p>（1）  图书管理员和读者的密码和身份</p><p>（2）  图书的信息，包括图书编号、书名、作者、出版社、单价、类别、入库时间、入库数量、借阅数量、遗失数量等等。其中，类别包括计算机、语文、数学、小说、英语、地理、物理、化学、政治、生物、历史等等</p><p>（3）  读者的信息，包括用户登录id、登录密码、姓名、性别、出日、级别、办证日期、联系电话、手机号码、证件是否丢失、电子邮箱等等。其中，不同级别会员的最长出借天数、最多借书次数、会费、逾期收费均不同</p><p>（4）  读者的借阅、归还、逾期和挂失信息</p><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><p>（1）  图书编号和读者登录id唯一</p><p>（2）  读者借阅的图书一定是系统中提供的图书</p><p>（3）  读者不能重复借阅同一本书</p><p>（4）  读者遗失的图书一定是本人借阅的图书</p><p>（5）  图书被借阅数量不能超过入库数量减去遗失数量</p><p>（6）  遗失图书数量不能超过图书入库数量</p><p>（7）  已挂失的借书证不能登录</p><p>（8）  最长结束天数和最多借书册数由会员级别决定</p><p>（9）  各种信息具有实际意义，例如数量均为非负整数、日期合法等等</p><h3 id="系统交互"><a href="#系统交互" class="headerlink" title="系统交互"></a>系统交互</h3><p>（1）  认证</p><p>验证用户身份，输入用户id和密码，随后的交互取决于用户的身份。</p><p>（2）  读者可进行如下交互</p><table><thead><tr><th>查询图书信息</th><th>按书名、图书类别、作者、出版社进行模糊查询，结果以列表的方式呈现</th></tr></thead><tbody><tr><td>查询借阅信息</td><td>按书名、图书编号模糊查询，列出该读者的借阅历史，可按是否逾期显示不同结果，结果以列表的方式呈现</td></tr></tbody></table><p>（3）  管理员可进行如下交互</p><table><thead><tr><th>查询图书信息</th><th>按书名、图书类别、作者、出版社进行模糊查询，结果以列表的方式呈现</th></tr></thead><tbody><tr><td>查询读者信息</td><td>按用户登录id和姓名进行模糊查询，结果以列表的方式呈现</td></tr><tr><td>图书入库</td><td>登记入库图书的各项信息，分配一个新的编号</td></tr><tr><td>办理借阅证</td><td>登记读者各项信息，用户登录id由用户决定，但不允许重复</td></tr><tr><td>图书借阅归还</td><td>不同级别读者最长借阅时间和最多借阅数量均不同</td></tr><tr><td>查询借阅信息</td><td>按书名、图书编号、读者登录id、读者姓名模糊查询，列出满足条件的借阅历史，可按是否逾期显示不同结果，结果以列表的方式呈现</td></tr><tr><td>挂失处理</td><td>包括借书证挂失和图示遗失处理，借书证挂失在挂失数据表中处理，图书遗失在借阅表和图书表中处理</td></tr></tbody></table><h2 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h2><h3 id="顶层数据流图"><a href="#顶层数据流图" class="headerlink" title="顶层数据流图"></a>顶层数据流图</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image3.png" alt=""></p><h3 id="0层数据流图"><a href="#0层数据流图" class="headerlink" title="0层数据流图"></a>0层数据流图</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image4.png" alt=""></p><h3 id="1层数据流图（借书）"><a href="#1层数据流图（借书）" class="headerlink" title="1层数据流图（借书）"></a>1层数据流图（借书）</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image5.png" alt=""></p><h3 id="1层数据流图（还书）"><a href="#1层数据流图（还书）" class="headerlink" title="1层数据流图（还书）"></a>1层数据流图（还书）</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image6.png" alt=""></p><h3 id="1层数据流图（查询）"><a href="#1层数据流图（查询）" class="headerlink" title="1层数据流图（查询）"></a>1层数据流图（查询）</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image7.png" alt=""></p><h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><h3 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h3><table><thead><tr><th><strong>数据项名</strong></th><th><strong>含义</strong></th><th><strong>类型</strong></th><th><strong>最大长度</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td><strong>读者登录id</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td>决定了要借阅的图书</td></tr><tr><td><strong>读者姓名</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>读者性别</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>出生日期</strong></td><td>读者相关</td><td>日期型</td><td></td><td></td></tr><tr><td><strong>电话</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>手机</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>会员级别</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td>决定了最长借阅天数和最多借阅册书</td></tr><tr><td><strong>办证日期</strong></td><td>读者相关</td><td>日期型</td><td></td><td></td></tr><tr><td><strong>电子邮箱</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>图书编号</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td>决定了要借阅的图书</td></tr><tr><td><strong>书名</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>作者</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>类别编号</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td>决定了图书类别</td></tr><tr><td><strong>单价</strong></td><td>图书相关</td><td>浮点型</td><td></td><td></td></tr><tr><td><strong>出版社</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>入库日期</strong></td><td>图书相关</td><td>时间型</td><td></td><td></td></tr><tr><td><strong>入库数量</strong></td><td>图书相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>遗失数量</strong></td><td>图书相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>出借数量</strong></td><td>图书相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>出借日期</strong></td><td>借书相关</td><td>时间型</td><td></td><td></td></tr><tr><td><strong>是否遗失</strong></td><td>借书相关</td><td>布尔型</td><td></td><td></td></tr><tr><td><strong>归还时间</strong></td><td>借书相关</td><td>时间型</td><td></td><td>归还时间为1970年1月1日表示没有归还</td></tr><tr><td><strong>最长借书天数</strong></td><td>级别相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>最多借书册数</strong></td><td>级别相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>会费</strong></td><td>级别相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>挂失日期</strong></td><td>挂失相关</td><td>时间型</td><td></td></tr></tbody></table><h3 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h3><table><thead><tr><th>名 称</th><th><strong>含 义</strong></th><th><strong>组 成</strong></th></tr></thead><tbody><tr><td><strong>读者信息</strong></td><td>定义读者的基本信息</td><td>读者登录id、姓名、性别、生日、电话号、手机号、级别、办证日期、邮箱、是否丢失、余额</td></tr><tr><td><strong>图书信息</strong></td><td>定义图书的基本信息</td><td>图书编号、图书名称、作者、出版社、图书类别编号、价格、入库时间、入库数量、借出数量、丢失数量</td></tr><tr><td><strong>借阅信息</strong></td><td>定义读者的借阅信息</td><td>读者编号、图书编号、借书日期、归还日期、是否丢失</td></tr><tr><td><strong>会员级别</strong></td><td>反应读者不同的级别</td><td>级别名称、最长借书数、最多借书册数、会费</td></tr><tr><td><strong>图书类别</strong></td><td>反应图书的不同类型</td><td>类别编号、类别名称</td></tr><tr><td><strong>图书丢失</strong></td><td>反应图书丢失的状态</td><td>读者编号、图书编号、挂失时间</td></tr></tbody></table><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><table><thead><tr><th><strong>数据流</strong></th><th><strong>说明</strong></th><th><strong>来源</strong></th></tr></thead><tbody><tr><td><strong>图书信息查询</strong></td><td>根据条件进行组合查询</td><td>读者或管理员</td></tr><tr><td><strong>借阅信息查询</strong></td><td>进行图书借阅</td><td>管理员、书籍、查询结果</td></tr><tr><td><strong>借阅归还登记</strong></td><td>将借阅情况进行记录</td><td>借阅、归还图书信息</td></tr><tr><td><strong>读者信息查询</strong></td><td>列出读者个人信息</td><td>管理员</td></tr><tr><td><strong>借书证挂失</strong></td><td>读者挂失借书证</td><td>管理员</td></tr><tr><td><strong>借书证办理</strong></td><td>根据读者信息进行数据录入</td><td>管理员</td></tr></tbody></table><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><table><thead><tr><th><strong>处理过程</strong></th><th><strong>说 明</strong></th><th><strong>输 入</strong></th></tr></thead><tbody><tr><td><strong>图书借阅</strong></td><td>将读者借阅的信息进行登记</td><td>读者编号、图书编号</td></tr><tr><td><strong>图书归还</strong></td><td>读者借出的书籍进行归还操作</td><td>读者编号、图书编号</td></tr><tr><td><strong>图书遗失</strong></td><td>读者借阅图书丢失</td><td>读者编号、图书编号</td></tr><tr><td><strong>图书入库</strong></td><td>录入新书信息</td><td>图书信息</td></tr><tr><td><strong>借书证办理</strong></td><td>读者办理借书证</td><td>读者详细信息</td></tr><tr><td><strong>借书证挂失</strong></td><td>借书证丢失</td><td>读者编号</td></tr></tbody></table><h1 id="设计概要"><a href="#设计概要" class="headerlink" title="设计概要"></a>设计概要</h1><h2 id="系统ER图"><a href="#系统ER图" class="headerlink" title="系统ER图"></a>系统ER图</h2><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image8.png" alt=""></p><p>##系统功能设计</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image9.png" alt=""></p><h1 id="程序系统结构"><a href="#程序系统结构" class="headerlink" title="程序系统结构"></a>程序系统结构</h1><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="数据库逻辑结构设计"><a href="#数据库逻辑结构设计" class="headerlink" title="数据库逻辑结构设计"></a>数据库逻辑结构设计</h3><p>由于概念设计的结果是ER图，而DBMS一般采用关系模型，因此数据库的逻辑设计过程就是将ER图转化为关系模式的过程。由于关系模型所具有的优点，逻辑设计可以充分运用关系数据库规范化理论，使设计过程形式化进行，设计结果是一组关系模式的定义。</p><table><thead><tr><th>读者</th><th>reader(reader_id,reader_name,sex,birthday,phone,mobile,  day,password,date_lastlogin,balance,is_loss,level,e_mail)</th></tr></thead><tbody><tr><td>图书</td><td>book(book_id,book_name,author,publisher,price,  date_in,num_in,num_out,numloss,category_id)</td></tr><tr><td>图书类别</td><td>boookcategory(category_id,category)</td></tr><tr><td>挂失记录</td><td>lossreport(book_id,reader_id,date_loss)</td></tr><tr><td>借阅</td><td>borrow(book_id,reader_id,  date_borrow,date_return,is_loss)</td></tr><tr><td>级别</td><td>memberlevel(level,  most_books_for_borrow,   most_days_for_borrow,  fee_for_one_year)</td></tr></tbody></table><h3 id="系统用表"><a href="#系统用表" class="headerlink" title="系统用表"></a>系统用表</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image10.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image11.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image12.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image13.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image14.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image15.png" alt=""></p><h2 id="数据库的连接"><a href="#数据库的连接" class="headerlink" title="数据库的连接"></a>数据库的连接</h2><p>由于Django框架对于MySQL支持很好，连接数据库只要在配置文件settings.py和模型文件model.py中加入相关信息即可，得到的结果如下图所示：</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image16.png" alt=""></p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image17.png" alt=""></p><p>命令行运行makemigrations和migrate后，其中我创建的表名称格式为client_*</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image18.png" alt=""></p><h2 id="程序文件结构"><a href="#程序文件结构" class="headerlink" title="程序文件结构"></a>程序文件结构</h2><p>最后，整个工程的目录即主要文件功能如下：</p><table><thead><tr><th>area.css, font.css, module.css, special.css</th><th>网页中用到的各种样式表</th></tr></thead><tbody><tr><td>background.jpg</td><td>背景图片</td></tr><tr><td>home.js, home_user.js</td><td>home.html和home_user.html两个文件用到的脚本文件，主要控制子网页的显示或显示以及部分动画</td></tr><tr><td>index.html</td><td>登录界面</td></tr><tr><td>home.html, home_user.html</td><td>管理员和用户的主页</td></tr><tr><td>book_loss.html, borrow_retutn.html  card_loss.html, card_build.html  not_return.html, not_return.html  table_search_book.html  table_search_reader.html</td><td>子网页，分别实现一个或多个操作</td></tr><tr><td>models.py</td><td>定义数据库结构的文件</td></tr><tr><td>views.py</td><td>完成URL响应以及对应逻辑操作的文件</td></tr><tr><td>settings.py</td><td>项目配置文件</td></tr><tr><td>urls.py</td><td>配置url与views.py中函数的对应关系</td></tr></tbody></table><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image19.png" alt=""></p><h1 id="系统详细设计与运行界面"><a href="#系统详细设计与运行界面" class="headerlink" title="系统详细设计与运行界面"></a>系统详细设计与运行界面</h1><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>用户输入用户名和密码，后台自动判别身份。登录失败，并不会发生跳转。</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image20.png" alt=""></p><p>登录界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image21.png" alt=""></p><p>管理员主页</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image22.png" alt=""></p><p>用户主页</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image23.png" alt=""></p><h2 id="读者登录"><a href="#读者登录" class="headerlink" title="读者登录"></a>读者登录</h2><p>读者登陆成功后，可以查询个人借阅历史或查询图书信息。信息的查询均为模糊查询，所有的查询在每次输入后都有即时的反馈，查询结果用表格展示，具体如下。</p><h3 id="查询个人借阅历史"><a href="#查询个人借阅历史" class="headerlink" title="查询个人借阅历史"></a>查询个人借阅历史</h3><p>查询界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image24.png" alt=""></p><p>查询子页面代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image25.png" alt=""></p><p>查询逻辑响应代码，注意到由于Cookie的使用，用户并不需要另外输入用户信息</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image26.png" alt=""></p><h3 id="查询图书信息"><a href="#查询图书信息" class="headerlink" title="查询图书信息"></a>查询图书信息</h3><p>查询界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image27.png" alt=""></p><p>查询子页面代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image28.png" alt=""></p><p>查询逻辑响应代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image29.png" alt=""></p><h2 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h2><p>管理员登录成功后，可以办理借还图书任务，办理图书入库任务，可以查询图书信息、读者信息和所有读者的借阅历史，办理图书遗失、证件遗失、证件办新任务。具体情况如家所示。</p><h3 id="图书借还"><a href="#图书借还" class="headerlink" title="图书借还"></a>图书借还</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image30.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image31.png" alt=""></p><p>逻辑控制代码，其中针对不同的情况，例如没有剩余的数、结束量已经达到最大、用户重复借书等等，都有相应的控制，出现不正常的情况会有弹窗提示</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image32.png" alt=""></p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image33.png" alt=""></p><h3 id="图书入库"><a href="#图书入库" class="headerlink" title="图书入库"></a>图书入库</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image34.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image35.png" alt=""></p><p>逻辑控制代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image36.png" alt=""></p><h3 id="图书信息查询"><a href="#图书信息查询" class="headerlink" title="图书信息查询"></a>图书信息查询</h3><p>和普通用户后所使用的完全一样，不做赘述</p><h3 id="用户信息查询"><a href="#用户信息查询" class="headerlink" title="用户信息查询"></a>用户信息查询</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image37.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image38.png" alt=""></p><p>逻辑控制代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image39.png" alt=""></p><h3 id="借阅信息查询"><a href="#借阅信息查询" class="headerlink" title="借阅信息查询"></a>借阅信息查询</h3><p>和普通用户后所使用的基本一样，只是需要另外输入用户信息，不做赘述</p><h3 id="图书挂失办理"><a href="#图书挂失办理" class="headerlink" title="图书挂失办理"></a>图书挂失办理</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image40.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image41.png" alt=""></p><p>逻辑控制代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image42.png" alt=""></p><h3 id="借书证挂失办理"><a href="#借书证挂失办理" class="headerlink" title="借书证挂失办理"></a>借书证挂失办理</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image43.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image44.png" alt=""></p><p>逻辑控制代码，其中完成挂失后会自动给用户发送一份邮件</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image45.png" alt=""></p><h3 id="借书证办新"><a href="#借书证办新" class="headerlink" title="借书证办新"></a>借书证办新</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image46.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image47.png" alt=""></p><p>逻辑控制代码，其中完成挂失后会自动给用户发送一份邮件</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image48.png" alt=""></p><h1 id="系统使用说明"><a href="#系统使用说明" class="headerlink" title="系统使用说明"></a>系统使用说明</h1><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><table><thead><tr><th>编程语言</th><th>Python3.5</th></tr></thead><tbody><tr><td>框架</td><td>Django</td></tr><tr><td>操作系统</td><td>Windows或Linux</td></tr><tr><td>已兼容浏览器</td><td>IE、Firefox、Edge</td></tr></tbody></table><h2 id="系统亮点"><a href="#系统亮点" class="headerlink" title="系统亮点"></a>系统亮点</h2><p>（1） 系统功能完备，完整性约束完整</p><p>（2） 系统界面采用扁平化设计，辅助以响应动画，比较美观</p><p>（3） 后台自动根据用户登录名判定用户身份，自动跳转到对应界面</p><p>（4） 查询操作均采用模糊查询、即时查询，部分查询条件，例如日期类别，采用选择框，简化用户操作，优化用户体验</p><p>（5） 用户查询时不必另外输入个人信息，这得益于cookie的使用</p><h1 id="实验难点与总结改进"><a href="#实验难点与总结改进" class="headerlink" title="实验难点与总结改进"></a>实验难点与总结改进</h1><p>纵观整个实验有以下几个难点：</p><p>（1） 实验平台的搭建。本来我使用的数据库是SQL Server，但最后发现Django的框架对于它的支持程度非常差，最终选择了开源的MySQL。</p><p>（2） 用户界面的编写。此前我并没有上过网站开发的课程，这次相当于是边学边写，从html的到CSS再到JavaScript，遇到不会的就搜索资料，最后终于初步掌握了网站及脚本的开发。</p><p>（3） 网站页面和服务器之间的参数传递。网页给服务器可以用post方法，用户信息可以使用cookie，而服务器给网页传递的参数，我使用的是Django提供的语句，它内嵌在网页中，和python语句很相似。</p><p>（4） 业务逻辑的实现。整个系统对于数据库查询操作比较多，同时又要顾及完整性约束，一次写成功并不容易。我采用的是快速迭代，小步快跑的方法，每次写几个功能，写完之后再和原来的功能进行整合优化。</p><p>终于完成了实验，本次课程设计实现的是高校图书借阅管理系统。</p><p>总的来说，我的系统还存在着一些优化的地方。一方面是功能的完善，例如加入图片、金额系统等等，另一方面是细节的优化，例如数据库查询的速度、还有即时查询的体验等等。</p><p>此次课设需要用到本学期数据库学习的几乎全部知识。除第七章数据库设计之外，还包括规范优化基本表，正确使用索引、触发器和存储过程，正确使用数据库增、删、改、查语句等等。</p><p>通过动手编程，完成了对所学知识的复习与实践，并加深了自己对知识的理解。做完之后，我对整个数据库原理的掌握也更为系统和规范。此外，此次实验还用到了网站开发的界面设计，使得我初步掌握了python的云端开发。这必将各位的进一步学习带来诸多积极的影响。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统效果&quot;&gt;&lt;a href=&quot;#系统效果&quot; class=&quot;headerlink&quot; title=&quot;系统效果&quot;&gt;&lt;/a&gt;系统效果&lt;/h1&gt;&lt;p&gt;最终实现网页端的图书管理系统，采用的框架为Windows + MySQL + Django + Python的组合。其中逻辑
      
    
    </summary>
    
      <category term="数据库系统原理" scheme="http://wang22ti.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>朝花夕拾——《数据结构》实验合集</title>
    <link href="http://wang22ti.com/2018/05/11/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C%E5%90%88%E9%9B%86/"/>
    <id>http://wang22ti.com/2018/05/11/朝花夕拾——《数据结构》实验合集/</id>
    <published>2018-05-11T15:41:54.000Z</published>
    <updated>2018-05-11T16:27:37.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>##1 </p><p>某软件公司大约有30名员工，每名员工有姓名、工号、职务等属性，每年都有员工离职和入职。</p><p>把所有员工按照顺序存储结构建立一个线性表，建立离职和入职函数，当有员工离职或入职时，修改线性表，并且打印最新的员工名单。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1#<span class="meta-keyword">define</span> ERROR 0#<span class="meta-keyword">define</span> INFEASIBLE -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 20#<span class="meta-keyword">define</span> LISTINCREMENT 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//每位职员的结构体</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* name;</span><br><span class="line"><span class="keyword">int</span> job_name;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* duty;</span><br><span class="line">&#125;Member; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//公司的结构体</span></span><br><span class="line">Member *member;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">int</span> listsize;</span><br><span class="line">&#125;CompanyList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Init_CompanyList</span><span class="params">(CompanyList* companylist)</span> </span>&#123;</span><br><span class="line">companylist-&gt;member = (Member *)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(Member));</span><br><span class="line"><span class="keyword">if</span> (! companylist-&gt;member) <span class="keyword">return</span> OVERFLOW;</span><br><span class="line">companylist-&gt;length = <span class="number">0</span>;</span><br><span class="line">companylist-&gt;listsize = LIST_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Join_CompanyList</span><span class="params">(CompanyList* companylist, <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> <span class="keyword">char</span>* duty)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (companylist-&gt;length == companylist-&gt;listsize) &#123;</span><br><span class="line">Member *newbase = (Member *)<span class="built_in">realloc</span>(companylist-&gt;member, ( companylist-&gt;listsize + LISTINCREMENT) * <span class="keyword">sizeof</span>(Member));</span><br><span class="line"><span class="keyword">if</span> (! newbase) <span class="keyword">return</span> OVERFLOW;</span><br><span class="line">companylist-&gt;member = newbase;</span><br><span class="line">companylist-&gt;listsize += LISTINCREMENT;</span><br><span class="line">&#125;</span><br><span class="line">companylist-&gt;member[companylist-&gt;length].name = name;</span><br><span class="line">companylist-&gt;member[companylist-&gt;length].duty = duty;</span><br><span class="line">companylist-&gt;member[companylist-&gt;length].job_name = ++companylist-&gt;length;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_CompanyList</span><span class="params">(CompanyList companylist)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (companylist.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No member!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Number of member: %d\n"</span>, companylist.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; companylist.length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t%3d\t%s\n"</span>, </span><br><span class="line">companylist.member[i].name,</span><br><span class="line">companylist.member[i].job_name, </span><br><span class="line">companylist.member[i].duty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Leave_CompanyList</span><span class="params">(CompanyList *companylist, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((i &lt; <span class="number">1</span>) || (i &gt; companylist-&gt;length)) <span class="keyword">return</span> ERROR;</span><br><span class="line">Member* p = &amp;companylist-&gt;member[i<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Member %d leaves.\n"</span>, p-&gt;job_name);</span><br><span class="line">Member* q = companylist-&gt;member + companylist-&gt;length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>( p++; p &lt;= q; p++) &#123;</span><br><span class="line">*(p<span class="number">-1</span>) = *p;</span><br><span class="line">&#125;</span><br><span class="line">companylist-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CompanyList companylist;</span><br><span class="line">Init_CompanyList(&amp;companylist);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">Join_CompanyList(&amp;companylist, <span class="string">"person"</span>,<span class="string">"job"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Print_CompanyList(companylist);</span><br><span class="line"><span class="keyword">int</span> len = companylist.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">Leave_CompanyList(&amp;companylist, <span class="built_in">floor</span>(rand() % companylist.length) + <span class="number">1</span>);</span><br><span class="line">Print_CompanyList(companylist);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##2</p><p> 约瑟夫（Josephus）环问题：编号为1,2,3,…,n的n个人按顺时针方向围坐一圈，每人持有一个密码（正整数）。一开始任选一个正整数作为报数的上限值m，从第一个人开始按顺时针方向自1开始顺序报数,报到m时停止。报m的人出列，将他的密码作为新的m值，从他在顺时针方向上的下一人开始重新从1报数，如此下去，直到所有人全部出列为止。</p><p>建立n个人的单循环链表存储结构，运行结束后，输出依次出队的人的序号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;#include &lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1#<span class="meta-keyword">define</span> ERROR 0#<span class="meta-keyword">define</span> INFEASIBLE -1#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> order;<span class="comment">//座位编号</span></span><br><span class="line"><span class="keyword">int</span> number;<span class="comment">//个人密码</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">Generate_List</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//用n生成一个list</span></span><br><span class="line">List head = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">head-&gt;number = <span class="number">1</span>;</span><br><span class="line">head-&gt;order = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">List p = head;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++, p = p-&gt;next) &#123;</span><br><span class="line">List q = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">q-&gt;number = i;</span><br><span class="line">q-&gt;order = i;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Play_List</span><span class="params">(List head, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">List p = head;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != p) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m<span class="number">-1</span>; i ++) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; </span><br><span class="line">List q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"delete: %d\n"</span>, p-&gt;order);</span><br><span class="line">List s = p;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">m = s-&gt;number;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"winner: %d\n"</span>, p-&gt;order);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">10</span>;<span class="keyword">int</span> m = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"m: %d\tn: %d\n"</span>, m, n);</span><br><span class="line">List head = Generate_List(n);</span><br><span class="line">Play_List(head, m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><p>##3 </p><p>某商场有一个100个车位的停车场，当车位未满时，等待的车辆可以进入并计时；当车位已满时，必须有车辆离开，等待的车辆才能进入；当车辆离开时计算停留的的时间，并且按照每小时1元收费。</p><p>汽车的输入信息格式可以是（进入/离开，车牌号，进入/离开时间），要求可以随时显示停车场内的车辆信息以及收费历史记录。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;#include &lt;ctime&gt;#include &lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNumerOfLot = <span class="number">1</span>;<span class="comment">//停车场最大容量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> lengthOfPlateNumer = <span class="number">6</span>;<span class="comment">//车牌号最大长度</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNumberOfQueue = <span class="number">2</span>;<span class="comment">//等待队列的最大长度</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNumberOfHistoryCharge = <span class="number">200</span>;<span class="comment">//收费历史记录数量的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> OK = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ERROR = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">long</span> inTime;<span class="comment">//车辆进入停车场的时间</span></span><br><span class="line">        <span class="built_in">string</span> plateNumber;<span class="comment">//车牌号</span></span><br><span class="line">        <span class="keyword">int</span> lotOrder;<span class="comment">//车辆在停车场的车位号</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Vehicle() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            lotOrder = maxNumerOfLot;</span><br><span class="line">            inTime = <span class="number">0</span>;</span><br><span class="line">            plateNumber = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">getInTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setInTime</span><span class="params">(<span class="keyword">long</span> inTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;inTime = inTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">getPlateNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> plateNumber;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setPlatNumber</span><span class="params">(<span class="built_in">string</span> plateNumber)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;plateNumber = plateNumber;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getLotOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lotOrder;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setLotOrder</span><span class="params">(<span class="keyword">int</span> lotOrder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;lotOrder = lotOrder;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HistoryCharge</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">string</span> plateNumber;</span><br><span class="line">        <span class="keyword">long</span> inTime;</span><br><span class="line">        <span class="keyword">int</span> charge;<span class="comment">//收取费用</span></span><br><span class="line"></span><br><span class="line">        HistoryCharge() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            plateNumber = <span class="string">""</span>;</span><br><span class="line">            inTime = <span class="number">0</span>;</span><br><span class="line">            charge = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParkingLot</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Vehicle *parkingSpace;<span class="comment">//停车位数组</span></span><br><span class="line">        <span class="keyword">int</span> leftSpace;<span class="comment">//剩余的停车空间</span></span><br><span class="line">        <span class="keyword">int</span> ratePerSecond;<span class="comment">//每秒收费</span></span><br><span class="line">        <span class="keyword">long</span> createdTime;<span class="comment">//停车场建立时间</span></span><br><span class="line">        HistoryCharge *historyCharge;<span class="comment">//历史纪录数组</span></span><br><span class="line">        <span class="keyword">int</span> numberOfHistoryCharge;<span class="comment">//现有的历史记录条数</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        ParkingLot() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            parkingSpace = <span class="keyword">new</span> Vehicle[maxNumerOfLot];</span><br><span class="line">            leftSpace = maxNumerOfLot;</span><br><span class="line">            ratePerSecond = <span class="number">2</span>;</span><br><span class="line">            createdTime = time(<span class="literal">NULL</span>);</span><br><span class="line">            historyCharge = <span class="keyword">new</span> HistoryCharge[maxNumberOfHistoryCharge];</span><br><span class="line">            numberOfHistoryCharge = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getRatePerSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ratePerSecond;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> createdTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getLeftSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> leftSpace;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">in</span><span class="params">(<span class="built_in">string</span> plateNumber)</span> </span>&#123;<span class="comment">//车辆进入停车场</span></span><br><span class="line">            <span class="keyword">if</span>(leftSpace == <span class="number">0</span>) <span class="keyword">return</span> ERROR;<span class="comment">//没有空间则返回错误</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxNumerOfLot; i++) &#123;<span class="comment">//遍历寻找空车位</span></span><br><span class="line">                <span class="keyword">if</span>(parkingSpace[i].getInTime() == <span class="number">0</span>) &#123;</span><br><span class="line">                    parkingSpace[i].setInTime(time(<span class="literal">NULL</span>) - createdTime);</span><br><span class="line">                    parkingSpace[i].setPlatNumber(plateNumber);</span><br><span class="line">                    parkingSpace[i].setLotOrder(i);</span><br><span class="line">                    leftSpace--;<span class="comment">//剩余空间减一</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"剩余车位： "</span> &lt;&lt; leftSpace &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Vehicle <span class="title">out</span><span class="params">(<span class="built_in">string</span> plateNumber)</span> </span>&#123;<span class="comment">//车辆出停车场</span></span><br><span class="line">            <span class="keyword">if</span>(leftSpace != maxNumerOfLot) &#123;<span class="comment">//如果停车场内有车</span></span><br><span class="line">                Vehicle vehicle;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxNumerOfLot; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(parkingSpace[i].getPlateNumber() == plateNumber) &#123;</span><br><span class="line">                        vehicle = parkingSpace[i];</span><br><span class="line">                        parkingSpace[i] = Vehicle();</span><br><span class="line">                        leftSpace++;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"outLot: "</span> &lt;&lt; vehicle.getPlateNumber() &lt;&lt; <span class="string">"\tcost: "</span> &lt;&lt; (time(<span class="literal">NULL</span>) - createdTime - vehicle.getInTime()) * ratePerSecond &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"剩余车位： "</span> &lt;&lt; leftSpace &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                        addHistoryCharge(vehicle.getPlateNumber(), vehicle.getInTime(), (time(<span class="literal">NULL</span>) - createdTime - vehicle.getInTime()) * ratePerSecond);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> vehicle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"No vehicle in this lot"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> Vehicle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addHistoryCharge</span><span class="params">(<span class="built_in">string</span> plateNumber, <span class="keyword">int</span> inTime, <span class="keyword">int</span> charge)</span> </span>&#123;</span><br><span class="line">            historyCharge[numberOfHistoryCharge].plateNumber = plateNumber;</span><br><span class="line">            historyCharge[numberOfHistoryCharge].inTime = inTime;</span><br><span class="line">            historyCharge[numberOfHistoryCharge++].charge = charge;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;<span class="comment">//打印停车场现在车位情况</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"parkingSpace: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(leftSpace == maxNumerOfLot) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"No vehicle in this lot."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxNumerOfLot; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(parkingSpace[i].getInTime() != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; parkingSpace[i].getLotOrder() &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; parkingSpace[i].getPlateNumber() &lt;&lt; <span class="string">'\t'</span> &lt;&lt; time(<span class="literal">NULL</span>) - createdTime - parkingSpace[i].getInTime() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printHistoryCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"收费历史： "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfHistoryCharge; i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; historyCharge[i].plateNumber &lt;&lt; <span class="string">":\t"</span> &lt;&lt; historyCharge[i].charge &lt;&lt; <span class="string">"\t"</span> &lt;&lt; historyCharge[i].inTime &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitingQueue</span> &#123;</span><span class="comment">//等待队列</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Vehicle* waitingSpace;</span><br><span class="line">        <span class="keyword">int</span> leftspace;<span class="comment">//队列剩余空间</span></span><br><span class="line">        <span class="keyword">int</span> queueFront;<span class="comment">//队列头部</span></span><br><span class="line">        <span class="keyword">int</span> queueRear;<span class="comment">// 队列尾部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        WaitingQueue() &#123;<span class="comment">//构造队列</span></span><br><span class="line">            waitingSpace = <span class="keyword">new</span> Vehicle[maxNumberOfQueue];</span><br><span class="line">            leftspace = maxNumberOfQueue;</span><br><span class="line">            queueFront = <span class="number">0</span>;</span><br><span class="line">            queueRear = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getLeftspace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> leftspace;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;<span class="comment">//判断队列是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(leftspace == maxNumberOfQueue) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;<span class="comment">//判断队列是否为满</span></span><br><span class="line">            <span class="keyword">if</span>(leftspace == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">in</span><span class="params">(<span class="built_in">string</span> plateNumber)</span> </span>&#123;<span class="comment">//车辆进入等待队列</span></span><br><span class="line">            <span class="keyword">if</span>(isFull()) <span class="keyword">return</span> ERROR;<span class="comment">//队列满则返回错误</span></span><br><span class="line">            waitingSpace[queueRear].setPlatNumber(plateNumber);</span><br><span class="line">            queueRear = (queueRear + <span class="number">1</span>) % maxNumberOfQueue;</span><br><span class="line">            leftspace--;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Vehicle <span class="title">out</span><span class="params">()</span> </span>&#123;<span class="comment">//车辆离开队列</span></span><br><span class="line">            <span class="keyword">if</span>(!isEmpty()) &#123;</span><br><span class="line">                Vehicle vehicle = waitingSpace[queueFront];</span><br><span class="line">                queueFront = (queueFront + <span class="number">1</span>) % maxNumberOfQueue;</span><br><span class="line">                leftspace++;</span><br><span class="line">                <span class="keyword">return</span> vehicle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"No vehicle in this queue."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> Vehicle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;<span class="comment">//打印队列排队情况</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"waitingQueue: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(!isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = queueFront; i != queueRear; i = (i + <span class="number">1</span>) % maxNumberOfQueue) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; waitingSpace[i].getPlateNumber() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"No vehicle in this queue."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interface</span><span class="params">()</span> </span>&#123;<span class="comment">//用户操作界面</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请选择操作："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、进入停车场"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、离开停车场"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"3、打印停车场"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"4、收费历史"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"5、退出程序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ParkingLot parkingLot = ParkingLot();</span><br><span class="line">    WaitingQueue waitingQueue = WaitingQueue();</span><br><span class="line">    <span class="keyword">int</span> operation;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"欢迎来到本停车场:\n共有车位"</span> &lt;&lt; maxNumerOfLot &lt;&lt; <span class="string">"个，排队位置"</span> &lt;&lt; maxNumberOfQueue &lt;&lt; <span class="string">"个。"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    interface();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; operation) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation == <span class="number">1</span>) &#123;<span class="comment">//如果选择进车</span></span><br><span class="line">            <span class="keyword">if</span>(parkingLot.getLeftSpace() != <span class="number">0</span>) &#123;<span class="comment">//如果停车场还有车位</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the plate number: "</span>;</span><br><span class="line">                <span class="built_in">string</span> plateNumber;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; plateNumber;</span><br><span class="line">                parkingLot.in(plateNumber);<span class="comment">//进入停车场</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"InLot: "</span> &lt;&lt; plateNumber &lt;&lt; <span class="string">"\ttime: "</span> &lt;&lt; (time(<span class="literal">NULL</span>) - parkingLot.getCreatedTime()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!waitingQueue.isFull())&#123;<span class="comment">//没有车位，进入等待队列</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the plate number: "</span>;</span><br><span class="line">                <span class="built_in">string</span> plateNumber;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; plateNumber;</span><br><span class="line">                waitingQueue.in(plateNumber);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; plateNumber &lt;&lt; <span class="string">" is waiting in the queue."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//如果等待队列也满了，输出相关信息</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Sorry, No space in lot or queue."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( operation == <span class="number">2</span>) &#123;<span class="comment">//如果选择离开停车场</span></span><br><span class="line">            <span class="keyword">if</span>(parkingLot.getLeftSpace() != maxNumerOfLot) &#123;<span class="comment">//如果有车</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the plate number: "</span>;</span><br><span class="line">                <span class="built_in">string</span> plateNumber;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; plateNumber;</span><br><span class="line">                Vehicle vehicle = parkingLot.out(plateNumber);<span class="comment">//离开停车场</span></span><br><span class="line">                <span class="keyword">if</span>(!waitingQueue.isEmpty()) &#123;<span class="comment">//如果等待队列有车</span></span><br><span class="line">                    plateNumber = waitingQueue.out().getPlateNumber();</span><br><span class="line">                    parkingLot.in(plateNumber);<span class="comment">//该车进入停车场</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; plateNumber &lt;&lt; <span class="string">" has entered."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">3</span>) &#123;<span class="comment">//如果选择打印停车场及队列情况</span></span><br><span class="line">            parkingLot.print();<span class="comment">//打印停车场情况</span></span><br><span class="line">            waitingQueue.print();<span class="comment">//打印队列情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (operation == <span class="number">4</span>) &#123;<span class="comment">//如果选择打印历史记录</span></span><br><span class="line">            parkingLot.printHistoryCharge();<span class="comment">//打印历史记录</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">5</span>) &#123;<span class="comment">//如果选择退出</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//退出循环，程序结束</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        interface();<span class="comment">//打印用户界面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##4</p><p>某银行营业厅共有6个营业窗口，设有排队系统广播叫号，该银行的业务分为公积金、银行卡、理财卡等三种。公积金业务指定1号窗口，银行卡业务指定2、3、4号窗口，理财卡业务指定5、6号窗口。但如果5、6号窗口全忙，而2、3、4号窗口有空闲时，理财卡业务也可以在空闲的2、3、4号窗口之一办理。</p><p>客户领号、业务完成可以作为输入信息，要求可以随时显示6个营业窗口的状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;#define ERROR -1#define OK 1</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span><span class="comment">//客户类</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> order;<span class="comment">//客户排队序号</span></span><br><span class="line">        <span class="keyword">int</span> typeOfCard;<span class="comment">//客户类型</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Customer() &#123;<span class="comment">//构造函数1</span></span><br><span class="line">            order = <span class="number">0</span>;</span><br><span class="line">            typeOfCard = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Customer(<span class="keyword">int</span> order, <span class="keyword">int</span> typeOfCard) &#123;<span class="comment">//构造函数2</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;order = order;</span><br><span class="line">            <span class="keyword">this</span>-&gt;typeOfCard = order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getTypeOfCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> typeOfCard;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitingQueue</span> &#123;</span><span class="comment">//排队队列</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> length = <span class="number">10</span>;<span class="comment">//最大队列长度</span></span><br><span class="line">        <span class="keyword">int</span> queueFront; <span class="comment">//队列头部</span></span><br><span class="line">        <span class="keyword">int</span> queueRear; <span class="comment">//队列尾部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:<span class="comment">//为减少代码量，将某些变量设为public</span></span><br><span class="line">        Customer* waitingQueue;</span><br><span class="line">        <span class="keyword">int</span> numberOfCustomers;<span class="comment">//队列中客户人数</span></span><br><span class="line"></span><br><span class="line">        WaitingQueue() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            waitingQueue = <span class="keyword">new</span> Customer[length];</span><br><span class="line">            queueFront = <span class="number">0</span>;</span><br><span class="line">            queueRear = <span class="number">0</span>;</span><br><span class="line">            numberOfCustomers = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;<span class="comment">//判断队列是否满</span></span><br><span class="line">            <span class="keyword">if</span>(numberOfCustomers == length) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;<span class="comment">//判断队列是否空</span></span><br><span class="line">            <span class="keyword">if</span>(numberOfCustomers == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> queueFront;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addFront</span><span class="params">()</span> </span>&#123;<span class="comment">//队前加一</span></span><br><span class="line">            queueFront = (queueFront + <span class="number">1</span>) % length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getRear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> queueRear;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addRear</span><span class="params">()</span> </span>&#123;<span class="comment">//队尾加一</span></span><br><span class="line">            queueRear = (queueRear + <span class="number">1</span>) % length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> &#123;</span>银行类</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> numberOfWindows = <span class="number">6</span>;<span class="comment">//窗口数量</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> numberOfCardTypes = <span class="number">3</span>;<span class="comment">//客户种类</span></span><br><span class="line">        <span class="keyword">int</span> *windows;<span class="comment">//窗口数组，0表示空闲，1表示处理业务中</span></span><br><span class="line">        WaitingQueue *queues;<span class="comment">//排队队列数组，与客户类型一一对应</span></span><br><span class="line">        <span class="keyword">int</span> order;<span class="comment">//客户序号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Bank() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            windows = <span class="keyword">new</span> <span class="keyword">int</span>[numberOfWindows] ();</span><br><span class="line">            queues = <span class="keyword">new</span> WaitingQueue[numberOfCardTypes];</span><br><span class="line">            order = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">interface</span><span class="params">()</span> </span>&#123;<span class="comment">//用户界面</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------菜单----------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、新的客户"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、完成业务"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"3、打印状态"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"4、退出程序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------菜单----------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//根据客户类型，进入相应等待队列</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">enterWaitingQueue</span><span class="params">(<span class="keyword">int</span> order, <span class="keyword">int</span> typeOfCard)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> typeOrder = typeOfCard - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(queues[typeOrder].numberOfCustomers == queues[typeOrder].getLength()) <span class="keyword">return</span> ERROR;<span class="comment">//如果对应队列已满，返回错误</span></span><br><span class="line">            queues[typeOrder].waitingQueue[queues[typeOrder].getRear()] = Customer(order, typeOfCard);</span><br><span class="line">            queues[typeOrder].addRear();</span><br><span class="line">            queues[typeOrder].numberOfCustomers++;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//客户离开等待队列，准备办理业务</span></span><br><span class="line">        <span class="function">Customer <span class="title">leaveWaitingQueue</span><span class="params">(<span class="keyword">int</span> typeOfCard)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> typeOrder = typeOfCard - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(queues[typeOrder].numberOfCustomers == <span class="number">0</span>) <span class="keyword">return</span> Customer();</span><br><span class="line">            Customer customer = queues[typeOrder].waitingQueue[queues[typeOrder].getFront()];</span><br><span class="line">            queues[typeOrder].addFront();</span><br><span class="line">            queues[typeOrder].numberOfCustomers--;</span><br><span class="line">            <span class="keyword">return</span> customer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">finishWindow</span><span class="params">(<span class="keyword">int</span> orderOfWindow)</span> </span>&#123;<span class="comment">// 选择完成业务的窗口</span></span><br><span class="line">            <span class="keyword">if</span>(orderOfWindow &lt; <span class="number">0</span> || orderOfWindow &gt;= numberOfWindows) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(windows[orderOfWindow] != <span class="number">0</span>) &#123;</span><br><span class="line">                windows[orderOfWindow] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">startWindow</span><span class="params">(<span class="keyword">int</span> orderOfWindow)</span> </span>&#123;<span class="comment">//选择窗口开始办理业务</span></span><br><span class="line">            <span class="keyword">if</span>(orderOfWindow &lt; <span class="number">0</span> || orderOfWindow &gt;= numberOfWindows) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(windows[orderOfWindow] == <span class="number">0</span>) &#123;</span><br><span class="line">                windows[orderOfWindow] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printWindow</span><span class="params">()</span> </span>&#123;<span class="comment">//打印所有窗口状态</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Windows Status: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfWindows; i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Window "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">                <span class="keyword">if</span>(windows[i]) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t处理中......"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t空闲中......"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">chooseCardType</span><span class="params">(<span class="keyword">int</span> typeOfCard)</span> </span>&#123;<span class="comment">//根据卡的类型返回string，方便打印</span></span><br><span class="line">            <span class="keyword">switch</span> (typeOfCard) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="string">"公积金"</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="string">"银行卡"</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="string">"理财卡"</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">()</span> </span>&#123;<span class="comment">//打印所有等待队列</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"WaitingQueue: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfCardTypes; i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; chooseCardType(i+<span class="number">1</span>) &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = queues[i].getFront(); j != queues[i].getRear(); j = (j + <span class="number">1</span>) % queues[i].getLength() ) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\tCustomer: "</span> &lt;&lt; queues[i].waitingQueue[j].getOrder() &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printListOfCard</span><span class="params">()</span> </span>&#123;<span class="comment">//打印客户类型列表</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、公积金"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、银行卡"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"3、理财卡"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//运行函数，体现逻辑</span></span><br><span class="line">            <span class="keyword">int</span> operation;</span><br><span class="line">            interface();<span class="comment">//打印用户界面</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; operation) &#123;<span class="comment">//输入循环</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(operation == <span class="number">1</span>) &#123;<span class="comment">//如果选择新用户</span></span><br><span class="line">                    printListOfCard();<span class="comment">//打印已有客户类型列表，方便选择</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> typeOfCard;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入客户类型： "</span>;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; typeOfCard;</span><br><span class="line">                    <span class="keyword">if</span>(typeOfCard == <span class="number">1</span>) &#123;<span class="comment">//如果选择公积金</span></span><br><span class="line">                        <span class="keyword">if</span>(windows[<span class="number">0</span>]) &#123;<span class="comment">//如果窗口1正忙</span></span><br><span class="line">                            enterWaitingQueue(order, typeOfCard);<span class="comment">//进入等待队列</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;<span class="comment">//如果窗口1空闲</span></span><br><span class="line">                            startWindow(<span class="number">0</span>);<span class="comment">//窗口1开始办理业务</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(typeOfCard == <span class="number">2</span>) &#123;<span class="comment">//如果选择银行卡</span></span><br><span class="line">                        <span class="keyword">if</span>(windows[<span class="number">1</span>] &amp;&amp; windows[<span class="number">2</span>] &amp;&amp; windows[<span class="number">3</span>]) &#123;<span class="comment">//若2、3、4均忙</span></span><br><span class="line">                            enterWaitingQueue(order++, typeOfCard);<span class="comment">//进入等待队列</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">1</span>] == <span class="number">0</span>) &#123;如果有一个空闲，则改窗口开始业务</span><br><span class="line">                            startWindow(<span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">2</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                            startWindow(<span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            startWindow(<span class="number">3</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(typeOfCard == <span class="number">3</span>) &#123;<span class="comment">//如果选择理财卡</span></span><br><span class="line">                        <span class="keyword">if</span>(windows[<span class="number">4</span>] &amp;&amp; windows[<span class="number">5</span>]) &#123;如果<span class="number">5</span>、<span class="number">6</span>窗口均忙</span><br><span class="line"><span class="comment">//若2、3、4窗口有空闲，则至相应窗口办理业务</span></span><br><span class="line">                            <span class="keyword">if</span>(windows[<span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                                startWindow(<span class="number">1</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">2</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                                startWindow(<span class="number">2</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">3</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                                startWindow(<span class="number">3</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;<span class="comment">//若2、3、4窗口也均忙，进入等待队列</span></span><br><span class="line">                                enterWaitingQueue(order++, typeOfCard);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">4</span>] == <span class="number">0</span>) &#123;如果<span class="number">5</span>、<span class="number">6</span>窗口有空闲，则办理业务</span><br><span class="line">                            startWindow(<span class="number">4</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            startWindow(<span class="number">5</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    order++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">2</span>) &#123;如果选择某窗口完成业务</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入完成的窗口号（1-6）： "</span>;</span><br><span class="line">                    <span class="keyword">int</span> i;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;<span class="comment">//如果是1窗口，查看队列，若有人则继续办理</span></span><br><span class="line">                        <span class="keyword">if</span>(!queues[<span class="number">0</span>].isEmpty()) &#123;</span><br><span class="line">                            leaveWaitingQueue(<span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            finishWindow(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">1</span> || i == <span class="number">2</span> || i == <span class="number">3</span>) &#123;<span class="comment">//如果是2、3、4窗口</span></span><br><span class="line">                        <span class="keyword">if</span>(!queues[<span class="number">1</span>].isEmpty()) &#123;<span class="comment">//如果银行卡队列不空，办理银行卡</span></span><br><span class="line">                            leaveWaitingQueue(<span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(!queues[<span class="number">2</span>].isEmpty()) &#123;<span class="comment">//否则如果理财卡队列不空，办理之</span></span><br><span class="line">                            leaveWaitingQueue(<span class="number">3</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;<span class="comment">//两队列均为空则设置窗口空闲</span></span><br><span class="line">                            finishWindow(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">4</span> || i == <span class="number">5</span>) &#123;<span class="comment">//如果是5、6窗口，等待队列为空则继续办理</span></span><br><span class="line">                        <span class="keyword">if</span>(!queues[<span class="number">3</span>].isEmpty()) &#123;</span><br><span class="line">                            leaveWaitingQueue(<span class="number">3</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            finishWindow(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">3</span>) &#123;<span class="comment">//如果选择打印，则打印窗口队列状态</span></span><br><span class="line">                    printWindow();</span><br><span class="line">                    printQueue();</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">4</span>) &#123;<span class="comment">//如果选择退出，则结束循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                interface();<span class="comment">//不结束循环则打印用户界面</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bank *bank = <span class="keyword">new</span> Bank();</span><br><span class="line">    bank-&gt;run();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>4阶斐波那契序列如下：f0=f1=f2=0,f3=1,…,fi=fi-1+fi-2+fi-3+fi-4，</p><p>利用容量为k=4的循环队列，构造序列的前n+1项（f0, f1 , f2 ,… fn ），要求满足fn ≤200而fn+1 &gt;200。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;using namespace std;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> &#123;</span><span class="comment">//斐波那契类</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> lengthOfqueue = <span class="number">4</span>;<span class="comment">//队列长度</span></span><br><span class="line">        <span class="keyword">int</span> *circularQueue;<span class="comment">//循环队列</span></span><br><span class="line">        <span class="keyword">int</span> queueFront;<span class="comment">//队列头部，没必要设置队尾</span></span><br><span class="line">        <span class="keyword">int</span> m;<span class="comment">//题中的200</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Fibonacci(<span class="keyword">int</span> m) &#123;<span class="comment">//构造函数，设置队列为0、0、0、1</span></span><br><span class="line">            circularQueue = <span class="keyword">new</span> <span class="keyword">int</span>[lengthOfqueue];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthOfqueue<span class="number">-1</span>; i++) &#123;</span><br><span class="line">                circularQueue[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            circularQueue[lengthOfqueue - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            queueFront = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m = m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;<span class="comment">//计算斐波那契数列</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthOfqueue; i++) &#123;<span class="comment">//输出前四项</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; circularQueue[i] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthOfqueue; i++) &#123;<span class="comment">//计算fn+1</span></span><br><span class="line">                    sum += circularQueue[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; m) <span class="keyword">break</span>;<span class="comment">//如果fn+1&gt;mj结束</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">"  "</span>;<span class="comment">//否则打印出来，并进入队列</span></span><br><span class="line">                circularQueue[queueFront] = sum;</span><br><span class="line">                queueFront = (queueFront+<span class="number">1</span>) % lengthOfqueue;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fibonacci *fibonacci = <span class="keyword">new</span> Fibonacci(<span class="number">200</span>);</span><br><span class="line">    fibonacci-&gt;calculate();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>八皇后问题：设8皇后问题的解为 (x1,x2, x3, …,x8), 约束条件为：在8x8的棋盘上，其中任意两个xi 和xj不能位于棋盘的同行、同列及同对角线。要求用一位数组进行存储，输出所有可能的排列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;#define ERROR -1#define OK 1</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NQueenStack</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">8</span>;<span class="comment">//棋盘大小</span></span><br><span class="line">        <span class="keyword">int</span> *queenStack;</span><br><span class="line">        <span class="keyword">int</span> top;<span class="comment">//栈顶</span></span><br><span class="line">        <span class="keyword">int</span> printOrder;<span class="comment">//标记结果数量</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> queenStack[top - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="comment">//入栈</span></span><br><span class="line">            <span class="keyword">if</span>(top == n) <span class="keyword">return</span> ERROR;</span><br><span class="line">            queenStack[top++] = i;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;<span class="comment">//出栈</span></span><br><span class="line">            <span class="keyword">if</span>(top == <span class="number">0</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">            <span class="keyword">return</span> queenStack[--top];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> tryNumber)</span> </span>&#123;<span class="comment">//检查即将入栈的数是否满足条件</span></span><br><span class="line">            <span class="keyword">if</span>(tryNumber == n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(queenStack[i] == tryNumber) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//检查列</span></span><br><span class="line">                <span class="keyword">if</span>(top - i == tryNumber - queenStack[i]) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//检查主对角线</span></span><br><span class="line">                <span class="keyword">if</span>(top + tryNumber == queenStack[i] + i) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//检查副对角线</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printQueenStack</span><span class="params">()</span> </span>&#123;打印堆栈</span><br><span class="line">            <span class="keyword">if</span>(top != n) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; printOrder++ &lt;&lt; <span class="string">":\t"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; queenStack[i] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        NQueenStack() &#123;构造函数</span><br><span class="line">            queenStack = <span class="keyword">new</span> <span class="keyword">int</span>[n] ();<span class="comment">//将堆栈初始化为0</span></span><br><span class="line">            top = <span class="number">0</span>;</span><br><span class="line">            printOrder = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> tryNumber = <span class="number">0</span>;<span class="comment">//即将入栈的数</span></span><br><span class="line">            <span class="keyword">int</span> isOver = <span class="number">1</span>;<span class="comment">//标记是否跳出循环</span></span><br><span class="line">            <span class="keyword">int</span> isPrint = <span class="number">1</span>;<span class="comment">//标记是否打印当前堆栈</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) &#123;<span class="comment">//主循环</span></span><br><span class="line">                <span class="keyword">if</span>(check(tryNumber)) &#123;<span class="comment">//如果该数满足条件</span></span><br><span class="line">                    push(tryNumber);<span class="comment">//入栈</span></span><br><span class="line">                    tryNumber = <span class="number">0</span>;<span class="comment">//下一行，从第一列开始检查</span></span><br><span class="line">                    <span class="keyword">if</span>(top == n &amp;&amp; isPrint ) &#123;<span class="comment">//如果栈满，且可以打印，打印</span></span><br><span class="line">                        printQueenStack();</span><br><span class="line">                        tryNumber = pop() + <span class="number">1</span>;<span class="comment">//尝试的数变为出栈的数加一</span></span><br><span class="line">                        isPrint = <span class="number">0</span>;<span class="comment">//避免重复打印，</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(tryNumber &lt; n ) &#123;<span class="comment">//如果不满足条件，尝试下一个数</span></span><br><span class="line">                    tryNumber++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tryNumber = pop() + <span class="number">1</span>;<span class="comment">//如果不满足条件且队列满，弹出</span></span><br><span class="line">                    isPrint = <span class="number">1</span>;<span class="comment">//此时改为可以打印</span></span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//以下为设置循环打印条件，防止不停打印</span></span><br><span class="line">                <span class="keyword">if</span>(queenStack[<span class="number">0</span>] == <span class="number">1</span>)</span><br><span class="line">                    isOver = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(isOver == <span class="number">0</span> &amp;&amp; queenStack[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NQueenStack *nQueenStack = <span class="keyword">new</span> NQueenStack();</span><br><span class="line">    nQueenStack-&gt;run();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#数组与广义表</p><p>##7 </p><p> 鞍点问题：  若矩阵A中的某一元素A[i,j]是第i行中的最小值，而又是第j列中的最大值，则称A[i,j]是矩阵A中的一个鞍点。写出一个可以确定鞍点位置的程序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">double</span> *matrix;</span><br><span class="line">        <span class="keyword">int</span> numberOfRow;</span><br><span class="line">        <span class="keyword">int</span> numberOfColumn;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Matrix(<span class="keyword">int</span> numberOfRow, <span class="keyword">int</span> numberOfColumn) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;numberOfRow = numberOfRow;</span><br><span class="line">            <span class="keyword">this</span>-&gt;numberOfColumn = numberOfColumn;</span><br><span class="line">            matrix = (<span class="keyword">double</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>) * numberOfRow * numberOfColumn);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) &#123;</span><br><span class="line">                    *(matrix + i * numberOfRow + j) = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isSaddlePoint</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; numberOfRow; index++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(*(matrix + i * numberOfRow + j) &lt;= *(matrix + index * numberOfRow + j) &amp;&amp; index != i) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; numberOfColumn; index++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(*(matrix + i * numberOfRow + j) &gt;= *(matrix + i * numberOfRow + index) &amp;&amp; index != j) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printSaddlePoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(isSaddlePoint(i, j)) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; *(matrix + i * numberOfRow + j) &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-\t"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">double</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= numberOfRow || i &lt; <span class="number">0</span> || i &gt;= numberOfRow) <span class="keyword">return</span> ERROR;</span><br><span class="line">            *(matrix + i * numberOfRow + j) = value;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入矩阵： ("</span> &lt;&lt; numberOfRow &lt;&lt; <span class="string">" * "</span> &lt;&lt; numberOfColumn &lt;&lt; <span class="string">"): "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) &#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; *(matrix + i * numberOfRow + j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; *(matrix + i * numberOfRow + j) &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Matrix *matrix = <span class="keyword">new</span> Matrix(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    matrix-&gt;setValue(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    matrix-&gt;setValue(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    matrix-&gt;setValue(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    matrix-&gt;setValue(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    matrix-&gt;printMatrix();</span><br><span class="line">    matrix-&gt;printSaddlePoint();</span><br><span class="line"></span><br><span class="line">    matrix-&gt;setValues();</span><br><span class="line">    matrix-&gt;printSaddlePoint();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>稀疏矩阵转置： 输入稀疏矩阵中每个元素的行号、列号、值，建立稀疏矩阵的三元组存储结构，并将此矩阵转置，显示转置前后的三元组结构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOSPACE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triple</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">double</span> value;</span><br><span class="line"></span><br><span class="line">        Triple() &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            value = <span class="number">0.</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TSMatrix</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Triple *matrix;</span><br><span class="line">        <span class="keyword">int</span> numberOfRow;</span><br><span class="line">        <span class="keyword">int</span> numberOfColumn;</span><br><span class="line">        <span class="keyword">int</span> maxNumberOfNonzeroPoint;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> numberOfNonzeroPoint;</span><br><span class="line"></span><br><span class="line">        TSMatrix(<span class="keyword">int</span> numberOfRow, <span class="keyword">int</span> numberOfColumn) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;numberOfRow = numberOfRow;</span><br><span class="line">            <span class="keyword">this</span>-&gt;numberOfColumn = numberOfColumn;</span><br><span class="line">            numberOfNonzeroPoint = <span class="number">0</span>;</span><br><span class="line">            maxNumberOfNonzeroPoint =  (<span class="keyword">int</span>)numberOfColumn * numberOfRow * <span class="number">0.05</span>;</span><br><span class="line">            matrix = <span class="keyword">new</span> Triple[maxNumberOfNonzeroPoint];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">oneDimensionOrder</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (i - <span class="number">1</span>) * numberOfColumn + j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">setPointByOrder</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; numberOfRow || i &lt;= <span class="number">0</span> || j &gt; numberOfColumn || j &lt;= <span class="number">0</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">            <span class="keyword">if</span>(numberOfNonzeroPoint == maxNumberOfNonzeroPoint) <span class="keyword">return</span> NOSPACE;</span><br><span class="line">            <span class="keyword">if</span>(numberOfNonzeroPoint != <span class="number">0</span>) &#123;</span><br><span class="line">                Triple lastPoint = matrix[numberOfNonzeroPoint - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(oneDimensionOrder(lastPoint.i, lastPoint.j) &gt; oneDimensionOrder(i, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ERROR;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            matrix[numberOfNonzeroPoint].i = i;</span><br><span class="line">            matrix[numberOfNonzeroPoint].j = j;</span><br><span class="line">            matrix[numberOfNonzeroPoint].value = value;</span><br><span class="line">            numberOfNonzeroPoint++;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setPointsByOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i,j;</span><br><span class="line">            <span class="keyword">double</span> value;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"please set Point by order: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; i &gt;&gt; j &gt;&gt; value) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">int</span> status = setPointByOrder(i, j, value);</span><br><span class="line">                <span class="keyword">if</span>(status == ERROR) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input error! Please try again."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(status == NOSPACE) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"No more space!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">TSMatrix* <span class="title">getFastTransposedSMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            TSMatrix *retMatrix = <span class="keyword">new</span> TSMatrix(numberOfColumn, numberOfRow);</span><br><span class="line">            retMatrix-&gt;numberOfNonzeroPoint = numberOfNonzeroPoint;</span><br><span class="line">            <span class="keyword">if</span>(numberOfNonzeroPoint) &#123;</span><br><span class="line">                <span class="keyword">int</span> num[numberOfColumn];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) num[j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; numberOfNonzeroPoint; index++) num[matrix[index].j - <span class="number">1</span>]++;</span><br><span class="line">                <span class="keyword">int</span> cpot[numberOfColumn];</span><br><span class="line">                cpot[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; numberOfColumn; j++) cpot[j] = cpot[j - <span class="number">1</span>] + num[j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; numberOfNonzeroPoint; index++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> col = matrix[index].j;</span><br><span class="line">                    <span class="keyword">int</span> n = cpot[col];</span><br><span class="line">                    retMatrix-&gt;matrix[n].i = matrix[index].j;</span><br><span class="line">                    retMatrix-&gt;matrix[n].j = matrix[index].i;</span><br><span class="line">                    retMatrix-&gt;matrix[n].value = matrix[index].value;</span><br><span class="line">                    cpot[col]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> retMatrix;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printTSMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= numberOfColumn; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(oneDimensionOrder(i, j) &lt;= oneDimensionOrder(matrix[index].i, matrix[index].j)) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; matrix[index++].value &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; "Please input the size of the matrix: (m*n)" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//    int row, column;</span></span><br><span class="line"><span class="comment">//    cin &gt;&gt; row &gt;&gt; column;</span></span><br><span class="line">    TSMatrix *matrix = <span class="keyword">new</span> TSMatrix(<span class="number">10</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//    matrix-&gt;setPointsByOrder();</span></span><br><span class="line">    matrix-&gt;setPointByOrder(<span class="number">10</span>, <span class="number">5</span>, <span class="number">55</span>);</span><br><span class="line">    matrix-&gt;printTSMatrix();</span><br><span class="line">    matrix = matrix-&gt;getFastTransposedSMatrix();</span><br><span class="line">    matrix-&gt;printTSMatrix();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#以下的，貌似因为写在vs的默认文件夹里面，重装系统丢掉了。。</p><p>狗带。。</p><p>#树和二叉树</p><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>以下问题要求统一在一个大程序里解决：</p><p>按先序遍历的扩展序列建立二叉树的存储结构；</p><p>二叉树先序、中序、后序遍历的递归算法；</p><p>二叉树中序遍历的非递归算法；</p><p>二叉树层次遍历的非递归算法；</p><p>求二叉树的深度(后序遍历)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>以下问题要求统一在一个大程序里解决：</p><p>建立树的存储结构；</p><p>求树的深度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>输入任意的一个网，用普里姆(Prim)算法构造最小生成树。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>要求建立图的存储结构（邻接表或邻接矩阵），输入任意的一个图，显示图的深度优先搜索遍历路径。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p>要求建立图的存储结构（邻接表或邻接矩阵），输入任意的一个图，显示图的广度优先搜索遍历路径。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>##14</p><p>设计一个读入一串整数构成一颗二叉排序树的程序，从二叉排序树中删除一个结点，使该二叉树仍保持二叉排序树的特性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>设定哈希函数 H(key) = key MOD 11 ( 表长=11 )，输入一组关键字序列，根据线性探测再散列解决冲突的方法建立哈希表的存储结构，显示哈希表，任意输入关键字，判断是否在哈希表中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#排序</p><p>##16</p><p>以下问题要求统一在一个大程序里解决：</p><p>​        折半插入排序；</p><pre><code>冒泡排序；</code></pre><p>​        快速排序；</p><p>​        简单选择排序；                 </p><pre><code>归并排序；</code></pre><p>​    堆排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;p&gt;##1 &lt;/p&gt;
&lt;p&gt;某软件公司大约有30名员工，每名员工有姓名、工号、职务等属性，每年都有员工离职和入职。&lt;/p&gt;
&lt;p&gt;把所有
      
    
    </summary>
    
      <category term="数据结构" scheme="http://wang22ti.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>朝花夕拾——《计算机网络原理》实验合集</title>
    <link href="http://wang22ti.com/2018/05/11/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C%E5%90%88%E9%9B%86/"/>
    <id>http://wang22ti.com/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/</id>
    <published>2018-05-11T13:53:51.000Z</published>
    <updated>2018-05-11T15:24:48.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易Web-Mail服务器"><a href="#简易Web-Mail服务器" class="headerlink" title="简易Web Mail服务器"></a>简易Web Mail服务器</h1><p>该实验由我和温浩珉同学合作完成，主要分为TCP连接测试、</p><h2 id="TCP连接测试"><a href="#TCP连接测试" class="headerlink" title="TCP连接测试"></a>TCP连接测试</h2><h3 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h3><ol><li>各自编写两个版本的服务端和客户端</li><li>分别以对方作为服务器和客户端，测试自己的客户端和服务器程序</li><li>将服务端代码上传至服务器，再次测试</li></ol><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端-王子泰</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 连接到百度</span></span><br><span class="line"><span class="comment"># host, port = 'www.baidu.com', 80</span></span><br><span class="line"><span class="comment"># ip = socket.gethostbyname(host)</span></span><br><span class="line"><span class="comment"># 连接到自己</span></span><br><span class="line">host, port = <span class="string">'127.0.0.1'</span>, <span class="number">80</span></span><br><span class="line">ip = socket.gethostbyname(host)</span><br><span class="line"><span class="comment"># 连接到别人</span></span><br><span class="line"><span class="comment"># host, port = '192.168.43.157', 6666</span></span><br><span class="line"><span class="comment"># ip = socket.gethostbyname(host)</span></span><br><span class="line">ip_port = (ip, port)</span><br><span class="line">sk.connect(ip_port)</span><br><span class="line">message = <span class="string">"GET / HTTP/1.1\r\n\r\n"</span></span><br><span class="line">sk.sendall(bytes(message, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">info = sk.recv(<span class="number">4096</span>)</span><br><span class="line">print(info)</span><br><span class="line">sk.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器端-王子泰</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host, port = <span class="string">'127.0.0.1'</span>, <span class="number">80</span></span><br><span class="line"><span class="comment"># host, port = '100.89.184.99', 80</span></span><br><span class="line">ip = socket.gethostbyname(host)</span><br><span class="line">ip_port = (ip, port)</span><br><span class="line">sk.bind(ip_port)</span><br><span class="line"></span><br><span class="line">sk.listen()</span><br><span class="line">print(<span class="string">'listening...'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    connect, address = sk.accept()</span><br><span class="line">    print(<span class="string">'accepting...'</span>)</span><br><span class="line">    request = connect.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'receive: '</span> + str(request))</span><br><span class="line">    http_response = <span class="string">"""</span></span><br><span class="line"><span class="string">    HTTP/1.1 200 OK</span></span><br><span class="line"><span class="string">    Hello, World!</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    connect.send(bytes(http_response, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    connect.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端-温浩珉</span></span><br><span class="line"><span class="comment">#tcp client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#ip_port=('172.27.69.48',9999)</span></span><br><span class="line">ip_port=(<span class="string">'100.89.184.99'</span>,<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_send</span><span class="params">(content=<span class="string">'hallo'</span>)</span>:</span></span><br><span class="line">    sk=socket.socket()</span><br><span class="line">    sk.connect(ip_port)</span><br><span class="line">    sk.sendall(bytes(content,<span class="string">'utf8'</span>))</span><br><span class="line">    server_reply=sk.recv(<span class="number">1024</span>)</span><br><span class="line">    print(str(server_reply,<span class="string">'utf-8'</span>))</span><br><span class="line">    sk.close()</span><br><span class="line">client_send(content=<span class="string">'哈喽，子泰'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器端-温浩珉</span></span><br><span class="line">ip_port=(<span class="string">'162.219.123.220'</span>,<span class="number">6666</span>)</span><br><span class="line">sk=socket.socket()</span><br><span class="line">sk.bind(ip_port)</span><br><span class="line">sk.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"server waiting..."</span>)</span><br><span class="line">    conn,addr=sk.accept()</span><br><span class="line">    client_data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">    print(str(client_data),<span class="string">'utf-8'</span>)</span><br><span class="line">    conn.sendall(bytes(<span class="string">"ok"</span>))</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image2.png" alt=""></p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image3.png" alt=""></p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image4.png" alt=""></p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image5.png" alt=""></p><h2 id="web服务器搭建"><a href="#web服务器搭建" class="headerlink" title="web服务器搭建"></a>web服务器搭建</h2><h3 id="框架简介"><a href="#框架简介" class="headerlink" title="框架简介"></a>框架简介</h3><p>我们项目采用Django。Django是一个开放源代码的Web应用框架，由Python写成。采用了MVC的框架模式，即模型M，视图V和控制器C.使用模型得到了如下项目文件结构：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image6.png" alt=""></p><h3 id="网站编写"><a href="#网站编写" class="headerlink" title="网站编写"></a>网站编写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>邮件发送网站<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background-img</span>=<span class="string">D:\\Study\\必修\\计算机网络原理\\第二章实验\\mail_website\\templates\\back_ground.jpg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/mail-send"</span>&gt;</span></span><br><span class="line">     &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"height:500px;width:900px"</span> <span class="attr">border</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>收件人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"recevier"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"发送"</span> <span class="attr">style</span>=<span class="string">"width:100px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width:100px;vertical-align:top;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">b</span>&gt;</span>邮件内容<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"height:400px;width:800px;align:right;text-align:top"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">style</span>=<span class="string">"background-color:#FFA500;text-align:center;"</span>&gt;</span></span><br><span class="line">                版权 © mail service.com</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图处理函数view.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEBase, MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.encoders <span class="keyword">import</span> encode_base64</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail_send_post</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">"mail_send_post.html"</span>)</span><br><span class="line">_user = <span class="string">"wang22ti@163.com"</span></span><br><span class="line">_pwd = <span class="string">"**********"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail_send</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        content = request.POST[<span class="string">'content'</span>]</span><br><span class="line">        _to = request.POST[<span class="string">'recevier'</span>]</span><br><span class="line">        msg = MIMEMultipart()</span><br><span class="line">        msg[<span class="string">"Subject"</span>] = <span class="string">"hello world"</span></span><br><span class="line">        msg[<span class="string">"From"</span>] = _user</span><br><span class="line">        <span class="comment"># 图片加入文本</span></span><br><span class="line">        text = MIMEText(<span class="string">'&lt;html&gt;&lt;body&gt;&lt;div&gt;%s&lt;/div&gt;&lt;img src="cid:0"/&gt;&lt;/body&gt;&lt;/html&gt;'</span> % content, <span class="string">'html'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        msg.attach(text)</span><br><span class="line">        <span class="comment"># 附件</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">r'templates\image\1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 设置附件的MIME和文件名 这里是png类型：</span></span><br><span class="line">            attachfile = MIMEBase(<span class="string">'image'</span>, <span class="string">'png'</span>, filename=<span class="string">'1.png'</span>)</span><br><span class="line">            <span class="comment"># 加上必要的头信息</span></span><br><span class="line">            attachfile.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'1.png'</span>)</span><br><span class="line">            attachfile.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;0&gt;'</span>)</span><br><span class="line">            attachfile.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="comment"># 把附件类容读进来</span></span><br><span class="line">            attachfile.set_payload(f.read())</span><br><span class="line">            <span class="comment"># 利用base64编码</span></span><br><span class="line">            encode_base64(attachfile)</span><br><span class="line">            <span class="comment"># 添加到MIMEMultipart:</span></span><br><span class="line">            msg.attach(attachfile)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = smtplib.SMTP(<span class="string">'smtp.163.com'</span>)</span><br><span class="line">            s.login(_user, _pwd)</span><br><span class="line">            s.sendmail(_user, _to, msg.as_string())</span><br><span class="line">            s.quit()</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"成功发送"</span>)</span><br><span class="line">        <span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'发送失败'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"成功发送"</span>)</span><br></pre></td></tr></table></figure><h3 id="网站测试"><a href="#网站测试" class="headerlink" title="网站测试"></a>网站测试</h3><p>本地，服务器响应了HTTP的GET 请求：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image8.png" alt=""></p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image7.png" alt=""></p><p>部署到服务器，同样相应的请求：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image9.png" alt=""></p><h2 id="Email客户端"><a href="#Email客户端" class="headerlink" title="Email客户端"></a>Email客户端</h2><h3 id="使用qq邮箱"><a href="#使用qq邮箱" class="headerlink" title="使用qq邮箱"></a>使用qq邮箱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 温浩珉负责</span></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line">_user = <span class="string">"291221910@qq.com"</span></span><br><span class="line">_pwd  = <span class="string">"*********"</span></span><br><span class="line">_to   = <span class="string">"291221910@qq.com"</span></span><br><span class="line">msg = MIMEText(<span class="string">"Test"</span>)</span><br><span class="line">msg[<span class="string">"Subject"</span>] = <span class="string">"don't panic"</span></span><br><span class="line">msg[<span class="string">"From"</span>]    = _user</span><br><span class="line">msg[<span class="string">"To"</span>]      = _to</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = smtplib.SMTP_SSL(<span class="string">"smtp.qq.com"</span>, <span class="number">465</span>)</span><br><span class="line">    s.login(_user, _pwd)</span><br><span class="line">    s.sendmail(_user, _to, msg.as_string())</span><br><span class="line">    print(msg.as_string())</span><br><span class="line">    s.quit()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Success!"</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Falied"</span>)</span><br></pre></td></tr></table></figure><p>###使用163邮箱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 王子泰负责</span></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEBase, MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.encoders <span class="keyword">import</span> encode_base64</span><br><span class="line"></span><br><span class="line">mail_name = <span class="string">'wang22ti@163.com'</span></span><br><span class="line">to_list = [mail_name, <span class="string">'455049206@qq.com'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不构造邮件，会被网易识别为554垃圾邮件</span></span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line"><span class="comment"># 图片</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    image = MIMEImage(f.read())</span><br><span class="line">    msg.attach(image)</span><br><span class="line"><span class="comment"># 图片加入文本</span></span><br><span class="line">text = MIMEText(<span class="string">'&lt;html&gt;&lt;body&gt;&lt;img src="cid:0"/&gt;&lt;/body&gt;&lt;/html&gt;'</span>, <span class="string">'html'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">msg.attach(text)</span><br><span class="line"><span class="comment"># 附件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 设置附件的MIME和文件名 这里是png类型：</span></span><br><span class="line">    attachfile = MIMEBase(<span class="string">'image'</span>, <span class="string">'png'</span>, filename=<span class="string">'1.png'</span>)</span><br><span class="line">    <span class="comment"># 加上必要的头信息</span></span><br><span class="line">    attachfile.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'1.png'</span>)</span><br><span class="line">    attachfile.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;0&gt;'</span>)</span><br><span class="line">    attachfile.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</span><br><span class="line">    <span class="comment"># 把附件类容读进来</span></span><br><span class="line">    attachfile.set_payload(f.read())</span><br><span class="line">    <span class="comment"># 利用base64编码</span></span><br><span class="line">    encode_base64(attachfile)</span><br><span class="line">    <span class="comment"># 添加到MIMEMultipart:</span></span><br><span class="line">    msg.attach(attachfile)</span><br><span class="line">msg[<span class="string">'Content-Type'</span>] = <span class="string">'Text/HTML'</span></span><br><span class="line">msg[<span class="string">'Subject'</span>] = Header(<span class="string">'hello'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">msg[<span class="string">'To'</span>] = mail_name</span><br><span class="line">msg[<span class="string">'From'</span>] = <span class="string">'Python_wang22ti &lt;%s&gt;'</span> % mail_name</span><br><span class="line">smtp = smtplib.SMTP(<span class="string">'smtp.163.com'</span>)</span><br><span class="line">smtp.login(mail_name, <span class="string">'**********'</span>)</span><br><span class="line">smtp.sendmail(from_addr=mail_name, to_addrs=to_list, msg=msg.as_string())</span><br><span class="line">smtp.close()</span><br></pre></td></tr></table></figure><h2 id="进一步的开发"><a href="#进一步的开发" class="headerlink" title="进一步的开发"></a>进一步的开发</h2><h3 id="完善发邮件的基本功能"><a href="#完善发邮件的基本功能" class="headerlink" title="完善发邮件的基本功能"></a>完善发邮件的基本功能</h3><p>​    现有的网站只实现了固定用户向不同用户发送文字邮件的功能，虽然在发送的邮件中添加了图片，但是该图片并不能由用户选择。我们希望在下一步的开发中实现用户登录、添加附件、正文自由添加图片等等功能。</p><h3 id="优化用户界面"><a href="#优化用户界面" class="headerlink" title="优化用户界面"></a>优化用户界面</h3><p>​    由于制作匆忙，软件的界面比较简陋，在进一步的开发中可以使用CSS样式表或者HTML5等方法优化界面，使之对用户更加友好。</p><h3 id="加入接收邮件的功能"><a href="#加入接收邮件的功能" class="headerlink" title="加入接收邮件的功能"></a>加入接收邮件的功能</h3><p>​    在开发中我们已经测试了使用POP3协议接收邮件的功能，在进一步的开发中可以加入，并通过图形界面使之对用户更加友好。</p><h3 id="优化报错机制"><a href="#优化报错机制" class="headerlink" title="优化报错机制"></a>优化报错机制</h3><p>​    在现有的版本中，当发送邮件发生错误时。有些情况下，例如图片不在指定的路径当中，返回给用户的是面向开发者的错误说明，在进一步的开发当中，我们需要返回面向用户的错误提醒机制，例如弹窗或者利用CSS样式表；另外的一些情况下，发送错误并不会报错，例如邮件并没有成功送达对方邮箱，这需要我们完善报错的代码，使之能满足更多的需求</p><h3 id="加入数据库，实现更多功能"><a href="#加入数据库，实现更多功能" class="headerlink" title="加入数据库，实现更多功能"></a>加入数据库，实现更多功能</h3><p>​    一方面，可以在客户端实现“已发送”、“草稿箱”、“已删除”、“通讯录”等邮件功能；另一方面，利用机器学习，还可以实现一些更高级的功能，例如邮件分类、垃圾处理等等。</p><h1 id="GBN算法的python实现"><a href="#GBN算法的python实现" class="headerlink" title="GBN算法的python实现"></a>GBN算法的python实现</h1><h2 id="主要问题及解决方案"><a href="#主要问题及解决方案" class="headerlink" title="主要问题及解决方案"></a>主要问题及解决方案</h2><p>（1）数据传送格式</p><p>​      网络数据的传输本质上是以字节流的方式进行的，因此想要传输例如图片的多媒体文件，需要先将其转化为字节流的形式。同时我们给每段字节流加上固定长度的GBN信息，以实现GBN的滑动窗口算法。</p><p>（2）有限状态机的程序表示</p><p>实现GBN协议，核心问题是要解决将有限状态机翻译为程序语言的问题。以发送端的有限状态机来说，在面对不同的触发条件的时候，需要执行不同的程序，而且要能回到最初的状态。在本次实验中，我们给出的方案是将所有要执行的内容放在一个大的循环里面，在循环里面使用if语句进行判断，当满足触发条件的时候，执行if语句中的内容，否则进行下一轮循环。</p><h2 id="实验源码"><a href="#实验源码" class="headerlink" title="实验源码"></a>实验源码</h2><p>代码我们主要分为两部分，发送端（服务端）和接收端（客户端）。实现的代码中，我们采用TCP连接，通过TCP连接中服务端向客户端发送数据来实现GBN协议。</p><p>（1）服务端</p><p>​      监听连接，当有客户端请求数据时，开始传输数据，传输过程中使用GBN协议，直到传输完成。</p><p>（2）客户端</p><p>​        请求TCP连接，不断检查收到的包是否正确，并且给服务端发送相应的ACK。同时设置客户端以一定概率丢掉接收到的包以模拟真实网络环境下的丢包情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host, port = <span class="string">'127.0.0.1'</span>, <span class="number">80</span></span><br><span class="line">ip = socket.gethostbyname(host)</span><br><span class="line">ip_port = (ip, port)</span><br><span class="line">sk.bind(ip_port)</span><br><span class="line">sk.listen()</span><br><span class="line">print(<span class="string">'listening...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    mss = <span class="number">1024</span></span><br><span class="line">    head_len = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    connect, address = sk.accept()</span><br><span class="line">    print(<span class="string">'accepting...'</span>)</span><br><span class="line">    request = str(connect.recv(mss), encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    print(<span class="string">'receive: '</span> + request)</span><br><span class="line"></span><br><span class="line">    type_request, file_path = request.split(<span class="string">' '</span>)</span><br><span class="line">    len_data = os.path.getsize(file_path)</span><br><span class="line">    last_packet = int(len_data / (mss - head_len)) + <span class="number">1</span></span><br><span class="line">    connect.send(bytes(str(last_packet), encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    print(<span class="string">'packet number: '</span> + str(last_packet))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        base = <span class="number">0</span></span><br><span class="line">        next_seq_num = <span class="number">0</span></span><br><span class="line">        window_size = <span class="number">10</span></span><br><span class="line">        time_out = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            print(base)</span><br><span class="line">            print(next_seq_num)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> next_seq_num &lt; base + window_size:</span><br><span class="line">                    data = f.read(mss - head_len)</span><br><span class="line">                    packet = bytes(str(next_seq_num).ljust(<span class="number">10</span>), encoding=<span class="string">'utf-8'</span>) + data</span><br><span class="line">                    connect.send(packet)</span><br><span class="line">                    <span class="keyword">if</span> base == next_seq_num:</span><br><span class="line">                        connect.settimeout(time_out)</span><br><span class="line">                    next_seq_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                ack_list = str(connect.recv(mss), encoding=<span class="string">'utf-8'</span>).split(<span class="string">' '</span>, window_size - <span class="number">1</span>)</span><br><span class="line">                ack_list = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> ack_list]</span><br><span class="line">                print(ack_list)</span><br><span class="line">                <span class="keyword">if</span> len(ack_list) &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> base != next_seq_num:</span><br><span class="line">                        connect.settimeout(time_out)</span><br><span class="line">                    base = max(ack_list) + <span class="number">1</span></span><br><span class="line">                    next_seq_num = base</span><br><span class="line">            <span class="keyword">except</span> socket.timeout <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">'******'</span> + str(base) + str(next_seq_num))</span><br><span class="line">                <span class="keyword">if</span> next_seq_num == last_packet:</span><br><span class="line">                    f.seek((mss - head_len) * (next_seq_num - <span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f.seek((mss - head_len) * (next_seq_num - base) * <span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">                next_seq_num = base</span><br><span class="line"></span><br><span class="line">        connect.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host, port = <span class="string">'127.0.0.1'</span>, <span class="number">80</span></span><br><span class="line">ip = socket.gethostbyname(host)</span><br><span class="line">ip_port = (ip, port)</span><br><span class="line">sk.connect(ip_port)</span><br><span class="line"></span><br><span class="line">mss = <span class="number">1024</span></span><br><span class="line">file_name = <span class="string">'1.png'</span></span><br><span class="line">message = <span class="string">"GET "</span> + file_name</span><br><span class="line">sk.sendall(bytes(message, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">num_packet = int(sk.recv(mss))</span><br><span class="line">print(num_packet)</span><br><span class="line"></span><br><span class="line">head_len = <span class="number">10</span></span><br><span class="line"><span class="keyword">with</span> open(file_name, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    pic = <span class="string">b''</span></span><br><span class="line">    ack = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        packet = sk.recv(mss)</span><br><span class="line">        <span class="comment"># 设置一定的丢包率作为测试</span></span><br><span class="line">        <span class="keyword">if</span> random.random() &gt; <span class="number">0.99</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        seq_number = int(str(packet[:head_len], encoding=<span class="string">'utf-8'</span>).replace(<span class="string">' '</span>, <span class="string">''</span>))</span><br><span class="line">        <span class="keyword">if</span> ack == seq_number:</span><br><span class="line">            data = packet[head_len:]</span><br><span class="line">            pic += data</span><br><span class="line">            sk.sendall(bytes(str(ack), encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">            ack += <span class="number">1</span></span><br><span class="line">            print(ack)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sk.sendall(bytes(str(ack), encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">if</span> seq_number == num_packet - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># time.sleep(0.1)</span></span><br><span class="line">    file.write(pic)</span><br><span class="line"></span><br><span class="line">sk.close()</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>程序运行之前，在发送端有文件图片，大小为246kb，如下：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image10.png" alt=""></p><p>程序运行时的效果，客户端打印收到的包的序号：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image11.png" alt=""></p><p>程序运行结束时，客户端文件中收到了完整的图片，大小为246kb，经检查没有错误，说明了传输的可靠性和完整性：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image12.png" alt=""></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="发送方"><a href="#发送方" class="headerlink" title="发送方"></a>发送方</h3><p>​    GBN发送方必须响应以下三种类型的事件：</p><p>​        上层的调用，当上层调用发送函数的时候，发送方首先检查发送窗口是否已满，即是否有N个已发送但未被确认的分组。如果窗口未满，则创建一个分组并将其发送，变量也相应的更新。</p><p>​        收到ACK，在GBN协议中，对序号为n的分组的确认采取累计确认的方式。表明接收方以正确接收序号n以前（包括n在内）的所有分组。</p><p>​        超时事件：如果出现超时，发送方将重传所有已发送还未被确认的分组。如果收到一个ACK，但是仍有已发送但未被确认的分组，则定时器被重新启动，如果没有已发送但未被确认的分组，则定时器被终止。</p><h3 id="接收方"><a href="#接收方" class="headerlink" title="接收方"></a>接收方</h3><p>​        在GBN中，接收方的动作比较简单。</p><p>​        接收方只需要判断当前接收的分组是否正确。如果一个序号为n的分组被正确收到，并且按序（即上次交付给上层的分组的序号是n-1），则接收方位分组n发送一个ACK，并且将改分组中的数据交付到上层。</p><p>​    在其他所有的情况下，接收方都丢弃该分组，并且为最近按序接收的分组重传ACK。</p><p>​    需要注意的是，因为采用累积确定机制，如果分组k已接受并交付，这意味着所有比k小的分组也已经交付。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>​    本次实验中，我们完成了python的网络编程，模拟了GBN协议在真实环境下的运行，对GBN协议有了进一步的了解。</p><p>​    在GBN协议中，接收方会丢弃所有失序的分组，尽管丢弃一个正确接收但是失序的分组有点浪费。但是根据GBN的原理。假定当前期望的编号是n，但是n+1提前达到。因为数据必须是有序交付，接收方可能缓存分组n+1，然后在他收到并交付分组n后，再将该分组交付到上层。但是如果n丢失，则n和n+1的分组都会被重发，因此，接收方只需要丢弃分组n+1即可。</p><p>​    这种方法的优点是接收方缓存简单，即接收方不需要缓存任何失序分组。对于发送方来说，他只需要维护窗口的下边界和和nextseqnum在窗口中的位置。对于接收方来说，只需要维护下一个按序接收的分组的序号。</p><h1 id="Dijkstra-算法的路由软件——python实现"><a href="#Dijkstra-算法的路由软件——python实现" class="headerlink" title="Dijkstra 算法的路由软件——python实现"></a>Dijkstra 算法的路由软件——python实现</h1><h2 id="Dijkstra算法的实现"><a href="#Dijkstra算法的实现" class="headerlink" title="Dijkstra算法的实现"></a>Dijkstra算法的实现</h2><p>本实验的基础内容。我们使用python的第三方库networks生成、存储图，使用标准库语句完成Dijkstra算法的实现——输入一个图，返回存储任意两点间最短路径的字典。关键代码及注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_graph</span><span class="params">(num_node)</span>:</span></span><br><span class="line">    G = nx.Graph()</span><br><span class="line">    <span class="comment"># 使用nx.barabasi_albert_graph构造一个num_node顶点，每个新顶点有num_node/10条边的图</span></span><br><span class="line">    <span class="comment"># 在构造的图上赋以权重，存入文件‘graph.txt’中</span></span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> nx.barabasi_albert_graph(num_node, int(num_node / <span class="number">10</span>), seed=<span class="number">1</span>).edges():</span><br><span class="line">        G.add_edge(u, v, weight=random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">    nx.write_edgelist(G, <span class="string">"graph.txt"</span>, data=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(G)</span>:</span></span><br><span class="line">    path = &#123;&#125;</span><br><span class="line">    nodes = G.nodes()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">        N_set = [node]</span><br><span class="line">        D = &#123;&#125;</span><br><span class="line">        <span class="comment"># 初始化path和D</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> nodes:</span><br><span class="line">            path[node, v] = [node]</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> G.neighbors(node):</span><br><span class="line">                D[v] = G.get_edge_data(node, v)[<span class="string">'weight'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                D[v] = float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="comment"># 算法主体部分</span></span><br><span class="line">        <span class="comment"># 当所有点都在N中时跳出循环</span></span><br><span class="line">        <span class="keyword">while</span> len(N_set) &lt; len(nodes):</span><br><span class="line">            <span class="comment"># 找到距离node最近的点并将其加入N</span></span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> sorted(D, key=D.__getitem__, reverse=<span class="keyword">False</span>):</span><br><span class="line">                <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> N_set:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            N_set.append(w)</span><br><span class="line">            <span class="comment"># 根据w和新的N，更新D和path</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> set(G.neighbors(w)) - set(N_set):</span><br><span class="line">                <span class="comment"># 如果D(v) &gt; D(w) + cost(w, v)，</span></span><br><span class="line">                <span class="comment"># 使用【w的path加上w】作为v的path</span></span><br><span class="line">                <span class="comment"># 使用D(w) + cost(w, v)作为D(v)</span></span><br><span class="line">                <span class="keyword">if</span> D[v] &gt; D[w] + G.get_edge_data(w, v)[<span class="string">'weight'</span>]:</span><br><span class="line">                    path[node, v][:] = path[node, w][:]</span><br><span class="line">                    path[node, v].append(w)</span><br><span class="line">                    D[v] = D[w] + G.get_edge_data(w, v)[<span class="string">'weight'</span>]</span><br><span class="line">        <span class="comment"># 将每个点本身加到其path的最后</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> v != node:</span><br><span class="line">                path[node, v].append(v)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><h2 id="最优路径的可视化"><a href="#最优路径的可视化" class="headerlink" title="最优路径的可视化"></a>最优路径的可视化</h2><p>networks提供了可视化的接口，我们实现了20个点下5到15的最优路径可视化如下图，上图为原图，下图红色的为最优路径[5, 4, 0, 15]，线的粗细表示两点间的cost。</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (1" alt="">.png)</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (2" alt="">.png)</p><p>关键代码及注释如下，最优路径图由点、非最优路径、最优路径三部分组成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用自己写的dijkstra算法得到最短路径</span></span><br><span class="line">G = get_graph(<span class="number">20</span>)</span><br><span class="line">path = dijkstra(G)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出原图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">6</span>))</span><br><span class="line">plt.title(<span class="string">"graph"</span>)</span><br><span class="line">pos = nx.spring_layout(G)</span><br><span class="line">nx.draw_networkx(G, pos)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出带有5到15的最短路径的图</span></span><br><span class="line">start_node = <span class="number">5</span></span><br><span class="line">end_node = <span class="number">15</span></span><br><span class="line"><span class="comment"># 画点</span></span><br><span class="line">edges = path_to_edges(path, start_node, end_node)</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">6</span>))</span><br><span class="line">plt.title(<span class="string">"The shortest path from %d to %d"</span> % (start_node, end_node))</span><br><span class="line">nx.draw_networkx_nodes(G, pos, node_size=<span class="number">40</span>)</span><br><span class="line"><span class="comment"># 画非路径上的边</span></span><br><span class="line">edges_not_in_path = list(set(G.edges()) - set(edges))</span><br><span class="line">edgewidth = [G.get_edge_data(edge[<span class="number">0</span>], edge[<span class="number">1</span>])[<span class="string">'weight'</span>] <span class="keyword">for</span> edge <span class="keyword">in</span> edges_not_in_path]</span><br><span class="line">nx.draw_networkx_edges(G, pos, edgelist=edges_not_in_path, width=edgewidth, edge_color=<span class="string">'b'</span>)</span><br><span class="line"><span class="comment"># 画路径上的边</span></span><br><span class="line">edgewidth = [G.get_edge_data(edge[<span class="number">0</span>], edge[<span class="number">1</span>])[<span class="string">'weight'</span>] <span class="keyword">for</span> edge <span class="keyword">in</span> edges]</span><br><span class="line">nx.draw_networkx_edges(G, pos, edgelist=edges, width=edgewidth, edge_color=<span class="string">'r'</span>)</span><br></pre></td></tr></table></figure><p>##算法结果检查</p><p>一方面，通过人工检查，20个点的图的数据存储在文件中，易知5到15的最优路径的确为[5, 4,0, 15]。</p><p>另一方面，将得到的路径输出并与networks提供的Dijistra算法结果比对，发现全部一致，可以认为我们的算法无误，截取部分结果如下：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (3" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (4" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (5" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (6" alt="">.png)</p><p>关键代码和注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用networkx实现的dijkstra得到路径并和自己实现的比对</span></span><br><span class="line">path2 = nx.all_pairs_dijkstra_path(G)</span><br><span class="line"><span class="keyword">for</span> start_node <span class="keyword">in</span> G.nodes():</span><br><span class="line">    <span class="keyword">for</span> end_node <span class="keyword">in</span> G.nodes():</span><br><span class="line">        <span class="keyword">if</span> end_node != start_node:</span><br><span class="line">            print(<span class="string">'my：'</span>, path[start_node, end_node])</span><br><span class="line">            print(<span class="string">'nx: '</span>, path2[start_node][end_node])</span><br></pre></td></tr></table></figure><h2 id="路由表的输出"><a href="#路由表的输出" class="headerlink" title="路由表的输出"></a>路由表的输出</h2><p>在本课程中，Dijistra算法的使用根本是为了获得每个路由器的转发表，所以我们将所有的最优路径转化为转发表并输出，部分结果如下，其中左边的为目的路由器，右边的为下一个路由器：<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (7" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (8" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (9" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (10" alt="">.png)</p><p>关键代码和注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出路由表</span></span><br><span class="line"><span class="keyword">for</span> router <span class="keyword">in</span> G.nodes():</span><br><span class="line">    print(<span class="string">'forwarding table for router %d'</span> % router)</span><br><span class="line">    <span class="keyword">for</span> start_node <span class="keyword">in</span> G.nodes():</span><br><span class="line">        <span class="comment"># 输出路由器router转发来自start_node的数据报的转发表</span></span><br><span class="line">        print(<span class="string">'from start_node %d: '</span> % start_node)</span><br><span class="line">        <span class="keyword">for</span> end_node <span class="keyword">in</span> G.nodes():</span><br><span class="line">            <span class="keyword">if</span> start_node != end_node:</span><br><span class="line">                path_start_to_end = path[start_node, end_node]</span><br><span class="line">                <span class="keyword">if</span> router <span class="keyword">in</span> path_start_to_end:</span><br><span class="line">                    <span class="keyword">if</span> router != end_node:</span><br><span class="line">                        next_router = path_start_to_end[path_start_to_end.index(router) + <span class="number">1</span>]</span><br><span class="line">                    print(<span class="string">'%d\t|\t%d'</span> % (end_node, next_router))</span><br><span class="line">    print(<span class="string">'-----------------------------'</span>)</span><br></pre></td></tr></table></figure><h2 id="算法性能对比"><a href="#算法性能对比" class="headerlink" title="算法性能对比"></a>算法性能对比</h2><p>我们将我们的算法与networks提供的算法进行性能比对，测试环境如下：</p><p>处理器：Intel i7 7500U</p><p>内存：8G, lddr4</p><p>系统：windows 10 1709 家庭中文版</p><p>Python版本：python3.5.3</p><p>IDE：PyCharm Community Edition 2017.2.4</p><p>得到的原始数据如下：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (12" alt="">.png)</p><p>将其可视化后，可以清楚地发现，我们的时间以指数增长，标准的算法以对数增长，这是我们需要进一步优化的地方，低效率的路由算法不具备任何的工程意义。</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (11" alt="">.png)</p><p>关键代码和注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得原始数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cmp_time.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>, <span class="number">600</span>, <span class="number">20</span>):</span><br><span class="line">        G = get_graph(i)</span><br><span class="line">        print(<span class="string">'node num: %d'</span> % i)</span><br><span class="line">        f.write(<span class="string">'%d,'</span> % i)</span><br><span class="line"></span><br><span class="line">        start1 = time()</span><br><span class="line">        dijkstra(G)</span><br><span class="line">        time1 = time() - start1</span><br><span class="line">        print(time1)</span><br><span class="line">        f.write(str(time1) + <span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">        start2 = time()</span><br><span class="line">        nx.all_pairs_dijkstra_path(G)</span><br><span class="line">        time2 = time() - start2</span><br><span class="line">        print(time2)</span><br><span class="line">        f.write(str(time2) + <span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> time2 &gt; <span class="number">0</span>:</span><br><span class="line">            ratio = time1 / time2</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ratio = float(<span class="string">'inf'</span>)</span><br><span class="line">        print(ratio)</span><br><span class="line">        f.write(str(ratio) + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据可视化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_data</span><span class="params">(datas, attr, min_, max_)</span>:</span></span><br><span class="line">    results = [data <span class="keyword">for</span> data <span class="keyword">in</span> datas <span class="keyword">if</span> data[attr] &gt;= min_ <span class="keyword">and</span> data[attr] &lt;= max_]</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(fp, columns=[])</span>:</span></span><br><span class="line">    f = pd.read_csv(fp)</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(f.__len__()):</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> columns:</span><br><span class="line">            data[c] = f[c][i]</span><br><span class="line">        datas.append(data)</span><br><span class="line">    <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    plog = <span class="string">'./cmp_time.csv'</span></span><br><span class="line">    datas = read_data(plog, [<span class="string">'node'</span>, <span class="string">'my'</span>, <span class="string">'nx'</span>, <span class="string">'rate'</span>])</span><br><span class="line">    nodes = [data[<span class="string">'node'</span>] <span class="keyword">for</span> data <span class="keyword">in</span> datas]</span><br><span class="line">    my_ = [data[<span class="string">'my'</span>] <span class="keyword">for</span> data <span class="keyword">in</span> datas]</span><br><span class="line">    nx_ = [data[<span class="string">'nx'</span>] <span class="keyword">for</span> data <span class="keyword">in</span> datas]</span><br><span class="line">    rate_ = [data[<span class="string">'rate'</span>] <span class="keyword">for</span> data <span class="keyword">in</span> datas]</span><br><span class="line"></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">'time'</span>)</span><br><span class="line"></span><br><span class="line">    ax1.plot(nodes, my_, <span class="string">'p-.'</span>, label=<span class="string">" our own algorithm"</span>)</span><br><span class="line">    ax1.plot(nodes, nx_, <span class="string">'p-.'</span>, label=<span class="string">"standard algorithm"</span>)</span><br><span class="line">    plt.legend(loc=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    ax2 = ax1.twinx()</span><br><span class="line">    ax2.plot(nodes, rate_, <span class="string">'D-.'</span>, color=<span class="string">'r'</span>, label=<span class="string">"rate"</span>)</span><br><span class="line">    ax2.set_ylabel(<span class="string">'rate'</span>)</span><br><span class="line">    plt.legend(loc=<span class="number">1</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="实验总结与未来展望"><a href="#实验总结与未来展望" class="headerlink" title="实验总结与未来展望"></a>实验总结与未来展望</h2><p>​    通过本次实验，我们完成了路由算法的实现、校验、可视化和性能测试。一方面，我们对于算法的理解更加深入，对于网络层数据报的路由转发过程的认识更加清晰，这必将对我们的进一步学习带来积极地影响；另一方面，算法的低效让我们认识到存在的不足和差距，意识到算法对于效率的重要性，我们将以此为基础，做出改进。</p><p>​    限于时间，我们并没有进一步优化算法，现在我们想到的提高程序效率的方案有：</p><ol><li><p>尝试使用更加底层的语言编写程序</p></li><li><p>由于最短路径是双向的，循环应该跳过已经计算好的路径</p></li><li><p>优化程序的逻辑结构、数据的存储方式</p></li><li><p>采用多线程的方式计算路径并调用GPU加速</p></li></ol><p>​    当然，得益于networks库的开源性，我们可以进一步研究其源代码以获得启发，但这可能已经远远超出了本次实验所要求的内容了，在此不做赘述。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简易Web-Mail服务器&quot;&gt;&lt;a href=&quot;#简易Web-Mail服务器&quot; class=&quot;headerlink&quot; title=&quot;简易Web Mail服务器&quot;&gt;&lt;/a&gt;简易Web Mail服务器&lt;/h1&gt;&lt;p&gt;该实验由我和温浩珉同学合作完成，主要分为TCP连接测
      
    
    </summary>
    
      <category term="计算机网络原理" scheme="http://wang22ti.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>朝花夕拾——《汇编与接口技术》综合实验</title>
    <link href="http://wang22ti.com/2018/05/11/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E6%B1%87%E7%BC%96%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF%E3%80%8B%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C/"/>
    <id>http://wang22ti.com/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/</id>
    <published>2018-05-11T13:19:37.000Z</published>
    <updated>2018-05-11T13:32:08.411Z</updated>
    
    <content type="html"><![CDATA[<p>这个作业并不是我独立完成的，需要特别感谢祝叶舟和吴文睿两位同学协作。</p><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>1)   综合运用课堂学习的汇编与接口知识，在实践的基础上进一步巩固知识点</p><p>2)   通过自学课堂上没有讲到的接口技术，提高同学们的自学意识与能力</p><p>3)   通过实验的设计，提高同学们系统工程的意识，提高同学们的创新意识与能力</p><p>4)   通过团队协作，提高同学们合作的能力与意识</p><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><h2 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h2><p>小时候在红白机上，我们都玩过经典的“打飞机”游戏，我们的实验就是通过开发板上现有的接口，实现游戏的基本功能，包括：</p><p>1)   用一个像素点表示一下飞机</p><p>2)   通过按键控制飞机移动</p><p>3)   随着时间的推移，自动出现敌人</p><p>4)   通过按键控制飞机开炮，使得同一条直线上的敌人死亡</p><p>5)   当敌人飞越我方飞机，则我方输，显示相关信息</p><p>6)   当将敌人飞机全部消灭，我方胜利，显示相关信息</p><h2 id="实验所用接口"><a href="#实验所用接口" class="headerlink" title="实验所用接口"></a>实验所用接口</h2><p>本次实验一共使用了6个接口，他们的功能如下：</p><table><thead><tr><th style="text-align:center">接口</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">8255并行接口</td><td style="text-align:center">并行输出点阵的亮灭信息到8*8点阵</td></tr><tr><td style="text-align:center">8*8点阵</td><td style="text-align:center">接收8255的点阵信息并显示游戏界面</td></tr><tr><td style="text-align:center">4*4小键盘</td><td style="text-align:center">输出的信号作为中断源，执行相应的中断程序完成对我方飞机的左右控制与开炮操作</td></tr><tr><td style="text-align:center">8254计数器</td><td style="text-align:center">计时，用于控制新的敌人产生的速度与8*8点阵的刷新频率</td></tr><tr><td style="text-align:center">8259中断控制</td><td style="text-align:center">接收其他接口的信号并产生对应的中断</td></tr><tr><td style="text-align:center">6位数码管</td><td style="text-align:center">用于显示玩家的分数，可以是击落敌机的数量，或者是剩余敌机的数量</td></tr></tbody></table><h2 id="实验连线"><a href="#实验连线" class="headerlink" title="实验连线"></a>实验连线</h2><h3 id="8255与8-8点阵"><a href="#8255与8-8点阵" class="headerlink" title="8255与8*8点阵"></a>8255与8*8点阵</h3><p>用8255的A口输出控制8*8点阵的行信息，B口输出控制8*8点阵的列信息。如果只有行信息或列信息，对应行或列的灯都会被电亮；但如果同时都有行列信息，行和列对应的一个灯会被点亮。通过高速的刷新8*8点阵，当刷新频率超过人眼可以识别的时候，就会形成连续的图像，让人感觉是动画。</p><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/1.png" alt=""></p><h3 id="8254、5259和6位数码管"><a href="#8254、5259和6位数码管" class="headerlink" title="8254、5259和6位数码管"></a>8254、5259和6位数码管</h3><p>和之前做过的实验相同，通过串联两个定时器，8254发出一定频率的方波，当传到系统总线的时候引发中断，执行中断程序让所有的敌人向下移动1个单位，从而推动游戏的发展。而每次集中敌人的时候，也会引发中断，执行相应的程序完成计数并显示到数码管上。</p><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/2.png" alt=""></p><h3 id="8255和小键盘"><a href="#8255和小键盘" class="headerlink" title="8255和小键盘"></a>8255和小键盘</h3><p>通过设置8255的控制字，使得由C接收来自小键盘行和列的信号。通过汇编软件的逻辑操作，完成对是哪一个按键的判断，从而触发相应的中断程序，完成游戏的逻辑控制。</p><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/3.png" alt=""></p><h3 id="实验连线实物图"><a href="#实验连线实物图" class="headerlink" title="实验连线实物图"></a>实验连线实物图</h3><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/4.jpg" alt=""></p><h2 id="实验程序设计"><a href="#实验程序设计" class="headerlink" title="实验程序设计]"></a>实验程序设计]</h2><p>本程序采用中断的方式，否则不断刷新界面，保持画面的稳定性，当有中断的时候处理相应事件完成对应操作。其中，中断服务程序需要完成两个任务，一个是点阵刷新，另外一个是更新敌人。程序的流程图如下：</p><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/5.png" alt=""></p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line">;****************************************;</span><br><span class="line">;*        游戏                          *;</span><br><span class="line">;****************************************;</span><br><span class="line">data   segment   </span><br><span class="line">led_cs_0   equ  220H</span><br><span class="line">led_cs_1   equ  221h</span><br><span class="line"></span><br><span class="line">i8254_0    equ  210h</span><br><span class="line">i8254_1    equ  211h</span><br><span class="line">i8254_kz   equ  213h</span><br><span class="line"></span><br><span class="line">i8255_kz   equ  203h</span><br><span class="line">i8255_a    equ  200h</span><br><span class="line">i8255_b    equ  201h</span><br><span class="line">i8255_c    equ  202h</span><br><span class="line"></span><br><span class="line">pdata      db   11h,0h,0h,00h,0h,0h,0h</span><br><span class="line">user       db   08h</span><br><span class="line">num_row    dw   0h</span><br><span class="line">bit_num    db   01h,02h,04h,08h,10h,20h,40h,80h  ;led位置选择码</span><br><span class="line">lose       db   81h,42h,24h,18h,18h,24h,42h,81h</span><br><span class="line">victory    db   00h,66h,99h,81h,42h,24h,18h,00h</span><br><span class="line">enemy      db   21h,42h,42h,04h,8h,78h,12h,20h,10h,40h,20h,04h,10h,04h,80h,10h</span><br><span class="line">ledcode    db   3fh,06h,5bh,4fh,66h,6dh,7dh,07h,7fh,67h,77h,7ch,39h,5eh,79h,71h</span><br><span class="line">flag       db   01h</span><br><span class="line">count      dw   00h</span><br><span class="line">num_enemy  dw   00h</span><br><span class="line">num        db   00h</span><br><span class="line"></span><br><span class="line">data   ends    </span><br><span class="line">code segment  </span><br><span class="line">         assume cs:code,ds:data </span><br><span class="line">start:   cli</span><br><span class="line">         mov   ax,data</span><br><span class="line">         mov   ds,ax</span><br><span class="line">         mov   es,ax  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">;------- 8254 初始化---------------   </span><br><span class="line">         mov   dx,i8254_kz    </span><br><span class="line">         mov   al,00110110b      ;0# mode 3</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   ax,10</span><br><span class="line">         mov   dx,i8254_0</span><br><span class="line">         out   dx,al;先写入低字节</span><br><span class="line">         mov   al,ah</span><br><span class="line">         out   dx,al;后写入高字节</span><br><span class="line">         mov   dx,i8254_kz</span><br><span class="line">         mov   al,01111100b;设8254通道1工作方式2</span><br><span class="line">         out   dx,al</span><br><span class="line">         </span><br><span class="line">         mov   ax,10;写入循环计数初值1000</span><br><span class="line">         mov   dx,i8254_1</span><br><span class="line">         out   dx,al;先写低字节</span><br><span class="line">         mov   al,ah</span><br><span class="line">         out   dx,al;后写高字节</span><br><span class="line"></span><br><span class="line">;------ 8259 初始化----------------      </span><br><span class="line">         push  ds    </span><br><span class="line">         mov   ax,0</span><br><span class="line">         mov   ds,ax</span><br><span class="line">         lea   ax,cs:mint_proc;写入中断程序入口</span><br><span class="line">         mov   bx,5;n=IRx</span><br><span class="line">         mov   si,30H           ;base =30H   Master</span><br><span class="line">         add   si,bx</span><br><span class="line">         add   si,si;type num</span><br><span class="line">         add   si,si;X4</span><br><span class="line">         mov   ds:[si],ax</span><br><span class="line">         push  cs            </span><br><span class="line">         pop   ax   </span><br><span class="line">         mov   ds:[si+2],ax    </span><br><span class="line">         pop   ds         </span><br><span class="line"></span><br><span class="line">;------ WRITE 8259 MASK WORD-----------</span><br><span class="line">         in    al,21h    </span><br><span class="line">         and   al,11011011b;mask byte       </span><br><span class="line">         out   21h,al</span><br><span class="line">         sti</span><br><span class="line"></span><br><span class="line">step1:    </span><br><span class="line">         lea   si,ledcode</span><br><span class="line">         mov   cl,num</span><br><span class="line">         add   si,cx</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         mov   dx,led_cs_0</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   al,00000001b</span><br><span class="line">         mov   dx,led_cs_1</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   dx,i8255_kz;8255控制口地址  </span><br><span class="line">         mov   al,10000001b</span><br><span class="line">         out   dx,al</span><br><span class="line">L1:      mov   al,0efh</span><br><span class="line">         mov   dx,i8255_c</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   dx,i8255_c</span><br><span class="line">         in    al,dx</span><br><span class="line">         or    al,0f0h</span><br><span class="line">         cmp   al,0ffh</span><br><span class="line">         jne   key</span><br><span class="line">         jmp   L1           </span><br><span class="line">key:     mov   bl,al;</span><br><span class="line">noup:    mov   dx,i8255_c</span><br><span class="line">         in    al,dx</span><br><span class="line">         or    al,0f0h</span><br><span class="line">         cmp   al,0ffh</span><br><span class="line">         je    et</span><br><span class="line">         jmp   noup</span><br><span class="line">et:      mov   al,bl</span><br><span class="line"> or    al,0f0h</span><br><span class="line"></span><br><span class="line">         cmp   al,0f7h</span><br><span class="line">         jz    toright</span><br><span class="line"></span><br><span class="line">         cmp   al,0fbh</span><br><span class="line">         jz    toleft</span><br><span class="line"></span><br><span class="line">         cmp   al,0fdh</span><br><span class="line">         jz    atta</span><br><span class="line"></span><br><span class="line">         jmp   step1</span><br><span class="line">         </span><br><span class="line">toleft:  mov   al,user</span><br><span class="line">         rol   al,1</span><br><span class="line">         mov   user,al</span><br><span class="line">         jmp   step1</span><br><span class="line"></span><br><span class="line">toright: mov   al,user</span><br><span class="line">         ror   al,1</span><br><span class="line">         mov   user,al</span><br><span class="line">         jmp   step1</span><br><span class="line"></span><br><span class="line">atta:                  </span><br><span class="line"> lea   si,user;  </span><br><span class="line"> mov   ah, 00h</span><br><span class="line">isenemy: cmp   ah,8</span><br><span class="line"> jz    step1</span><br><span class="line"> inc   ah</span><br><span class="line"> sub   si,01h</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         cmp   al,0</span><br><span class="line">         jz    isenemy</span><br><span class="line">         xor   al,user</span><br><span class="line">         cmp   al,[si]</span><br><span class="line">         jnb   isenemy </span><br><span class="line">         mov   [si],al   </span><br><span class="line">         </span><br><span class="line">         mov   al,num</span><br><span class="line">         inc   al;</span><br><span class="line">         cmp   al,0cH</span><br><span class="line">         mov   num,al</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">         jc    step1</span><br><span class="line">         cli</span><br><span class="line">win: </span><br><span class="line">         call  disp2</span><br><span class="line">         jmp   win      </span><br><span class="line"> </span><br><span class="line">readkey  proc</span><br><span class="line">scan:    mov   al,0e0h</span><br><span class="line">         mov   dx,i8255_c</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   dx,i8255_c</span><br><span class="line">         in    al,dx</span><br><span class="line">         or    al,0f0h</span><br><span class="line">         cmp   al,0ffh</span><br><span class="line">         jne   exitkey</span><br><span class="line">         jmp   scan</span><br><span class="line">exitkey: ret</span><br><span class="line">readkey  endp</span><br><span class="line"></span><br><span class="line">keyup    proc</span><br><span class="line">noup1:   mov   dx,i8255_c</span><br><span class="line">         in    al,dx</span><br><span class="line">         or    al,0f0h</span><br><span class="line">         cmp   al,0ffh</span><br><span class="line">         je    et</span><br><span class="line">         jmp   noup</span><br><span class="line">et1:     ret</span><br><span class="line">keyup    endp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;------Master INT Prog------------------</span><br><span class="line">mint_proc proc far   </span><br><span class="line">         sti</span><br><span class="line">         push  ax</span><br><span class="line">         push  dx</span><br><span class="line"> push  si</span><br><span class="line">         mov   ax,count</span><br><span class="line">         cmp   ax,500 ;每一秒更新敌人</span><br><span class="line">         jnz   next  </span><br><span class="line">         </span><br><span class="line">         lea   si,user;</span><br><span class="line">         sub   si,01h</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         cmp   al,0</span><br><span class="line">         jz    com</span><br><span class="line">dead:    call  disp1</span><br><span class="line">         jmp   dead</span><br><span class="line">com:     sub   si,01h</span><br><span class="line">         mov   cx,6          </span><br><span class="line">lo:      mov   al,[si]</span><br><span class="line">         mov   [si+1],al;</span><br><span class="line">         sub   si,01h</span><br><span class="line">         loop  lo;</span><br><span class="line">         lea   si,enemy</span><br><span class="line">         add   si,num_enemy</span><br><span class="line">          </span><br><span class="line">         add   num_enemy,01h</span><br><span class="line">         mov   al,[si] </span><br><span class="line">         lea   si,pdata           </span><br><span class="line">         mov   [si],al </span><br><span class="line">         mov   count,0</span><br><span class="line">  </span><br><span class="line">next:    add   count,01h</span><br><span class="line">         call  disp    ;每0.01秒刷新一次</span><br><span class="line"></span><br><span class="line">         mov   al,20h  </span><br><span class="line">         out   20h,al</span><br><span class="line">         pop   si</span><br><span class="line">         pop   dx  </span><br><span class="line">         pop   ax         </span><br><span class="line">         iret</span><br><span class="line">mint_proc  endp</span><br><span class="line"></span><br><span class="line">disp     proc        ;显示</span><br><span class="line">         push  dx</span><br><span class="line">         push  bx</span><br><span class="line">         push  ax</span><br><span class="line">         push  si         </span><br><span class="line">         mov   ax,0h           </span><br><span class="line">         mov   num_row,ax;</span><br><span class="line">            </span><br><span class="line">ll1:     cmp   num_row,08h</span><br><span class="line">         jz    exi</span><br><span class="line"></span><br><span class="line">         mov   dx,i8255_kz  ;b口控制列</span><br><span class="line">         mov   al,81h</span><br><span class="line">         out   dx,al</span><br><span class="line"> lea   si,bit_num</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]            </span><br><span class="line"> mov   dx,i8255_b</span><br><span class="line">         out   dx,al</span><br><span class="line"></span><br><span class="line">         lea   si,pdata  ;a口控制列</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         mov   dx,i8255_a</span><br><span class="line">         out   dx,al</span><br><span class="line">         call  delay</span><br><span class="line">l3:      inc   num_row</span><br><span class="line">         jmp   ll1   </span><br><span class="line">exi:      </span><br><span class="line">         pop   si</span><br><span class="line">         pop   ax</span><br><span class="line">         pop   bx</span><br><span class="line">         pop   dx </span><br><span class="line">         ret    </span><br><span class="line">disp     endp</span><br><span class="line"></span><br><span class="line">disp1    proc        ;显示</span><br><span class="line">         push  dx</span><br><span class="line">         push  bx</span><br><span class="line">         push  ax</span><br><span class="line">         push  si         </span><br><span class="line">         mov   ax,0h           </span><br><span class="line">         mov   num_row,ax;</span><br><span class="line">            </span><br><span class="line">ll11:    cmp   num_row,08h</span><br><span class="line">         jz    exi1</span><br><span class="line"></span><br><span class="line">         mov   dx,i8255_kz  ;b口控制列</span><br><span class="line">         mov   al,81h</span><br><span class="line">         out   dx,al</span><br><span class="line"> lea   si,bit_num</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]            </span><br><span class="line"> mov   dx,i8255_b</span><br><span class="line">         out   dx,al</span><br><span class="line"></span><br><span class="line">         lea   si,lose  ;a口控制列</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         mov   dx,i8255_a</span><br><span class="line">         out   dx,al</span><br><span class="line">         call  delay</span><br><span class="line">l31:     inc   num_row</span><br><span class="line">         jmp   ll11   </span><br><span class="line">exi1:      </span><br><span class="line">         pop   si</span><br><span class="line">         pop   ax</span><br><span class="line">         pop   bx</span><br><span class="line">         pop   dx </span><br><span class="line">         ret    </span><br><span class="line">disp1    endp</span><br><span class="line"></span><br><span class="line">disp2    proc        ;显示</span><br><span class="line">         push  dx</span><br><span class="line">         push  bx</span><br><span class="line">         push  ax</span><br><span class="line">         push  si         </span><br><span class="line">         mov   ax,0h           </span><br><span class="line">         mov   num_row,ax;</span><br><span class="line">            </span><br><span class="line">ll12:    cmp   num_row,08h</span><br><span class="line">         jz    exi2</span><br><span class="line"></span><br><span class="line">         mov   dx,i8255_kz  ;b口控制列</span><br><span class="line">         mov   al,81h</span><br><span class="line">         out   dx,al</span><br><span class="line"> lea   si,bit_num</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]            </span><br><span class="line"> mov   dx,i8255_b</span><br><span class="line">         out   dx,al</span><br><span class="line"></span><br><span class="line">         lea   si,victory  ;a口控制列</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         mov   dx,i8255_a</span><br><span class="line">         out   dx,al</span><br><span class="line">         call  delay</span><br><span class="line">l32:     inc   num_row</span><br><span class="line">         jmp   ll12  </span><br><span class="line">exi2:      </span><br><span class="line">         pop   si</span><br><span class="line">         pop   ax</span><br><span class="line">         pop   bx</span><br><span class="line">         pop   dx </span><br><span class="line">         ret    </span><br><span class="line">disp2    endp</span><br><span class="line"></span><br><span class="line">update   proc</span><br><span class="line">         push  ax</span><br><span class="line">         push  bx</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">         pop   bx</span><br><span class="line">         pop   ax  </span><br><span class="line">update   endp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack   proc</span><br><span class="line">         push  ax</span><br><span class="line">  </span><br><span class="line">         pop   ax      </span><br><span class="line">attack   endp</span><br></pre></td></tr></table></figure><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>录了两个视频，从中可以看到，程序按照我们所期望的方式运行。当我们胜利后，8*8点阵会显示一个心型；当我们失败的时候，会显示一个叉。</p><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><p>通过这次的综合研究型实验，我们完成了打飞机游戏，遇到了不少挑战，但最终克服了它们，有了不少收获。主要遇到了三点挑战：</p><p>第一个是图像的显示。由于8×8点阵的显示原理，我们必须采用不断刷新的方式才能显示图像；一方面，如果刷新的频率过快，会导致两次信号的重叠，最终导致显示大量的残影；另一方面，如果刷新频率过慢，两次刷新的图片，由于视觉暂留产生重叠，也得不到良好的显示效果。这个频率的确定需要反复的尝试，最终才能有理想的效果。</p><p>第二是程序逻辑的实现。由于实现的是一个游戏，所以涉及到的逻辑控制比较多，例如屏幕的向下移动，根据玩家操作给予相应的反应，根据游戏运行成败输出相应的图像。这样的汇编程序设计并不容易，每一个逻辑都要编写相应的子程序去进行。</p><p>第三则是新的汇编接口的学习。我们查看系统提供的演示实验，根据提供的演示代码和接线图，理解新的接口的含义。还好，这些接口并不算复杂，我们最终掌握了它。</p><p>当然，这个游戏还有很多改进的地方。比如根据不同的操作以及游戏状态，用蜂鸣器发出相应的声音。这样游戏玩起来更带感，用户体验更好。比如，飞机并不一定需要发射直线的炮弹，还可以向斜前方发射，这样就增加了游戏的难度和挑战，使得游戏更具备可玩性。</p><p>不过总体来说，通过本次实验，我们完成了游戏的设计、新的接口的学习、多个接口的综合使用。这一方面加深了我们对于接口的理解与掌握，在实践的过程中加深了对理论的理解，另一方面提高了我们的创新意识与能力，激发了我们探索的兴趣。这些将在我们的进一步学习中，给我们带来许多积极的影响。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个作业并不是我独立完成的，需要特别感谢祝叶舟和吴文睿两位同学协作。&lt;/p&gt;
&lt;h1 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a&gt;实验目的&lt;/h1&gt;&lt;p&gt;1)   综合运用课堂学习的汇编与接口知
      
    
    </summary>
    
      <category term="汇编与接口技术" scheme="http://wang22ti.com/categories/%E6%B1%87%E7%BC%96%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>朝花夕拾——《嵌入式系统设计》实验合集</title>
    <link href="http://wang22ti.com/2018/05/08/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AE%9E%E9%AA%8C%E5%90%88%E9%9B%86/"/>
    <id>http://wang22ti.com/2018/05/08/朝花夕拾——《嵌入式系统设计》实验合集/</id>
    <published>2018-05-08T09:21:21.000Z</published>
    <updated>2018-05-08T16:36:15.981Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>虽然是大三上（2017年下半年）的成果，但是得益于高金山老师的耐心指导，嵌入式是学得比较透彻的课，所以就把<a href="http://wang22ti.com/2018/05/08/%E3%80%8A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94%E3%80%8A%E9%A3%9E%E5%85%A5%E5%AF%BB%E5%B8%B8%E7%99%BE%E5%A7%93%E5%AE%B6%E2%80%94%E2%80%94%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87%E3%80%8B/">课程论文</a>和比较重要的实验的合集贴出来，里面用到的驱动默认驱动合集当中。</p><p>算是我的Linux、Arm启蒙课吧</p></blockquote><h1 id="点亮LED"><a href="#点亮LED" class="headerlink" title="点亮LED"></a>点亮LED</h1><p>这个是一个入门性的实验，用板子LED干些事情，驱动用fpga_led.c就行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line">fd = open(<span class="string">"/dev/fpga_led"</span>, O_WRONLY);</span><br><span class="line">assert(fd != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 已实现要求的全部功能，并设计了其他问题</span></span><br><span class="line"><span class="comment">// 菜单</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"请选择功能：\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"1、计数显示\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"2、显示学号\n"</span>); <span class="comment">//我的学号后两位是63</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"3、跑马灯显示\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"4、两侧跑马灯\n"</span>); <span class="comment">//在第三题的基础上改进，左右对称的跑马灯</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"5、退出\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)value;</span><br><span class="line">write(fd, &amp;ch, <span class="number">1</span>);</span><br><span class="line">value++;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="number">256</span>) &#123; <span class="comment">//当计数到256的时候重新计数</span></span><br><span class="line">value = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">63</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)value;</span><br><span class="line">write(fd, &amp;ch, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">0</span>; <span class="comment">// 控制灯光的移动方向</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)value;</span><br><span class="line"><span class="keyword">if</span>(tag == <span class="number">0</span>) &#123;</span><br><span class="line">value *= <span class="number">2</span>; <span class="comment">// 灯向右边移动</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">value /= <span class="number">2</span>; <span class="comment">// 灯向左边移动</span></span><br><span class="line">&#125;</span><br><span class="line">write(fd, &amp;ch, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(value == <span class="number">128</span>) &#123;<span class="comment">// 当灯移动到最右边，将标记置为1，以后左移</span></span><br><span class="line">tag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="number">1</span>) &#123; <span class="comment">// 当灯移动到最左边，将标记置为0，以后右移</span></span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value1 = <span class="number">1</span>;<span class="comment">// 左边的灯</span></span><br><span class="line"><span class="keyword">int</span> value2 = <span class="number">128</span>;   <span class="comment">// 右边的灯</span></span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 求和后转化为unsigned char，可以同时点亮两边</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(value1 + value2);</span><br><span class="line"><span class="comment">// 以下的控制部分和第三题类似，不做赘述</span></span><br><span class="line"><span class="keyword">if</span>(tag == <span class="number">0</span>) &#123;</span><br><span class="line">value1 *= <span class="number">2</span>;</span><br><span class="line">value2 /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">value1 /= <span class="number">2</span>;</span><br><span class="line">value2 *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">write(fd, &amp;ch, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(value1 == <span class="number">8</span>) &#123;</span><br><span class="line">tag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value1 == <span class="number">1</span>) &#123;</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> choice;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%d"</span>, &amp;choice) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">func1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">2</span>) &#123;</span><br><span class="line">func2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">3</span>) &#123;</span><br><span class="line">func3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">4</span>) &#123;</span><br><span class="line">func4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="蜂鸣器驱动及乐曲播放"><a href="#蜂鸣器驱动及乐曲播放" class="headerlink" title="蜂鸣器驱动及乐曲播放"></a>蜂鸣器驱动及乐曲播放</h1><p>在本实验中，我和子芃合作完成了使用蜂鸣器演奏《铃儿响叮当》前4个小节，我主要负责程序结构的设计，由于子芃有较好的音乐功底，他负责设置参数。我们的亮点在于实现了音与音之间的停顿，从而有比较好的播放效果。</p><p>要找到了比较好的一个拍子的时长，0.13秒。之后设置好每一个小节的音的声调、音的拍数、停顿的拍数，并传入write和usleep函数。如果write传入的是声调，那么usleep实现的是音的拍数；如果write传入的是nullValue，那么usleep实现的是停顿的拍数。通过数组和循环语句，就实现了音乐的输出。</p><p>驱动程序用的是fpga_piezo.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> quater_beats = <span class="number">120000</span>;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> nullValue = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> values1[] = &#123;<span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x15</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> voice_length1[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0.5</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delay1[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> values2[] = &#123;<span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x15</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> voice_length2[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delay2[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> values3[] = &#123;<span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x15</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> voice_length3[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0.5</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delay3[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> values4[] = &#123;<span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x15</span>, <span class="number">0x15</span>, <span class="number">0x14</span>, <span class="number">0x12</span>, <span class="number">0x11</span>, <span class="number">0x21</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> voice_length4[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delay4[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">"/dev/fpga_piezo"</span>, O_WRONLY);</span><br><span class="line">assert(fd != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">write(fd, &amp;values1[i], <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * voice_length1[i]);</span><br><span class="line">write(fd, &amp;nullValue, <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * delay1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usleep(quater_beats * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">write(fd, &amp;values2[i], <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * voice_length2[i]);</span><br><span class="line">write(fd, &amp;nullValue, <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * delay2[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usleep(quater_beats * <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">write(fd, &amp;values3[i], <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * voice_length3[i]);</span><br><span class="line">write(fd, &amp;nullValue, <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * delay3[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usleep(quater_beats * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">write(fd, &amp;values4[i], <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * voice_length4[i]);</span><br><span class="line">write(fd, &amp;nullValue, <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * delay4[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(fd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时还没学系统编程，吐血一般地面向搜索引擎地写了makefile的解释，现在看来基本正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 驱动程序的makefile</span></span><br><span class="line"><span class="comment"># silent，表示在make过程中不打印任何执行的命令</span></span><br><span class="line">.SILENT:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于C语言的宏定义，导入文件make_adb</span></span><br><span class="line">include C:/AndroXStudio/Tools/make_adb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置两个环境变量ARCH和CROSS_COMPILE</span></span><br><span class="line"><span class="built_in">export</span> ARCH=arm</span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=arm-linux-androideabi-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于C语言的IFNDEF，</span></span><br><span class="line"><span class="comment"># 如果是第一次运行Makefile，</span></span><br><span class="line"><span class="comment"># 内核源码的顶层Makefile中定义的KERNELRELEASE还没有生成，</span></span><br><span class="line"><span class="comment"># 就会转入else语句，一直执行到endif；</span></span><br><span class="line"><span class="comment"># 如果不是第一次运行，不需要编译，</span></span><br><span class="line"><span class="comment"># 就会直接将fpga_piezo.o编译为内核模块；</span></span><br><span class="line">ifneq ($(KERNELRELEASE),)</span><br><span class="line">obj-m := fpga_piezo.o</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将目录/platform/linux定义为KDIR</span></span><br><span class="line">KDIR := /platform/linux</span><br><span class="line"></span><br><span class="line">all是个伪目标，是所有目标的目标，其功能是编译所有的目标。</span><br><span class="line">all:</span><br><span class="line"><span class="comment"># 对make modules命令的扩展</span></span><br><span class="line"><span class="comment"># -C表示将当前工作目录转移到指定的目录KDIR中</span></span><br><span class="line"><span class="comment"># M表示到shell pwd中找到模块代码并编译生成fpga_piezo.ko文件</span></span><br><span class="line">$(MAKE) -C $(KDIR) M=$(shell <span class="built_in">pwd</span>) modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo语句类似于C语言的printf，表示在命令行输出</span></span><br><span class="line"><span class="comment"># 有了上面的生成的ko文件，打印安装提示</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"**** Install:"</span> /system/lib/modules/fpga_piezo.ko <span class="string">"****"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $(ADB)类似于Linux中输入提示符</span></span><br><span class="line"><span class="comment"># 其中make_adb文件宏定义了ADB的值</span></span><br><span class="line"><span class="comment"># 将文件fpga_piezo.ko上传到板子/system/lib/modules/目录下</span></span><br><span class="line">$(ADB) push fpga_piezo.ko /system/lib/modules/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件fpga_piezo.ko的编辑模式修改为644，即为rw-r--r--</span></span><br><span class="line">$(ADB) shell chmod 644 /system/lib/modules/fpga_piezo.ko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 板子上有了ko文件并修改了编辑模式之后，将ko作为内核进行加载，打印提示</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"**** Load Module:"</span> /system/lib/modules/fpga_piezo.ko <span class="string">"****"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载板子上原来的在目录/dev/null下的内核文件fpga_led</span></span><br><span class="line">$(ADB) shell toolbox rmmod fpga_piezo &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将刚刚导入的文件fpga_piezo.ko作为内核进行加载</span></span><br><span class="line">$(ADB) shell insmod /system/lib/modules/fpga_piezo.ko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印已经加载的模块，使用fpga_piezo作为关键字</span></span><br><span class="line">$(ADB) shell lsmod | grep fpga_piezo</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理加载内核过程中产生的文件</span></span><br><span class="line">clean:</span><br><span class="line"><span class="comment"># rm，即为remove，即删除文件</span></span><br><span class="line"><span class="comment"># -f是rm命令的参数，表示即使文件不存在也不要报错</span></span><br><span class="line"><span class="comment"># *是通配符，例如*.o表示所有类型为o的文件</span></span><br><span class="line">rm -f *.symvers</span><br><span class="line">rm -f *.ko</span><br><span class="line">rm -f *.o</span><br><span class="line">rm -f *.mod.c</span><br><span class="line">rm -f *.order</span><br><span class="line">rm -f .*.cmd</span><br><span class="line">rm -rf .tmp_versions</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用程序的makefile</span></span><br><span class="line"><span class="comment"># silent，表示在make过程中不打印任何执行的命令</span></span><br><span class="line">.SILENT:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于C语言的宏定义，导入文件make_comn，其中有大量宏定义</span></span><br><span class="line">include C:/AndroXStudio/Tools/make_comm</span><br><span class="line"></span><br><span class="line"><span class="comment"># all表示编译所有相关项目</span></span><br><span class="line">all: $(OBJECTS)</span><br><span class="line"><span class="comment"># CC是宏定义中的gcc操作</span></span><br><span class="line"><span class="comment"># -o 表示输出的文件名为testPiezo</span></span><br><span class="line"><span class="comment"># -O2是编译器提供的选项，提供高级的代码优化，但是更耗时间</span></span><br><span class="line"><span class="comment"># -save-temps -march=armv7-a表示输出所有中间代码</span></span><br><span class="line"><span class="comment"># $(LLIB)/libgcc.a表示使用在宏定义LLIB对应的路径下的libgcc.a文件</span></span><br><span class="line">$(CC) $(CFLAGS) $(LDFLAGS) -save-temps -march=armv7<span class="_">-a</span> -O2 -o testPiezo $(OBJECTS) \</span><br><span class="line">$(LLIB)/libgcc.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo语句类似于C语言的printf，表示在命令行输出安装提示</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"**** Install:"</span> /data/<span class="built_in">local</span>/tmp/testPiezo <span class="string">"****"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件testPiezo上传到板子testPiezo /data/local/tmp目录下</span></span><br><span class="line">$(ADB) push testPiezo /data/<span class="built_in">local</span>/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件testPizzo的编辑模式修改为755，即为rwxr-xr-x</span></span><br><span class="line">$(ADB) shell chmod 755 /data/<span class="built_in">local</span>/tmp/testPiezo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理加载内核过程中产生的文件</span></span><br><span class="line">clean:</span><br><span class="line"><span class="comment"># rm，即为remove，即删除文件</span></span><br><span class="line"><span class="comment"># -f是rm命令的参数，表示即使文件不存在也不要报错</span></span><br><span class="line"><span class="comment"># *是通配符，例如*.o表示所有类型为o的文件</span></span><br><span class="line">rm -f *.o</span><br><span class="line">rm -f *.i</span><br><span class="line">rm -f *.s</span><br><span class="line">rm -f testPiezo</span><br></pre></td></tr></table></figure><h1 id="电子琴驱动及测试程序设计"><a href="#电子琴驱动及测试程序设计" class="headerlink" title="电子琴驱动及测试程序设计"></a>电子琴驱动及测试程序设计</h1><p>学到这里的时候，开始对驱动程序有所理解，正好老师要求写实验报告，就写了一份比较深入的理解。</p><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>1)    把调试好的键盘驱动程序和对应的测试程序上传到教学平台<br>2)    把LED驱动加入进项目，当按下某键时，该键的编码，显示在LED。<br>3)    模仿电子琴的功能，即当按下1号键，播放“1”；当按下2号键，播放“2”；当按下3号键，播放“3”…声音。<br>4)    说明Keypad设备驱动、LED设备驱动、蜂鸣器设备驱动、测试程序的功能和原理，驱动和测试程序加载过程，函数间调用关系和参数传递过程等。</p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>1)    基本功能：<br>    按1-16对应的键的时候，LED等显示编号对应的二进制代码<br>    按1-8对应的键的时候，蜂鸣器发出0x11到0x17以及0x21对应的音<br>    按9-16对应的键或不按键的时候，蜂鸣器不发音<br>2)    进阶功能<br>    当解除程序中的一段注释代码后，按1-8对应的键的时候，蜂鸣器发出对应的音以及其后的三个音，LED灯同    时亮起对应的二进制代码（已检查）。</p><h2 id="代码与原理说明"><a href="#代码与原理说明" class="headerlink" title="代码与原理说明"></a>代码与原理说明</h2><p>为了更方便地实现实验要求，驱动程序经过了一定的修改。</p><h3 id="经过修改的fpga-keypad-c"><a href="#经过修改的fpga-keypad-c" class="headerlink" title="经过修改的fpga_keypad.c"></a>经过修改的fpga_keypad.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/hardware.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_AUTHOR   <span class="meta-string">"Hanback Electronics"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_DESC       <span class="meta-string">"KEYPAD program"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_NAME   <span class="meta-string">"fpga-keypad"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_PHY_ADDR0x05000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_ADDR_RANGE0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>  keypad_ioremap;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *keypad_row_addr,*keypad_col_addr;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> *keypad_check_addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> keypad_fpga_keycode[<span class="number">16</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_open</span><span class="params">(struct inode * inode, struct file * file)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_open, \n"</span>);</span><br><span class="line"><span class="comment">// 默认认外设I/O资源是不在Linux内核空间中的，若需要访问keypad的I/O资源，必须先将其地址映射到内核空间中来，然后才能在内核空间中访问它。该程序的ioremap函数重写了定义在&lt;asm/io.h&gt;中的_ioremap动态映射函数，返回了keypad的起始的映射到内存的地址，其中KEYPAD_PHY_ADDR为keypad的起始IO地址，KEYPAD_ADDR_RANGE为要映射的空间大小，两个变量的值均在宏定义中。（参考http://blog.csdn.net/liuxd3000/article/details/16819921）</span></span><br><span class="line"><span class="comment">// keypad_ioremap=(unsigned long)ioremap(KEYPAD_PHY_ADDR,KEYPAD_ADDR_RANGE);</span></span><br><span class="line"><span class="comment">// 用&lt;linux/ioport.h&gt;中的check_mem_region函数检查从内存地址keypad_ioremap开始的、长度为KEYPAD_ADDR_RANGE的IO空间是否被占用。如果被占用，输出错误并返回，否则用&lt;linux/ioport.h&gt;中的request_mem_region函数申请那片空间，并命名为fpga-keypad（参考https://www.cnblogs.com/FarmPick/p/5629731.html）</span></span><br><span class="line"><span class="keyword">if</span>(!check_mem_region(keypad_ioremap, KEYPAD_ADDR_RANGE)) &#123;</span><br><span class="line">request_mem_region(keypad_ioremap, KEYPAD_ADDR_RANGE, KEYPAD_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">printk(<span class="string">"FPGA KEYPAD Memory Alloc Faild!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// keypad_col_addr和keypad_row_addr两个变量分别存储keypad行列按键的起始地址</span></span><br><span class="line">keypad_col_addr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(keypad_ioremap+<span class="number">0x70</span>);</span><br><span class="line">keypad_row_addr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(keypad_ioremap+<span class="number">0x72</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fpga_keypad_release函数完成keypad使用结束后的内存释放工作</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_release</span><span class="params">(struct inode * inode, struct file * file)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_release, \n"</span>);</span><br><span class="line"><span class="comment">// &lt;asm/io/h&gt;中的iounmap函数解除内存地址keypad_ioremap对IO地址的映射（参考http://blog.csdn.net/tronteng/article/details/7266788）</span></span><br><span class="line">iounmap((<span class="keyword">unsigned</span> <span class="keyword">long</span>*)keypad_ioremap);</span><br><span class="line"><span class="comment">// &lt;linux/ioport.h&gt;中的release_region函数释放掉以keypad_ioremap为起始，长度为KEYPAD_ADDR_RANGE的内存地址（参考https://www.cnblogs.com/FarmPick/p/5629731.html）</span></span><br><span class="line">release_region(keypad_ioremap, KEYPAD_ADDR_RANGE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fpga_keypad_read函数读取来自keypad的信号</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_keypad_read</span><span class="params">(struct file * file, <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_read, \n"</span>);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>,k,i,ret;</span><br><span class="line"><span class="keyword">int</span> funtion_key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// tmp中四个二进制数对应0001,0010,0100,1000，分别对应行的第1、2、3、4个键</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> send_buf[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// 用两层长度均为4的循环遍历检查keypad的16个键有没有信号</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line"><span class="comment">// 用tmp[i]选中第i行</span></span><br><span class="line">*keypad_row_addr = tmp[i];</span><br><span class="line"><span class="comment">// 用0x0f获得内存keypad_col_addr低4位的值，即第i行的4个按键的信号</span></span><br><span class="line">value = *keypad_col_addr &amp; <span class="number">0x0f</span>;</span><br><span class="line"><span class="comment">// value&gt;0表示有按键被按下，如果判断为真，则用tmp[k]遍历检验</span></span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(value == tmp[k])  &#123;</span><br><span class="line"><span class="comment">// 找到按下的键，对value、funtion_key赋值，并用goto跳转到stop_poll段进行处理。注意到，如果同时按下两个键，并不会跳转。</span></span><br><span class="line">value = j+(i*<span class="number">4</span>);</span><br><span class="line">funtion_key = keypad_fpga_keycode[value<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(value != <span class="number">0x00</span>) <span class="keyword">goto</span> stop_poll;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Stop_poll处理段，如果value&gt;0即有键被按下，则将相关信息写入字符串send_buf，否则显示没有打印。注意到，如果同时按下第4行的多个键，上面的循环虽然不会跳转，但循环结束后value的值并不为0。所以我预测，如果在测试程序中直接将value或者buff的值传给led灯，同时按下多个键的时候led灯也会被电亮。这个有待检验，不过如果属实，只要在stop_poll段之前将value置0便可以解决。</span></span><br><span class="line">stop_poll:</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"%d pressed"</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"pressed nothing"</span>);</span><br><span class="line">*keypad_row_addr = <span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于内核空间与用户空间不能直接互访，因此借助函数copy_to_user完成内核到用户空间的复制（参考http://blog.csdn.net/yangdelong/article/details/5491097）</span></span><br><span class="line">ret = copy_to_user(buf,send_buf,<span class="built_in">strlen</span>(send_buf));</span><br><span class="line"><span class="comment">// 这里我稍微修改了驱动程序，将返回值改为value</span></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 综上所述，fpga_keypad_read函数可以进行一定的修改如下，解决上述的bug并精简部分代码。</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_keypad_read</span><span class="params">(struct file * file, <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_read, \n"</span>);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>,k,i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> send_buf[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">*keypad_row_addr = tmp[i];</span><br><span class="line">value = *keypad_col_addr &amp; <span class="number">0x0f</span>;</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(value == tmp[k])  &#123;</span><br><span class="line">value = j+(i*<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(value != <span class="number">0x00</span>) <span class="keyword">goto</span> stop_poll;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">value = <span class="number">0</span>;</span><br><span class="line">stop_poll:</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"%d pressed"</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"pressed nothing"</span>);</span><br><span class="line">*keypad_row_addr = <span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line">copy_to_user(buf,send_buf,<span class="built_in">strlen</span>(send_buf));</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当然，如果不考虑接口的稳定还可以跟精简，如果时间允许还可以写出多按键的驱动。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设备驱动配置项结构体，用来将标准的接口重定向为在上面写好的函数。其中THIS_MODULE是一个宏，推向编译模块时自动创建的__this_module变量（参考http://blog.csdn.net/joshua_love/article/details/53047128）</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_keypad_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.open = fpga_keypad_open,</span><br><span class="line">.release = fpga_keypad_release,</span><br><span class="line">.read = fpga_keypad_read,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 杂设备结构体，在Linux驱动中十分必要（参考https://www.cnblogs.com/heat-man/p/4175842.html）</span></span><br><span class="line"><span class="comment">// minor表示次设备号。杂设备（个人认为将mis翻译为“杂”很不好，让人困惑）为了节约主设备号，采用共用主设备号的方式，次设备号加以区分的方式来描述设备。</span></span><br><span class="line"><span class="comment">// name表示设备名称</span></span><br><span class="line"><span class="comment">// fops表示设备驱动的具体配置项，在上面已经定义好</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_keypad_driver</span> = &#123;</span></span><br><span class="line">.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">.name = <span class="string">"fpga_keypad"</span>,</span><br><span class="line">.fops = &amp;fpga_keypad_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_init, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> misc_register(&amp;fpga_keypad_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_keypad_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_exit, \n"</span>);</span><br><span class="line">misc_deregister(&amp;fpga_keypad_driver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为满足接口，module_init函数用定义好的fpga_keypad_init函数完成驱动的初始化。</span></span><br><span class="line"><span class="comment">// 在fpga_keypad_init函数中，将定义好的杂设备结构fpga_keypad_driver传入字符杂项设备函数misc_register，使得在加载模块时会自动创建设备文件（参考http://blog.csdn.net/wsh604/article/details/7534251）</span></span><br><span class="line">module_init(fpga_keypad_init);</span><br><span class="line"><span class="comment">// 为满足接口，module_exit函数用定义好的fpga_keypad_exit函数完成驱动的删除。</span></span><br><span class="line"><span class="comment">// 在fpga_keypad_exit函数中将定义好的杂设备结构fpga_keypad_driver传入字符杂项设备删除函数misc_deregister，使得在删除模块时会自动删除设备文件（参考http://blog.csdn.net/wsh604/article/details/7534251）</span></span><br><span class="line">module_exit(fpga_keypad_exit);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是对该模块的一些信息的定义。</span></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Author of the fpga_keypad to put it here."</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"Description of the fpga_keypad to put it here."</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br><span class="line"><span class="comment">// 当然可以修改为</span></span><br><span class="line"><span class="comment">// MODULE_AUTHOR("Author: wang22ti 15281163");</span></span><br><span class="line"><span class="comment">// MODULE_DESCRIPTION("hello, I have understood this driver");</span></span><br><span class="line"><span class="comment">// MODULE_LICENSE("Dual BSD/GPL");</span></span><br></pre></td></tr></table></figure><h3 id="fpga-led-c和fpga-piezo-c"><a href="#fpga-led-c和fpga-piezo-c" class="headerlink" title="fpga_led.c和fpga_piezo.c"></a>fpga_led.c和fpga_piezo.c</h3><p>基本和fpga_keypad.c相同，博客里删去这部分内容。</p><h3 id="应用程序fpga-keypad-test-c"><a href="#应用程序fpga-keypad-test-c" class="headerlink" title="应用程序fpga_keypad_test.c"></a>应用程序fpga_keypad_test.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line"><span class="comment">// 在运行测试程序的时候，keypad、led以及piezo的驱动都已经通过make命令写到硬件，所以通过open函数打开dev目录下对应的文件就可以获得对应的地址。</span></span><br><span class="line">fd = open(<span class="string">"/dev/fpga_keypad"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">"Device Open ERROR!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please push the button !\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得led对应的IO地址。</span></span><br><span class="line"><span class="keyword">int</span> fd_led;</span><br><span class="line">fd_led = open(<span class="string">"/dev/fpga_led"</span>, O_WRONLY);</span><br><span class="line">assert(fd_led != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 获得蜂鸣器对应的IO地址。</span></span><br><span class="line"><span class="keyword">int</span> fd_piezo;</span><br><span class="line">fd_piezo = open(<span class="string">"/dev/fpga_piezo"</span>, O_WRONLY);</span><br><span class="line">assert(fd_piezo != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 定义好voice和led_num两个数组，用来映射keypad的read函数的返回值，即将键与亮灯情况、发声音调一一对应。</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> voice[] = &#123;<span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x21</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> led_num[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>&#125;;</span><br><span class="line"><span class="comment">// 在循环中不停地使用read函数读取keypad的按键情况，同时利用write函数以及上面取得的地址将映射的值写入led和蜂鸣器。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch;</span><br><span class="line">ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)read(fd,buf,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\r\n"</span>,buf);</span><br><span class="line"></span><br><span class="line">write(fd_led, &amp;led_num[ch], <span class="number">1</span>);</span><br><span class="line">write(fd_piezo, &amp;voice[ch], <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 线程睡眠50毫秒，使得led亮起的状态和蜂鸣器的发声可以保持一定的时间。睡眠结束后，进入新的循环，如果没有新的输入，led和蜂鸣器都会被置零。</span></span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line"><span class="comment">// 这段被注释掉的代码完成的是一次按键多次发声多次亮灯（实际看到的是灯在闪烁），原理并无创新。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(ch != 0 &amp;&amp; ch &lt;= 8) &#123;</span></span><br><span class="line"><span class="comment">write(fd_led, &amp;led_num[ch+1], 1);</span></span><br><span class="line"><span class="comment">write(fd_piezo, &amp;voice[ch+1], 1);</span></span><br><span class="line"><span class="comment">usleep(50000);</span></span><br><span class="line"><span class="comment">write(fd_led, &amp;led_num[ch+2], 1);</span></span><br><span class="line"><span class="comment">write(fd_piezo, &amp;voice[ch+2], 1);</span></span><br><span class="line"><span class="comment">usleep(50000);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 重置buf数组。</span></span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭驱动，但由于无限循环不可能执行，所以没有补上led和蜂鸣器的。</span></span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验小结"><a href="#实验小结" class="headerlink" title="实验小结"></a>实验小结</h2><p>在本次实验中，我首先利用之前led和蜂鸣器的经验，将三个驱动程序通过测试程序整合到一起，完成了基本的实验要求。课后，通过大量的资料查阅，我完成了代码原理的解释并撰写了本报告，并产生了以下新的认识：</p><ol><li><p>驱动程序并不可怕，它一方面通过系统接口调动硬件底层，另一方面又为应用程序的开发者提供接口，从而让应用开发者从事进一步的开发。</p></li><li><p>统一的函数接口有利于进一步的开发。例如应用开发者可以通过统一的函数open、write、read、close，利用不同的地址完成对不同硬件的调用。</p></li></ol><p>通过本次的开发和学习，对于嵌入式编程，无论从理论上还是实践上我都有了比较深入的认识。我相信这能够在进一步的学习中给我带来帮助。</p><h1 id="显示屏Text-LCD"><a href="#显示屏Text-LCD" class="headerlink" title="显示屏Text LCD"></a>显示屏Text LCD</h1><p>到这里已经对驱动理解更加深入，修改幅度也可以变大了。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本次一共提交了1个驱动程序和4个测试程序，测试程序分别对应的功能为：</p><table><thead><tr><th style="text-align:center">程序</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">testtextlcd</td><td style="text-align:left">基本要求，在textlcd上显示输入的字符</td></tr><tr><td style="text-align:center">testtextlcd_blink</td><td style="text-align:left">让输入在textLcd上的字符按照一定的频率闪烁一定次数</td></tr><tr><td style="text-align:center">testtextlcd_move</td><td style="text-align:left">让输入在textLcd上的字符按照一定的速率向左循环移动</td></tr><tr><td style="text-align:center">testtextlcd_withkeypad</td><td style="text-align:left">按下keypad的某个键，textlcd显示对应的字符，同时蜂鸣器发出对应频率的声音，led等显示对应的二进制数</td></tr></tbody></table><h2 id="Testtextlcd"><a href="#Testtextlcd" class="headerlink" title="Testtextlcd"></a>Testtextlcd</h2><p>按照给定的说明，移植驱动文件fpga_textlcd.c、测试源文件testtextlcd.c和头文件textlcd.h，无须赘述。</p><h2 id="testtextlcd-blink"><a href="#testtextlcd-blink" class="headerlink" title="testtextlcd_blink"></a>testtextlcd_blink</h2><p>在testtextlcd的基础上，将控制字TEXTLCD_CLEAR传入 ioctl函数，完成清屏，同时使用usleep函数使清屏状态保持一段时间。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"textlcd.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">"/dev/fpga_textlcd"</span>, O_WRONLY);</span><br><span class="line">assert(fd != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">ioctl(fd, TEXTLCD_INIT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) <span class="comment">// infinite loop</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> msgs[<span class="number">2</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"1st line msg: "</span>);</span><br><span class="line"><span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%16s"</span>, msgs[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"2nd line msg: "</span>);</span><br><span class="line"><span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%16s"</span>, msgs[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"%s\n%s\n"</span>, msgs[<span class="number">0</span>], msgs[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">ioctl(fd, TEXTLCD_CLEAR);</span><br><span class="line">usleep(<span class="number">1000000</span>);</span><br><span class="line">ioctl(fd, TEXTLCD_LINE1);</span><br><span class="line">write(fd, msgs[<span class="number">0</span>], <span class="built_in">strlen</span>(msgs[<span class="number">0</span>]));</span><br><span class="line">ioctl(fd, TEXTLCD_LINE2);</span><br><span class="line">write(fd, msgs[<span class="number">1</span>], <span class="built_in">strlen</span>(msgs[<span class="number">1</span>]));</span><br><span class="line">usleep(<span class="number">1000000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ioctl(fd, TEXTLCD_OFF);</span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="testtextlcd-move"><a href="#testtextlcd-move" class="headerlink" title="testtextlcd_move"></a>testtextlcd_move</h2><p>要深入的理解驱动程序和硬件功能，必须通过驱动程序的修改完成该功能。</p><p>注意到驱动中的io控制函数fpga_textlcd_ioctl并没有实现画面的移动，又注意到驱动中的函数cursorOrDisplayshift提供了画面移动的接口，所以在头文件textlcd.h中定义新的控制字TEXTLCD_SHIFT。同时为了让该控制字功能更强，让用户在使用其他功能的时候尽量少修改驱动或少使用控制字，注意到fpga_textlcd_ioctl提供了arg的参数，于是使用arg与位操作将参数传入。关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在驱动中加入新控制字并通过arg与位操作传入参数</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_SHIFT:</span><br><span class="line">screenOrCursor = arg &amp; <span class="number">1</span>;</span><br><span class="line">rightOrLeft = arg &amp; <span class="number">2</span>;</span><br><span class="line">cursorOrDisplayshift(screenOrCursor, rightOrLeft);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 测试程序，<span class="number">1</span>二进制最后两位为<span class="number">0</span>和<span class="number">1</span></span><br><span class="line">ioctl(fd, TEXTLCD_CLEAR);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) &#123;</span><br><span class="line">ioctl(fd, TEXTLCD_LINE1);</span><br><span class="line">write(fd, msgs[<span class="number">0</span>], <span class="built_in">strlen</span>(msgs[<span class="number">0</span>]));</span><br><span class="line">ioctl(fd, TEXTLCD_LINE2);</span><br><span class="line">write(fd, msgs[<span class="number">1</span>], <span class="built_in">strlen</span>(msgs[<span class="number">1</span>]));</span><br><span class="line">ioctl(fd, TEXTLCD_SHIFT, <span class="number">1</span>);</span><br><span class="line">usleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="testtextlcd-withkeypad"><a href="#testtextlcd-withkeypad" class="headerlink" title="testtextlcd_withkeypad"></a>testtextlcd_withkeypad</h2><p>实际上就是上次的keypad实验，只是加上了新的设备，不做赘述，关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> voice[] = &#123;<span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x21</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> led_num[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> textlcd[] =&#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch;</span><br><span class="line">ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)read(fd,buf,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\r\n"</span>,buf);</span><br><span class="line"></span><br><span class="line">write(fd_led, &amp;led_num[ch], <span class="number">1</span>);</span><br><span class="line">write(fd_piezo, &amp;voice[ch], <span class="number">1</span>);</span><br><span class="line">ioctl(fd_textlcd, TEXTLCD_CLEAR);</span><br><span class="line">ioctl(fd_textlcd, TEXTLCD_LINE1);</span><br><span class="line">write(fd_textlcd, &amp;textlcd[ch], <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通用驱动合集"><a href="#通用驱动合集" class="headerlink" title="通用驱动合集"></a>通用驱动合集</h1><h2 id="fpga-led-c"><a href="#fpga-led-c" class="headerlink" title="fpga_led.c"></a>fpga_led.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mutex.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_ADDRESS 0x05000020</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_ADDRESS_RANGE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">"fpga_led"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> led_usage = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> *led_ioremap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_led_open</span><span class="params">(struct inode * inode, struct file * file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (led_usage == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> -EBUSY;</span><br><span class="line">led_ioremap = ioremap(LED_ADDRESS, LED_ADDRESS_RANGE);</span><br><span class="line"><span class="keyword">if</span>(check_mem_region((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>)led_ioremap,LED_ADDRESS_RANGE) )</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"Can't get IO Region, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">request_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) led_ioremap, LED_ADDRESS_RANGE, DEVICE_NAME);</span><br><span class="line">led_usage = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_led_release</span><span class="params">(struct inode * inode, struct file * file)</span> </span>&#123;</span><br><span class="line">release_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) led_ioremap, LED_ADDRESS_RANGE);</span><br><span class="line">iounmap(led_ioremap);</span><br><span class="line">led_usage = <span class="number">0</span>;</span><br><span class="line">printk(<span class="string">"fpga_led_release, \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_led_write</span><span class="params">(struct file * file, <span class="keyword">const</span> <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> value;</span><br><span class="line">get_user(value, buf);</span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> *)led_ioremap = value;</span><br><span class="line">printk(<span class="string">"fpga_led_write, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_led_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.open = fpga_led_open,</span><br><span class="line">.release = fpga_led_release,</span><br><span class="line"><span class="comment">// .read = fpga_led_read,</span></span><br><span class="line">.write = fpga_led_write,</span><br><span class="line"><span class="comment">// .unlocked_ioctl = fpga_led_ioctl,</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_led_driver</span> = &#123;</span></span><br><span class="line">.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">.name = <span class="string">"fpga_led"</span>,</span><br><span class="line">.fops = &amp;fpga_led_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_led_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_led_init, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> misc_register(&amp;fpga_led_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_led_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_led_exit, \n"</span>);</span><br><span class="line">misc_deregister(&amp;fpga_led_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(fpga_led_init);</span><br><span class="line">module_exit(fpga_led_exit);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"BJTU_computer_science"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"fpga_led driver test"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br></pre></td></tr></table></figure><h2 id="fpga-piezo-c"><a href="#fpga-piezo-c" class="headerlink" title="fpga_piezo.c"></a>fpga_piezo.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mutex.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIEZO_ADDRESS 0x05000050</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIEZO_ADDRESS_RANGE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">"fpga_piezo"</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> piezo_usage = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> *piezo_ioremap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_piezo_open</span><span class="params">(struct inode * inode, struct file * file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (piezo_usage == <span class="number">-1</span>)</span><br><span class="line"> <span class="keyword">return</span> -EBUSY;</span><br><span class="line"></span><br><span class="line"> piezo_ioremap = ioremap(PIEZO_ADDRESS, PIEZO_ADDRESS_RANGE);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ( check_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) piezo_ioremap, PIEZO_ADDRESS_RANGE) != <span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> printk(KERN_WARNING <span class="string">"Can't get IO Region 0x%x\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)piezo_ioremap);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> request_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) piezo_ioremap, PIEZO_ADDRESS_RANGE,DEVICE_NAME);</span><br><span class="line"> piezo_usage = <span class="number">1</span>;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_open, \n"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_piezo_release</span><span class="params">(struct inode * inode, struct file * file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> release_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) piezo_ioremap, PIEZO_ADDRESS_RANGE);</span><br><span class="line"> iounmap(piezo_ioremap);</span><br><span class="line"> piezo_usage = <span class="number">0</span>;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_release, \n"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not use</span></span><br><span class="line"><span class="comment">static ssize_t fpga_piezo_read(struct file * file, char * buf, size_t length,_t * ofs)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"> printk("fpga_piezo_read, \n");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_piezo_write</span><span class="params">(struct file * file, <span class="keyword">const</span> <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line"> get_user(c, buf);</span><br><span class="line"></span><br><span class="line"> *(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> *)piezo_ioremap = c;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_write, \n"</span>);</span><br><span class="line"> <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not use</span></span><br><span class="line"><span class="comment">static DEFINE_MUTEX(fpga_piezo_mutex);</span></span><br><span class="line"><span class="comment">static long fpga_piezo_ioctl(struct file * file, unsigned int cmd, unsigned arg)&#123;</span></span><br><span class="line"><span class="comment"> printk("fpga_piezo_ioctl, \n");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> switch(cmd)&#123;</span></span><br><span class="line"><span class="comment"> default:</span></span><br><span class="line"><span class="comment"> mutex_unlock(&amp;fpga_piezo_mutex);</span></span><br><span class="line"><span class="comment"> return ENOTTY;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> mutex_unlock(&amp;fpga_piezo_mutex);</span></span><br><span class="line"><span class="comment"> return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_piezo_fops</span> = &#123;</span></span><br><span class="line"> .owner = THIS_MODULE,</span><br><span class="line"> .open = fpga_piezo_open,</span><br><span class="line"> .release = fpga_piezo_release,</span><br><span class="line"> <span class="comment">// .read = fpga_piezo_read,</span></span><br><span class="line"> .write = fpga_piezo_write,</span><br><span class="line"> <span class="comment">// .unlocked_ioctl = fpga_piezo_ioctl,</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_piezo_driver</span> = &#123;</span></span><br><span class="line"> .minor = MISC_DYNAMIC_MINOR,</span><br><span class="line"> .name = <span class="string">"fpga_piezo"</span>,</span><br><span class="line"> .fops = &amp;fpga_piezo_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_piezo_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_init, \n"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> misc_register(&amp;fpga_piezo_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_piezo_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_exit, \n"</span>);</span><br><span class="line"></span><br><span class="line"> misc_deregister(&amp;fpga_piezo_driver);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(fpga_piezo_init);</span><br><span class="line">module_exit(fpga_piezo_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Hanback"</span>);</span><br><span class="line">MODULE_DESCRIPTION (<span class="string">"fpga_piezo driver test"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br></pre></td></tr></table></figure><h2 id="fpga-keypad-c"><a href="#fpga-keypad-c" class="headerlink" title="fpga_keypad.c"></a>fpga_keypad.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/hardware.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_AUTHOR   <span class="meta-string">"Hanback Electronics"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_DESC       <span class="meta-string">"KEYPAD program"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_NAME   <span class="meta-string">"fpga-keypad"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_PHY_ADDR0x05000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_ADDR_RANGE0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>  keypad_ioremap;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *keypad_row_addr,*keypad_col_addr;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> *keypad_check_addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> keypad_fpga_keycode[<span class="number">16</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_open</span><span class="params">(struct inode * inode, struct file * file)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_open, \n"</span>);</span><br><span class="line"></span><br><span class="line">keypad_ioremap=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)ioremap(KEYPAD_PHY_ADDR,KEYPAD_ADDR_RANGE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!check_mem_region(keypad_ioremap, KEYPAD_ADDR_RANGE)) &#123;</span><br><span class="line">request_mem_region(keypad_ioremap, KEYPAD_ADDR_RANGE, KEYPAD_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">printk(<span class="string">"FPGA KEYPAD Memory Alloc Faild!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">keypad_col_addr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(keypad_ioremap+<span class="number">0x70</span>);</span><br><span class="line">keypad_row_addr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(keypad_ioremap+<span class="number">0x72</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_release</span><span class="params">(struct inode * inode, struct file * file)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_release, \n"</span>);</span><br><span class="line">iounmap((<span class="keyword">unsigned</span> <span class="keyword">long</span>*)keypad_ioremap);</span><br><span class="line">release_region(keypad_ioremap, KEYPAD_ADDR_RANGE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_keypad_read</span><span class="params">(struct file * file, <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_read, \n"</span>);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>,k,i,ret;</span><br><span class="line"><span class="keyword">int</span> funtion_key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> send_buf[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">*keypad_row_addr = tmp[i];</span><br><span class="line">value = *keypad_col_addr &amp; <span class="number">0x0f</span>;</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(value == tmp[k])  &#123;</span><br><span class="line">value = j+(i*<span class="number">4</span>);</span><br><span class="line">funtion_key = keypad_fpga_keycode[value<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(value != <span class="number">0x00</span>) <span class="keyword">goto</span> stop_poll;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stop_poll:</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"%d pressed"</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"pressed nothing"</span>);</span><br><span class="line">*keypad_row_addr = <span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line">ret = copy_to_user(buf,send_buf,<span class="built_in">strlen</span>(send_buf));</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_keypad_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.open = fpga_keypad_open,</span><br><span class="line">.release = fpga_keypad_release,</span><br><span class="line">.read = fpga_keypad_read,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_keypad_driver</span> = &#123;</span></span><br><span class="line">.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">.name = <span class="string">"fpga_keypad"</span>,</span><br><span class="line">.fops = &amp;fpga_keypad_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_init, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> misc_register(&amp;fpga_keypad_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_keypad_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_exit, \n"</span>);</span><br><span class="line">misc_deregister(&amp;fpga_keypad_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(fpga_keypad_init);</span><br><span class="line">module_exit(fpga_keypad_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Author of the fpga_keypad to put it here."</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"Description of the fpga_keypad to put it here."</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br></pre></td></tr></table></figure><h2 id="fpga-textlcd-c"><a href="#fpga-textlcd-c" class="headerlink" title="fpga_textlcd.c"></a>fpga_textlcd.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;linux/mutex.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_ADDRESS 0x05000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_ADDRESS_RANGE 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">"fpga_textlcd"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> textlcd_usage = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> *textlcd_ioremap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_ON 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_OFF 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_INIT 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXT_CLEAR 4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXT_LINE1 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXT_LINE2 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_SHIFT 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> command;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runCommand</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command &amp;= <span class="number">0x00FF</span>;</span><br><span class="line">*textlcd_ioremap = command | <span class="number">0x0000</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">*textlcd_ioremap = command | <span class="number">0x0100</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">*textlcd_ioremap = command | <span class="number">0x0000</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCharacter</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> data;</span><br><span class="line">data = ch &amp; <span class="number">0x00FF</span>;</span><br><span class="line">*textlcd_ioremap = <span class="number">0x0400</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">*textlcd_ioremap = data | <span class="number">0x0500</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">*textlcd_ioremap = data | <span class="number">0x0400</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearDisplay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0001</span>;</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">returnHome</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0002</span>;</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">entryModeSet</span><span class="params">(<span class="keyword">int</span> increase, <span class="keyword">int</span> shift)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0004</span>;</span><br><span class="line">command |= (increase &lt;&lt; <span class="number">1</span>) + shift; <span class="comment">// == (increase &lt;&lt; 1) | shift</span></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayOnOffControl</span><span class="params">(<span class="keyword">int</span> display, <span class="keyword">int</span> cursor, <span class="keyword">int</span> blink)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0008</span>;</span><br><span class="line">command |= (display &lt;&lt; <span class="number">2</span>) + (cursor &lt;&lt; <span class="number">1</span>) + blink;</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cursorOrDisplayshift</span><span class="params">(<span class="keyword">int</span> screenOrCursor, <span class="keyword">int</span> rightOrLeft)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0010</span>;</span><br><span class="line">command |= (screenOrCursor &lt;&lt;<span class="number">3</span>) + (rightOrLeft &lt;&lt; <span class="number">2</span>);</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFunctionSet</span><span class="params">(<span class="keyword">int</span> dataLength, <span class="keyword">int</span> row, <span class="keyword">int</span> font)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0020</span>;</span><br><span class="line">command |= (dataLength &lt;&lt; <span class="number">4</span>) + (row &lt;&lt; <span class="number">3</span>) + (font &lt;&lt; <span class="number">2</span>);</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCGRamAddress</span><span class="params">(<span class="keyword">int</span> address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0040</span>;</span><br><span class="line">command |= address; <span class="comment">// addr: [4-0]</span></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDDRamAddress</span><span class="params">(<span class="keyword">int</span> address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0080</span>;</span><br><span class="line">command |= address; <span class="comment">// addr: [5-0]</span></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readBusyFlagAndAddress</span><span class="params">(<span class="keyword">int</span> *pBusyFlag, <span class="keyword">int</span> *pAddressCounter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0200</span>;</span><br><span class="line">runCommand();</span><br><span class="line"></span><br><span class="line">*pBusyFlag = (command &gt;&gt; <span class="number">7</span>) &amp; <span class="number">0x01</span>;</span><br><span class="line">*pAddressCounter = command &amp; <span class="number">0xEF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dataWriteToCGRamOrDDRam</span><span class="params">(<span class="keyword">int</span> address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0400</span>;</span><br><span class="line">command |= address; <span class="comment">// addr: [7-0]</span></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dataReadFromCGRamOrDDRam</span><span class="params">(<span class="keyword">int</span> address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0300</span>;</span><br><span class="line">command |= address; <span class="comment">// addr: [7-0]</span></span><br><span class="line"></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeTextLcd</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setFunctionSet(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//1 - dataLen: 8, 1 - line: 2, 0 - font: 5 *7 dot</span></span><br><span class="line">displayOnOffControl(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//1 - display on, 0 - cursor off, 0 - cursor blink off</span></span><br><span class="line">clearDisplay();</span><br><span class="line">entryModeSet(<span class="number">1</span>, <span class="number">0</span>); <span class="comment">// 1 - after data is read or written, curor pos increase, 0-creen scroll off</span></span><br><span class="line">returnHome();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_textlcd_open</span><span class="params">(struct inode * inode, struct file * file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (textlcd_usage == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> -EBUSY;</span><br><span class="line"></span><br><span class="line">textlcd_ioremap = ioremap(TEXTLCD_ADDRESS, TEXTLCD_ADDRESS_RANGE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( check_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) textlcd_ioremap, TEXTLCD_ADDRESS_RANGE) <span class="comment">/* != 0 */</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"Can't get IO Region 0x%x\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) textlcd_ioremap, TEXTLCD_ADDRESS_RANGE, DEVICE_NAME);</span><br><span class="line">textlcd_usage = <span class="number">1</span>;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_open, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_textlcd_release</span><span class="params">(struct inode * inode, struct file * file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">release_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) textlcd_ioremap, TEXTLCD_ADDRESS_RANGE);</span><br><span class="line">iounmap(textlcd_ioremap);</span><br><span class="line">textlcd_usage = <span class="number">0</span>;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_release, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not use</span></span><br><span class="line"><span class="comment">static ssize_t fpga_textlcd_read(struct file * file, char * buf, size_t length, loff_t * ofs)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printk("fpga_textlcd_read, \n");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_textlcd_write</span><span class="params">(struct file * file, <span class="keyword">const</span> <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">size = (length &lt; <span class="number">20</span>) ? length : <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">copy_from_user(str, buf, length);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size ; ++i)</span><br><span class="line">writeCharacter(str[i]);</span><br><span class="line">printk(<span class="string">"fpga_textlcd_write, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static DEFINE_MUTEX(fpga_textlcd_mutex);</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fpga_textlcd_ioctl</span><span class="params">(struct file * file, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd,<span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> screenOrCursor;</span><br><span class="line"><span class="keyword">int</span> rightOrLeft;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_ioctl, \n"</span>);</span><br><span class="line"><span class="keyword">switch</span>(cmd)&#123;</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_ON:</span><br><span class="line">displayOnOffControl(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_OFF:</span><br><span class="line">displayOnOffControl(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_INIT:</span><br><span class="line">initializeTextLcd();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXT_CLEAR:</span><br><span class="line">clearDisplay();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXT_LINE1:</span><br><span class="line">setDDRamAddress(<span class="number">0x00</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXT_LINE2:</span><br><span class="line">setDDRamAddress(<span class="number">0x40</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_SHIFT:</span><br><span class="line">screenOrCursor = arg &amp; <span class="number">1</span>;</span><br><span class="line">rightOrLeft = arg &amp; <span class="number">2</span>;</span><br><span class="line">cursorOrDisplayshift(screenOrCursor, rightOrLeft);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//default:</span></span><br><span class="line"><span class="comment">// mutex_unlock(&amp;fpga_textlcd_mutex);</span></span><br><span class="line"><span class="comment">// return ENOTTY;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutex_unlock(&amp;fpga_textlcd_mutex);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_textlcd_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.open = fpga_textlcd_open,</span><br><span class="line">.release = fpga_textlcd_release,</span><br><span class="line"><span class="comment">// .read = fpga_textlcd_read,</span></span><br><span class="line">.write = fpga_textlcd_write,</span><br><span class="line">.unlocked_ioctl = fpga_textlcd_ioctl,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_textlcd_driver</span> = &#123;</span></span><br><span class="line">.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">.name = <span class="string">"fpga_textlcd"</span>,</span><br><span class="line">.fops = &amp;fpga_textlcd_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_textlcd_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_init, \n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> misc_register(&amp;fpga_textlcd_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_textlcd_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_exit, \n"</span>);</span><br><span class="line"></span><br><span class="line">misc_deregister(&amp;fpga_textlcd_driver);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(fpga_textlcd_init);</span><br><span class="line">module_exit(fpga_textlcd_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Hanback"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"fpga_textlcd driver test"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;虽然是大三上（2017年下半年）的成果，但是得益于高金山老师的耐心指导，嵌入式是学得比较透彻的课，所以就把&lt;a href=&quot;http://wang22ti.com/2018/05/08/%E3%80%8A%E5%B5%8C%E5%85%A5%E5%
      
    
    </summary>
    
      <category term="嵌入式系统设计" scheme="http://wang22ti.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>《嵌入式系统设计》课程论文——《飞入寻常百姓家——嵌入式的机器学习加速芯片》</title>
    <link href="http://wang22ti.com/2018/05/08/%E3%80%8A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94%E3%80%8A%E9%A3%9E%E5%85%A5%E5%AF%BB%E5%B8%B8%E7%99%BE%E5%A7%93%E5%AE%B6%E2%80%94%E2%80%94%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87%E3%80%8B/"/>
    <id>http://wang22ti.com/2018/05/08/《嵌入式系统设计》课程论文——《飞入寻常百姓家——嵌入式的机器学习加速芯片》/</id>
    <published>2018-05-08T09:19:00.000Z</published>
    <updated>2018-05-08T15:40:25.947Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>虽然是大三上（2017年9月）的成果，但是得益于高金山老师的耐心指导，嵌入式是学得比较透彻的课，所以就把课程论文和<a href="http://wang22ti.com/2018/05/08/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AE%9E%E9%AA%8C%E5%90%88%E9%9B%86/">比较重要的实验的合集</a>贴出来。</p><p>那时还没学体系结构，现在看来还有值得深入的地方了。</p></blockquote><p><strong>摘要：</strong>嵌入式的加速芯片使得机器学习任务能够在各种设备上有效进行。在可以预见的将来，随着相关技术的进一步发展，加速芯片必然会更加迅速、高效，集成度更高，由此带来的大量智能化程度更高的便携设备，令人遐想。</p><p><strong>关键字</strong>：嵌入式；机器学习；SoC；寒武纪 </p><p>​    2017年9月2日，华为在德国柏林国际消费类电子产品展览会发布“麒麟970”芯片，其最大的亮点在于集成在SoC上的机器学习加速芯片“NPU”，也就是由初创高科技企业寒武纪推出的国际首款深度学习处理器产品“寒武纪1A深度学习处理器”。出于对手机SoC和机器学习的兴趣，本文将对嵌入式的机器学习加速芯片做简单介绍，并对其发展提出自己的看法。</p><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><h2 id="手机SoC简介"><a href="#手机SoC简介" class="headerlink" title="手机SoC简介"></a>手机SoC简介</h2><p>​    SoC，全称System-on-a-Chip，翻译为“片上系统”，是指利用嵌入式技术将系统的关键部件集成在一块芯片上<strong>[1]</strong>，从而实现模块化、移动化、低功耗化的手机硬件系统。常见的手机SoC集成了中央处理器CPU、图形处理器GPU、内存芯片ROM、数字信号处理器DSP、图像信号处理器ISP、基带芯片Baseband、协处理器Coprocessor等等原件<strong>[2]</strong>。</p><p>​    现在市面上主流的手机SoC有高通骁龙系列、华为麒麟系列、三星猎户座系列、联发科MTK系列和苹果的A系列<strong>[3]</strong>。其中代表各家最高水平的旗舰芯片为骁龙835、麒麟970、猎户座8895、联发科MTK HelioX30和苹果A10Fusion。另外小米也在自研处理器澎湃系列，已发布澎湃S1芯片。<strong>[4]</strong></p><p>​    当今SoC中CPU与GPU的工艺制程已经达到10nm<strong>[5]</strong>，正在逼近传统电子的物理极限，如何进一步提高处理能力，应对大数据时代的移动计算任务，成为急需解决的问题。</p><h2 id="移动平台的机器学习简介-6"><a href="#移动平台的机器学习简介-6" class="headerlink" title="移动平台的机器学习简介[6]"></a>移动平台的机器学习简介[6]</h2><p>​    随着机器学习的发展，尤其是在深层神经网络流行之后，机器学习任务对于计算能力的要求越来越高，虽然部分公司推出了专门用于机器学习任务加速的硬件，例如Google的张量处理单元TPU<strong>[7]</strong>，但是都是面向服务器的。</p><p>​    相对于服务器，基于移动平台的机器学习任务有着诸多优势：</p><ol><li><p>离线性，不依赖网络条件</p></li><li><p>即时性，无可比拟的速度与低延迟</p></li><li><p>安全性，不存在隐私的问题</p></li><li><p>易维护，不需要搭建服务器，不会出现服务器过载的情况</p></li><li><p>价格低，易于实现面向消费者的商用产品</p><p>但是，在传统的SoC架构上处理机器学习任务，存在致命的弊端：</p></li><li><p>数据集会占用本来就很珍贵的存储空间</p></li><li><p>较高的功耗会严重减少设备的续航时间</p></li><li><p>应用程序的代码移植性较低</p><p>因此，进行异构计算的嵌入式机器学习加速芯片便应运而生了。</p></li></ol><h1 id="芯片简介"><a href="#芯片简介" class="headerlink" title="芯片简介"></a>芯片简介</h1><p>​    寒武纪1A深度学习处理器是由初创高科技企业寒武纪推出的国际首款深度学习处理器产品，它着重解决了传统SoC架构上处理机器学习任务的前两个弊端。一下将对其做简单介绍，并不涉及技术细节。<strong>[8-9]</strong></p><h2 id="改进计算模型的表示方法"><a href="#改进计算模型的表示方法" class="headerlink" title="改进计算模型的表示方法"></a>改进计算模型的表示方法</h2><p>​    针对大规模的稀疏不对称图的表示，基于磁盘的图形处理框架GraphChi<strong>[10]</strong>将顶点集合分为若干个子集，并在每个子集中按照边进行记录。在寒武纪的架构中，将顶点的划分由原来的不规则改为相同的，存储的规则性极大地提高了随机访问的速度和计算单元的效率。</p><p><img src="/2018/05/08/《嵌入式系统设计》课程论文——《飞入寻常百姓家——嵌入式的机器学习加速芯片》/1.png" alt=""></p><h2 id="挖掘图像处理局部性"><a href="#挖掘图像处理局部性" class="headerlink" title="挖掘图像处理局部性"></a>挖掘图像处理局部性</h2><p>​    通过观测，设计者发现在图像处理过程中顶点的使用往往符合偏态的幂律分布<strong>[11]</strong>，即最经常出现的1%的顶点平均和22.18%的边相连，也就是顶点的使用具有很强的局部性。因此，设计者在寒武纪芯片上加上了一些复杂的顶点缓存，从而减少了常用顶点的读取次数。</p><p> <img src="/2018/05/08/《嵌入式系统设计》课程论文——《飞入寻常百姓家——嵌入式的机器学习加速芯片》/2.png" alt=""></p><h2 id="杰出的性能表现"><a href="#杰出的性能表现" class="headerlink" title="杰出的性能表现"></a>杰出的性能表现</h2><p>​       通过对GPU与加速芯片进行相同机器学习任务的比较，可以发现，在代码量、运算速度、功耗等等各个主要的性能指标中，加速芯片都表现出良好的性能，甚至提高了几十倍乃至上百倍，体现出异构计算的优越性。</p><p><img src="/2018/05/08/《嵌入式系统设计》课程论文——《飞入寻常百姓家——嵌入式的机器学习加速芯片》/3.png" alt=""></p><h1 id="个人感想与展望"><a href="#个人感想与展望" class="headerlink" title="个人感想与展望"></a>个人感想与展望</h1><p>​    毫无疑问，从寒武纪发布芯片，再到华为集成到SoC，是我国IC设计的巨大进步。在和舍友讨论的过程中，他认为麒麟970能否成功关键在于开发者是否愿意使用——否则只会空耗电量。而我认为，即便第三方开发者暂时还没有使用，NPU的加入也会极大提高华为手机在诸多应用的表现并使之脱颖而出：</p><p>1、相册图片的即时分类。传统的相册分类任务需要在手机接通电源乃至保持联网的状态下进行，而且速度较慢。而NPU可以使得在低功耗的状态下快速完成本地的分类任务。</p><p>2、用户场景的识别与任务推荐。在我看来，此前华为在荣耀Magic中试验的智慧系统<strong>[12]</strong>正是为此进行的提前布局。在验证了程序的可行性之后，配有高效的加速硬件，场景识别及其配套的任务推荐必然更加迅速而有效。</p><p>3、人脸识别。使用虹膜或人脸识别的解锁必然更加准确、快速、高效。</p><p>4、拍照图像渲染。一方面，可以快速识别拍照环境并给予相应的优化处理；另一方面可以对拍好的图像进行即时性的优化处理。关键这一切都是在极低的功耗下完成的。</p><p>​    不仅如此，更让我感到兴奋的，是嵌入式的加速芯片使得机器学习任务能够在各种设备上有效进行。新的加速芯片的主要缺陷在于工艺程度不够高，在可以预见的将来，随着相关技术的进一步发展，加速芯片必然会更加迅速、高效，集成度更高，价格更加低廉，由此带来的大量智能化程度更高的便携设备，令人遐想。例如我可以猜想，现在只带有一层神经网络的开发板，未来完全可以改为集成加速芯片，其能够处理的任务，便完全不可同日而语了吧？得益于加速芯片极高的能效，智能手环可能实现令人惊奇的待机时间，从而极大提高用户体验。还有，传统笔记本的架构是否会因此发生改变呢？</p><p>​    这些，仿佛都在昭示这一个新的时代的到来，硬件级的机器学习加速，从此飞入寻常百姓家。</p><p>​    另：在撰写的过程中，苹果公司发布了最新的A11 Bionic，也加入了类似的机器学习加速引擎，在此不做赘述，但可以看出嵌入式的机器学习加速芯片已经成为SoC发展的新趋势。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] soc（多种含义）_百度百科</p><p><a href="https://baike.baidu.com/item/soc/1053305?fr=aladdin#3" target="_blank" rel="noopener">https://baike.baidu.com/item/soc/1053305?fr=aladdin#3</a></p><p>[2] 只谈核数没意义 带你重新认识手机SoC_高通_骁龙_八核_手机<em>新浪科技</em>新浪网<a href="http://tech.sina.com.cn/mobile/n/2014-09-29/08399657494.shtml" target="_blank" rel="noopener">http://tech.sina.com.cn/mobile/n/2014-09-29/08399657494.shtml</a></p><p>[3] 高通_海思<em>联发科</em>三星 常见手机SoC科普</p><p><a href="http://www.eepw.com.cn/article/201701/342481.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201701/342481.htm</a></p><p>[4] 澎湃S1_百度百科</p><p><a href="https://baike.baidu.com/item/%E6%BE%8E%E6%B9%83S1/20455910?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%BE%8E%E6%B9%83S1/20455910?fr=aladdin</a></p><p>[5] 骁龙835处理器正式发布 10nm工艺+五大特色_数码_腾讯网</p><p><a href="http://digi.tech.qq.com/a/20170104/003947.htm" target="_blank" rel="noopener">http://digi.tech.qq.com/a/20170104/003947.htm</a></p><p>[6] 基于移动设备的机器学习，本地与云端孰优孰劣？ _ 雷锋网</p><p><a href="https://www.leiphone.com/news/201702/kXMhFVvF143mxunm.html" target="_blank" rel="noopener">https://www.leiphone.com/news/201702/kXMhFVvF143mxunm.html</a></p><p>[7] 谷歌的机器学习专用芯片让AI速度更快、更高效_科技_腾讯网</p><p><a href="http://tech.qq.com/a/20170425/046948.htm" target="_blank" rel="noopener">http://tech.qq.com/a/20170425/046948.htm</a></p><p>[8] Jinhong Zhou, Shaoli Liu, Qi Guo, XudaZhou, Tian Zhi, Daofu Liu, Chao Wang Xuehai Zhou, Yunji Chen and Tianshi Chen， “TuNao: AHigh-Performance and Energy-EfficientRecofigurable Accelerator for Graph Processing” 17th IEEE/ACMInternational Symposium on Cluster, Cloud and Grid Computing，2017</p><p>[9]Shaoli Liu, Zidong Du, Jinhua Tao, Dong Han, Tao Luo, Yuan Xie, Yunji Chen andTianshi Chen，“Cambricon: An Instruction Set Architecture for NeuralNetwork” ACM/IEEE 43rd Annual International Symposiumon Computer Architecture，2016</p><p>[10]A. Kyrola, G. Blelloch, and C. Guestrin, “Graphchi: Large-scale graph computationon just a pc,” in Proceedings of the 10th USENIX Conference on OperatingSystems Design and Implementation, 2012.               </p><p>[11]  幂律分布_百度百科</p><p><a href="https://baike.baidu.com/item/%E5%B9%82%E5%BE%8B%E5%88%86%E5%B8%83/4281937?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%B9%82%E5%BE%8B%E5%88%86%E5%B8%83/4281937?fr=aladdin</a></p><p>[12] 【荣耀Magic【报价参数 功能 性能 图片 怎么样】】_华为商城</p><p><a href="https://www.vmall.com/product/531767730.html" target="_blank" rel="noopener">https://www.vmall.com/product/531767730.html</a></p><p>注：因为并不是十分严格的学术论文，故将大量新闻网页作为参考资料列入，同时没有遵循严格的引用格式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;虽然是大三上（2017年9月）的成果，但是得益于高金山老师的耐心指导，嵌入式是学得比较透彻的课，所以就把课程论文和&lt;a href=&quot;http://wang22ti.com/2018/05/08/%E6%9C%9D%E8%8A%B1%E5%A4%95
      
    
    </summary>
    
      <category term="嵌入式" scheme="http://wang22ti.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>《编译原理》实验3-语法分析器（LL1分析法）python实现</title>
    <link href="http://wang22ti.com/2018/05/05/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%EF%BC%88LL1%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wang22ti.com/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/</id>
    <published>2018-05-05T06:13:29.000Z</published>
    <updated>2018-05-08T14:35:30.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        本次实验中，在上次实验（递归下降分析法）实现的first集follow集的基础上，我用python3.5实现了一个LL(1)语法分析类，具有以下功能：</p><ol><li><p>根据文法的起始符号、非终结符号、产生式自动生成文法终结符号的First集和Follow集，并进一步生成文法的LL(1)文法分析表。</p></li><li><p>根据文法分析表判断输入串是否满足该文法。</p></li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>​        实验中实现的词法分析类名为LLOneAnalyzer，具体描述信息如下：</p><p><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/Snipaste_2018-05-07_15-39-18.png" alt=""><br><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/Snipaste_2018-05-07_15-39-50.png" alt=""></p><h1 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h1><p><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/Snipaste_2018-05-07_15-41-27.png" alt=""></p><p><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/Snipaste_2018-05-07_15-43-20.png" alt=""></p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写过递归下降分析，可以直接写LL1的加强版啦</span></span><br><span class="line"><span class="comment"># E'用B代替，T'用U来代替</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LLOneAnalyzer</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, overs, production)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.overs = overs</span><br><span class="line">        self.production = production</span><br><span class="line">        self.nontermainals = production.keys()</span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line">        self.analyse_table = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.get_analyse_table()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first的递归函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_rec</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        ret_dict = &#123;&#125;</span><br><span class="line">        <span class="comment"># 对于每一个产生式</span></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">            <span class="comment"># 如果该产生式右部第一个符号为终结符号，用非终结符号的first集更新ret_dict，下一个产生式</span></span><br><span class="line">            <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                ret_dict.update(self.first[nontermainal])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 如果该产生式右部不为空，</span></span><br><span class="line">            <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                <span class="comment"># 对于产生式右部每一个符号</span></span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                    <span class="comment"># 递归调用获得该符号的first集并加入该非终结符号的first集</span></span><br><span class="line">                    first_ = self.get_first_rec(sign)</span><br><span class="line">                    ret_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                    <span class="comment"># 如果该符号的first集中没有空串，处理下一个产生式</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 如果产生式右部为空串，将空串加入该非终结符号的first集合为加入follow集做准备</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret_dict</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first集和follow集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮，考虑右部首符号为终结符号</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮（递归）</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> nontermainal <span class="keyword">not</span> <span class="keyword">in</span> self.first_first:</span><br><span class="line">                self.first[nontermainal] = self.get_first_rec(nontermainal)</span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[self.start].add(<span class="string">'#'</span>)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = self.follow.copy()</span><br><span class="line">            <span class="comment"># 对于每一产生式从左到右的每一个符号</span></span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="comment"># 如果是终结符号，下一个符号</span></span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.overs:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="comment"># 如果是非终结符号且为最后一个，该符号的follow集为产生式左部非终结符号的follow集</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] = self.follow[nontermainal]</span><br><span class="line">                        <span class="comment"># 如果是非终结符号且后一个符号为终结符号，该符号的follow加上该终结符号</span></span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="comment"># 如果是非终结符号且后一个符号为非终结符，将后一个符号的first集减去空串并入该符号的follow集</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_first = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_first_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_first_without_null</span><br><span class="line">                            <span class="comment"># 如果后一个符号的first集中存在空串，还需要将产生式左部非终结符号的follow集并入该符号follow集</span></span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_first:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 将follow集加入first集</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal]:</span><br><span class="line">                self.first[nontermainal][<span class="string">''</span>] = self.follow[nontermainal]</span><br><span class="line">        <span class="comment"># print(self.first)</span></span><br><span class="line">        <span class="comment"># print(self.follow)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据first集follow集生成分析表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analyse_table</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 对于first集中每一个产生式及对应的输入符号</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> a, ai <span class="keyword">in</span> self.first[nontermainal].items():</span><br><span class="line">                <span class="comment"># 如果输入符号为终结符号，将终结符号、输入符号、产生式右部写入分析表</span></span><br><span class="line">                <span class="keyword">if</span> a != <span class="string">''</span>:</span><br><span class="line">                    self.analyse_table[nontermainal][a] = ai</span><br><span class="line">                <span class="comment"># 如果输入符号是空串，将非终结符号的follow集中每一个符号在分析表中的值写为空串</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> b <span class="keyword">in</span> ai:</span><br><span class="line">                        self.analyse_table[nontermainal][b] = <span class="string">''</span></span><br><span class="line">        <span class="comment"># print(self.analyse_table)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ll(1)文法分析函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_llone</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 拿出分析栈栈顶符号分析</span></span><br><span class="line">            x = self.stack.pop()</span><br><span class="line">            <span class="comment"># 如果是栈顶符号终结符号</span></span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> self.overs:</span><br><span class="line">                <span class="comment"># 如果和待分析的符号匹配，分析下一个符号</span></span><br><span class="line">                <span class="keyword">if</span> x == self.a:</span><br><span class="line">                    self.index += <span class="number">1</span></span><br><span class="line">                    self.a = self.string[self.index]</span><br><span class="line">                <span class="comment"># 如果不匹配，返回False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 如果栈顶符号是'#'</span></span><br><span class="line">            <span class="keyword">elif</span> x == <span class="string">'#'</span>:</span><br><span class="line">                <span class="comment"># 如果和待分析的符号匹配，返回True</span></span><br><span class="line">                <span class="keyword">if</span> x == self.a:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="comment"># 如果不匹配，返回False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 如果是非终结符号，将产生式右部元素逆序压入分析栈</span></span><br><span class="line">            <span class="keyword">elif</span> self.a <span class="keyword">in</span> self.analyse_table[x].keys():</span><br><span class="line">                self.stack += list(reversed(self.analyse_table[x][self.a]))</span><br><span class="line">            <span class="comment"># 如果是未知符号，返回False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ll(1)文法分析程序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.string = string + <span class="string">'#'</span></span><br><span class="line">        self.stack = [<span class="string">'#'</span>, self.start]</span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.a = self.string[self.index]</span><br><span class="line">        <span class="keyword">if</span> self.analyse_llone():</span><br><span class="line">            print(<span class="string">'OK  '</span>, string)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Fail'</span>, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = <span class="string">'E'</span></span><br><span class="line">overs = [<span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>, <span class="string">'i'</span>]</span><br><span class="line">production = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'TB'</span>, ],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'ATB'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'FU'</span>, ],</span><br><span class="line">    <span class="string">'U'</span>: [<span class="string">'MFU'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'+'</span>, <span class="string">'-'</span>],</span><br><span class="line">    <span class="string">'M'</span>: [<span class="string">'*'</span>, <span class="string">'/'</span>],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [</span><br><span class="line">    <span class="string">''</span>,</span><br><span class="line">    <span class="string">'i+@'</span>,</span><br><span class="line">    <span class="string">'i'</span>,</span><br><span class="line">    <span class="string">'i+'</span>,</span><br><span class="line">    <span class="string">'+*i'</span>,</span><br><span class="line">    <span class="string">'i+i*i'</span>,</span><br><span class="line">    <span class="string">'i+i*ii'</span>,</span><br><span class="line">    <span class="string">'i+i*i+'</span>,</span><br><span class="line">    <span class="string">'i+i*i/i-i'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">llone_analyzer = LLOneAnalyzer(start=start, overs=overs, production=production)</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    llone_analyzer.analyse(string=string)</span><br></pre></td></tr></table></figure><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p><img src="/2018/05/05/《编译原理》实验3-语法分析器（LL1分析法）python实现/1.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：由于上一次实验打下的良好基础，本次实验较为顺利，没有遇到明显的困难。</p><p>​        本程序的优点包括：比较完整地实现了LL(1)分析算法；分析器只需要输入起始符号、产生式、终结符号就可以初始化，自动生成First集、Follow集和分析表。</p><p>​        本程序还存在可以优化的地方，主要包括：将输入符号串改为由词法分析器生成的二元式从文件中读取，为完整编译器的实现打下良好的基础；</p><p>​        本实验中，通过实现LL(1)文法分析表生成算法与LL(1)文法分析算法，加深了我对两个算法的理解，提高了我对问题分析、抽象的能力，为实现完整编译器打下了良好的基础。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序功能描述&quot;&gt;&lt;a href=&quot;#程序功能描述&quot; class=&quot;headerlink&quot; title=&quot;程序功能描述&quot;&gt;&lt;/a&gt;程序功能描述&lt;/h1&gt;&lt;p&gt;​        本次实验中，在上次实验（递归下降分析法）实现的first集follow集的基础上，我用py
      
    
    </summary>
    
      <category term="编译原理" scheme="http://wang22ti.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》实验4-进程通信与线程同步</title>
    <link href="http://wang22ti.com/2018/05/01/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C4-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://wang22ti.com/2018/05/01/《操作系统》实验4-进程通信与线程同步/</id>
    <published>2018-05-01T15:32:53.000Z</published>
    <updated>2018-05-08T14:35:15.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><p>​    <strong>创建两个进程。要求两个进程分别作为“生产者”和“消费者”，由生产者生产1-100数字，通过命名管道传递给消费者进程，并由消费者屏幕输出。通过实验验证命名管道同步方式（生产者发送时阻塞或者非阻塞，消费者阻塞或者非阻塞）</strong></p><p>​        实验中我使用fork创建了两个进程分别作为生产者和消费者，从屏幕右侧的输出来看，到后期基本按照“写入一个，读出一个”的方式进行生产消费，不过消费者相对于生产者有3个周期的延迟。最终程序很好的在“生产者-消费者”模式下完成了进程的同步输出。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image1.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIFO_NAME <span class="meta-string">"my_fifo"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE PIPE_BUF </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (access(FIFO_NAME, F_OK) == <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> ( mkfifo(FIFO_NAME, <span class="number">0777</span>) )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[producer %d] could not create fifo %s\n"</span>, getpid(), FIFO_NAME);  </span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ( (pipe_id =open(FIFO_NAME, O_WRONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">         <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];</span><br><span class="line">         <span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">             <span class="built_in">sprintf</span>(buffer, <span class="string">"%d"</span>, num);</span><br><span class="line">             <span class="keyword">if</span> ( (write(pipe_id, buffer, BUFFER_SIZE)) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[producer]Write error on pipe\n"</span>);  </span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">             &#125;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"[producer %d] put %d\n"</span>, getpid(), num++); </span><br><span class="line">         &#125;</span><br><span class="line">         close(pipe_id); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[producer %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">comsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];   </span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ((pipe_id =open(FIFO_NAME, O_RDONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">do</span>&#123;  </span><br><span class="line">            read(pipe_id, buffer, BUFFER_SIZE);</span><br><span class="line">            num = atoi(buffer);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[somsumer %d] get %d\n"</span>, getpid(), num); </span><br><span class="line">        &#125;<span class="keyword">while</span>(num &lt; <span class="number">100</span>);  </span><br><span class="line">        close(pipe_id);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[somsumer %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">while</span> ((pid = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line">producer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">comsumer();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>​    <strong>创建两个进程，通过消息传递机制通信。进程A接受用户的键盘输入，并通过消息通信传递给进程B。进程B根据收到的命令如下处理，如果是“exit”则退出，否则将收到的命令串原样屏幕输出。</strong></p><p>​        由于仍然采用命名管道的方法，该题和上一题十分相似，在此不做赘述，程序运行结果如下，很好的满足了题目的要求。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image2.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIFO_NAME <span class="meta-string">"my_fifo_cmd"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE PIPE_BUF </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_cmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (access(FIFO_NAME, F_OK) == <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> ( mkfifo(FIFO_NAME, <span class="number">0777</span>) )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[get_cmd %d] could not create fifo %s\n"</span>, getpid(), FIFO_NAME);  </span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ( (pipe_id =open(FIFO_NAME, O_WRONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">         <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];</span><br><span class="line">         <span class="keyword">char</span>* exit_str = <span class="string">"exit"</span>;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"please input cmd:\n"</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buffer);</span><br><span class="line">            <span class="keyword">if</span> ( (write(pipe_id, buffer, BUFFER_SIZE)) == <span class="number">-1</span>) &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"[get_cmd]Write error on pipe\n"</span>);  </span><br><span class="line">               <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(buffer, exit_str) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         close(pipe_id); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[get_cmd %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_cmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ((pipe_id =open(FIFO_NAME, O_RDONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];   </span><br><span class="line">        <span class="built_in">memset</span>(buffer, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">        <span class="keyword">char</span>* exit_str = <span class="string">"exit"</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;  </span><br><span class="line">            read(pipe_id, buffer, BUFFER_SIZE);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(buffer, exit_str) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[print_cmd %d] %s\n"</span>, getpid(), buffer); </span><br><span class="line">        &#125;  </span><br><span class="line">        close(pipe_id);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[print_cmd %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">while</span> ((pid = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line">get_cmd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">print_cmd();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><p>​    <strong>采用线程的互斥锁和条件变量，实现最多允许10个读者同时读的读者写者线程同步问题。</strong></p><p>​        解决读写者问题的关键在于深入分析读者写者的同步需求。读者之间读不需要互斥，但为了设定读者数量最大值必须在计数的时候互斥，开始时计数需要考虑读者数是否达到最大值，结束计数的时候需要考虑结束前读者数是否为最大值、结束后是否还有读者，最后对条件变量进行相应的操作；写者之间当然也要互斥，写之前需要考虑是否有读者在读，写期间不允许有读者读。</p><p>​        本实验我将以上思路转变为代码并测试如下，为了方便结果的截取将读者最大数量设为2（当然设为10也没问题），写者数量为1。写者的工作是将共有的变量i加1并打印，读者的工作是读取变量i的值并打印。最终实验结果如下图所示，可见读者读取期间i的值不变，写者写数期间i依次增加，满足读写者同步的要求。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image3.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> rmutex;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> wmutex;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wcond;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> rcond;</span><br><span class="line"><span class="keyword">int</span> readcount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;rmutex);</span><br><span class="line">        <span class="keyword">if</span> (readcount &gt;= N) &#123;</span><br><span class="line">            pthread_cond_wait(&amp;rcond, &amp;rmutex);</span><br><span class="line">        &#125;</span><br><span class="line">        readcount++;</span><br><span class="line">        pthread_mutex_unlock(&amp;rmutex);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"reader: %d\n"</span>, i);</span><br><span class="line"></span><br><span class="line">        pthread_mutex_lock(&amp;rmutex);</span><br><span class="line">        <span class="keyword">if</span> (readcount == N) &#123;</span><br><span class="line">            pthread_cond_signal(&amp;rcond);</span><br><span class="line">        &#125;</span><br><span class="line">        readcount--;</span><br><span class="line">        <span class="keyword">if</span>(readcount == <span class="number">0</span>) &#123;</span><br><span class="line">            pthread_cond_signal(&amp;wcond);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_mutex_unlock(&amp;rmutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;wmutex);</span><br><span class="line">        <span class="keyword">while</span>(readcount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            pthread_cond_wait(&amp;wcond, &amp;wmutex);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_mutex_lock(&amp;rmutex);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"writer: %d\n"</span>, ++i);</span><br><span class="line">        <span class="comment">// sleep(1);</span></span><br><span class="line">        </span><br><span class="line">        pthread_mutex_unlock(&amp;rmutex);</span><br><span class="line">        pthread_mutex_unlock(&amp;wmutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1, thid2, thid3;</span><br><span class="line">    pthread_mutex_init(&amp;rmutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_init(&amp;wmutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;wcond, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;rcond, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)reader, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)reader, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid3, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)writer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;rmutex);</span><br><span class="line">    pthread_mutex_destroy(&amp;wmutex);</span><br><span class="line">    pthread_cond_destroy(&amp;rcond);</span><br><span class="line">    pthread_cond_destroy(&amp;wcond);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p>​    <strong>采用java管程实现生产者消费者线程同步并通过实验测试验证正确性。</strong></p><p>​    由于使用Java编程，因此转而使用windows，正好借此机会复习了Java。</p><p>​    在本次实验中，我通过实践Runnable接口创建了生产者类Producer和消费者类Comsumer，使用Java自带的LinkedQueue结构作为数据缓冲区，并使用synchronized关键字和wait()、signal()方法完成线程的同步与互斥。最后同时开启了3个生产者线程和3个消费者线程。</p><p>​    实验结果如屏幕右方所示，可以看到在生产者在生成随机数89后发现队列已满于是进入阻塞状态并放弃对buffer的互斥锁，于是消费者取出上一轮第一个生产出的随机数98并唤醒所有线程。此时有一个生产者发现buffer不满于是又生产了一个随机数44，之后消费者占据主导权并持续消费，可以看到在这一轮消费中最后一个恰好是之前生产的44。可见很好的实现了“生产者-消费者”的线程同步。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image4.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Queue bufferQueue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> bound = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">    Producer(Queue bufferQueue) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferQueue = bufferQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bufferQueue) &#123;</span><br><span class="line">                <span class="keyword">while</span> (bufferQueue.size ( ) &gt;= N) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bufferQueue.wait ( );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace ( );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> newInt = <span class="keyword">new</span> Random ( ).nextInt (bound) + <span class="number">10</span>;</span><br><span class="line">                bufferQueue.add (newInt);</span><br><span class="line">                System.out.println (<span class="string">"produce : "</span> + newInt + <span class="string">"\tqueue : "</span> + bufferQueue.size ( ));</span><br><span class="line">                bufferQueue.notifyAll ( );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Queue bufferQueue;</span><br><span class="line"></span><br><span class="line">    Comsumer(Queue buffer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferQueue = buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bufferQueue) &#123;</span><br><span class="line">                <span class="keyword">while</span> (bufferQueue.size ( ) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bufferQueue.wait ( );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace ( );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> ch = (<span class="keyword">int</span>) bufferQueue.poll ( );</span><br><span class="line">                System.out.println (<span class="string">"comsume : "</span> + ch + <span class="string">"\tqueue : "</span> + bufferQueue.size ( ));</span><br><span class="line">                bufferQueue.notifyAll ( );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Queue bufferqueue = <span class="keyword">new</span> LinkedList ( );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread (<span class="keyword">new</span> Producer (bufferqueue)).start ( );</span><br><span class="line">            <span class="keyword">new</span> Thread (<span class="keyword">new</span> Comsumer (bufferqueue)).start ( );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] Linux学习笔记6——access函数 </p><p><a href="https://blog.csdn.net/yellowston/article/details/53493293" target="_blank" rel="noopener">https://blog.csdn.net/yellowston/article/details/53493293</a></p><p>[2] Linux进程通信：命名管道FIFO小结</p><p> <a href="https://blog.csdn.net/MONKEY_D_MENG/article/details/5651430" target="_blank" rel="noopener">https://blog.csdn.net/MONKEY_D_MENG/article/details/5651430</a></p><p>[3] Java 多线程编程</p><p><a href="http://www.runoob.com/java/java-multithreading.html" target="_blank" rel="noopener">http://www.runoob.com/java/java-multithreading.html</a></p><p>[4] JAVA多线程之Runnable和Thread比较</p><p><a href="https://blog.csdn.net/u013755987/article/details/51855098" target="_blank" rel="noopener">https://blog.csdn.net/u013755987/article/details/51855098</a></p><p>[5] Java中的LinkedList的方法的应用</p><p><a href="https://blog.csdn.net/sinat_36246371/article/details/53709625" target="_blank" rel="noopener">https://blog.csdn.net/sinat_36246371/article/details/53709625</a></p><p>[6] java中的notify和notifyAll有什么区别？ </p><p><a href="https://www.zhihu.com/question/37601861" target="_blank" rel="noopener">https://www.zhihu.com/question/37601861</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、&quot;&gt;&lt;a href=&quot;#一、&quot; class=&quot;headerlink&quot; title=&quot;一、&quot;&gt;&lt;/a&gt;一、&lt;/h1&gt;&lt;p&gt;​    &lt;strong&gt;创建两个进程。要求两个进程分别作为“生产者”和“消费者”，由生产者生产1-100数字，通过命名管道传递给消费者进程
      
    
    </summary>
    
      <category term="操作系统" scheme="http://wang22ti.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>日记18-5</title>
    <link href="http://wang22ti.com/2018/05/01/%E6%97%A5%E8%AE%B018-5/"/>
    <id>http://wang22ti.com/2018/05/01/日记18-5/</id>
    <published>2018-05-01T09:35:51.000Z</published>
    <updated>2018-05-12T08:45:48.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-5-12"><a href="#18-5-12" class="headerlink" title="18-5-12"></a>18-5-12</h1><p>继续写《朝花夕拾》系列。。</p><p>中午起床给静昕推荐了一波matebook x pro</p><p>coding没容量了竟然，信号可以绑定腾讯云扩容</p><h1 id="18-5-11"><a href="#18-5-11" class="headerlink" title="18-5-11"></a>18-5-11</h1><p>咨询了一些学长学姐，</p><p>剪了头，</p><p>将以前的大作业全部搬到博客上，</p><p>发现数据结构一半的已经丢了，GG，狗带。。</p><h1 id="18-5-10"><a href="#18-5-10" class="headerlink" title="18-5-10"></a>18-5-10</h1><p>下午参加了创意组的答辩，不过没有获奖，</p><p>之后参加了支部的座谈会，做题目为《关于近期国际形势时事政治》的报告，</p><p>哈哈，效果不错。</p><p>李老师结婚了！！记在小本本上。</p><h1 id="18-5-9"><a href="#18-5-9" class="headerlink" title="18-5-9"></a>18-5-9</h1><p>啊……上了一天课，</p><p>加上宣讲团和学习部会议，回到宿舍的时候已经10点。</p><p>去观察了一下LeetCode中国，感觉很有意思。</p><h1 id="18-5-8"><a href="#18-5-8" class="headerlink" title="18-5-8"></a>18-5-8</h1><p>上午编译原理小测，啊，概念题GG，</p><p>最后一题本来是考空串动作的NFA，结果因为徐老师面露惊奇，先把文法变为空串不动作的做了。。GG</p><p>领了创青春的奖状，把审稿费交上去了</p><p>写了软件工程第四次作业。</p><p>考虑到用水把键盘擦坏了。。买了键盘清洁胶，试试看</p><p>博客标签化了一波，补上两篇嵌入式的，朝花夕拾</p><p>报名数学竞赛校赛，划一波水哈哈</p><h1 id="18-5-7"><a href="#18-5-7" class="headerlink" title="18-5-7"></a>18-5-7</h1><p>啊……软件接口完全没有头绪啊。。</p><p>收到了《控制理论与应用》的邮件，收审稿费了。。</p><p>处理了一堆琐事，</p><p>晚上和高友鑫扯了一会哈哈。</p><p>之后看了袁岚峰老师的《科技袁人》，裨补缺漏。</p><h1 id="18-5-6"><a href="#18-5-6" class="headerlink" title="18-5-6"></a>18-5-6</h1><p>早上睡过了。。</p><p>和浩男、浩珉讨论创意组的答辩</p><p>中午和1706的同学们聚餐</p><p>回来完成了提案，作为葛祎阳、白双朋、王鑫的附议人</p><p>完成了操作系统第4次上机作业，写了实验报告</p><p>把键盘寄出去了，</p><p>又把操作系统的书面作业写了</p><h1 id="18-5-5"><a href="#18-5-5" class="headerlink" title="18-5-5"></a>18-5-5</h1><p>写了LL(1)分析法的实验报告，画流程图画到吐血。。</p><p>准备写学代会的提案，题目为《关于推动手机近场通讯技术模拟门禁卡的提案》。</p><p>晚上和吴文睿、温浩珉健身。</p><p>复习了Java，写了生产者消费者。</p><p>谈好了旧键盘，明天寄出去。</p><h1 id="18-5-4"><a href="#18-5-4" class="headerlink" title="18-5-4"></a>18-5-4</h1><p>啊……早睡，上课困得要死。。</p><p>完成了LL(1)分析法，哈哈</p><p>开组织生活会。。还有学代会二次会议，</p><p>回来把体系结构作业交上去了</p><h1 id="18-5-3"><a href="#18-5-3" class="headerlink" title="18-5-3"></a>18-5-3</h1><p>补好了操作系统和软工的作业，</p><p>完成了递归下降分析算法，</p><p>和四位积极分子谈话，</p><p>和老妈聊了一会，</p><p>一天过去了，</p><p>明天继续补作业。。</p><h1 id="18-5-2"><a href="#18-5-2" class="headerlink" title="18-5-2"></a>18-5-2</h1><p>啊……四节课加上形教课。。好久没有一天上这么多课了，</p><p>在浩珉和浩男的帮助下交了创意组的策划书，</p><p>回来把自动生成first集和follow集搞定了！开心！</p><p>补操作系统和软件工程作业。。</p><h1 id="18-5-1"><a href="#18-5-1" class="headerlink" title="18-5-1"></a>18-5-1</h1><p>啊……又是新的一个月啦！</p><p>颓废了一上午，把小新更新到windows10四月更新了，</p><p>该干活了！</p><p>补了党员手册的首页，后面几乎没法填啊，GG。</p><p>写了操作系统第四次上机部分，</p><p>很没有成果的一天了。</p><p>末了把党员手册补好了。</p><p>今日早睡！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;18-5-12&quot;&gt;&lt;a href=&quot;#18-5-12&quot; class=&quot;headerlink&quot; title=&quot;18-5-12&quot;&gt;&lt;/a&gt;18-5-12&lt;/h1&gt;&lt;p&gt;继续写《朝花夕拾》系列。。&lt;/p&gt;
&lt;p&gt;中午起床给静昕推荐了一波matebook x pro&lt;/p
      
    
    </summary>
    
      <category term="日记" scheme="http://wang22ti.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》实验3-进程同步-子泰编写的实验指导书</title>
    <link href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/"/>
    <id>http://wang22ti.com/2018/04/27/《操作系统》实验3-进程同步-子泰编写的实验指导书/</id>
    <published>2018-04-27T09:12:09.000Z</published>
    <updated>2018-05-08T14:35:09.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>既然要进行进程同步，首先要有多个进程，所以要学会在Linux环境下使用<code>fork</code>等函数创建进程，具体参见文献[1]或实验《进程控制》，在此不做赘述。下面着重介绍Linux环境下实现进程同步、进程通信、线程同步的C语言函数及其使用方法。</p><h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><p>Linux信号量操作的相关函数都声明在头文件<code>&lt;sys/sem.h&gt;</code> 中，包括<code>semget</code>、<code>semop</code>、<code>semctl</code>，以下将分别对其进行介绍。</p><h2 id="semget——得到一个信号量“集”"><a href="#semget——得到一个信号量“集”" class="headerlink" title="semget——得到一个信号量“集”"></a>semget——得到一个信号量“集”</h2><p>调用该函数后，会得到一个信号量集，注意，这意味着可以通过一次调用获得多个信号量，具体怎么使用呢？接下来会介绍。我们先看一下该函数的原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> num_sems, <span class="keyword">int</span> sem_flags)</span></span>;</span><br></pre></td></tr></table></figure><p>其中最容易理解的是<code>num_sems</code>，它表示创建的信号量的集合中含有的信号量的个数，当然可以是1个或多个。那其他的参数呢？</p><p><code>key_t key</code>告诉操作系统：“我需要的信号量集键值（可以理解为编号）为key！”收到这个指令后，系统就会给出一个信号量标识符（也可以理解为编号，比如10086）作为semget的返回值（失败返回-1），之后我们使用信号量标识符（10086）而非key实现对信号量的间接操作（操作系统是不会允许我们直接加减信号量的）。</p><p>key和信号量标识符是一一对应的，且标识符的值是由系统根据key计算得到的，所以实际调用的时候，我们只需要考虑对于key限制。如果只使用一个信号量集合，key可以是任意的非零整数（比如1000）。当使用多个集合的时候，由于这种一一对应的关系，为了区别不同的信号量集合，key的值必须是各不相同的。如何做到各不相同呢？一种方法是手动指定不同的值，另一方法是使用函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">key_t</span> ftok( <span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> proj_id);</span><br></pre></td></tr></table></figure><p>将系统中各不相同的文件路径转化为一一对应的整数，具体参见文献[2]，由于本实验中手动指定的方法足以满足要求，所以在此不做赘述。</p><p><code>sem_flags</code>是对得到的信号量集进行权限的配置，典型值为<code>IPC_CREAT | 0666</code>，就是常量IPC_CREAT和八进制数666进行或操作。八进制数的三位依次表示对这个信号量集的操作权限。其中第一个数表示创建者的操作权限，第二个数表示同组人的操作权限，第三个数表示其他人的操作权限。操作权限用4表示读，2表示写，6表示可读也可写，0表示不能读也不能写，具体参见文献[3]。还可以是<code>IPC_CREAT| IPC_EXCL</code>，表示创建一个新的、唯一的信号量，如果信号量已存在，返回-1表示错误。</p><h2 id="semop——改变信号量的值"><a href="#semop——改变信号量的值" class="headerlink" title="semop——改变信号量的值"></a>semop——改变信号量的值</h2><p>通过semget创建了信号量集合之后，我们总需要通过<code>semop</code>改变信号量的值，其原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> sem_id, struct sembuf *sem_opa, <span class="keyword">size_t</span> num_sem_ops)</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>sem_id</code>就是通过semget得到的信号量标识符，返回值表示操作是否成功。<code>sem_opa</code>是对该集合中信号量操作的数组（operation array），根据C语言的编程技巧，一般传入数组的同时要传入数组的长度，<code>num_sem_ops</code>就是sem_opa中操作的数量。</p><p>为了让操作系统明白操作的具体内容，sem_opa中的每一个元素都是一个名为<code>sembuf</code>的结构体，其结构定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span>&#123;</span>  </span><br><span class="line">        <span class="keyword">short</span> sem_num; </span><br><span class="line">        <span class="keyword">short</span> sem_op;</span><br><span class="line">        <span class="keyword">short</span> sem_flg; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中<code>sem_num</code>表示操作的那一个信号量在信号量集当中的编号，当然是从0开始啦；<code>sem_op</code>表示对信号量进行+=sem_op的操作；<code>sem_flg</code>是对这一操作的进一步解释，典型值<code>SEM_UNDO</code>表示该进程结束的时候撤销这次操作，让信号量回到该进程执行之前的状态，当然也可以设置为0表示正常的操作，进一步解释可以参见文献[4]。需要注意的是，<strong>对sem_flg不同的设置可能会导致死锁、实验现象不可重复等现象，这需要在实验中进一步探索。</strong></p><p>​        当然，为了方便的修改信号量的值，我们可以进一步对semop函数进行封装，比如对指定信号量的<code>wait</code>原语：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = sem_num;</span><br><span class="line">sem_buff.sem_op = <span class="number">-1</span>;</span><br><span class="line">sem_buff.sem_flg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - wait"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        类似的，也可以写出对指定信号量的signal操作、或是对某一信号量集内所有信号量的signal、wait操作，具体问题具体分析啦！</p><h2 id="semctl——对信号量的复杂控制"><a href="#semctl——对信号量的复杂控制" class="headerlink" title="semctl——对信号量的复杂控制"></a>semctl——对信号量的复杂控制</h2><p>semop函数似乎已经可以解决很多问题了，但是还远远不够。如果希望对信号量进行赋值而非相对地加减，如果希望得到信号量的值，如果希望得到等待进程的数目……还需要<code>semctl</code>函数，它的原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num, <span class="keyword">int</span> cmd, <span class="keyword">union</span> semun)</span></span>;</span><br></pre></td></tr></table></figure><p>已经容易知道，<code>sem_id</code>是通过semget得到的信号量标识符，<code>sem_num</code>表示控制的那一个信号量在信号量集当中的编号。<code>cmd</code>就是控制的动作，本实验中可能用到的有：</p><p><code>IPC_RMID</code>    将信号量集从内存中删除。<br><code>GETALL</code>        用于读取信号量集中所有信号量的值。<br><code>GETVAL</code>        返回信号量集中某一个信号量的值。<br><code>SETALL</code>        设置信号量集中的所有信号量的值<br><code>SETVAL</code>        设置信号量集中的某一个信号量的值。</p><p>你可能困惑，如果cmd为SETVAL或者SETALL，如果将设置的值传入呢？答案就在可选的参数<code>semun</code>，其结构为如下（值得注意的是，<strong>sem.h中把该联合体的声明注释掉了，需要自己在程序中定义union semun</strong>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> semun &#123;</span><br><span class="line">   <span class="keyword">int</span>   val;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span>   <span class="title">semid_ds</span>  *<span class="title">buf</span>;</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">short</span>   *arrary;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果cmd是SETVAL，你想设置的值为10，那么令semun.val=10传入semctl。同理，当cmd为SETALL时，封装函数如下，实现同时对某一信号量集中所有信号量的赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_values_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.arry = arry;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="keyword">sizeof</span>(arry) - <span class="number">1</span>, SETALL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - set values of semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此，我们就可以对信号量集进行复杂的控制，进一步参见文献[5]相关内容。</p><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><p>​        由于进程之间的内存是隔离的，因此即便在编程的时候设置一个全局变量，即便在不同进程里打印这个变量的地址也是相同的，不同进程的内的变量也是完全独立的——这告诉我们fork()函数创建的子进程和父进程之间除了id不同外，是完全一样的，甚至变量的地址也是，虽然它们之间已经完全没关系了。</p><p>但有时候进程的通信是必须的——比如生产者消费者模型，所以引入共享内存的方式进行进程通信，即允许两个不同的进程访问同一个逻辑内存。Linux共享内存的实现通过的是声明于<code>sys/shm.h</code>（shared memory）中<code>shmget</code>、<code>shmat</code>、<code>shmdt</code>、<code>shmctl</code>四个函数实现。是不是看起来很眼熟？因为这几个函数的操作逻辑和进程同步的几个函数是很相似的。由于进程通信不是本次实验的重点，因此给出如下的代码模板，详细参见文献[6]相关内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> share_memory_id;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// TO-DO</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span> *<span class="title">shared</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建共享内存</span></span><br><span class="line">share_memory_id = shmget(<span class="number">12345</span>, <span class="keyword">sizeof</span>(struct share_data), <span class="number">0666</span>|IPC_CREAT);</span><br><span class="line"><span class="comment">// 将这段共享内存映射到需要共享的变量上</span></span><br><span class="line">shared = (struct share_data *) shmat(share_memory_id, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TO-DO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程互斥"><a href="#线程互斥" class="headerlink" title="线程互斥"></a>线程互斥</h1><p>Linux中的多线程实现的函数，都声明在头文件<code>pthread.h</code>中，包括<code>pthread_create</code>、<code>pthread_join</code>、<code>pthread_exit</code>、<code>pthread_cancel</code>、<code>pthread_self</code>这一类控制进程状态的函数和<code>pthread_mutex_init</code>、<code>pthread_mutex_destroy</code>、<code>pthread_mutex_lock</code>、<code>pthread_mutex_unlock</code>、<code>pthread_mutex_trylock</code>这一类进程互斥锁相关的函数。由于本部分属于预习内容，以下将按照最基本的要求对上述函数进行介绍。</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>​        要使用多线程，首先需要创建多个线程，于是使用函数pthread_create，其原型为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_create(pthread_t*thread, pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);</span><br></pre></td></tr></table></figure><p>和进程类似的地方是，执行该函数后程序就会产生分支，一方面继续执行调用pthread_create的函数，另一方面开始执行<code>start_routine</code>指定的函数。start_routine究竟是什么？一眼看上去可能不明所以，其实就是你写的一个函数的函数名，比如transfer；如果该函数(transfer)需要参数呢？就通过参数arg构造结构体传入即可。</p><p>​        和进程创建不同的是，pthread_create的返回值表示是否创建成功，而thread实际上是一个int型的指针，指向存储执行函数start_routine进程的id。示例代码如下所示，需要注意的是，因为pthread库不是Linux系统默认的库，连接时需要使用库<code>libpthread.a</code>，所以编译时要加<code>-lpthread</code>参数，比如<code>gcc createThread.c -lpthread -o createThread</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TO-DO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1, thid2;</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <code>thread_join</code>是什么意思呢？其原型为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(pthread_tthread, <span class="keyword">void</span> **retval)</span></span>;</span><br></pre></td></tr></table></figure><p>在很多情况下，子线程里要进行大量的耗时的运算，主线程往往在子线程之前结束。但是，如果主线程需要用到子线程的处理结果，就要用到pthread_join方法了。可以理解为告诉主线程：“执行到这里的时候，停下来等id为thid的线程！”其中thread为等待线程的id，retval用来存储被等待进程的返回值。</p><p>​        本实验中，还有可能用到的函数为<code>pthread_self</code>，其原型为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_tpthread_self(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><p>很容易理解啦，和<code>getpid</code>很类似，可以得到当前线程的id。另外的两个线程状态管理函数pthread_exit和pthread_cancel，以及pthread_create中参数attr的设置，由于在本实验不是必须的，在此不做赘述，进一步可以参考文献[7]和[8]。</p><h2 id="互斥锁——线程的互斥"><a href="#互斥锁——线程的互斥" class="headerlink" title="互斥锁——线程的互斥"></a>互斥锁——线程的互斥</h2><p>​        和进程通过信号量完成互斥不同，线程的互斥的实现依靠互斥锁。首先，和线程的创建类似，要使用函数<code>pthread_mutex_init(pthread_mutex_t * mutex,const pthread_mutexattr_t*attr)</code>初始化互斥锁，之后在线程函数中使用<code>int pthread_mutex_lock(pthread_mutex_t *mutex)</code>和<code>int pthread_mutex_unlock(pthread_mutex_t*mutex)</code>两个函数进行加锁和解锁（即开始和结束线程对于临界资源的占用），最后使用函数<code>pthread_mutex_destroy(pthread_mutex_t *mutex)</code>销毁一个互斥锁。一个典型的程序示例如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    <span class="comment">// TO-DO</span></span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1, thid2;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        互斥锁还有哪些操作呢？线程之间如何同步呢？（这个问题在下次实验中会详细讨论），可以进一步参见文献[9]</p><h2 id="Peterson算法——实现线程互斥的另一种方法"><a href="#Peterson算法——实现线程互斥的另一种方法" class="headerlink" title="Peterson算法——实现线程互斥的另一种方法"></a>Peterson算法——实现线程互斥的另一种方法</h2><p>​        在线程的前提下，由于不存在进程中的内存隔离，因此还可以设置某些精巧的算法实现进程的互斥，Peterson算法就是其中的一个代表。该算法使用两个控制变量数组flag与标量turn，其中flag[n]的值为1表示ID号为n的线程希望使用临界区资源，turn的值为有权访问共享资源的进程的ID号。当线程不能访问临界区资源时，会陷入死循环中作为等待。其伪代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">turn;</span><br><span class="line"></span><br><span class="line">P0: flag[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    turn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">1</span>] == <span class="literal">true</span> &amp;&amp; turn == <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 访问临界区资源</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">P1: flag[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    turn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">0</span>] == <span class="literal">true</span> &amp;&amp; turn == <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 访问临界区资源</span></span><br><span class="line">    flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>该算法的实现需要在实验中完成，更详细的解释可以参见文献[10]。</p><p>​        </p><h1 id="实验题目"><a href="#实验题目" class="headerlink" title="实验题目"></a>实验题目</h1><p>好了，有了以上的知识储备，完成以下的实验应该没有问题。</p><h2 id="进程的同步与互斥"><a href="#进程的同步与互斥" class="headerlink" title="进程的同步与互斥"></a>进程的同步与互斥</h2><p>创建4个进程P1-P4。要求进程P1在P2，P3之前，P4在其他进程之后执行。P2、P3两个进程互斥。用信号量机制实现同步与互斥，并用实验验证。</p><h2 id="进程的生产者消费者模型"><a href="#进程的生产者消费者模型" class="headerlink" title="进程的生产者消费者模型"></a>进程的生产者消费者模型</h2><p>生产者消费者同步。生产者进程将生产的数据写入文件中。消费者读取文件中的数据。注意，传送的每个数据都是一个字符，文件中最多可写入10个字符。编程实现并用实验验证结果。</p><h2 id="线程的互斥"><a href="#线程的互斥" class="headerlink" title="线程的互斥"></a>线程的互斥</h2><p>假设有两个银行账户，初始金额值分别为</p><p>int nAccount1 = 0,nAccount2 = 0; </p><p>下面是在这两个银行账户间转账一个随机金额的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">transfer() &#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="built_in">printf</span>(“账户金额之和 = %d”, nAccount1 + nAccount2)；</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试创建两个转账线程使其并发执行。（1）观察无同步控制时，两个线程并发执行的可能次序；观察账户金额的错误现象（正确的结果应该是两个账户金额之和始终为0）。分析在何种执行次序时会导致错误（2）分别利用互斥锁、Peterson方法实现两个线程互斥，并比较两者时间效率的差异。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 《linux c 创建进程》<a href="https://blog.csdn.net/u011641885/article/details/47061985" target="_blank" rel="noopener">https://blog.csdn.net/u011641885/article/details/47061985</a></p><p>[2] 《ftok()函数深度解析》<a href="https://blog.csdn.net/u013485792/article/details/50764224" target="_blank" rel="noopener">https://blog.csdn.net/u013485792/article/details/50764224</a></p><p>[3] 《IPC_CREAT | 0660 的意义是什么？》 <a href="http://www.169it.com/tech-qa-linux/article-14093527959559782876.html" target="_blank" rel="noopener">http://www.169it.com/tech-qa-linux/article-14093527959559782876.html</a></p><p>[4] 《struct sembuf的部分讲解》 <a href="https://blog.csdn.net/wanzyao/article/details/55271103" target="_blank" rel="noopener">https://blog.csdn.net/wanzyao/article/details/55271103</a></p><p>[5] 《Linux系统调用–semctl函数详解》 <a href="https://blog.csdn.net/dongzhongshu/article/details/2056516" target="_blank" rel="noopener">https://blog.csdn.net/dongzhongshu/article/details/2056516</a></p><p>[6] 《Linux进程间通信（六）：共享内存shmget()、shmat()、shmdt()、shmctl()》 <a href="https://www.cnblogs.com/52php/p/5861372.html" target="_blank" rel="noopener">https://www.cnblogs.com/52php/p/5861372.html</a></p><p>[7] 《pthread_create()之前的属性设置》 <a href="https://blog.csdn.net/valjackson123/article/details/47395053" target="_blank" rel="noopener">https://blog.csdn.net/valjackson123/article/details/47395053</a></p><p>[8] 《2线程原语：pthread_create()，pthread_self()，pthread_exit(), pthread_join(), pthread_cancel(),pthread_detach()》<a href="https://blog.csdn.net/tototuzuoquan/article/details/39553427" target="_blank" rel="noopener">https://blog.csdn.net/tototuzuoquan/article/details/39553427</a></p><p>[9] 《【Linux C 多线程编程】互斥锁与条件变量》<a href="https://blog.csdn.net/xing_hao/article/details/6626223" target="_blank" rel="noopener">https://blog.csdn.net/xing_hao/article/details/6626223</a></p><p>[10] 《Peterson算法感悟》 <a href="https://blog.csdn.net/yake827/article/details/37878017" target="_blank" rel="noopener">https://blog.csdn.net/yake827/article/details/37878017</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;既然要进行进程同步，首先要有多个进程，所以要学会在Linux环境下使用&lt;code&gt;fork&lt;/code&gt;等函数创建进程，具体参见文献[1]或
      
    
    </summary>
    
      <category term="操作系统" scheme="http://wang22ti.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>《编译原理》实验2-语法分析器（递归下降分析法）的python实现</title>
    <link href="http://wang22ti.com/2018/04/27/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C2-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%EF%BC%88%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wang22ti.com/2018/04/27/《编译原理》实验2-语法分析器（递归下降分析法）的python实现/</id>
    <published>2018-04-27T09:00:24.000Z</published>
    <updated>2018-05-08T14:35:26.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>在本次实验中，我用python3.5实现了一个LL(1)文法的递归下降语法分析类，具有以下功能：</p><p>一、根据文法的起始符号、非终结符号、产生式自动生成文法终结符号的First集、Follow集和分析表。</p><p>二、根据文法的分析表判断输入串是否满足该文法。</p><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p><img src="/2018/04/27/《编译原理》实验2-语法分析器（递归下降分析法）的python实现/Snipaste_2018-05-07_09-57-01.png" alt=""><br><img src="/2018/04/27/《编译原理》实验2-语法分析器（递归下降分析法）的python实现/Snipaste_2018-05-07_09-57-48.png" alt=""></p><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p><img src="/2018/04/27/《编译原理》实验2-语法分析器（递归下降分析法）的python实现/1.png" alt=""></p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># E'用B代替，T'用U来代替</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecAnalyzer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, over, production)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.over = over</span><br><span class="line">        self.production = production</span><br><span class="line">        self.nontermainals = production.keys()</span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first的递归函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_rec</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        ret_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> production[nontermainal]:</span><br><span class="line">            <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                <span class="keyword">return</span> self.first[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                    first_ = self.get_first_rec(sign)</span><br><span class="line">                    ret_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret_dict</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first集和follow集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.over:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮（递归）</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> nontermainal <span class="keyword">not</span> <span class="keyword">in</span> self.first_first:</span><br><span class="line">                self.first[nontermainal] = self.get_first_rec(nontermainal)</span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[start].add(<span class="string">'#'</span>)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = self.follow.copy()</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> over:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] = self.follow[nontermainal]</span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> over:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_set = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_set_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_set_without_null</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_set:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 将follow集加入first集</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal]:</span><br><span class="line">                self.first[nontermainal][<span class="string">''</span>] = self.follow[nontermainal]</span><br><span class="line">        <span class="comment"># print(self.first)</span></span><br><span class="line">        <span class="comment"># print(self.follow)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断string中的下一个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">advance</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        self.current = self.string[self.index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归下降分析</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_rec</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        <span class="comment"># print(self.current, nontermainal)</span></span><br><span class="line">        <span class="comment"># 如果current在现在的非终结符号的first集中</span></span><br><span class="line">        <span class="keyword">if</span> self.current <span class="keyword">in</span> self.first[nontermainal].keys():</span><br><span class="line">            <span class="comment"># 逐个讨论产生式右部</span></span><br><span class="line">            <span class="keyword">for</span> new_nontermainal <span class="keyword">in</span> self.first[nontermainal][self.current]:</span><br><span class="line">                <span class="comment"># 如果是终结符号，调用advance</span></span><br><span class="line">                <span class="keyword">if</span> new_nontermainal <span class="keyword">in</span> self.over:</span><br><span class="line">                    self.advance()</span><br><span class="line">                <span class="comment"># 如果是非终结符号，递归调用</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="keyword">not</span> self.analyse_rec(new_nontermainal):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 对于可以调用follow集的非终结符号，递归调用本身</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal].keys():</span><br><span class="line">                <span class="keyword">return</span> self.analyse_rec(nontermainal)</span><br><span class="line">            <span class="comment"># 对于不可以调用follow的非终结符号，返回True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># 如果current不在现在的非终结符号的first集中</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal].keys():</span><br><span class="line">            <span class="comment"># 返回是否在follow集的判断</span></span><br><span class="line">            <span class="keyword">return</span> self.current <span class="keyword">in</span> self.first[nontermainal][<span class="string">''</span>]</span><br><span class="line">        <span class="comment"># 如果current不在符号集合内，返回False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析程序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.string = string + <span class="string">'#'</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.current = self.string[self.index]</span><br><span class="line">        <span class="keyword">if</span> self.analyse_rec(self.start):</span><br><span class="line">            print(<span class="string">'OK  '</span>, string)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Fail'</span>, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = <span class="string">'E'</span></span><br><span class="line">over = [<span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>, <span class="string">'i'</span>]</span><br><span class="line">production = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'TB'</span>, ],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'ATB'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'FU'</span>, ],</span><br><span class="line">    <span class="string">'U'</span>: [<span class="string">'MFU'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'+'</span>, <span class="string">'-'</span>],</span><br><span class="line">    <span class="string">'M'</span>: [<span class="string">'*'</span>, <span class="string">'/'</span>],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [</span><br><span class="line">    <span class="string">''</span>, <span class="string">'i+@'</span>, <span class="string">'i'</span>, <span class="string">'i+'</span>,</span><br><span class="line">    <span class="string">'+*i'</span>,</span><br><span class="line">    <span class="string">'i+i*i'</span>,</span><br><span class="line">    <span class="string">'i+i*ii'</span>,</span><br><span class="line">    <span class="string">'i+i*i+'</span>,</span><br><span class="line">    <span class="string">'i+i*i/i-i'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">rec_analyzer = RecAnalyzer(start=start, over=over, production=production)</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    rec_analyzer.analyse(string=string)</span><br></pre></td></tr></table></figure><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：对递归下降算法中通用的递归程序的设计，以及first集follow集分析表的存储结构的设计，通过写一个特例后观察抽象得到；对first集follow集的理解不够透彻导致实现get_first_follow(self)的时候比较吃力。</p><p>​        本程序的优点包括：比较完整地实现了递归下降分析算法，递归函数的实现具有较高的抽象度；分析器只需要输入起始符号、产生式、终结符号就可以初始化，自动生成First集、Follow集和分析表。</p><p>​        由于时间有限，本程序还存在可以优化的地方，主要包括：将输入字符串改为由词法分析器生成的二元式从文件中读取，为完整编译器的实现打下良好的基础；</p><p>​        本实验中，通过实现递归下降算法与First集Follow集生成算法，加深了我对两个算法的理解，提高了我对问题分析、抽象的能力，为实现完整编译器打下了良好的基础。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序功能描述&quot;&gt;&lt;a href=&quot;#程序功能描述&quot; class=&quot;headerlink&quot; title=&quot;程序功能描述&quot;&gt;&lt;/a&gt;程序功能描述&lt;/h1&gt;&lt;p&gt;在本次实验中，我用python3.5实现了一个LL(1)文法的递归下降语法分析类，具有以下功能：&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="编译原理" scheme="http://wang22ti.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>北京交通大学第十二届大学生程序设计竞赛——弱渣的a的4道题</title>
    <link href="http://wang22ti.com/2018/04/25/%E5%8C%97%E4%BA%AC%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E2%80%94%E2%80%94%E5%BC%B1%E6%B8%A3%E7%9A%84a%E7%9A%844%E9%81%93%E9%A2%98/"/>
    <id>http://wang22ti.com/2018/04/25/北京交通大学第十二届大学生程序设计竞赛——弱渣的a的4道题/</id>
    <published>2018-04-25T09:20:39.000Z</published>
    <updated>2018-05-08T14:38:02.650Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：</p><p><a href="https://citel.bjtu.edu.cn/acm/contest/1016/problem#" target="_blank" rel="noopener">北京交通大学 第十二届大学生程序设计竞赛</a></p><p>以下是弱渣的代码</p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> t, m;</span><br><span class="line">    <span class="keyword">int</span> timu;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; timu;</span><br><span class="line">        v.push_back(timu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; timu;</span><br><span class="line">        v.push_back(timu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = unique(v.begin(), v.end());</span><br><span class="line">    v.erase(it, v.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B（time-limit-exceeded）"><a href="#B（time-limit-exceeded）" class="headerlink" title="B（time limit exceeded）"></a>B（time limit exceeded）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">3</span> ;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = ((n - i) / <span class="number">2</span>) - i + <span class="number">1</span>;</span><br><span class="line">        ret += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">        ll bianshu;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; bianshu;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(bianshu) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">© <span class="number">2018</span> Beijing Jiaotong Uni</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;ll&gt; &gt; vs(t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; t; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;num; j++) &#123;</span><br><span class="line">            ll n;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">            v.push_back(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = v.size();</span><br><span class="line">        <span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k&lt;vs.size() &amp;&amp; tag; k++) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;ll&gt; v2 = vs[k];</span><br><span class="line">            <span class="keyword">int</span> len2 = v2.size();</span><br><span class="line">            <span class="keyword">if</span> (len != len2) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> tag2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> mm = <span class="number">0</span>; mm &lt; len; mm++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v[mm] != v2[mm]) &#123;</span><br><span class="line">                    tag2 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tag2) &#123;</span><br><span class="line">                tag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vs.push_back(v);</span><br><span class="line">        <span class="keyword">if</span>(tag) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"new"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"deja vu"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; t; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Y"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"N"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Y"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> Source code of #<span class="number">17291</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m * <span class="number">2</span> - i - j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    m -= <span class="number">1</span>;</span><br><span class="line">    n -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>* a = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        a[i] = num - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> out = a[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//cout &lt;&lt;a[0] &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> zengjia = min(left(a[i], a[i+<span class="number">1</span>]), right(a[i], a[i+<span class="number">1</span>], m));</span><br><span class="line">        out += zengjia;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cout &lt;&lt; zengjia &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; a[n - 1] &lt;&lt; endl;</span></span><br><span class="line">    out += a[n - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J（time-limit-exceeded）"><a href="#J（time-limit-exceeded）" class="headerlink" title="J（time limit exceeded）"></a>J（time limit exceeded）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ll x;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">    ll total_num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ll j = <span class="number">2</span>; j&lt;=x; j++) &#123;</span><br><span class="line">        ll num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= j /<span class="number">2</span>; i++) &#123;</span><br><span class="line">            ll shang = j / i;</span><br><span class="line">            <span class="keyword">if</span> (shang * i == j) &#123;</span><br><span class="line">                num += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">        total_num += num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; total_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>说到底是，数学能力是最重要的，</p><p>B题因为数学能力的退化，不知道取模分类讨论。</p><p>J题可能用特殊的处理技巧，比赛中用快速素数筛，不过还是超时了。。</p><p>还有很多需要学习啊！</p><p>钻研越深入，越觉得所学不足。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://citel.bjtu.edu.cn/acm/contest/1016/problem#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;北京交通大学 第十二届大学生程序设计竞赛&lt;/a&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="算法设计" scheme="http://wang22ti.com/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>北京交通大学第十一届大学生程序设计竞赛（重现赛）</title>
    <link href="http://wang22ti.com/2018/04/20/%E5%8C%97%E4%BA%AC%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%EF%BC%88%E9%87%8D%E7%8E%B0%E8%B5%9B%EF%BC%89/"/>
    <id>http://wang22ti.com/2018/04/20/北京交通大学第十一届大学生程序设计竞赛（重现赛）/</id>
    <published>2018-04-20T02:24:26.000Z</published>
    <updated>2018-05-08T14:37:54.464Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：</p><p><a href="https://citel.bjtu.edu.cn/acm/contest/1015/problem#" target="_blank" rel="noopener">北京交通大学 第十一届大学生程序设计竞赛（重现赛）</a></p><p>以下是弱渣的代码</p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> m, n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dict;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">0</span>; q &lt; n; ++q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; location = &#123;j, q&#125;;</span><br><span class="line">dict.insert(pair&lt;<span class="keyword">char</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(ch, location));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> min_dis = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">char</span> min_ch;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">'a'</span> + j;</span><br><span class="line"><span class="keyword">char</span> CH = <span class="string">'A'</span> + j;</span><br><span class="line"><span class="keyword">int</span> dis = <span class="built_in">abs</span>(dict[ch][<span class="number">0</span>] - dict[CH][<span class="number">0</span>]) + <span class="built_in">abs</span>(dict[ch][<span class="number">1</span>] - dict[CH][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (dis &lt; min_dis)</span><br><span class="line">&#123;</span><br><span class="line">min_dis = dis;</span><br><span class="line">min_ch = ch;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; min_ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt; v;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; value;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; old_value;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> num;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span> (v.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(num);</span><br><span class="line">value.push_back(<span class="number">0</span>);</span><br><span class="line">old_value.push_back(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; new_value(old_value);</span><br><span class="line"><span class="keyword">if</span> (v[v.size() - <span class="number">1</span>] == num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mm = <span class="number">0</span>; mm &lt; new_value.size(); mm++) &#123;</span><br><span class="line">new_value[mm] ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">new_value.push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">value.insert(value.end(), new_value.begin(), new_value.end());</span><br><span class="line">v.push_back(num);</span><br><span class="line">old_value = new_value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy (v.begin(), v.end(), ostream_iterator&lt;long&gt; (cout, " "));</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//copy (value.begin(), value.end(), ostream_iterator&lt;int&gt; (cout, " "));</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(value.begin(), value.end());</span><br><span class="line"><span class="comment">//copy (value.begin(), value.end(), ostream_iterator&lt;long&gt; (cout, " "));</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; value[k - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> w, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">if</span> (m == w &amp;&amp; tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"unhappy"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"happy"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v, <span class="keyword">int</span> num, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (v[left] &lt;= num &amp;&amp; v[right] &gt;= num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (right - left == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num == v[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num == v[left])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (num &gt;= v[center])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> find(v, num, center, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> find(v, num, left, center);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">v[j].push_back(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; q; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num_query;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num_query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> hang = <span class="number">0</span>; hang &lt; n; ++hang)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> lie = find(v[hang], num_query,<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (lie == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hang + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; lie + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a, k; </span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">int</span> num = <span class="built_in">pow</span>(a, k);</span><br><span class="line"><span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">num /= <span class="number">10</span>;</span><br><span class="line">bit++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bit &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G（time-limit-exceeded）"><a href="#G（time-limit-exceeded）" class="headerlink" title="G（time limit exceeded）"></a>G（time limit exceeded）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; t; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; day;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last_minus = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(day &gt; last_minus) &#123;</span><br><span class="line">day -= last_minus;</span><br><span class="line"><span class="keyword">if</span> (!(i++ % <span class="number">2</span>)) &#123;</span><br><span class="line">last_minus = <span class="number">9</span> * (last_minus + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; day &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i ==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">day = day * <span class="number">10</span> + day;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; day &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> left = <span class="built_in">pow</span>(<span class="number">10</span>, i / <span class="number">2</span>) + day - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> out = left;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">left /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">out = out * <span class="number">10</span> + left %<span class="number">10</span>;</span><br><span class="line">left /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H（time-limit-exceeded）"><a href="#H（time-limit-exceeded）" class="headerlink" title="H（time limit exceeded）"></a>H（time limit exceeded）</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v2, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v3)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret_n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (find(v2.begin(), v2.end(), v1[i]) != v2.end() &amp;&amp; find(v3.begin(), v3.end(), v1[i]) != v3.end()) &#123;</span><br><span class="line">ret_n += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret_n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n, p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> least_student = n * <span class="number">1.0</span> * p / <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v(<span class="number">60</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> course;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; course;</span><br><span class="line">v[course].push_back(j);</span><br><span class="line"><span class="comment">//cout &lt;&lt; v[course].size() &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">60</span> &amp;&amp; tag; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; <span class="number">60</span> &amp;&amp; tag; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> q = k + <span class="number">1</span>; q &lt; <span class="number">60</span> &amp;&amp; tag; ++q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k_j_q = g(v[k], v[q], v[j]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (k_j_q &gt;= least_student) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"no"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; &amp;x, pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; &amp;y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x.second != y.second) &#123;</span><br><span class="line"><span class="keyword">return</span> x.second &gt; y.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x.first &lt; y.first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; sort_map_by_value(<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; &amp;m) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;::iterator i = m.begin(); i != m.end(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(make_pair(i-&gt;first, i-&gt;second));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(v.begin(), v.end(), cmp);</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> category;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; category;</span><br><span class="line"><span class="keyword">if</span> (dict.count(category))</span><br><span class="line">&#123;</span><br><span class="line">dict[category] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dict[category] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; v_sorted = sort_map_by_value(dict);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v_sorted.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt;::iterator it = v_sorted.begin(); it != v_sorted.end(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">' '</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://citel.bjtu.edu.cn/acm/contest/1015/problem#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;北京交通大学 第十一届大学生程序设计竞赛（重现赛）&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="算法设计" scheme="http://wang22ti.com/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>《编译原理》实验1-词法分析器的python实现</title>
    <link href="http://wang22ti.com/2018/04/20/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C1-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wang22ti.com/2018/04/20/《编译原理》实验1-词法分析器的python实现/</id>
    <published>2018-04-20T02:21:49.000Z</published>
    <updated>2018-05-08T14:35:22.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        在本次实验中，我用python3.5实现了一个词法分析类，具有以下功能：</p><ol><li>在适当扩充实验要求文法的基础上，给出输入串中标识符、保留字（’begin’, ‘end’, ‘if’, ‘then’, ‘else’, ‘for’, ‘do’, ‘while’, ‘and’,’or’, ‘not’, ‘program’, ‘int’, ‘char’, ‘double’, ‘float’, ‘long’）、整数、常见单字符（’+’, ‘-‘, ‘*’, ‘;’, ‘(‘,’)’, “‘“, ‘“‘, ‘ ‘）、双字符终结符（’&gt;’,  ‘&lt;’, ‘&gt;=’,’&lt;=’, ‘&lt;&gt;’, ‘:=’）、注释符、空格、部分转义符号（’\n’）的类别编码。</li><li>程序能够发现输入串中的错误，指出错误发生位置与基本类别，包括未知的中介符号、无法匹配注释符、文件无法打开等等。</li><li>分析结果一方面输出为二元式序列组成的中间文件，另一方面可选择输出在终端作为调试信息。</li><li>对单字符、双字符终结符的识别进行了抽象处理，分析结果只依赖参数的设置，便于词法分析器的修改和扩充。</li><li>在构造函数中为参数的设置提供的接口，包括输入文件的路径、是否大小写敏感、输出路径、调试信息等级。</li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>​        实验中实现的词法分析类名为Analyzer，具体描述信息如下：</p><p><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/0-1.png" alt=""><br><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/0-2.png" alt=""></p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyzer</span>:</span></span><br><span class="line">    token = <span class="string">''</span></span><br><span class="line">    string = <span class="string">''</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    is_end = <span class="keyword">False</span></span><br><span class="line">    ch = <span class="string">''</span></span><br><span class="line">    error_type = <span class="string">''</span></span><br><span class="line">    one_op = [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">';'</span>, <span class="string">'('</span>, <span class="string">')'</span>, <span class="string">"'"</span>, <span class="string">'"'</span>, <span class="string">' '</span>, <span class="string">'\n'</span>]</span><br><span class="line">    not_print = [<span class="string">' '</span>, <span class="string">'\n'</span>]</span><br><span class="line">    reserved = [<span class="string">'begin'</span>, <span class="string">'end'</span>, <span class="string">'if'</span>, <span class="string">'then'</span>, <span class="string">'else'</span>, <span class="string">'for'</span>, <span class="string">'do'</span>, <span class="string">'while'</span>, <span class="string">'and'</span>, <span class="string">'or'</span>, <span class="string">'not'</span>, <span class="string">'program'</span>, <span class="string">'int'</span>, <span class="string">'char'</span>, <span class="string">'double'</span>, <span class="string">'float'</span>, <span class="string">'long'</span>]</span><br><span class="line">    two_next = &#123;</span><br><span class="line">        <span class="string">'&lt;'</span>: [<span class="string">'='</span>, <span class="string">'&gt;'</span>],</span><br><span class="line">        <span class="string">'&gt;'</span>: [<span class="string">'='</span>, ],</span><br><span class="line">        <span class="string">':'</span>: [<span class="string">'='</span>, ],</span><br><span class="line">    &#125;</span><br><span class="line">    token_to_category = &#123;word: word.upper() <span class="keyword">for</span> word <span class="keyword">in</span> reserved&#125;</span><br><span class="line">    token_to_category[<span class="string">'&gt;'</span>] = <span class="string">'GT'</span></span><br><span class="line">    token_to_category[<span class="string">'&lt;'</span>] = <span class="string">'LT'</span></span><br><span class="line">    token_to_category[<span class="string">'&gt;='</span>] = <span class="string">'GE'</span></span><br><span class="line">    token_to_category[<span class="string">'&lt;='</span>] = <span class="string">'LE'</span></span><br><span class="line">    token_to_category[<span class="string">'&lt;&gt;'</span>] = <span class="string">'NE'</span></span><br><span class="line">    token_to_category[<span class="string">':='</span>] = <span class="string">'ASSIGN'</span></span><br><span class="line">    token_to_category[<span class="string">';'</span>] = <span class="string">'SEPARATOR'</span></span><br><span class="line">    token_to_category[<span class="string">'+'</span>] = <span class="string">'ADD'</span></span><br><span class="line">    token_to_category[<span class="string">'-'</span>] = <span class="string">'MINUS'</span></span><br><span class="line">    token_to_category[<span class="string">'*'</span>] = <span class="string">'MUL'</span></span><br><span class="line">    token_to_category[<span class="string">'('</span>] = <span class="string">'LB'</span></span><br><span class="line">    token_to_category[<span class="string">')'</span>] = <span class="string">'RB'</span></span><br><span class="line">    token_to_category[<span class="string">"'"</span>] = <span class="string">'QUO'</span></span><br><span class="line">    token_to_category[<span class="string">'"'</span>] = <span class="string">'DQUO'</span></span><br><span class="line">    token_to_category[<span class="string">' '</span>] = <span class="string">'BLANK'</span></span><br><span class="line">    token_to_category[<span class="string">'\n'</span>] = <span class="string">'ENTER'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, is_sensitive=False, file=<span class="string">'file.txt'</span>, out_file=<span class="string">''</span>, log_level=<span class="number">1</span>)</span>:</span></span><br><span class="line">        self.log_level = log_level</span><br><span class="line">        self.is_sensitive = is_sensitive</span><br><span class="line">        <span class="keyword">if</span> out_file == <span class="string">''</span>:</span><br><span class="line">            out_path = os.path.dirname(file)</span><br><span class="line">            out_file_name = os.path.basename(file)[:file.rindex(<span class="string">'.'</span>)]</span><br><span class="line">            self.out_file = os.path.join(out_path, out_file_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.out_f = open(self.out_file, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            exit(<span class="string">'[error] can not open file'</span>)</span><br><span class="line">        <span class="keyword">with</span> open(file, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            file = f.read()</span><br><span class="line">            self.string = file.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.is_sensitive:</span><br><span class="line">                self.string.lower()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.token <span class="keyword">in</span> self.reserved <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(self, c=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">if</span> self.token <span class="keyword">in</span> self.token_to_category.keys():</span><br><span class="line">                <span class="keyword">if</span> self.token <span class="keyword">not</span> <span class="keyword">in</span> self.not_print:</span><br><span class="line">                    self.out_f.write(self.token_to_category[self.token] + <span class="string">' '</span> + self.token + <span class="string">'\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> self.log_level:</span><br><span class="line">                        print(self.token_to_category[self.token] + <span class="string">'\t'</span> + self.token)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.out_f.write(self.token_to_category[self.token] + <span class="string">'\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> self.log_level:</span><br><span class="line">                        print(self.token_to_category[self.token])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.error_type = <span class="string">"unkown terminal character '%s'"</span> % self.token</span><br><span class="line">                self.report_error()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.out_f.write(c + <span class="string">' '</span> + self.token + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">if</span> self.log_level:</span><br><span class="line">                print(c + <span class="string">'\t'</span> + self.token)</span><br><span class="line"></span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_char</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_end:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        self.ch = self.string[self.index]</span><br><span class="line">        self.token += self.ch</span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'[get_char]index: %s, ch: %s, token: %s'</span> % (self.index, self.ch, self.token))</span><br><span class="line">        <span class="keyword">if</span> self.index == len(self.string):</span><br><span class="line">            self.is_end = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> self.ch</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retract</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.is_end = <span class="keyword">False</span></span><br><span class="line">        self.index = max(self.index - <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.ch = self.string[max(self.index - <span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line">        self.token = self.token[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> self.log_level == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'[retract]index: %s, ch: %s, token: %s'</span> % (self.index, self.ch, self.token))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alpha</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.is_end <span class="keyword">and</span> self.string[self.index].isalnum() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        self.out(<span class="string">''</span> <span class="keyword">if</span> self.lookup() <span class="keyword">else</span> <span class="string">'ID'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">digit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.is_end <span class="keyword">and</span> self.string[self.index].isdigit() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.out(<span class="string">'INTSTR'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(self)</span>:</span></span><br><span class="line">        now_ch = self.ch</span><br><span class="line">        <span class="keyword">if</span> self.get_char() <span class="keyword">in</span> self.two_next[now_ch]:</span><br><span class="line">            self.out()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.retract()</span><br><span class="line">            self.out()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">back_slant</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.get_char()</span><br><span class="line">        <span class="keyword">if</span> self.ch == <span class="string">'*'</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                end_index = self.string.index(<span class="string">'*/'</span>, self.index)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.error_type = <span class="string">"no pair with '*/'"</span></span><br><span class="line">                self.report_error()</span><br><span class="line">            self.token = self.token + self.string[self.index:end_index] + <span class="string">'*/'</span></span><br><span class="line">            self.ch = self.string[end_index + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> end_index + <span class="number">2</span> &lt; len(self.string):</span><br><span class="line">                self.index = end_index + <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.is_end = <span class="keyword">True</span></span><br><span class="line">            self.out(<span class="string">'NOTE'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error_type = <span class="string">"no '*' after '/'"</span></span><br><span class="line">            self.report_error()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report_error</span><span class="params">(self)</span>:</span></span><br><span class="line">        exit(<span class="string">'[error]index %s: %s'</span> % (self.index, self.error_type))</span><br><span class="line"></span><br><span class="line">    switch = &#123;</span><br><span class="line">        <span class="string">'alpha'</span>: alpha, <span class="string">'digit'</span>: digit,  <span class="string">'one'</span>: one,  <span class="string">'two'</span>: two,</span><br><span class="line">        <span class="string">'/'</span>: back_slant,  <span class="string">''</span>: report_error,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.get_char():</span><br><span class="line">            <span class="keyword">if</span> self.ch.isalpha():</span><br><span class="line">                case = <span class="string">'alpha'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch.isdigit():</span><br><span class="line">                case = <span class="string">'digit'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.one_op:</span><br><span class="line">                case = <span class="string">'one'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.two_next.keys():</span><br><span class="line">                case = <span class="string">'two'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch == <span class="string">'/'</span>:</span><br><span class="line">                case = <span class="string">'/'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.error_type = <span class="string">"unkown character '%s'"</span> % self.ch</span><br><span class="line">                case = <span class="string">''</span></span><br><span class="line">            self.switch[case](self)</span><br><span class="line"></span><br><span class="line">Analyzer().analyse()</span><br></pre></td></tr></table></figure><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p>​        测试结果截图分为三栏，左栏为源代码，中栏为测试文件，右栏为程序运行的调试信息，在默认等级下若测试文件完全满足文法，则将调试信息写入中间文件。</p><p>​        第一个截图构造了一个比较复杂的测试样本，包括空格、空白行、注释内部的换行空白、多个相似终结符交替运行等等。经检查，在不考虑语法的情况下，输出完全符合词法要求。</p><p><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/1.png" alt=""></p><p>​        第二个截图中测试文件中构造了一个非法的终结符号”:”，运行程序输出了错误信息“[error]index 40: unkownterminal character ‘:’”，指明在索引为40处出现了词法错误，并成功指出了错误的符号。</p><p><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/2.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：不太理解将正则文法转化为词法分析代码的方法，通过参照书本上81到82页的扫描器先模仿后理解吸收；程序抽象程度不够，通过先写两个特例，完成“特殊到一般”的抽象过程；python缺乏switch-case语句导致代码冗长难看，通过查阅网上资料利用dict&lt;str,func&gt;类型的字典代替。</p><p>​        本程序的优点包括：比较完美的完成了词法分析器的基本功能；有着较高的抽象度，方便复用、修改、扩充。</p><p>​        由于时间有限，本程序还存在可以优化的地方，主要包括：许多参数（one_op,reserved, not_print, two_next, token_to_category）的默认值可以通过文件的形式读取，从而将数据与代码完全分离，进一步提高程序的抽象度；程序默认所识别的终结符号可以进一步扩充使其完全符合Pascal的文法要求；源代码中可以增加注释，方便进一步的工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序功能描述&quot;&gt;&lt;a href=&quot;#程序功能描述&quot; class=&quot;headerlink&quot; title=&quot;程序功能描述&quot;&gt;&lt;/a&gt;程序功能描述&lt;/h1&gt;&lt;p&gt;​        在本次实验中，我用python3.5实现了一个词法分析类，具有以下功能：&lt;/p&gt;
&lt;ol&gt;
      
    
    </summary>
    
      <category term="编译原理" scheme="http://wang22ti.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》实验3-进程同步</title>
    <link href="http://wang22ti.com/2018/04/20/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://wang22ti.com/2018/04/20/《操作系统》实验3-进程同步/</id>
    <published>2018-04-20T01:10:21.000Z</published>
    <updated>2018-05-08T14:35:03.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程的同步与互斥"><a href="#进程的同步与互斥" class="headerlink" title="进程的同步与互斥"></a>进程的同步与互斥</h1><p><strong>创建4个进程P1-P4。要求进程P1在P2，P3之前，P4在其他进程之后执行。P2、P3两个进程互斥。用信号量机制实现同步与互斥，并用实验验证。</strong></p><p>实验说明书中对于semctl以及semget两个函数的讲解存在矛盾，需要详细了解这两个函数的参数含义才能完美地实现进程的同步与互斥，具体函数解释参见<a href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/">我的另一篇博客《操作系统》实验3-进程同步-子泰编写的实验指导书</a>。本程序实现的函数中，set_value_of_sem对单信号量赋值，set_values_of_sem可以同时对多个信号量赋值，signal和wait函数与教材中信号量同步函数含义一致。在主函数中，使用5个信号量控制整个进程，其中2个信号量在1执行完之后被同时设置为1从而实现P1在P2和P3之前，1个信号量被用作P2和P3的互斥，另外2个信号量分别在P2和P3执行完之后被设置为1，从而实现P4在所有进程之后。实验结果与源代码如下。可以看出原来不同步的顺序为2143，经过同步的进程为1234或1324，完全符合实验的要求。</p><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image1.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> semun</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_value_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num,  <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.val = val;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, sem_num, SETVAL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - set value of semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_values_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.arry = arry;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="keyword">sizeof</span>(arry) - <span class="number">1</span>, SETALL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - set values of semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, IPC_RMID, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - delete semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = sem_num;</span><br><span class="line">sem_buff.sem_op = <span class="number">1</span>;</span><br><span class="line">sem_buff.sem_flg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - signal"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = sem_num;</span><br><span class="line">sem_buff.sem_op = <span class="number">-1</span>;</span><br><span class="line">sem_buff.sem_flg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - wait"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> pid1, pid2, pid3;</span><br><span class="line"><span class="keyword">int</span> sem_id1, sem_id2, sem_id3;</span><br><span class="line">sem_id1 = semget(<span class="number">1000</span>, <span class="number">2</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">sem_id2 = semget(<span class="number">1001</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">sem_id3 = semget(<span class="number">1002</span>, <span class="number">2</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf("%d %d %d\n", sem_id1, sem_id2, sem_id3);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> init_arry[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">set_values_of_sem(sem_id1, init_arry);</span><br><span class="line">set_value_of_sem(sem_id2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">set_values_of_sem(sem_id3, init_arry);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pid1 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid1 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> ((pid2 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid2 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">wait(sem_id1, <span class="number">0</span>);</span><br><span class="line">wait(sem_id2, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p2 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line">signal(sem_id2, <span class="number">0</span>);</span><br><span class="line">signal(sem_id3, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">wait(sem_id3, <span class="number">0</span>);</span><br><span class="line">wait(sem_id3, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p4 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line"></span><br><span class="line">delete_sem(sem_id1);</span><br><span class="line">delete_sem(sem_id2);</span><br><span class="line">delete_sem(sem_id3);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pid1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> ((pid3 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid3 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p1 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> arry[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">set_values_of_sem(sem_id1, arry);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">wait(sem_id1, <span class="number">1</span>);</span><br><span class="line">wait(sem_id2, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p3 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line">signal(sem_id2, <span class="number">0</span>);</span><br><span class="line">signal(sem_id3, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进程的生产者消费者同步"><a href="#进程的生产者消费者同步" class="headerlink" title="进程的生产者消费者同步"></a>进程的生产者消费者同步</h1><p><strong>生产者消费者同步。生产者进程将生产的数据写入文件中。消费者读取文件中的数据。注意，传送的每个数据都是一个字符，文件中最多可写入10个字符。编程实现并用实验验证结果。</strong></p><p>本题使用使用上一题写好的信号量函数，为了让生产者与消费者共用一个buff内存，还需要使用shm.h中的函数进行进程通信，具体亦参见<a href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/">我的另一篇博客《操作系统》实验3-进程同步-子泰编写的实验指导书</a>。算法实现与经典的生产者消费者模型一致，实验结果与源代码如下，test.txt与test_out.txt的内容完全一致，符合实验预期。</p><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image2.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> semun</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_init_value_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> init_value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.val = init_value;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - inital semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, IPC_RMID, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - delete semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = <span class="number">0</span>;</span><br><span class="line">sem_buff.sem_op = <span class="number">1</span>;</span><br><span class="line">sem_buff.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - signal"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = <span class="number">0</span>;</span><br><span class="line">sem_buff.sem_op = <span class="number">-1</span>;</span><br><span class="line">sem_buff.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - wait"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> share_memory_id;</span><br><span class="line"><span class="keyword">void</span> *share_memory;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> in, out;</span><br><span class="line"><span class="keyword">char</span> buffer[N];</span><br><span class="line">FILE *fp;</span><br><span class="line">FILE *fp_out;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span> *<span class="title">shared</span>;</span></span><br><span class="line"><span class="keyword">int</span> empty, full, mutex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">wait(empty);</span><br><span class="line">wait(mutex);</span><br><span class="line"><span class="comment">// printf("%p\n", shared-&gt;fp);</span></span><br><span class="line"><span class="keyword">char</span> ch = fgetc(shared-&gt;fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, ch);</span><br><span class="line"><span class="keyword">if</span> (ch == EOF) &#123;</span><br><span class="line">signal(mutex);</span><br><span class="line"><span class="comment">// signal(full);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared-&gt;buffer[shared-&gt;in] = ch;</span><br><span class="line">shared-&gt;in = (shared-&gt;in + <span class="number">1</span>) % N;</span><br><span class="line">signal(mutex);</span><br><span class="line">signal(full);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">wait(full);</span><br><span class="line">wait(mutex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"out: %d "</span>, shared-&gt;out);</span><br><span class="line"><span class="keyword">char</span> out_char = shared-&gt;buffer[shared-&gt;out];</span><br><span class="line"><span class="keyword">if</span> (out_char == EOF)</span><br><span class="line">&#123;</span><br><span class="line">signal(mutex);</span><br><span class="line"><span class="comment">// signal(empty);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared-&gt;out = (shared-&gt;out + <span class="number">1</span>) % N;</span><br><span class="line"><span class="built_in">fprintf</span>(shared-&gt;fp_out, <span class="string">"%c"</span>, out_char);</span><br><span class="line">fflush(shared-&gt;fp_out);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, out_char);</span><br><span class="line"></span><br><span class="line">signal(mutex);</span><br><span class="line">signal(empty);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">share_memory_id = shmget(<span class="number">12345</span>, <span class="keyword">sizeof</span>(struct share_data), <span class="number">0666</span>|IPC_CREAT);</span><br><span class="line">share_memory = shmat(share_memory_id, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">shared = (struct share_data *)share_memory;</span><br><span class="line">shared-&gt;fp = fopen(<span class="string">"test.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">shared-&gt;fp_out = fopen(<span class="string">"test_out.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">if</span> (shared-&gt;fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"file open fail"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// printf("%p\n", shared-&gt;fp);</span></span><br><span class="line">shared-&gt;in = <span class="number">0</span>; shared-&gt;out = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">empty = semget(<span class="number">3000</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT); </span><br><span class="line">full = semget(<span class="number">3001</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">mutex = semget(<span class="number">3002</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">set_init_value_of_sem(empty, N);</span><br><span class="line">set_init_value_of_sem(full, <span class="number">0</span>);</span><br><span class="line">set_init_value_of_sem(mutex, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> pid1, pid2;</span><br><span class="line"><span class="keyword">while</span> ((pid1 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid1 &gt; <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">while</span> ((pid2 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid2 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (producer()) &#123;</span><br><span class="line"><span class="comment">// usleep(100000);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (producer()) &#123;</span><br><span class="line"><span class="comment">// usleep(100000);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (comsumer()) </span><br><span class="line">;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(shared-&gt;fp_out);</span><br><span class="line">fclose(shared-&gt;fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的同步互斥——以银行转账为例"><a href="#线程的同步互斥——以银行转账为例" class="headerlink" title="线程的同步互斥——以银行转账为例"></a>线程的同步互斥——以银行转账为例</h1><p><strong>假设有两个银行账户，初始金额值分别为int nAccount1 = 0, nAccount2 = 0; 下面是在这两个银行账户间转账一个随机金额的函数transfer。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">transfer() &#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nTemp1 = nAccount1;</span><br><span class="line">            nTemp2 = nAccount2;</span><br><span class="line">            nRandom = rand();</span><br><span class="line">            nAccount1 = nTemp1 + nRandom;</span><br><span class="line">            nAccount2 = nTemp2 - nRandom;</span><br><span class="line">            <span class="built_in">printf</span>(“账户金额之和 = %d”, nAccount1 + nAccount2)；</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>试创建两个转账线程使其并发执行。（1）观察无同步控制时，两个线程并发执行的可能次序；观察账户金额的错误现象（正确的结果应该是两个账户金额之和始终为0）。分析在何种执行次序时会导致错误（2）分别利用互斥锁、Peterson方法实现两个线程互斥，并比较两者时间效率的差异。</strong></p><p>(1)  首先我写了一个不含进程同步的程序，为了计算2个线程执行的次数并观察它们的分布，采用transfer1和transfer2分别执行进程，并在和不为0的时候退出循环，源代码与运行结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid2;</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image3.png" alt=""></p><p>可见在分别运行了近200万次之后，两个线程由于没有设置互斥而发生了错误。可能的情况是：线程1执行nAccount1=nTemp1+nRandom后，线程2执行nAccount1 = nTemp1 + nRandom，之后线程1继续执行，导致了线程1在执行sum=nAccount1 + nAccount2的时候nAccount1的值和nAccount2的值相加并不为0。</p><p>(2)    首先使用互斥锁的方法进行线程同步，源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid2;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了验证互斥锁的有效性，让程序运行充分长时间。最终线程1和线程2均运行了2亿多次，没有发生不同步的情况，证明程序在线程同步的有效性，如下图所示：</p><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image4.png" alt=""></p><p>同样，使用peterson算法进行进程同步，运行1亿次没有发生不同步的情况，源代码和运行结果如下。peterson算法依靠flag数组和turn变量完成同步，在此不做赘述，具体亦参见<a href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/">我的另一篇博客《操作系统》实验3-进程同步-子泰编写的实验指导书</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flag[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> turn = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        flag[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">1</span>] &amp;&amp; turn == <span class="number">1</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        flag[<span class="number">0</span>] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">0</span>] &amp;&amp; turn == <span class="number">0</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid0, thid1;</span><br><span class="line">    pthread_create(&amp;thid0, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image5.png" alt=""></p><p>最后，为了比较两者的执行效率，我让它们分别都让两个线程执行1千万次，源码以及执行结果如下。最终互斥锁共计执行了约56秒，peterson算法执行了155秒，可见互斥锁效率更高。</p><h2 id="互斥锁1千万次运行计时"><a href="#互斥锁1千万次运行计时" class="headerlink" title="互斥锁1千万次运行计时"></a>互斥锁1千万次运行计时</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// while(!sum) &#123;</span></span><br><span class="line">    <span class="keyword">while</span>(cnt1 &lt; N) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// while(!sum) &#123;</span></span><br><span class="line">    <span class="keyword">while</span>(cnt2 &lt; N) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid2;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> finish = clock(); </span><br><span class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(finish - start) / CLOCKS_PER_SEC;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mutex: %f seconds\n"</span>, duration); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image6.png" alt=""></p><h2 id="peterson算法1千万次运行计时"><a href="#peterson算法1千万次运行计时" class="headerlink" title="peterson算法1千万次运行计时"></a>peterson算法1千万次运行计时</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flag[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> turn = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cnt1 &lt; N) &#123;</span><br><span class="line">    <span class="comment">// while(1) &#123;</span></span><br><span class="line">        flag[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">1</span>] &amp;&amp; turn == <span class="number">1</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        flag[<span class="number">0</span>] == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    turn = <span class="number">1</span>;</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cnt2 &lt; N) &#123;</span><br><span class="line">    <span class="comment">// while(1) &#123;</span></span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">0</span>] &amp;&amp; turn == <span class="number">0</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    turn = <span class="number">0</span>;</span><br><span class="line">    flag[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">pthread_t</span> thid0, thid1;</span><br><span class="line">    pthread_create(&amp;thid0, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> finish = clock(); </span><br><span class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(finish - start) / CLOCKS_PER_SEC;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"peterson: %f seconds\n"</span>, duration);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进程的同步与互斥&quot;&gt;&lt;a href=&quot;#进程的同步与互斥&quot; class=&quot;headerlink&quot; title=&quot;进程的同步与互斥&quot;&gt;&lt;/a&gt;进程的同步与互斥&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;创建4个进程P1-P4。要求进程P1在P2，P3之前，P4在其他进程之后执行
      
    
    </summary>
    
      <category term="操作系统" scheme="http://wang22ti.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>《计算机体系结构》实验2.1-MIPS指令集编程之冒泡排序</title>
    <link href="http://wang22ti.com/2018/04/20/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C2-1-MIPS%E6%8C%87%E4%BB%A4%E9%9B%86%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://wang22ti.com/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/</id>
    <published>2018-04-19T16:02:56.000Z</published>
    <updated>2018-05-08T14:35:49.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-学习过程"><a href="#1-学习过程" class="headerlink" title="1 学习过程"></a>1 学习过程</h1><p>​        第一次写MIPS指令集程序，于是我从简单到复杂地写了4个程序<code>helloworld</code>, <code>testio</code>, <code>swap</code>, <code>bubblesort_noinput</code>并在<code>PCSpim</code>环境（使用教程见参考文献4和5）中运行，由于时间限制，最终实现了不具有输入的冒泡排序程序。</p><h1 id="2-hello-world程序"><a href="#2-hello-world程序" class="headerlink" title="2 hello world程序"></a>2 hello world程序</h1><p>​        该程序验证环境可用性，初步了解MIPS汇编语法，无须赘述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">str:    .asciiz &quot;hello world!\n &quot;</span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str      # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image1.png" alt=""></p><h1 id="3-testio程序"><a href="#3-testio程序" class="headerlink" title="3 testio程序"></a>3 testio程序</h1><p>​        该程序实现输出输入的整数，初步了解MIPS汇编程序的syscall机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">str:    .asciiz &quot;please input a num: &quot;</span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str      # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        li $v0, 5# 读取一个整数</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        move $a0, $v0# 打印一个数</span><br><span class="line">        li   $v0, 1</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image2.png" alt=""></p><h1 id="4-swap程序"><a href="#4-swap程序" class="headerlink" title="4 swap程序"></a>4 swap程序</h1><p>​        该程序在testio的基础上实现比较两个数并交换为由小到大排序，为冒泡排序的实现做准备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">        .data</span><br><span class="line">array:  .word 5, 4</span><br><span class="line">str_old:    .asciiz &quot;old array:\n&quot;</span><br><span class="line">str_new:    .asciiz &quot;new array:\n&quot;</span><br><span class="line">blank:      .asciiz &quot; &quot;</span><br><span class="line">enter:      .asciiz &quot;\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str_old  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        jal swap</span><br><span class="line"></span><br><span class="line">        la $a0,str_new  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_array:</span><br><span class="line">        li $a1, 2       # 设置循环计数初值</span><br><span class="line">        la $a2, array   # 指针初始化</span><br><span class="line">loop1:  blez $a1, over1       # 如果$a1 &lt;= 0，跳转到retmain</span><br><span class="line">        lw   $a0, 0($a2)        # 将$a2对应的值取到$a0</span><br><span class="line">        li   $v0, 1             # 打印$a0的值</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        la $a0, blank              # 打印空格</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        addi $a2, $a2, 4        # 指针+1</span><br><span class="line">        addi $a1, $a1, -1       # 循环计数减一</span><br><span class="line">        j loop1</span><br><span class="line">over1:</span><br><span class="line">        la $a0, enter           # 打印一个换行</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line">        j retmain</span><br><span class="line"></span><br><span class="line">swap:</span><br><span class="line">        la $a2, array           # 指针初始化</span><br><span class="line">        addi $a3, $a2, 4        # 指针初始化</span><br><span class="line">        lw $t0, 0($a2)          # 将$a2对应的值取到$t0</span><br><span class="line">        lw $t1, 0($a3)          # 将$a3对应的值取到$t1</span><br><span class="line"></span><br><span class="line">        bge $t1, $t0, retmain   # 如果顺序，返回</span><br><span class="line">        sw $t0, 0($a3)          # 逆序，交换</span><br><span class="line">        sw $t1, 0($a2)</span><br><span class="line">        j retmain</span><br><span class="line"></span><br><span class="line">retmain:</span><br><span class="line">        jr $ra          # 返回主程序</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image3.png" alt=""></p><h1 id="5-bubblesort-noinput程序"><a href="#5-bubblesort-noinput程序" class="headerlink" title="5 bubblesort_noinput程序"></a>5 bubblesort_noinput程序</h1><p>​        该程序在swap程序的基础上修改，利用指针的思想加入两层循环的控制，实现了冒泡排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">        .data</span><br><span class="line">array:  .word 3, 1, 5, 3, 6</span><br><span class="line">str_old:    .asciiz &quot;old array:\n&quot;</span><br><span class="line">str_new:    .asciiz &quot;new array:\n&quot;</span><br><span class="line">blank:      .asciiz &quot; &quot;</span><br><span class="line">enter:      .asciiz &quot;\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str_old  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        jal sort</span><br><span class="line"></span><br><span class="line">        la $a0,str_new  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_array:</span><br><span class="line">        li $a1, 5       # 设置循环计数初值</span><br><span class="line">        la $a2, array   # 指针初始化</span><br><span class="line">loop1:  blez $a1, over1       # 如果$a1 &lt;= 0，跳转到retmain</span><br><span class="line">        lw   $a0, 0($a2)        # 将$a2对应的值取到$a0</span><br><span class="line">        li   $v0, 1             # 打印$a0的值</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        la $a0, blank              # 打印空格</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        addi $a2, $a2, 4        # 指针+1</span><br><span class="line">        addi $a1, $a1, -1       # 循环计数减一</span><br><span class="line">        j loop1</span><br><span class="line">over1:</span><br><span class="line">        la $a0, enter           # 打印一个换行</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line">        j retmain</span><br><span class="line"></span><br><span class="line">sort:</span><br><span class="line">        la $a1, array           # 外层指针初始化</span><br><span class="line">        addi $t4, $a1, 16       # 外层尾指针初始化</span><br><span class="line">loop_out:</span><br><span class="line">        la $a2, array           # 内层指针初始化</span><br><span class="line">        sub $t3, $t4, $a1        # 内层尾指针初始化</span><br><span class="line">        addu $t5, $a1, $t3</span><br><span class="line">loop_in:</span><br><span class="line">        addi $a3, $a2, 4        # 指针初始化</span><br><span class="line">        lw $t0, 0($a2)          # 将$a2对应的值取到$t0</span><br><span class="line">        lw $t1, 0($a3)          # 将$a3对应的值取到$t1</span><br><span class="line"></span><br><span class="line">        bge $t1, $t0, next_loop   # 如果顺序，返回</span><br><span class="line">        sw $t0, 0($a3)          # 逆序，交换</span><br><span class="line">        sw $t1, 0($a2)</span><br><span class="line"></span><br><span class="line">next_loop:</span><br><span class="line">        addi $a2, $a2, 4        # 内层指针++</span><br><span class="line">        bne $t4, $a2, loop_in   # 判断内层指针是否指向尾指针</span><br><span class="line">        addi $a1, $a1, 4        # 外层指针++</span><br><span class="line">        bne $t5, $a1, loop_out  # 判断外层指针是否指向尾指针</span><br><span class="line">        j retmain               # 排序结束，返回</span><br><span class="line"></span><br><span class="line">retmain:</span><br><span class="line">        jr $ra          # 返回主程序</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image4.png" alt=""></p><h1 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6 参考资料"></a>6 参考资料</h1><p>[1]【十分钟教会你汇编】MIPS编程入门  <a href="https://blog.csdn.net/king523103/article/details/45967991" target="_blank" rel="noopener">https://blog.csdn.net/king523103/article/details/45967991</a></p><p>[2] MIPS编程实例集锦(1)  <a href="https://wenku.baidu.com/view/ec9f638583d049649b66588b.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/ec9f638583d049649b66588b.html</a></p><p>[3] MIPS汇编：冒泡排序 <a href="https://blog.csdn.net/linwh8/article/details/68944058" target="_blank" rel="noopener">https://blog.csdn.net/linwh8/article/details/68944058</a></p><p>[4] 非常简单的MIPS小工具-SPIM <a href="https://blog.csdn.net/makethyme/article/details/6277769" target="_blank" rel="noopener">https://blog.csdn.net/makethyme/article/details/6277769</a></p><p>[5] PCspim的安装及使用操作 <a href="https://blog.csdn.net/Kiloveyousmile/article/details/69055131" target="_blank" rel="noopener">https://blog.csdn.net/Kiloveyousmile/article/details/69055131</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-学习过程&quot;&gt;&lt;a href=&quot;#1-学习过程&quot; class=&quot;headerlink&quot; title=&quot;1 学习过程&quot;&gt;&lt;/a&gt;1 学习过程&lt;/h1&gt;&lt;p&gt;​        第一次写MIPS指令集程序，于是我从简单到复杂地写了4个程序&lt;code&gt;helloworl
      
    
    </summary>
    
      <category term="计算机体系结构" scheme="http://wang22ti.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>《虚拟化与云计算》学习</title>
    <link href="http://wang22ti.com/2018/04/13/%E3%80%8A%E8%99%9A%E6%8B%9F%E5%8C%96%E4%B8%8E%E4%BA%91%E8%AE%A1%E7%AE%97%E3%80%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wang22ti.com/2018/04/13/《虚拟化与云计算》学习/</id>
    <published>2018-04-13T02:56:53.000Z</published>
    <updated>2018-05-08T14:35:38.786Z</updated>
    
    <content type="html"><![CDATA[<p>嘉哥要做一个简单的云盘，所以就一步一步来吧。</p><h1 id="1-FTP"><a href="#1-FTP" class="headerlink" title="1 FTP"></a>1 FTP</h1><p>#1.1 FTP命令行上传下载</p><p>嘉哥用阿里云开了一台云服务器，安装了ftp服务器，打开了端口，关闭了用户验证，于是我就可以用匿名（Anonymous）的方式登录。解释参见<a href="https://jingyan.baidu.com/article/fdbd4277d8a4f7b89e3f48ab.html" target="_blank" rel="noopener">百度经验：怎样在命令行中使用FTP</a></p><p><img src="/2018/04/13/《虚拟化与云计算》学习/屏幕截图(540" alt="">.png)</p><p>下载需要使用<code>LITERAL PASV</code>设置为被动模式，具体参见<a href="https://blog.csdn.net/wxqian25/article/details/16821333" target="_blank" rel="noopener">ftp错误150 Opening ASCII mode data connection for /bin/ls.</a>以及<a href="https://bbs.csdn.net/topics/310044648/" target="_blank" rel="noopener">CMD里的FTP命令，怎么切换FTP的主被动模式？</a></p><p>默认下载目录为c:\user\45504，其中45504是我的用户名。</p><p><img src="/2018/04/13/《虚拟化与云计算》学习/屏幕截图(543" alt="">.png)</p><h1 id="1-2-python的FTP库ftplib上传"><a href="#1-2-python的FTP库ftplib上传" class="headerlink" title="1.2 python的FTP库ftplib上传"></a>1.2 python的FTP库ftplib上传</h1><p>有了上面的过程，python代码也很好理解啦，使用python自带的<code>ftplib</code>库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'101.200.57.174'</span></span><br><span class="line">user = <span class="string">'Anonymous'</span></span><br><span class="line">password = <span class="string">'wang22ti@163.com'</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'wang22ti.docx'</span></span><br><span class="line"></span><br><span class="line">ftp = FTP()</span><br><span class="line">ftp.set_pasv(<span class="keyword">False</span>)</span><br><span class="line">ftp.set_debuglevel(<span class="number">2</span>)</span><br><span class="line">ftp.connect(ip)</span><br><span class="line">ftp.login(user, password)</span><br><span class="line">print(ftp.getwelcome())</span><br><span class="line">ftp.storbinary(<span class="string">'STOR %s'</span> % file_name, open(file_name, <span class="string">'rb'</span>))</span><br></pre></td></tr></table></figure><p>其中<code>ftp.set_debuglevel</code>设置日志等级，<code>ftp.storbinary</code>以二进制的方式打开文件并上传。</p><p><code>ftp.set_pasv</code>比较复杂，详情参见<a href="http://blog.sina.com.cn/s/blog_9f6591a30101cj5r.html" target="_blank" rel="noopener">纯真的花花牛的博客</a></p><p><strong>然而还没完！</strong></p><p>当上传中文文件名的时候，出现了问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;D:/45504/Documents/MiCloud/Coding/python/虚拟化与云计算/test_ftp.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">    ftp.storbinary(&apos;STOR %s&apos; % file_name, open(file_name, &apos;rb&apos;))</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 503, in storbinary</span><br><span class="line">    with self.transfercmd(cmd, rest) as conn:</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 398, in transfercmd</span><br><span class="line">    return self.ntransfercmd(cmd, rest)[0]</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 382, in ntransfercmd</span><br><span class="line">    resp = self.sendcmd(cmd)</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 271, in sendcmd</span><br><span class="line">    self.putcmd(cmd)</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 198, in putcmd</span><br><span class="line">    self.putline(line)</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 193, in putline</span><br><span class="line">    self.sock.sendall(line.encode(self.encoding))</span><br><span class="line">UnicodeEncodeError: &apos;latin-1&apos; codec can&apos;t encode characters in position 5-7: ordinal not in range(256)</span><br></pre></td></tr></table></figure><p>昂，原因是<code>latin-1</code>的编码方式，看起来就不支持中文，打开最后一个报错地址可以看到最后发消息是以<code>self.encoding</code>的方式编码的：</p><p><img src="/2018/04/13/《虚拟化与云计算》学习/Snipaste_2018-04-13_11-54-53.png" alt=""></p><p>本以为找到它修改为<code>utf-8</code>就好了，结果又发生了新的错误：</p><p><img src="/2018/04/13/《虚拟化与云计算》学习/1523593140997.png" alt=""></p><p>百思不得其解，<a href="https://blog.csdn.net/chenhongwu666/article/details/43524035" target="_blank" rel="noopener">CSDN的一个博客</a>说是服务器的问题，需要将服务器是否接受<code>utf-8</code>打开（看来命令行走的不是utf-8），结果结果改来改去还是这个问题！最后发现一个神贴：<a href="https://blog.csdn.net/iamsujin/article/details/19616247" target="_blank" rel="noopener">CSDN：python实现ftp中的乱码问题</a>。用更优雅的方法修改为<code>GB18030</code>就ok啦。之后又从<a href="http://www.jb51.net/article/88215.htm" target="_blank" rel="noopener">Python中的FTP通信模块ftplib的用法整理</a>学习了其他的操作，这是最后的代码，部分操作没有测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'101.200.57.174'</span></span><br><span class="line">user = <span class="string">'Anonymous'</span></span><br><span class="line">password = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file_name = '王王王.docx'</span></span><br><span class="line">file_name = <span class="string">'wang22ti.docx'</span></span><br><span class="line"></span><br><span class="line">ftp = FTP()</span><br><span class="line">ftp.set_pasv(<span class="keyword">False</span>)</span><br><span class="line">ftp.encoding = <span class="string">'GB18030'</span></span><br><span class="line">ftp.set_debuglevel(<span class="number">2</span>)</span><br><span class="line">ftp.connect(ip)</span><br><span class="line">ftp.login(user, password)</span><br><span class="line">print(ftp.getwelcome())</span><br><span class="line">ftp.storbinary(<span class="string">'STOR %s'</span> % file_name, open(file_name, <span class="string">'rb'</span>))</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'wang22ti_downloaded.docx'</span>, <span class="string">'wb'</span>)</span><br><span class="line">bufsize = <span class="number">1024</span></span><br><span class="line">ftp.retrbinary(<span class="string">'RETR %s'</span> % file_name, f.write, bufsize)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ftp.cwd(pathname) #设置FTP当前操作的路径</span></span><br><span class="line"><span class="comment"># ftp.dir() #显示目录下文件信息</span></span><br><span class="line"><span class="comment"># file_list = ftp.nlst() #获取目录下的文件</span></span><br><span class="line"><span class="comment"># from pprint import pprint</span></span><br><span class="line"><span class="comment"># pprint(file_list)</span></span><br><span class="line"><span class="comment"># ftp.mkd(pathname) #新建远程目录</span></span><br><span class="line"><span class="comment"># ftp.pwd() #返回当前所在位置</span></span><br><span class="line"><span class="comment"># ftp.rmd(dirname) #删除远程目录</span></span><br><span class="line">ftp.delete(file_name) <span class="comment">#删除远程文件</span></span><br><span class="line"><span class="keyword">if</span> file_name <span class="keyword">not</span> <span class="keyword">in</span> ftp.nlst():</span><br><span class="line">    print(<span class="string">'delete OK - %s'</span> % file_name)</span><br><span class="line"><span class="comment"># ftp.rename(fromname, toname)#将fromname修改名称为toname。</span></span><br></pre></td></tr></table></figure><h1 id="1-3-对ftplib的进一步封装"><a href="#1-3-对ftplib的进一步封装" class="headerlink" title="1.3 对ftplib的进一步封装"></a>1.3 对ftplib的进一步封装</h1><p>可以说，ftplib已经比较方便了，但是一方面类似于<code>storbinary</code>和<code>retrbinary</code>一类的函数封装性仍然不够好，另一方面在实际使用中还会出现长时间无响应的情况。为了能够在作业中的体验更好，进一步封装ftplib如下：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嘉哥要做一个简单的云盘，所以就一步一步来吧。&lt;/p&gt;
&lt;h1 id=&quot;1-FTP&quot;&gt;&lt;a href=&quot;#1-FTP&quot; class=&quot;headerlink&quot; title=&quot;1 FTP&quot;&gt;&lt;/a&gt;1 FTP&lt;/h1&gt;&lt;p&gt;#1.1 FTP命令行上传下载&lt;/p&gt;
&lt;p&gt;嘉哥用阿里
      
    
    </summary>
    
      <category term="虚拟化与云计算" scheme="http://wang22ti.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96%E4%B8%8E%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>《计算机体系结构》实验2-MIPS指令集</title>
    <link href="http://wang22ti.com/2018/04/10/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C2-MIPS%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <id>http://wang22ti.com/2018/04/10/《计算机体系结构》实验2-MIPS指令集/</id>
    <published>2018-04-09T16:53:46.000Z</published>
    <updated>2018-05-08T14:35:53.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-lab1的内容"><a href="#0-lab1的内容" class="headerlink" title="0 lab1的内容"></a>0 lab1的内容</h1><h2 id="0-1-Exercise1"><a href="#0-1-Exercise1" class="headerlink" title="0.1  Exercise1"></a>0.1  Exercise1</h2><p>由下图易知LW R2,100(R3)对应的二进制代码为10001100011 00010 0000000001100100，转化为十六进制为0x8C62 0064。</p><p><img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image1.png" alt="">                              </p><p>由下图易知SW R5,100(R6)对应的二进制代码为10101100110 00101 000000001100100，转化为十六进制为0xACC5 0064。</p><p><img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image2.png" alt=""></p><h2 id="0-2-Exercise2"><a href="#0-2-Exercise2" class="headerlink" title="0.2  Exercise2"></a>0.2  Exercise2</h2><p>由下图易知OR R7,R18, R12对应的二进制代码为00000010010 01100 00111 00000 100101，转化为十六进制为0x024C 3825。</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image3.png" alt=""></p><p>由下图易知SUB R5,R4, R31对应的二进制代码为00000000100 11111 00101 00000 100010，转化为十六进制为0x009F 2822。</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image4.png" alt=""></p><h2 id="0-3-Exercise3"><a href="#0-3-Exercise3" class="headerlink" title="0.3  Exercise3"></a>0.3  Exercise3</h2><p>由下图易知BNEQ R7, R8,-5对应的二进制代码为00010100111 01000 11111111111111011，转化为十六进制为0x14E8 FFFB。当PC为124的时候，分支后的PC值为124 + (-5&lt;&lt;2) = 104。</p><p><img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image5.png" alt=""> </p><h2 id="0-4-Exercise5"><a href="#0-4-Exercise5" class="headerlink" title="0.4  Exercise5"></a>0.4  Exercise5</h2><p>不知道为啥没发现exercise4，但由下图易知ADDI R7, R8, 600对应的二进制代码为001000 01000 001110000001001011000，转化为十六进制为0x21070258。为啥没有SUBI呢？可能是因为该指令并不常用，且可以被ADDI代替，为了满足精简指令集的设计要求，就被去掉了。</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image6.png" alt=""></p><h1 id="1指令集学习"><a href="#1指令集学习" class="headerlink" title="1指令集学习"></a>1指令集学习</h1><p>​        因为我们班分配到的是分支指令（Branch），所以我遵循从简单到复杂的一般思路，学习了B和BAL两条指令，以及与他们相关的BEQ和BGEZAL两条指令。</p><h2 id="1-1-B和BEQ的学习"><a href="#1-1-B和BEQ的学习" class="headerlink" title="1.1 B和BEQ的学习"></a>1.1 B和BEQ的学习</h2><p>​        B指令在指令集说明里的介绍重点如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image7.png" alt=""></p><p>​        可见该32位的指令最高6位000100是用来告诉处理器——这是一条分支指令！而最低16位offset再加上2位的偏移量（之所以用2位是因为一条指令为32位即4位，4刚好是2的2次方）组成了一个±128Kb的相对寻址空间，用来指明指令相对寻址的位置。</p><p>​        那中间的两个00000呢？注意到该指令实际被机器翻译为BEQ r0, r0, offset，我又查看了BEQ指令，其重点介绍如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image8.png" alt=""></p><p>​        GPR看起来非常关键，我检索到如下信息：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image9.png" alt=""></p><p>​        Amazing！原来是通用寄存器的缩写，而且编号为0的通用寄存器的值永远为0。于是知道BEQ表示如果寄存器rs和寄存器rt的值如果相等就执行分支操作。进一步地，因为指令B的rs和rt均为编号为0的通用寄存器，所以就变成了无条件分支了！</p><h2 id="1-2-BAL和BGEZAL的学习"><a href="#1-2-BAL和BGEZAL的学习" class="headerlink" title="1.2 BAL和BGEZAL的学习"></a>1.2 BAL和BGEZAL的学习</h2><p>​        类似于1.1中的学习过程，我先查看了BAL的重点介绍：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image10.png" alt=""></p><p>​        指令BAL构造方式和指令B并不一样。但目前为止可以很容易理解的是，BAL执行的也是±128Kb范围内的相对寻址，和指令B不同的是BAL会把分支子程序运行结束、回到分支点后执行的下一条指令的地址（returnaddress link）存放在编号为31的通用寄存器里。它是怎么做到的呢？于是查看BGEZAL的重点介绍：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image11.png" alt=""></p><p>和1.1中的情况类似，指令BGEZAL是一个条件分支指令，当寄存器rs中的值大于等于0的情况下执行分支操作，而在指令BAL将寄存器rs强制为r0=0，于是就变成了无条件的分支。然而还有疑惑——如果10001表明这是一条BGEZAL指令，那么该指令最高6位的000001是什么意思呢？进一步检索到如下信息：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image12.png" alt=""></p><p>​        从这里可以明白REGIMM指明了immediate instruction的条件，看来opcode是一个很重要的信息！进一步检索，得到了更通用的信息——</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image13.png" alt=""></p><p>​        这幅图告诉我们，所有的MIPS指令都具有类似于6+5+5+16的形式，其中前6位被称为opcode——显然就是operation code！很顺利地，还找到了以下的几张表格——</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image14.png" alt=""></p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image15.png" alt=""></p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image16.png" alt=""></p><p>Unbelievable！将这几张图结合起来后，我们就可以明白计算机理解指令BAL的过程：</p><p>一、 读取opcode，发现是REGIMM，它表示要执行的指令是具有一个判断参数条件指令，参数用rs表示，而具体是什么指令呢？用rt表示。</p><p>二、 读取rt，发现是BGEZAL，它表示在rs≥0的情况下执行带有返回地址的分支操作，这已经是一条很具体的操作了。</p><p>三、 读取rs，发现是00000，于是就去读取编号为0的通用寄存器的值。而我们知道这个值恒为0，于是无条件地满足了分支条件。</p><p>四、 读取offset，对其做左移2位操作后执行分支操作。</p><p>五、 执行完分支程序，读取编号为31的通用寄存器里的返回地址并寻址执行。</p><h2 id="1-3-指令学习小结"><a href="#1-3-指令学习小结" class="headerlink" title="1.3 指令学习小结"></a>1.3 指令学习小结</h2><p>​        MIPS是经典的精简指令集，根据以上的学习，它使用了哪些技巧使得指令长度变短、数量减少呢？</p><p>一、 统一的指令格式。指令长度均为32位且为6+5+5+16的形式，一方面地址实现了对齐，指令中的地址就可以减少2位；另一方面降低了机器对指令理解的难度，必然可以提高一般任务下的执行效率。</p><p>二、 指令复用。B和BEQ、BAL和BGEZAL从机器码的角度来说是一模一样的，但是通过默认值的巧妙设定，用相同的机器码实现不同的指令，从而减少指令的总数。</p><p>三、 多级操作码。很多opcode仅仅表示一类指令，具体是哪一个指令需要进一步理解其他域中的值，因此opcode只需要6位即可。那为什么BEQ不采用这样的方式呢？显然是因为BEQ这一类指令需要更多的参数。</p><p>此外，本次实验中“顺藤摸瓜式”的搜索路径、“关键词查找”的搜索方法和类比的学习方法，让整个实验十分顺畅且严谨合理，也是值得总结回味的，它让我体会到一种探索的乐趣。</p><h1 id="2-大小端编址的实验测试"><a href="#2-大小端编址的实验测试" class="headerlink" title="2 大小端编址的实验测试"></a>2 大小端编址的实验测试</h1><p>根据实验要求，编写程序并运行如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image17.png" alt=""></p><p>可以看出，x1取的是x的低地址，输出的是0x1122的低地址对应的十进制数34，可见我的电脑的CPU（Intel 酷睿i7 7500U）采用的编址方式为小端编址。</p><h1 id="3观察指令执行过程——以winmips64为例"><a href="#3观察指令执行过程——以winmips64为例" class="headerlink" title="3观察指令执行过程——以winmips64为例"></a>3观察指令执行过程——以winmips64为例</h1><h2 id="3-1-观察指令执行过程——以计算阶乘为例"><a href="#3-1-观察指令执行过程——以计算阶乘为例" class="headerlink" title="3.1 观察指令执行过程——以计算阶乘为例"></a>3.1 观察指令执行过程——以计算阶乘为例</h2><p>​       虽然只知道这是一款MIPS指令集的仿真软件，参考文档糟糕的排版和字体让人提不起学习的兴趣，我还是打开了这款软件。由于此前的学习加上一些文献的查找，我觉得大体还是能看懂每个window的作用。它在我的眼里长这样：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image18.png" alt=""></p><p>然后我打开一段叫做factorial.s的程序，从字面上看这段程序是用来计算阶乘的：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image19.png" alt=""></p><p>​       实验要求为观察指令执行的过程，给出指令集和硬件高效执行关系的观察体会。于是我就开始一个周期一个周期地执行这个程序，直到第5个周期如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image20.png" alt=""></p><p>​       可以看出，指令采用五级流水线的方式执行，分为读指令、指令译码、指令执行、访问内存和写回寄存器五个阶段，每个阶段的时间均相同。同时，针对不同数据类型的指令，采用相应的硬件进行处理。</p><p>​       继续执行一个周期，发现statistics窗口多了一项数据：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image21.png" alt=""></p><p>恰好就是课上学的CPI！由于刚刚执行完一条指令，流水线的效果还没有显现，所以CPI = 5。继续执行几个周期，CPI逐渐减小并趋向于1，并要求我在终端（Terminal）输入计算阶乘的初值： </p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image22.png" alt=""></p><p>​       我输入了3后继续执行，出现了不一样的结果：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image23.png" alt=""></p><p>Amazing！可以看出，指令jal factorial让程序开始从003c读指令，而此前已经被读取、本应该在这个周期译码的、位于002c的指令daddi r24, r0, 1被阻塞了！于是Statistics窗口中Branch Taken Stall的值增加了1！再执行几个周期：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image24.png" alt=""></p><p>​        可以观察到流水线开始被重新构建。此外，结合参考手册中对于指令slti的介绍</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image25.png" alt=""></p><p>可知指令slti在对编号为10的寄存器进行写操作的同时指令bnez要对r10进行读操作，于是就产生了如图所示的“写后读”阻塞。进行执行若干个周期，上述两种情况交替出现若干次，目的在于将需要的数据即，n到1压入堆栈。运行若干周期之后终于跳出了这个循环，出现了新的情况：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image26.png" alt=""></p><p>​        Surprise！在执行指令dmulu的时候，使用了专门的硬件！同时由于乘法计算的时间仍然较长且与下一条指令dadd均需要访问编号为3的寄存器，所以整个程序都处于“写后读”阻塞！最终，当dmulu指令进入访问内存阶段时，statistics窗口中的Structural Stall的值变为了1！</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image27.png" alt=""></p><p>​        继续执行若干个周期，除了程序在循环计算阶乘的过程中又出现了StructuralStall外，并没有发现新的有趣的现象。最后，终端输出了正确的结果，statistics窗口中数据如下所示：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image28.png" alt=""></p><p>​        最终的CPI为1.640，远远小于5，可见流水线的威力。</p><h2 id="3-2-指令观察小结"><a href="#3-2-指令观察小结" class="headerlink" title="3.2 指令观察小结"></a>3.2 指令观察小结</h2><p>​        这次仿真观察真是惊喜连连，我收获了哪些呢？</p><p>一、 流水线是一个复杂的系统，包括指令周期的划分、指令周期的对齐、资源冲突的应对等等，可以有效地减小CPI。</p><p>二、 为了对齐指令周期，需要尽量减少各个阶段的时间长度，例如通过指令长度的对齐和指令格式的统一提高译码效率。</p><p>三、 对了避免部分周期，尤其是执行周期流水线效率的影响，在设计指令集的时候就考虑使用不同的硬件以提高执行效率，例如采用协处理器专门处理浮点运算，采用专门的硬件计算加速乘法计算（这样的思想也被应用到近几年的异构计算中）。</p><h1 id="4-参考文献"><a href="#4-参考文献" class="headerlink" title="4 参考文献"></a>4 参考文献</h1><p>[1] MIPS指令集</p><p><a href="http://blog.sina.com.cn/s/blog_7f293c900100zdm8.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_7f293c900100zdm8.html</a></p><p>[2] C++中数据类型int, short, long, long long的数据范围</p><p><a href="https://blog.csdn.net/elohims/article/details/23558779" target="_blank" rel="noopener">https://blog.csdn.net/elohims/article/details/23558779</a></p><p>[3] 大端模式和小端模式</p><p><a href="https://www.cnblogs.com/itcsl/p/6567963.html" target="_blank" rel="noopener">https://www.cnblogs.com/itcsl/p/6567963.html</a></p><p>[4] MIPS入门</p><p><a href="https://wenku.baidu.com/view/f719c320647d27284b735199.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/f719c320647d27284b735199.html</a></p><p>[5] MIPS的五级流水线</p><p><a href="http://imgtec.eetrend.com/article/1247" target="_blank" rel="noopener">http://imgtec.eetrend.com/article/1247</a></p><p>[6] MIPS指令集实验</p><p><a href="https://wenku.baidu.com/view/6d94c44c1fd9ad51f01dc281e53a580216fc509d.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/6d94c44c1fd9ad51f01dc281e53a580216fc509d.html</a></p><p>[7] cpu结构和功能</p><p><a href="https://max.book118.com/html/2017/0628/118707202.shtm" target="_blank" rel="noopener">https://max.book118.com/html/2017/0628/118707202.shtm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-lab1的内容&quot;&gt;&lt;a href=&quot;#0-lab1的内容&quot; class=&quot;headerlink&quot; title=&quot;0 lab1的内容&quot;&gt;&lt;/a&gt;0 lab1的内容&lt;/h1&gt;&lt;h2 id=&quot;0-1-Exercise1&quot;&gt;&lt;a href=&quot;#0-1-Exercise
      
    
    </summary>
    
      <category term="计算机体系结构" scheme="http://wang22ti.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》作业2.5-进程控制块的类C语言描述</title>
    <link href="http://wang22ti.com/2018/04/02/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E4%BD%9C%E4%B8%9A2-5-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%9D%97%E7%9A%84%E7%B1%BBC%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0/"/>
    <id>http://wang22ti.com/2018/04/02/《操作系统》作业2-5-进程控制块的类C语言描述/</id>
    <published>2018-04-02T04:42:26.000Z</published>
    <updated>2018-05-08T14:34:30.052Z</updated>
    
    <content type="html"><![CDATA[<p>这个作业差点要手写，倒腾了一晚上，肯定还有很多问题，就先贴在这里吧。</p><p><strong>试根据你自己的理解，采用类C语言设计和描述操作系统关于进程控制块的数据结构、组织方式及管理机制。在此基础上，给出进程的创建、终止、阻塞、唤醒、挂起与激活等函数原型及函数代码。注意，对于过于复杂的功能或你无法解决的细节可采用指定功能的函数模块如处理机调度scheduler()来替代。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line"> <span class="keyword">pid_t</span> pid;<span class="comment">//进程pid</span></span><br><span class="line"><span class="keyword">pid_t</span> ppid;<span class="comment">//父进程pid</span></span><br><span class="line"> <span class="keyword">enum</span> status&#123;<span class="comment">//进程状态</span></span><br><span class="line"> CREATING,<span class="comment">//创建</span></span><br><span class="line"> TERMINATING,<span class="comment">//终止</span></span><br><span class="line"> RUNNING,<span class="comment">//执行</span></span><br><span class="line"> ACTIVE_READY,<span class="comment">//活动就绪</span></span><br><span class="line"> INACTIVE_READY,<span class="comment">//静止就绪</span></span><br><span class="line"> ACTIVE_BLOCK,<span class="comment">//活动阻塞</span></span><br><span class="line"> INACTIVE_BLOCK,<span class="comment">//静止阻塞</span></span><br><span class="line">&#125;;<span class="comment">//进程的状态</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> memory_address;<span class="comment">//进程下一次执行程序的开始地址</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allocate_address</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TO-DO: 为新的进程分配一块内存空间，返回首地址的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deallocate_address</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TO-DO: 解除进程的内存分配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> process(<span class="keyword">pid_t</span> pid, <span class="keyword">pid_t</span> ppid) &#123;</span><br><span class="line"> <span class="keyword">this</span>.pid = pid;</span><br><span class="line"> <span class="keyword">this</span>.ppid = ppid;</span><br><span class="line"> <span class="keyword">this</span>.status = CREATING;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">this</span>.pid != ERROR)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">this</span>.memory_address = allocate_address();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> ~process()&#123;</span><br><span class="line"> <span class="keyword">this</span>.status = TERMINATING;</span><br><span class="line"> deallocate_address();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">system</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">pid_t</span> start_pid = <span class="number">0</span>;<span class="comment">//初始进程的pid</span></span><br><span class="line"><span class="keyword">pid_t</span> next_pid;<span class="comment">//下一个创建的的进程pid</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span> <span class="title">running_porcess</span>;</span><span class="comment">//正在执行的进程</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">running_start_time</span>;</span><span class="comment">//正在执行进程开始执行的时间</span></span><br><span class="line"><span class="keyword">long</span> max_time = <span class="number">100</span>;<span class="comment">//一个时间片的长度（微秒）</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct process&gt; ready_queue;<span class="comment">//就绪进程的队列</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct process&gt; block_queue;<span class="comment">//阻塞进程的队列</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct process&gt; suspend_queue;<span class="comment">//挂起进程的的队列</span></span><br><span class="line"><span class="keyword">int</span> genearl_register[<span class="number">4</span>][<span class="number">2</span>];<span class="comment">//标准寄存器</span></span><br><span class="line"><span class="keyword">int</span> PSW[<span class="number">16</span>];<span class="comment">//状态寄存器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> system&#123;<span class="comment">//状态转移</span></span><br><span class="line"> CREATE,<span class="comment">//创建</span></span><br><span class="line"> BLOCK,<span class="comment">//阻塞</span></span><br><span class="line"> RELEASE,<span class="comment">//释放</span></span><br><span class="line"> SUSPEND,<span class="comment">//挂起</span></span><br><span class="line"> ACTIVATE,<span class="comment">//激活</span></span><br><span class="line"> TERMINATE,<span class="comment">//终止</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; operater_queue;<span class="comment">//待执行的操作的队列</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct process <span class="title">create</span><span class="params">(<span class="keyword">pid_t</span> ppid)</span></span>;<span class="comment">//创建进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">block</span><span class="params">()</span></span>;<span class="comment">//阻塞正在执行的进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(struct process)</span></span>;<span class="comment">//释放阻塞的进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspend</span><span class="params">(struct process)</span></span>;<span class="comment">//挂起进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activate</span><span class="params">(struct process)</span></span>;<span class="comment">//激活被挂起的进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">terminate</span><span class="params">(struct process)</span></span>;<span class="comment">//终止进程</span></span><br><span class="line"></span><br><span class="line">system();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span> <span class="title">system</span>:</span>:create(<span class="keyword">pid_t</span> ppid) &#123;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">new_process = process(<span class="keyword">this</span>.next_pid , ppid);</span><br><span class="line"><span class="keyword">this</span>.next_pid += <span class="number">1</span>;</span><br><span class="line">new_process.status = ACTIVE_READY;</span><br><span class="line"><span class="keyword">this</span>.ready_queue.push(new_process);</span><br><span class="line"><span class="keyword">this</span>.timeval = gettiemofday();</span><br><span class="line"><span class="keyword">return</span> new_process;</span><br><span class="line"><span class="keyword">catch</span>:</span><br><span class="line"><span class="keyword">return</span> process(ERROR, ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::block() &#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess.memory_address = getNowAddress();</span><br><span class="line"><span class="comment">// 阻塞执行进程，调度下一个进程</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.running_porcess != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess.status = ACTIVE_BLOCK;</span><br><span class="line">block_queue.push(<span class="keyword">this</span>.running_porcess);</span><br><span class="line"><span class="keyword">this</span>.running_porcess = <span class="keyword">this</span>.ready_queue.pop():</span><br><span class="line">&#125;</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::release(struct process) &#123;</span><br><span class="line"><span class="comment">// 释放活动阻塞进程，转入活动就绪</span></span><br><span class="line"><span class="keyword">if</span> (process.status == ACTIVE_BLOCK)</span><br><span class="line">&#123;</span><br><span class="line">process.status = ACTIVE_READY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放静止阻塞进程，转入静止就绪</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.status == INACTIVE_BLOCK)</span><br><span class="line">&#123;</span><br><span class="line">process.status == INACTIVE_READY;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ready_queue.push(process);</span><br><span class="line">block_queue.pop(process);</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::suspend(struct process) &#123;</span><br><span class="line">porcess.memory_address = getNowAddress();</span><br><span class="line"><span class="comment">// 挂起执行进程，转入静止就绪，调度下一个程序</span></span><br><span class="line"><span class="keyword">if</span> (process == <span class="keyword">this</span>.running_porcess) &#123;</span><br><span class="line">process.status = INACTIVE_READY;</span><br><span class="line">next_process = ready_queue.pop();</span><br><span class="line"><span class="keyword">if</span> (! suspend_queue.isMember(new_process))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess = new_process;</span><br><span class="line">exec_from(new_process.memory_address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 挂起活动就绪进程，转入静止就绪</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ready_queue.isMember(process))</span><br><span class="line">&#123;</span><br><span class="line">process.status = INACTIVE_READY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 挂起活动阻塞进程，转入静止阻塞</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (block_queue.isMember(process)) &#123;</span><br><span class="line">process.status = INACTIVE_BLOCK;</span><br><span class="line">&#125;</span><br><span class="line">suspend_queue.push(process);</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::activate(struct process) &#123;</span><br><span class="line"><span class="comment">// 如果是就绪进程，转入活动就绪</span></span><br><span class="line"><span class="keyword">if</span> (ready_queue.isMember(process))</span><br><span class="line">&#123;</span><br><span class="line">process.status == ACTIVE_READY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是阻塞进程，转入活动阻塞</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (block_queue.isMember(process))</span><br><span class="line">&#123;</span><br><span class="line">process.status == ACTIVE_BLOCK;</span><br><span class="line">&#125;</span><br><span class="line">suspend_queue.pop(process);</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::terminate(struct process) &#123;</span><br><span class="line"><span class="comment">// 调用该进程的析构函数，并调度下一个进程</span></span><br><span class="line">process.~process();</span><br><span class="line"><span class="keyword">this</span>.next_process = ready_queue.pop();</span><br><span class="line"><span class="keyword">if</span> (! suspend_queue.isMember(new_process))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess = new_process;</span><br><span class="line">exec_from(new_process.memory_address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system::system() &#123;</span><br><span class="line"><span class="keyword">this</span>.next_pid = <span class="keyword">this</span>.start_pid;</span><br><span class="line">ready_queue = <span class="built_in">queue</span>&lt;struct process&gt;();</span><br><span class="line">block_queue = <span class="built_in">queue</span>&lt;struct process&gt;();</span><br><span class="line">suspend_queue = <span class="built_in">queue</span>&lt;struct process&gt;();</span><br><span class="line"><span class="comment">//初始化状态转移队列，并将系统启动时必要的一些状态转移入列</span></span><br><span class="line">operater_queue = <span class="built_in">queue</span>&lt;strct process&gt;(<span class="comment">/*TO-DO: 一些状态转移*/</span>);</span><br><span class="line"><span class="comment">// 创建第一个进程</span></span><br><span class="line"><span class="keyword">while</span>((<span class="keyword">this</span>.running_porcess = <span class="keyword">this</span>.create(<span class="keyword">this</span>.start_pid).pid != ERROR);</span><br><span class="line"><span class="keyword">this</span>.timeval = gettiemofday();</span><br><span class="line"><span class="keyword">this</span>.running_porcess.status = RUNNING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 选择下一个状态转移</span></span><br><span class="line"><span class="keyword">if</span> ( !operater_queue.isEmpty() )</span><br><span class="line">&#123;</span><br><span class="line">operater = operater_queue.pop();</span><br><span class="line"><span class="keyword">switch</span> operater &#123;</span><br><span class="line">CREATE: <span class="keyword">this</span>.create(<span class="keyword">this</span>.running_porcess.pid);<span class="keyword">break</span>;</span><br><span class="line">BLOCK: <span class="keyword">this</span>.block();<span class="keyword">break</span>;</span><br><span class="line">RELEASE: <span class="keyword">this</span>.release();<span class="keyword">break</span>;</span><br><span class="line">SUSPEND: <span class="keyword">this</span>.suspend(process);<span class="keyword">break</span>;</span><br><span class="line">ACTIVATE: <span class="keyword">this</span>.activate();<span class="keyword">break</span>;</span><br><span class="line">TERMINATE: <span class="keyword">this</span>.terminate();<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间片结束，当前进程转移到活动就绪，并调度下一个进程</span></span><br><span class="line"><span class="keyword">if</span> (gettiemofday - <span class="keyword">this</span>.timeval &gt;= <span class="keyword">this</span>.max_time <span class="keyword">or</span> <span class="keyword">this</span>.running_porcess == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess.memory_address = getNowAddress();</span><br><span class="line"><span class="keyword">this</span>.running_porcess.status = ACTIVE_READY;</span><br><span class="line">ready_queue.push(<span class="keyword">this</span>.running_porcess);</span><br><span class="line">next_process = ready_queue.pop();</span><br><span class="line"><span class="keyword">if</span> (! suspend_queue.isMember(new_process))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess = new_process;</span><br><span class="line">exec_from(new_process.memory_address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个作业差点要手写，倒腾了一晚上，肯定还有很多问题，就先贴在这里吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;试根据你自己的理解，采用类C语言设计和描述操作系统关于进程控制块的数据结构、组织方式及管理机制。在此基础上，给出进程的创建、终止、阻塞、唤醒、挂起与激活等函数原型及函数代码。
      
    
    </summary>
    
      <category term="操作系统" scheme="http://wang22ti.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
</feed>
