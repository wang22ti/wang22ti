<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王子泰</title>
  
  <subtitle>哭也欢乐，悲也潇洒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wang22ti.com/"/>
  <updated>2018-06-21T16:01:18.598Z</updated>
  <id>http://wang22ti.com/</id>
  
  <author>
    <name>wang22ti</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《编译原理》实验6-简易编译器前端</title>
    <link href="http://wang22ti.com/2018/06/22/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C6-%E7%AE%80%E6%98%93%E7%BC%96%E8%AF%91%E5%99%A8%E5%89%8D%E7%AB%AF/"/>
    <id>http://wang22ti.com/2018/06/22/《编译原理》实验6-简易编译器前端/</id>
    <published>2018-06-21T16:01:18.000Z</published>
    <updated>2018-06-21T16:01:18.598Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《操作系统》课程设计-基于Linux0.11的多级队列进程调度算法</title>
    <link href="http://wang22ti.com/2018/06/21/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E4%BA%8ELinux0-11%E7%9A%84%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>http://wang22ti.com/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/</id>
    <published>2018-06-20T17:51:03.000Z</published>
    <updated>2018-06-20T17:52:34.801Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="操作系统" scheme="http://wang22ti.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>《系统编程》——linux下C语言编程</title>
    <link href="http://wang22ti.com/2018/06/17/%E3%80%8A%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E3%80%8B%E2%80%94%E2%80%94linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    <id>http://wang22ti.com/2018/06/17/《系统编程》——linux下C语言编程/</id>
    <published>2018-06-17T09:49:26.000Z</published>
    <updated>2018-06-17T09:49:43.441Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="系统编程" scheme="http://wang22ti.com/categories/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>《编译原理》实验5-语法分析器之SLR1分析法python实现</title>
    <link href="http://wang22ti.com/2018/06/09/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C5-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B9%8BSLR1%E5%88%86%E6%9E%90%E6%B3%95python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wang22ti.com/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/</id>
    <published>2018-06-08T16:41:14.000Z</published>
    <updated>2018-06-12T10:30:09.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        本次实验中，我用python3.5实现了一个简单的含有四元运算的赋值语句的编译器前端类SLRAnalyzer，具有以下功能：</p><ol><li><p>根据文法类型，自动生成终结符号集、非终结符号集、first集、follow集、项目集、状态集和分析表，对无法分析的语法报错</p></li><li><p>从txt文件中读取赋值语句，通过词法分析生成对应的二元式文件，对不符合文法的词法报错</p></li><li><p>根据词法分析的二元式序列，对其进行语法与语义分析，分析成功后输出对应的四元式文件</p></li><li><p>根据设定log级别将分析过程与结果输出在终端上</p></li><li><p>良好的扩展性，可以很方便地加入新的词法与语义</p></li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>实验中实现的算符优先文法的语法分析类名为SLRAnalyzer，具体描述信息如下：</p><p><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/1.png" alt=""><br><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/2.png" alt=""><br><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/3.png" alt=""></p><h1 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h1><p>程序主要流程图如下图所示，函数实现的细节详解程序源码的注释。</p><p><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/4.png" alt=""></p><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p>为了保证程序各模块的正确和健壮性，分三个部分进行测试：单独测试语法分析程序、测试不含文件读写的简易编译器前端、测试含有文件读写的建议编译器前端。其中第一部分对应专题5的要求，第二、三部分对应专题6的要求。</p><h2 id="单独测试语法分析程序"><a href="#单独测试语法分析程序" class="headerlink" title="单独测试语法分析程序"></a>单独测试语法分析程序</h2><p>为验证SRL1分析器的健壮性，在不考虑词法与语义分析的情况下对多个文法进行多个样本的测试。</p><p>第一个是实验要求的文法，测试样本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'A'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'V=E'</span>, ],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'E-T'</span>, <span class="string">'T'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'T/F'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'V'</span>: [<span class="string">'i'</span>, ],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'i=i+i'</span>, <span class="string">'i=(i-i)*i/(i+i)'</span>, <span class="string">'i==i*i'</span>]</span><br></pre></td></tr></table></figure><p>在log_level=2的情况下，会在终端输出所有的分析信息如下，细致地输出了所有的重要变量与分析过程结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\45504\AppData\Local\Programs\Python\Python35\python.exe &quot;D:/45504/Documents/MiCloud/Coding/python/编译原理/2-7 SLR分析法_基础版.py&quot;</span><br><span class="line">over sign set:</span><br><span class="line">&#123;&apos;)&apos;, &apos;/&apos;, &apos;=&apos;, &apos;*&apos;, &apos;i&apos;, &apos;-&apos;, &apos;+&apos;, &apos;(&apos;&#125;</span><br><span class="line">follow set:</span><br><span class="line">&#123;&apos;A&apos;: &#123;&apos;#&apos;&#125;,</span><br><span class="line"> &apos;E&apos;: &#123;&apos;+&apos;, &apos;-&apos;, &apos;)&apos;, &apos;#&apos;&#125;,</span><br><span class="line"> &apos;F&apos;: &#123;&apos;/&apos;, &apos;)&apos;, &apos;*&apos;, &apos;-&apos;, &apos;+&apos;, &apos;#&apos;&#125;,</span><br><span class="line"> &apos;T&apos;: &#123;&apos;/&apos;, &apos;)&apos;, &apos;*&apos;, &apos;-&apos;, &apos;+&apos;, &apos;#&apos;&#125;,</span><br><span class="line"> &apos;V&apos;: &#123;&apos;=&apos;&#125;&#125;</span><br><span class="line">items:</span><br><span class="line">&#123;&apos;A&apos;: [&apos;.V=E&apos;, &apos;V.=E&apos;, &apos;V=.E&apos;, &apos;V=E.&apos;],</span><br><span class="line"> &apos;E&apos;: [&apos;.E+T&apos;,</span><br><span class="line">       &apos;E.+T&apos;,</span><br><span class="line">       &apos;E+.T&apos;,</span><br><span class="line">       &apos;E+T.&apos;,</span><br><span class="line">       &apos;.E-T&apos;,</span><br><span class="line">       &apos;E.-T&apos;,</span><br><span class="line">       &apos;E-.T&apos;,</span><br><span class="line">       &apos;E-T.&apos;,</span><br><span class="line">       &apos;.T&apos;,</span><br><span class="line">       &apos;T.&apos;],</span><br><span class="line"> &apos;F&apos;: [&apos;.(E)&apos;, &apos;(.E)&apos;, &apos;(E.)&apos;, &apos;(E).&apos;, &apos;.i&apos;, &apos;i.&apos;],</span><br><span class="line"> &apos;S&apos;: [&apos;.A&apos;, &apos;A.&apos;],</span><br><span class="line"> &apos;T&apos;: [&apos;.T*F&apos;,</span><br><span class="line">       &apos;T.*F&apos;,</span><br><span class="line">       &apos;T*.F&apos;,</span><br><span class="line">       &apos;T*F.&apos;,</span><br><span class="line">       &apos;.T/F&apos;,</span><br><span class="line">       &apos;T./F&apos;,</span><br><span class="line">       &apos;T/.F&apos;,</span><br><span class="line">       &apos;T/F.&apos;,</span><br><span class="line">       &apos;.F&apos;,</span><br><span class="line">       &apos;F.&apos;],</span><br><span class="line"> &apos;V&apos;: [&apos;.i&apos;, &apos;i.&apos;]&#125;</span><br><span class="line">stauts list:</span><br><span class="line">[&#123;(&apos;V&apos;, &apos;.i&apos;), (&apos;S&apos;, &apos;.A&apos;), (&apos;A&apos;, &apos;.V=E&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;S&apos;, &apos;A.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;A&apos;, &apos;V.=E&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;V&apos;, &apos;i.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;A&apos;, &apos;V=.E&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.E+T&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.E-T&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.T&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.(E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.i&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T*F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T/F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;F.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T.*F&apos;), (&apos;E&apos;, &apos;T.&apos;), (&apos;T&apos;, &apos;T./F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;E.+T&apos;), (&apos;A&apos;, &apos;V=E.&apos;), (&apos;E&apos;, &apos;E.-T&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;.E+T&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.E-T&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.T&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;(.E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.(E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.i&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T*F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T/F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;F&apos;, &apos;i.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;F&apos;, &apos;.i&apos;), (&apos;T&apos;, &apos;T/.F&apos;), (&apos;F&apos;, &apos;.(E)&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;F&apos;, &apos;.i&apos;), (&apos;F&apos;, &apos;.(E)&apos;), (&apos;T&apos;, &apos;T*.F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;E+.T&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.(E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.i&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T*F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T/F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;E-.T&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.(E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.i&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T*F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T/F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;E.+T&apos;), (&apos;F&apos;, &apos;(E.)&apos;), (&apos;E&apos;, &apos;E.-T&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T/F.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T*F.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T.*F&apos;), (&apos;T&apos;, &apos;T./F&apos;), (&apos;E&apos;, &apos;E+T.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T.*F&apos;), (&apos;E&apos;, &apos;E-T.&apos;), (&apos;T&apos;, &apos;T./F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;F&apos;, &apos;(E).&apos;)&#125;]</span><br><span class="line">analyse table:</span><br><span class="line">&#123;0: &#123;&apos;A&apos;: [1, (&apos;S&apos;, &apos;.A&apos;)], &apos;V&apos;: [2, (&apos;A&apos;, &apos;.V=E&apos;)], &apos;i&apos;: [3, (&apos;V&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 1: &#123;&apos;#&apos;: [&apos;acc&apos;]&#125;,</span><br><span class="line"> 2: &#123;&apos;=&apos;: [4, (&apos;A&apos;, &apos;V.=E&apos;)]&#125;,</span><br><span class="line"> 3: &#123;&apos;=&apos;: [0, &apos;r&apos;, (&apos;V&apos;, &apos;i&apos;)]&#125;,</span><br><span class="line"> 4: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)],</span><br><span class="line">     &apos;E&apos;: [7, (&apos;E&apos;, &apos;.E+T&apos;), (&apos;A&apos;, &apos;V=.E&apos;), (&apos;E&apos;, &apos;.E-T&apos;)],</span><br><span class="line">     &apos;F&apos;: [5, (&apos;T&apos;, &apos;.F&apos;)],</span><br><span class="line">     &apos;T&apos;: [6, (&apos;T&apos;, &apos;.T/F&apos;), (&apos;E&apos;, &apos;.T&apos;), (&apos;T&apos;, &apos;.T*F&apos;)],</span><br><span class="line">     &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 5: &#123;&apos;#&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;)&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;*&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;+&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;-&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;/&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)]&#125;,</span><br><span class="line"> 6: &#123;&apos;#&apos;: [9, &apos;r&apos;, (&apos;E&apos;, &apos;T&apos;)],</span><br><span class="line">     &apos;)&apos;: [9, &apos;r&apos;, (&apos;E&apos;, &apos;T&apos;)],</span><br><span class="line">     &apos;*&apos;: [11, (&apos;T&apos;, &apos;T.*F&apos;)],</span><br><span class="line">     &apos;+&apos;: [9, &apos;r&apos;, (&apos;E&apos;, &apos;T&apos;)],</span><br><span class="line">     &apos;-&apos;: [9, &apos;r&apos;, (&apos;E&apos;, &apos;T&apos;)],</span><br><span class="line">     &apos;/&apos;: [10, (&apos;T&apos;, &apos;T./F&apos;)]&#125;,</span><br><span class="line"> 7: &#123;&apos;#&apos;: [3, &apos;r&apos;, (&apos;A&apos;, &apos;V=E&apos;)],</span><br><span class="line">     &apos;+&apos;: [12, (&apos;E&apos;, &apos;E.+T&apos;)],</span><br><span class="line">     &apos;-&apos;: [13, (&apos;E&apos;, &apos;E.-T&apos;)]&#125;,</span><br><span class="line"> 8: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)],</span><br><span class="line">     &apos;E&apos;: [14, (&apos;E&apos;, &apos;.E+T&apos;), (&apos;F&apos;, &apos;(.E)&apos;), (&apos;E&apos;, &apos;.E-T&apos;)],</span><br><span class="line">     &apos;F&apos;: [5, (&apos;T&apos;, &apos;.F&apos;)],</span><br><span class="line">     &apos;T&apos;: [6, (&apos;T&apos;, &apos;.T/F&apos;), (&apos;E&apos;, &apos;.T&apos;), (&apos;T&apos;, &apos;.T*F&apos;)],</span><br><span class="line">     &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 9: &#123;&apos;#&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;)&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;*&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;+&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;-&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;/&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)]&#125;,</span><br><span class="line"> 10: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)], &apos;F&apos;: [15, (&apos;T&apos;, &apos;T/.F&apos;)], &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 11: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)], &apos;F&apos;: [16, (&apos;T&apos;, &apos;T*.F&apos;)], &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 12: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)],</span><br><span class="line">      &apos;F&apos;: [5, (&apos;T&apos;, &apos;.F&apos;)],</span><br><span class="line">      &apos;T&apos;: [17, (&apos;T&apos;, &apos;.T/F&apos;), (&apos;E&apos;, &apos;E+.T&apos;), (&apos;T&apos;, &apos;.T*F&apos;)],</span><br><span class="line">      &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 13: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)],</span><br><span class="line">      &apos;F&apos;: [5, (&apos;T&apos;, &apos;.F&apos;)],</span><br><span class="line">      &apos;T&apos;: [18, (&apos;T&apos;, &apos;.T/F&apos;), (&apos;E&apos;, &apos;E-.T&apos;), (&apos;T&apos;, &apos;.T*F&apos;)],</span><br><span class="line">      &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 14: &#123;&apos;)&apos;: [19, (&apos;F&apos;, &apos;(E.)&apos;)],</span><br><span class="line">      &apos;+&apos;: [12, (&apos;E&apos;, &apos;E.+T&apos;)],</span><br><span class="line">      &apos;-&apos;: [13, (&apos;E&apos;, &apos;E.-T&apos;)]&#125;,</span><br><span class="line"> 15: &#123;&apos;#&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;)&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;*&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;+&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;-&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;/&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)]&#125;,</span><br><span class="line"> 16: &#123;&apos;#&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;)&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;*&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;+&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;-&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;/&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)]&#125;,</span><br><span class="line"> 17: &#123;&apos;#&apos;: [7, &apos;r&apos;, (&apos;E&apos;, &apos;E+T&apos;)],</span><br><span class="line">      &apos;)&apos;: [7, &apos;r&apos;, (&apos;E&apos;, &apos;E+T&apos;)],</span><br><span class="line">      &apos;*&apos;: [11, (&apos;T&apos;, &apos;T.*F&apos;)],</span><br><span class="line">      &apos;+&apos;: [7, &apos;r&apos;, (&apos;E&apos;, &apos;E+T&apos;)],</span><br><span class="line">      &apos;-&apos;: [7, &apos;r&apos;, (&apos;E&apos;, &apos;E+T&apos;)],</span><br><span class="line">      &apos;/&apos;: [10, (&apos;T&apos;, &apos;T./F&apos;)]&#125;,</span><br><span class="line"> 18: &#123;&apos;#&apos;: [8, &apos;r&apos;, (&apos;E&apos;, &apos;E-T&apos;)],</span><br><span class="line">      &apos;)&apos;: [8, &apos;r&apos;, (&apos;E&apos;, &apos;E-T&apos;)],</span><br><span class="line">      &apos;*&apos;: [11, (&apos;T&apos;, &apos;T.*F&apos;)],</span><br><span class="line">      &apos;+&apos;: [8, &apos;r&apos;, (&apos;E&apos;, &apos;E-T&apos;)],</span><br><span class="line">      &apos;-&apos;: [8, &apos;r&apos;, (&apos;E&apos;, &apos;E-T&apos;)],</span><br><span class="line">      &apos;/&apos;: [10, (&apos;T&apos;, &apos;T./F&apos;)]&#125;,</span><br><span class="line"> 19: &#123;&apos;#&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;)&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;*&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;+&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;-&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;/&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)]&#125;&#125;</span><br><span class="line">slr1</span><br><span class="line">analysing: i=i+i</span><br><span class="line">[0] [&apos;#&apos;]</span><br><span class="line">[0, 3] [&apos;#&apos;, &apos;i&apos;] V i</span><br><span class="line">[0] [&apos;#&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;]</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;]</span><br><span class="line">[0, 2, 4, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] F i</span><br><span class="line">[0, 2, 4, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] T F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] E T</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] E T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] E T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 7, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;]</span><br><span class="line">[0, 2, 4, 7, 12, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 7, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;] F i</span><br><span class="line">[0, 2, 4, 7, 12, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 7, 12, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 7, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;] T F</span><br><span class="line">[0, 2, 4, 7, 12, 17] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 7, 12, 17] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;T&apos;] E E+T</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] E E+T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] E E+T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] A V=E</span><br><span class="line">[0] [&apos;#&apos;] A V=E</span><br><span class="line">[0, 1] [&apos;#&apos;, &apos;A&apos;] A V=E</span><br><span class="line">ok   i=i+i</span><br><span class="line">analysing: i=(i-i)*i/(i+i)</span><br><span class="line">[0] [&apos;#&apos;]</span><br><span class="line">[0, 3] [&apos;#&apos;, &apos;i&apos;] V i</span><br><span class="line">[0] [&apos;#&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;]</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;]</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;]</span><br><span class="line">[0, 2, 4, 8, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;T&apos;] E T</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;] E T</span><br><span class="line">[0, 2, 4, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;] E T</span><br><span class="line">[0, 2, 4, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 8, 14, 13] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;]</span><br><span class="line">[0, 2, 4, 8, 14, 13, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 14, 13] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 14, 13, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 14, 13, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 14, 13] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 14, 13, 18] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 14, 13, 18] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;T&apos;] E E-T</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;] E E-T</span><br><span class="line">[0, 2, 4, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;] E E-T</span><br><span class="line">[0, 2, 4, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 8, 14, 19] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;)&apos;] F (E)</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] F (E)</span><br><span class="line">[0, 2, 4, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;F&apos;] F (E)</span><br><span class="line">[0, 2, 4, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] T F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;]</span><br><span class="line">[0, 2, 4, 6, 11] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;]</span><br><span class="line">[0, 2, 4, 6, 11, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 11] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 11, 16] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 11, 16] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;, &apos;F&apos;] T T*F</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] T T*F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] T T*F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;]</span><br><span class="line">[0, 2, 4, 6, 10] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;T&apos;] E T</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;] E T</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;] E T</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 17] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 17] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;T&apos;] E E+T</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;] E E+T</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;] E E+T</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 19] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;)&apos;] F (E)</span><br><span class="line">[0, 2, 4, 6, 10] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;] F (E)</span><br><span class="line">[0, 2, 4, 6, 10, 15] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;F&apos;] F (E)</span><br><span class="line">[0, 2, 4, 6, 10, 15] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;F&apos;] T T/F</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] T T/F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] T T/F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] E T</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] E T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] E T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] A V=E</span><br><span class="line">[0] [&apos;#&apos;] A V=E</span><br><span class="line">[0, 1] [&apos;#&apos;, &apos;A&apos;] A V=E</span><br><span class="line">ok   i=(i-i)*i/(i+i)</span><br><span class="line">analysing: i==i*i</span><br><span class="line">[0] [&apos;#&apos;]</span><br><span class="line">[0, 3] [&apos;#&apos;, &apos;i&apos;] V i</span><br><span class="line">[0] [&apos;#&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;]</span><br><span class="line">fail i==i*i</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>当然，这个结果太过冗余，下面均将给出log_level=0情况下的输出，同时过滤终端输出的程序信息： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">slr1</span><br><span class="line">analysing: i=i+i</span><br><span class="line">ok   i=i+i</span><br><span class="line">analysing: i=(i-i)*i/(i+i)</span><br><span class="line">ok   i=(i-i)*i/(i+i)</span><br><span class="line">analysing: i==i*i</span><br><span class="line">fail i==i*i</span><br></pre></td></tr></table></figure><p>可以看出，程序成功地分析出这是一个slr1文法，并对相应的输入串进行了正确的分析。需要指出的是，由于不合法终结符号的判断是在词法阶段完成，所以语法分析中并没有对非法输出，比如’@’进行处理。</p><p>第二个是非lr0或slr1文法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'E'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'Eab'</span>, <span class="string">'bR'</span>],</span><br><span class="line">    <span class="string">'R'</span>: [<span class="string">'E'</span>, <span class="string">'a'</span>],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'ba'</span>, <span class="string">'aab'</span>]</span><br></pre></td></tr></table></figure><p>程序并没有对输入串进行分析，而是直接报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unsupported language!</span><br></pre></td></tr></table></figure><p>第三个是教材示例的srl1文法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'L'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'L'</span>:[<span class="string">'E,L'</span>, <span class="string">'E'</span>],</span><br><span class="line">    <span class="string">'E'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'a,b,a'</span>, <span class="string">'aa'</span>, <span class="string">'b,a,a,b'</span>]</span><br></pre></td></tr></table></figure><p>输出和实验要求的文法一致，符合预期： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">slr1</span><br><span class="line">analysing: a,b,a</span><br><span class="line">ok   a,b,a</span><br><span class="line">analysing: aa</span><br><span class="line">fail aa</span><br><span class="line">analysing: b,a,a,b</span><br><span class="line">ok   b,a,a,b</span><br></pre></td></tr></table></figure><p>第四个是一个lr0文法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'E'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'aEb'</span>, <span class="string">'aEc'</span>, <span class="string">'ab'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'ab'</span>, <span class="string">'aab'</span>, <span class="string">'aabb'</span>, <span class="string">'aabc'</span>]</span><br></pre></td></tr></table></figure><p>当然，结果也符合预期： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lr0</span><br><span class="line">analysing: ab</span><br><span class="line">ok   ab</span><br><span class="line">analysing: aab</span><br><span class="line">fail aab</span><br><span class="line">analysing: aabb</span><br><span class="line">ok   aabb</span><br><span class="line">analysing: aabc</span><br><span class="line">ok   aabc</span><br></pre></td></tr></table></figure><p>其实我还对其他的一些文法进行了测试，均符合预期，以下仅给出通过测试的文法及对应的输入串： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'B'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'B'</span>:[<span class="string">'bD;Te'</span>,],</span><br><span class="line">    <span class="string">'D'</span>: [<span class="string">'D;d'</span>,<span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'s;T'</span>, <span class="string">'s'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'bd;se'</span>, <span class="string">'bd;s;se'</span>]</span><br><span class="line"></span><br><span class="line">start = <span class="string">'B'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'B'</span>:[<span class="string">'bD;Te'</span>,],</span><br><span class="line">    <span class="string">'D'</span>: [<span class="string">'D;d'</span>,<span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'s;T'</span>, <span class="string">'s'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'bd;se'</span>, <span class="string">'bd;s;se'</span>]start = <span class="string">'E'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'aA'</span>, <span class="string">'bB'</span>],</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'cA'</span>, <span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'cB'</span>, <span class="string">'d'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'ad'</span>, <span class="string">'bcd'</span>, <span class="string">'ab'</span>]</span><br></pre></td></tr></table></figure><h2 id="测试不含文件读写的简易编译器前端"><a href="#测试不含文件读写的简易编译器前端" class="headerlink" title="测试不含文件读写的简易编译器前端"></a>测试不含文件读写的简易编译器前端</h2><p>因为需要加入词法与语义分析，尤其是语义分析因各文法而异，所以仅仅测试实验中要求的文法——含有四则运算和括号的赋值语句的测试。先在不含文件读写的情况下测试如下输入串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'A'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'V=E'</span>, ],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'E-T'</span>, <span class="string">'T'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'T/F'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'V'</span>: [<span class="string">'i'</span>, ],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'i1 = (i2+(i32-n)*m)/mm'</span>, <span class="string">'w:=w+1'</span>, <span class="string">'w::ww'</span>, <span class="string">'w@'</span>, <span class="string">'ww==www+11'</span>, ]</span><br></pre></td></tr></table></figure><p>其中，’i1 = (i2+(i32-n)*m)/mm’是对所有产生式的测试，’w:=w+1’和’w::ww’针对的是词法分析中的二字符终结符，’w@’针对的是非法输入符号，’ww==www+11’针对的是非法语法。同样由于冗余的问题，以下给出log_level=0情况下的输出： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">slr1</span><br><span class="line">analysing: i1 = (i2+(i32-n)*m)/mm</span><br><span class="line">[(&apos;-&apos;, &apos;i32&apos;, &apos;n&apos;, &apos;temp0&apos;),</span><br><span class="line"> (&apos;*&apos;, &apos;temp0&apos;, &apos;m&apos;, &apos;temp1&apos;),</span><br><span class="line"> (&apos;+&apos;, &apos;i2&apos;, &apos;temp1&apos;, &apos;temp2&apos;),</span><br><span class="line"> (&apos;/&apos;, &apos;temp2&apos;, &apos;mm&apos;, &apos;temp3&apos;),</span><br><span class="line"> (&apos;=&apos;, &apos;temp3&apos;, &apos;&apos;, &apos;i1&apos;)]</span><br><span class="line">ok    i1 = (i2+(i32-n)*m)/mm</span><br><span class="line"></span><br><span class="line">analysing: w:=w+1</span><br><span class="line">[(&apos;+&apos;, &apos;w&apos;, &apos;1&apos;, &apos;temp0&apos;), (&apos;=&apos;, &apos;temp0&apos;, &apos;&apos;, &apos;w&apos;)]</span><br><span class="line">ok    w:=w+1</span><br><span class="line"></span><br><span class="line">analysing: w::ww</span><br><span class="line">error index 2: unkown character &quot;:&quot;</span><br><span class="line"></span><br><span class="line">analysing: w@</span><br><span class="line">error index 2: unkown character &quot;@&quot;</span><br><span class="line"></span><br><span class="line">analysing: ww==www+11</span><br><span class="line">fail  ww==www+11</span><br></pre></td></tr></table></figure><p>可见，程序成功分析出这个一个slr1文法，并对输入串进行了正确的分析。对于前两个合法测试，正确地输出了四元式序列与分析结果；对于非法词法，正确地输出了其索引；对于非法语法，正确地输出了分析结果。</p><h2 id="测试含有文件读写的简易编译器前端"><a href="#测试含有文件读写的简易编译器前端" class="headerlink" title="测试含有文件读写的简易编译器前端"></a>测试含有文件读写的简易编译器前端</h2><p>​        在上述程序的基础上，进一步加入文件读写，输入串存储在文件中，分析得到的二元式序列和四元式序列会输出到格式为two和four的文件中。测试结果为如下图所示，完全符合预期。</p><p><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/5.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        由于有此前词法分析器的积累，同时对人工生成分析表的过程有较好的掌握，本次实验在相关领域比较顺利。遇到的困难及解决方法主要包括：分析表数据结构的设计，通过一步一步改造结构，从而实现与其他变量的；closure函数的实现，通过使用递归实现；语义分析即四元式序列的生成，通过使用栈来解决。</p><p>​        本程序的优点包括：很好地实现了实验要求的基本功能，在分析失败的时候输出对应的出错信息，根据日志等级输出日志信息，并再次基础上又一定的扩充；良好的用户接口，只需要输入起始符号、产生式就可以自动生成必需的终结符号集、非终结符号集、follow集、项目集、状态集和分析表，并判断文法类型，分析文法时只需要输入存储输入串的文件名即可。</p><p>​        本程序还存在可以优化的地方，主要包括：进一步扩充词法分析、文法分析、语义分析的内容，从而实现更强大的编译器。</p><p>​        本次实验中，通过实现简易编译器前端，加深了我对于lr0、slr1文法以及四元式的理解，提高了对问题的抽象与分析能力，为实现更强大编译器打下了良好的基础。</p><h1 id="附录：程序源码"><a href="#附录：程序源码" class="headerlink" title="附录：程序源码"></a>附录：程序源码</h1><p>​        一下给出含有文件读写的简易编译器前端和不含词法语义分析的SRL语法分析程序。其中简易编译器前端有一定的代码优化和较为详细的注释，SRL语法分析器仅供测试使用。</p><h2 id="专题6-简易编译器前端"><a href="#专题6-简易编译器前端" class="headerlink" title="专题6 简易编译器前端"></a>专题6 简易编译器前端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SLRAnalyzer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, productions, new_start=<span class="string">'S'</span>, point=<span class="string">'.'</span>, sharp=<span class="string">'#'</span>,acc=<span class="string">'acc'</span>,log_level=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 接受参数</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.new_start = new_start</span><br><span class="line">        self.productions = productions</span><br><span class="line">        self.nonterminals = productions.keys()</span><br><span class="line">        self.log_level = log_level</span><br><span class="line">        self.point = point</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法终结符号</span></span><br><span class="line">        self.overs = set()</span><br><span class="line">        self.get_overs()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法follow集</span></span><br><span class="line">        self.sharp = sharp</span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法项目</span></span><br><span class="line">        self.items = &#123;key: list() <span class="keyword">for</span> key <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.get_items()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法的状态和分析表</span></span><br><span class="line">        self.status_list = [self.closure(&#123;(self.new_start, self.point + self.start)&#125;), ]</span><br><span class="line">        self.analyse_table = dict()</span><br><span class="line">        self.acc = acc</span><br><span class="line">        self.get_analyse_table()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断文法类型</span></span><br><span class="line">        self.language_type = self.get_language_type()</span><br><span class="line">        <span class="keyword">if</span> self.language_type <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">            exit(<span class="string">'unsupported language!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求解文法的非终结符号集，即产生式右部不是非终结符号的符号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_overs</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                    <span class="keyword">if</span> sign <span class="keyword">not</span> <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                        self.overs.add(sign)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'over sign set:'</span>)</span><br><span class="line">            pprint(self.overs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first集和follow集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮，产生式右部首字符为终结符号</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_first = deepcopy(self.first)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                new_dict = &#123;&#125;</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                        new_dict = self.first[nontermainal]</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                        <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            new_dict.update(&#123;right[<span class="number">0</span>]: right&#125;)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                                <span class="keyword">if</span> sign <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                                    first_ = self.first[sign]</span><br><span class="line">                                    new_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                                    <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        new_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">                self.first[nontermainal].update(new_dict)</span><br><span class="line">            <span class="keyword">if</span> old_first == self.first:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[self.start].add(self.sharp)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = deepcopy(self.follow)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.overs:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_set = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_set_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_set_without_null</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_set:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'follow set:'</span>)</span><br><span class="line">            pprint(self.follow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_items</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items[self.new_start] = [self.point + self.start, self.start + self.point]</span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    self.items[nonterminal].append(right[:i] + self.point + right[i:])</span><br><span class="line">                self.items[nonterminal].append(right + self.point)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'items:'</span>)</span><br><span class="line">            pprint(self.items)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归求解输入项目集合的闭包</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closure</span><span class="params">(self, production_set)</span>:</span></span><br><span class="line">        ret = production_set.copy()</span><br><span class="line">        <span class="comment"># 对于每一个项目，找到分隔符，如果后面有非终结符号，执行闭包操作</span></span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> self.items[right[i + <span class="number">1</span>]]:</span><br><span class="line">                    <span class="keyword">if</span> self.point == item[<span class="number">0</span>]:</span><br><span class="line">                        ret.add((right[i + <span class="number">1</span>], item))</span><br><span class="line">        <span class="keyword">if</span> ret == production_set:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.closure(ret)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现go函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self, production_set, sign)</span>:</span></span><br><span class="line">        new_production_set = set()</span><br><span class="line">        <span class="comment"># 找到接受sign的项目，将分隔符后移一位</span></span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] == sign:</span><br><span class="line">                new_right = list(right)</span><br><span class="line">                temp = new_right[i]</span><br><span class="line">                new_right[i] = new_right[i + <span class="number">1</span>]</span><br><span class="line">                new_right[i + <span class="number">1</span>] = temp</span><br><span class="line">                new_production_set.add((production[<span class="number">0</span>], <span class="string">''</span>.join(new_right)))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 返回新的状态的闭包</span></span><br><span class="line">        <span class="keyword">return</span> self.closure(new_production_set)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟人求解状态集的过程，求解项目集与分析表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analyse_table</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># last_index指示现有状态集个数</span></span><br><span class="line">        <span class="comment"># index是正在分析的状态的索引</span></span><br><span class="line">        last_index = <span class="number">0</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 首先得到该状态接受的符号及其对应项目</span></span><br><span class="line">            receive_sign_dict = &#123;&#125;</span><br><span class="line">            <span class="comment"># 遍历状态集中的每一个项目</span></span><br><span class="line">            <span class="keyword">for</span> (left, right) <span class="keyword">in</span> self.status_list[index]:</span><br><span class="line">                <span class="comment"># 找到分隔符</span></span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 如果分隔符不在末尾，将则其后的符号为接受符号</span></span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right):</span><br><span class="line">                    <span class="keyword">if</span> right[i + <span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> receive_sign_dict.keys():</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]] = &#123;(left, right)&#125;</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]].add((left, right))</span><br><span class="line">                <span class="comment"># 如果分隔符在末尾</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果左部为拓广文法起始符号，则记录acc</span></span><br><span class="line">                    <span class="keyword">if</span> left == self.new_start:</span><br><span class="line">                        self.analyse_table[index] = &#123;self.sharp: [self.acc, ]&#125;</span><br><span class="line">                    <span class="comment"># 否则找到对应的产生式</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        production_index = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">for</span> left_ <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                            <span class="keyword">for</span> right_ <span class="keyword">in</span> self.productions[left_]:</span><br><span class="line">                                <span class="keyword">if</span> (left, right.replace(self.point, <span class="string">''</span>)) == (left_, right_):</span><br><span class="line">                                    <span class="comment"># 根据左部的follow集将r填入分析表</span></span><br><span class="line">                                    self.analyse_table[index] = &#123;</span><br><span class="line">                                        over: [production_index, <span class="string">'r'</span>, (left_, right_)]</span><br><span class="line">                                        <span class="keyword">for</span> over <span class="keyword">in</span> (self.follow[left_])</span><br><span class="line">                                    &#125;</span><br><span class="line">                                production_index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 遍历接受符号</span></span><br><span class="line">            <span class="keyword">for</span> sign, production_set <span class="keyword">in</span> receive_sign_dict.items():</span><br><span class="line">                <span class="comment"># 用函数go求出新的状态</span></span><br><span class="line">                new_status = self.go(production_set, sign)</span><br><span class="line">                new_action = []</span><br><span class="line">                <span class="comment"># 如果新状态没有和已有的状态重复，讲起加入状态列表</span></span><br><span class="line">                <span class="keyword">if</span> new_status <span class="keyword">not</span> <span class="keyword">in</span> self.status_list:</span><br><span class="line">                    self.status_list.append(new_status)</span><br><span class="line">                    last_index += <span class="number">1</span></span><br><span class="line">                    new_action.append(last_index)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    new_action.append(self.status_list.index(new_status))</span><br><span class="line">                <span class="comment"># 更新分析表</span></span><br><span class="line">                <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">                    new_action.append(production)</span><br><span class="line">                <span class="keyword">if</span> index <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table.keys():</span><br><span class="line">                    self.analyse_table[index] = &#123;sign: new_action&#125;</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.analyse_table[index].update(&#123;sign: new_action&#125;)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果没有状态可以分析，结束循环</span></span><br><span class="line">            <span class="keyword">if</span> index &gt; last_index:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'stauts list:'</span>)</span><br><span class="line">            pprint(self.status_list)</span><br><span class="line">            print(<span class="string">'analyse table:'</span>)</span><br><span class="line">            pprint(self.analyse_table)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过项目集分析文法类型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_language_type</span><span class="params">(self)</span>:</span></span><br><span class="line">        ret = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> status <span class="keyword">in</span> self.status_list:</span><br><span class="line">            guiyue_items = list()</span><br><span class="line">            yijin_items = list()</span><br><span class="line">            <span class="comment"># 遍历一个状态中的所有项目</span></span><br><span class="line">            <span class="keyword">for</span> left, right <span class="keyword">in</span> status:</span><br><span class="line">                <span class="comment"># 找到分隔符号，记录归约项目的follow集和移进项目的终结符号</span></span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> == len(right):</span><br><span class="line">                    <span class="keyword">if</span> right[i - <span class="number">1</span>] != self.new_start <span class="keyword">and</span> left != self.new_start:</span><br><span class="line">                        guiyue_items.append(self.follow[left])</span><br><span class="line">                <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    yijin_items.append(right[i + <span class="number">1</span>])</span><br><span class="line">            <span class="comment"># 如果有归约归约冲突或移进归约冲突</span></span><br><span class="line">            <span class="keyword">if</span> len(guiyue_items) &gt;= <span class="number">2</span> <span class="keyword">or</span> len(guiyue_items) &gt; <span class="number">0</span> <span class="keyword">and</span> len(yijin_items) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 至少为slr1文法，置ret=0</span></span><br><span class="line">                ret = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 判断能否用follow集解决冲突</span></span><br><span class="line">                <span class="comment"># 不能解决，返回-1</span></span><br><span class="line">                jihe = set()</span><br><span class="line">                <span class="keyword">for</span> nonterminal <span class="keyword">in</span> guiyue_items:</span><br><span class="line">                    <span class="keyword">if</span> nonterminal <span class="keyword">in</span> jihe:</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        jihe |= nonterminal</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> yijin_items:</span><br><span class="line">                    <span class="keyword">if</span> sign <span class="keyword">in</span> jihe:</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        jihe.add(sign)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 词法分析</span></span><br><span class="line">    <span class="comment"># 检查是否为保留字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.token <span class="keyword">in</span> self.reserved <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录tag与string，清空token</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(self, c=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.tag_list.append(self.token <span class="keyword">if</span> c == <span class="string">''</span> <span class="keyword">else</span> c)</span><br><span class="line">        self.string_list.append(self.token)</span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取下一个输出符号，没有返回False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_char</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index == len(self.string):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        self.ch = self.string[self.index]</span><br><span class="line">        self.token += self.ch</span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.ch</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 回退一个符号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retract</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.index = max(self.index - <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.ch = self.string[max(self.index - <span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line">        self.token = self.token[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是字母，循环调用get_char，最后调用out</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alpha</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.index &lt; len(self.string) <span class="keyword">and</span> self.string[self.index].isalnum() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.out(<span class="string">''</span> <span class="keyword">if</span> self.lookup() <span class="keyword">else</span> <span class="string">'i'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是数字，循环调用get_char，最后调用out</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">digit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.index &lt; len(self.string) <span class="keyword">and</span> self.string[self.index].isdigit() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.out(<span class="string">'i'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是单符号终结符，直接调用out</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是双符号终结符，调用get_char后决定是否回退</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(self)</span>:</span></span><br><span class="line">        now_ch = self.ch</span><br><span class="line">        <span class="keyword">if</span> self.get_char() <span class="keyword">not</span> <span class="keyword">in</span> self.two_next[now_ch]:</span><br><span class="line">            self.retract()</span><br><span class="line">        <span class="keyword">if</span> self.token <span class="keyword">in</span> self.token_to_category:</span><br><span class="line">            self.out(self.token_to_category[self.token])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    switch = &#123;</span><br><span class="line">        <span class="string">'alpha'</span>: alpha,</span><br><span class="line">        <span class="string">'digit'</span>: digit,</span><br><span class="line">        <span class="string">'one'</span>: one,</span><br><span class="line">        <span class="string">'two'</span>: two,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># lr语法分析器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_lr</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化输入串列表、状态栈、符号栈</span></span><br><span class="line">        self.tag_list += self.sharp</span><br><span class="line">        string_index = <span class="number">0</span></span><br><span class="line">        status_stack = [<span class="number">0</span>, ]</span><br><span class="line">        sign_stack = [self.sharp, ]</span><br><span class="line">        <span class="comment"># 初始化语义分析的四元式列表、分析栈</span></span><br><span class="line">        siyuanshi_list = []</span><br><span class="line">        temp_stack = []</span><br><span class="line">        temp_index = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 不停分析直到接受</span></span><br><span class="line">        <span class="keyword">while</span> self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">0</span>] != self.acc:</span><br><span class="line">            <span class="comment"># 如果不是r，则为s</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'r'</span> != self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack)</span><br><span class="line">                <span class="comment"># push()</span></span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(self.tag_list[string_index])</span><br><span class="line">                <span class="comment"># advance()</span></span><br><span class="line">                string_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 为r，取出对应产生式的左部与右部</span></span><br><span class="line">                left = self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                right = self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">                <span class="comment"># 语义分析，四元式</span></span><br><span class="line">                <span class="keyword">if</span> any([i <span class="keyword">in</span> right <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>]]):</span><br><span class="line">                    op = right[<span class="number">1</span>]</span><br><span class="line">                    one = temp_stack[<span class="number">-2</span>] <span class="keyword">if</span> type(temp_stack[<span class="number">-2</span>]) == str <span class="keyword">else</span> <span class="string">'temp%d'</span> % temp_stack[<span class="number">-2</span>]</span><br><span class="line">                    two = temp_stack[<span class="number">-1</span>] <span class="keyword">if</span> type(temp_stack[<span class="number">-1</span>]) == str <span class="keyword">else</span> <span class="string">'temp%d'</span> % temp_stack[<span class="number">-1</span>]</span><br><span class="line">                    result = <span class="string">'temp%d'</span> % temp_index</span><br><span class="line">                    siyuanshi_list.append((op, one, two, result))</span><br><span class="line">                    temp_stack.pop()</span><br><span class="line">                    temp_stack.pop()</span><br><span class="line">                    temp_stack.append(temp_index)</span><br><span class="line">                    temp_index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">'='</span> <span class="keyword">in</span> right:</span><br><span class="line">                    op = right[<span class="number">1</span>]</span><br><span class="line">                    one = temp_stack[<span class="number">-1</span>] <span class="keyword">if</span> type(temp_stack[<span class="number">-1</span>]) == str <span class="keyword">else</span> <span class="string">'temp%d'</span> % temp_stack[<span class="number">-1</span>]</span><br><span class="line">                    two = <span class="string">'_'</span></span><br><span class="line">                    result = temp_stack[<span class="number">-2</span>] <span class="keyword">if</span> type(temp_stack[<span class="number">-2</span>]) == str <span class="keyword">else</span> <span class="string">'temp%d'</span> % temp_stack[<span class="number">-2</span>]</span><br><span class="line">                    siyuanshi_list.append((op, one, two, result))</span><br><span class="line">                    temp_stack.pop()</span><br><span class="line">                    temp_stack.append(temp_index)</span><br><span class="line">                    temp_index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> right == <span class="string">'i'</span>:</span><br><span class="line">                    temp_stack.append(self.string_list[string_index - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 语义分析结束，pop(第i个产生式右部文法符号的个数)</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    sign_stack.pop()</span><br><span class="line">                    status_stack.pop()</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">                <span class="comment"># push(GOTO[新的栈顶状态][第i个产生式的左部])</span></span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][left][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(left)</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">            <span class="comment"># error，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> self.tag_list[string_index] <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table[status_stack[<span class="number">-1</span>]].keys():</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            pprint(siyuanshi_list)</span><br><span class="line">        <span class="keyword">with</span> open(self.file_name + <span class="string">'.four'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> siyuanshi <span class="keyword">in</span> siyuanshi_list:</span><br><span class="line">                f.write(<span class="string">'%s %s %s %s\n'</span> % (siyuanshi[<span class="number">0</span>], siyuanshi[<span class="number">1</span>],siyuanshi[<span class="number">2</span>],siyuanshi[<span class="number">3</span>],))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, file)</span>:</span></span><br><span class="line">        <span class="comment"># 从文件中读取输入串</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file_name = os.path.basename(file)</span><br><span class="line">            self.file_name = file_name[:file_name.index(<span class="string">'.'</span>)]</span><br><span class="line">            <span class="keyword">with</span> open(file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                raw_string = f.read()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="comment"># 先对输入串进行词法分析</span></span><br><span class="line">        self.string = raw_string.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.ch = <span class="string">''</span></span><br><span class="line">        self.one_op = [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'='</span>, <span class="string">'/'</span>]</span><br><span class="line">        self.reserved = []</span><br><span class="line">        self.tag_list = []</span><br><span class="line">        self.string_list = []</span><br><span class="line">        self.two_next = &#123;</span><br><span class="line">            <span class="string">':'</span>: &#123;<span class="string">'='</span>, &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        self.token_to_category = &#123;<span class="string">':='</span>: <span class="string">'='</span>&#125;</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'analysing: '</span> + raw_string)</span><br><span class="line">        <span class="keyword">while</span> self.get_char():</span><br><span class="line">            <span class="keyword">if</span> self.ch.isalpha():</span><br><span class="line">                case = <span class="string">'alpha'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch.isdigit():</span><br><span class="line">                case = <span class="string">'digit'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.one_op:</span><br><span class="line">                case = <span class="string">'one'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.two_next.keys():</span><br><span class="line">                case = <span class="string">'two'</span></span><br><span class="line">            <span class="comment"># 不合法字符，报错退出循环</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'error index %s: unkown character "%s"'</span> % (self.index, self.ch), end=<span class="string">'\n\n'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 词法分析出错，报错退出循环</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.switch[case](self):</span><br><span class="line">                print(<span class="string">'error index %s: unkown character "%s"'</span> % (self.index, self.token), end=<span class="string">'\n\n'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'string'</span>, self.string_list)</span><br><span class="line">            print(<span class="string">'tag   '</span>, self.tag_list)</span><br><span class="line">        <span class="comment"># 将二元式写入文件</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file_name + <span class="string">'.two'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> string_, tag_ <span class="keyword">in</span> zip(self.string_list, self.tag_list):</span><br><span class="line">                f.write(<span class="string">'%s %s\n'</span> % (string_, tag_))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 语法分析</span></span><br><span class="line">        <span class="keyword">if</span> self.analyse_lr() == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'ok   '</span>, raw_string, end=<span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'fail '</span>, raw_string, end=<span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = <span class="string">'A'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'V=E'</span>, ],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'E-T'</span>, <span class="string">'T'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'T/F'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'V'</span>: [<span class="string">'i'</span>, ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">analyzer = SLRAnalyzer(start, productions, log_level=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    file = input(<span class="string">'请输入文件路径：\n'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> analyzer.analyse(file):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="专题5-SRL语法分析程序"><a href="#专题5-SRL语法分析程序" class="headerlink" title="专题5 SRL语法分析程序"></a>专题5 SRL语法分析程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SLRAnalyzer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, productions, new_start=<span class="string">'S'</span>, point=<span class="string">'.'</span>, log_level=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.new_start = new_start</span><br><span class="line">        self.productions = productions</span><br><span class="line">        self.nonterminals = productions.keys()</span><br><span class="line">        self.log_level = log_level</span><br><span class="line"></span><br><span class="line">        self.overs = set()</span><br><span class="line">        self.get_overs()</span><br><span class="line"></span><br><span class="line">        self.jinghao = <span class="string">'#'</span></span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line"></span><br><span class="line">        self.items = &#123;key: list() <span class="keyword">for</span> key <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.point = point</span><br><span class="line">        self.get_items()</span><br><span class="line"></span><br><span class="line">        self.status_list = [self.closure(&#123;(self.new_start, self.point + self.start)&#125;), ]</span><br><span class="line">        self.analyse_table = dict()</span><br><span class="line">        self.last_index = <span class="number">0</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.acc = <span class="string">'acc'</span></span><br><span class="line">        self.get_analyse_table()</span><br><span class="line"></span><br><span class="line">        self.language_type = self.is_lr0()</span><br><span class="line">        <span class="keyword">if</span> self.language_type <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">            exit(<span class="string">'unsupported language!'</span>)</span><br><span class="line">        <span class="keyword">if</span> self.language_type == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'lr0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'slr1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        ret_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">            <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                ret_dict = self.first[nontermainal]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    ret_dict.update(&#123;right[<span class="number">0</span>]: right&#125;)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                            first_ = self.first[sign]</span><br><span class="line">                            ret_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret_dict</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first集和follow集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮，产生式右部首字符为终结符号</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_first = deepcopy(self.first)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                self.first[nontermainal].update(self.get_first(nontermainal))</span><br><span class="line">            <span class="keyword">if</span> old_first == self.first:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[self.start].add(self.jinghao)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = deepcopy(self.follow)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.overs:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_set = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_set_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_set_without_null</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_set:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'follow set:'</span>)</span><br><span class="line">            pprint(self.follow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_overs</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                    <span class="keyword">if</span> sign <span class="keyword">not</span> <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                        self.overs.add(sign)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'over sign set:'</span>)</span><br><span class="line">            pprint(self.overs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_items</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items[self.new_start] = [self.point + self.start, self.start + self.point]</span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    self.items[nonterminal].append(right[:i] + self.point + right[i:])</span><br><span class="line">                self.items[nonterminal].append(right + self.point)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'items:'</span>)</span><br><span class="line">            pprint(self.items)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closure</span><span class="params">(self, production_set)</span>:</span></span><br><span class="line">        ret = production_set.copy()</span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> self.items[right[i + <span class="number">1</span>]]:</span><br><span class="line">                    <span class="keyword">if</span> self.point == item[<span class="number">0</span>]:</span><br><span class="line">                        ret.add((right[i + <span class="number">1</span>], item))</span><br><span class="line">        <span class="keyword">if</span> ret == production_set:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.closure(ret)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self, production_set, sign)</span>:</span></span><br><span class="line">        new_production_set = set()</span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] == sign:</span><br><span class="line">                new_right = list(right)</span><br><span class="line">                temp = new_right[i]</span><br><span class="line">                new_right[i] = new_right[i + <span class="number">1</span>]</span><br><span class="line">                new_right[i + <span class="number">1</span>] = temp</span><br><span class="line">                new_production_set.add((production[<span class="number">0</span>], <span class="string">''</span>.join(new_right)))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.closure(new_production_set)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analyse_table</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            receive_sign_dict = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> (left, right) <span class="keyword">in</span> self.status_list[self.index]:</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right):</span><br><span class="line">                    <span class="keyword">if</span> right[i + <span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> receive_sign_dict.keys():</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]] = &#123;(left, right)&#125;</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]].add((left, right))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> left == self.new_start:</span><br><span class="line">                        self.analyse_table[self.index] = &#123;self.jinghao: [self.acc, ]&#125;</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        production_index = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">for</span> left_ <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                            <span class="keyword">for</span> right_ <span class="keyword">in</span> self.productions[left_]:</span><br><span class="line">                                <span class="keyword">if</span> (left, right.replace(self.point, <span class="string">''</span>)) == (left_, right_):</span><br><span class="line">                                    self.analyse_table[self.index] = &#123;</span><br><span class="line">                                        over: [production_index, <span class="string">'r'</span>, (left_, right_)]</span><br><span class="line">                                        <span class="keyword">for</span> over <span class="keyword">in</span> (self.follow[left_])</span><br><span class="line">                                    &#125;</span><br><span class="line">                                production_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> sign, production_set <span class="keyword">in</span> receive_sign_dict.items():</span><br><span class="line">                new_status = self.go(production_set, sign)</span><br><span class="line">                new_dfa = []</span><br><span class="line">                <span class="keyword">if</span> new_status <span class="keyword">not</span> <span class="keyword">in</span> self.status_list:</span><br><span class="line">                    self.status_list.append(new_status)</span><br><span class="line">                    self.last_index += <span class="number">1</span></span><br><span class="line">                    new_dfa.append(self.last_index)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    new_dfa.append(self.status_list.index(new_status))</span><br><span class="line">                <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">                    new_dfa.append(production)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> self.index <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table.keys():</span><br><span class="line">                    self.analyse_table[self.index] = &#123;sign: new_dfa&#125;</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.analyse_table[self.index].update(&#123;sign: new_dfa&#125;)</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self.index &gt; self.last_index:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'stauts list:'</span>)</span><br><span class="line">            pprint(self.status_list)</span><br><span class="line">            print(<span class="string">'analyse table:'</span>)</span><br><span class="line">            pprint(self.analyse_table)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_lr0</span><span class="params">(self)</span>:</span></span><br><span class="line">        ret = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> status <span class="keyword">in</span> self.status_list:</span><br><span class="line">            guiyue_items = list()</span><br><span class="line">            yijin_items = list()</span><br><span class="line">            <span class="keyword">for</span> left, right <span class="keyword">in</span> status:</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> == len(right):</span><br><span class="line">                    <span class="keyword">if</span> right[i - <span class="number">1</span>] != self.new_start <span class="keyword">and</span> left != self.new_start:</span><br><span class="line">                        guiyue_items.append(self.follow[left])</span><br><span class="line">                <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    yijin_items.append(right[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> len(guiyue_items) &gt;= <span class="number">2</span> <span class="keyword">or</span> len(guiyue_items) &gt; <span class="number">0</span> <span class="keyword">and</span> len(yijin_items) &gt; <span class="number">0</span>:</span><br><span class="line">                ret = <span class="number">0</span></span><br><span class="line">                jihe = set()</span><br><span class="line">                <span class="keyword">for</span> nonterminal <span class="keyword">in</span> guiyue_items:</span><br><span class="line">                    <span class="keyword">if</span> nonterminal <span class="keyword">in</span> jihe:</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        jihe |= nonterminal</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> yijin_items:</span><br><span class="line">                    <span class="keyword">if</span> sign <span class="keyword">in</span> jihe:</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        jihe.add(sign)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_lr</span><span class="params">(self, string)</span>:</span></span><br><span class="line">        string += self.jinghao</span><br><span class="line">        status_stack = [<span class="number">0</span>, ]</span><br><span class="line">        sign_stack = [self.jinghao, ]</span><br><span class="line">        string_index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">0</span>] != self.acc:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'r'</span> != self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack)</span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(string[string_index])</span><br><span class="line">                string_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># act</span></span><br><span class="line">                left = self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                right = self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    sign_stack.pop()</span><br><span class="line">                    status_stack.pop()</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][left][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(left)</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">            <span class="keyword">if</span> string[string_index] <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table[status_stack[<span class="number">-1</span>]].keys():</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string)</span>:</span></span><br><span class="line">        print(<span class="string">'analysing: '</span> + string)</span><br><span class="line">        <span class="keyword">if</span> self.analyse_lr(string) == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'ok  '</span>, string)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'fail'</span>, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lr0</span></span><br><span class="line"><span class="comment"># start = 'E'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'E': ['aEb', 'aEc', 'ab']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['ab', 'aab', 'aabb', 'aabc']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 书上slr1</span></span><br><span class="line"><span class="comment"># start = 'L'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'L':['E,L', 'E'],</span></span><br><span class="line"><span class="comment">#     'E':['a','b']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['a,b,a', 'aa', 'b,a,a,b']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 书上slr1</span></span><br><span class="line"><span class="comment"># start = 'B'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'B':['bD;Te',],</span></span><br><span class="line"><span class="comment">#     'D': ['D;d','d'],</span></span><br><span class="line"><span class="comment">#     'T': ['s;T', 's']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['bd;se', 'bd;s;se']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非srl1或lr0</span></span><br><span class="line"><span class="comment"># start = 'E'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'E': ['Eab', 'bR'],</span></span><br><span class="line"><span class="comment">#     'R': ['E', 'a'],</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['ba', 'aab']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lr0</span></span><br><span class="line"><span class="comment"># start = 'E'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'E': ['aA', 'bB'],</span></span><br><span class="line"><span class="comment">#     'A': ['cA', 'd'],</span></span><br><span class="line"><span class="comment">#     'B': ['cB', 'd']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['ad', 'bcd', 'ab']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实验slr1</span></span><br><span class="line">start = <span class="string">'A'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'V=E'</span>, ],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'E-T'</span>, <span class="string">'T'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'T/F'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'V'</span>: [<span class="string">'i'</span>, ],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'i=i+i'</span>, <span class="string">'i=(i-i)*i/(i+i)'</span>, <span class="string">'i==i*i'</span>]</span><br><span class="line">analyzer = SLRAnalyzer(start, productions, log_level=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    analyzer.analyse(string)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序功能描述&quot;&gt;&lt;a href=&quot;#程序功能描述&quot; class=&quot;headerlink&quot; title=&quot;程序功能描述&quot;&gt;&lt;/a&gt;程序功能描述&lt;/h1&gt;&lt;p&gt;​        本次实验中，我用python3.5实现了一个简单的含有四元运算的赋值语句的编译器前端类SL
      
    
    </summary>
    
      <category term="编译原理" scheme="http://wang22ti.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>《计算机体系结构》实验6-cache模拟</title>
    <link href="http://wang22ti.com/2018/06/07/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C6-cache%E6%A8%A1%E6%8B%9F/"/>
    <id>http://wang22ti.com/2018/06/07/《计算机体系结构》实验6-cache模拟/</id>
    <published>2018-06-06T16:43:20.000Z</published>
    <updated>2018-06-09T07:00:07.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ol><li>阅读分析附件模拟器代码</li><li>通过读懂代码加深了解cache的实现技术</li><li>结合书后习题1进行测试</li><li>通过实验设计了解参数（cache和block size等）和算法（LRU，FIFO等）选择的优化配置与组合，需要定性和定量分析，可以用数字或图表等多种描述手段配合说明。输入project.txt 样例0 524 0 524 0 524，结合自己的设计自行产生和输入project.</li></ol><h1 id="模拟器代码的阅读、修改与注释"><a href="#模拟器代码的阅读、修改与注释" class="headerlink" title="模拟器代码的阅读、修改与注释"></a>模拟器代码的阅读、修改与注释</h1><p> 实事求是讲，给出的模拟器代码存在很多问题，主要包括：</p><ol><li>没有提示输入数据的单位</li><li>变量名称过于随意，代码可读性很差</li><li>部分参数冗余，部分逻辑控制不符合常规</li><li>代码注释不完整，且可读性较差</li></ol><p>综上，我对实验源码修改并重新注释如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简称CPU向内存请求的数据的地址为“请求地址”</span></span><br><span class="line"><span class="comment">// 存储了请求地址对应的块地址</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> blockaddress[<span class="number">500</span>];</span><br><span class="line"><span class="comment">// cache中存在过的块的tag位，用于判断失效类型</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> before[<span class="number">500</span>];</span><br><span class="line"><span class="comment">// before中有效数据的个数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">misstype</span><span class="params">(<span class="keyword">int</span> ba,<span class="keyword">int</span> nb, <span class="keyword">int</span> l)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 存储请求地址，单位分别为字节与4字节</span></span><br><span class="line"><span class="keyword">int</span> bytearray[<span class="number">500</span>],wordaddress[<span class="number">500</span>];</span><br><span class="line"><span class="comment">// 存储请求地址的文件指针</span></span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="comment">// cache的大小，单位为字节</span></span><br><span class="line"><span class="keyword">int</span> cachesize;</span><br><span class="line"><span class="comment">// block的大小，单位为4字节</span></span><br><span class="line"><span class="keyword">int</span> blocksize;</span><br><span class="line"><span class="comment">// block的大小，单位为字节</span></span><br><span class="line"><span class="keyword">int</span> blockinbyte;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组相联路数，即每组block的数量</span></span><br><span class="line"><span class="keyword">int</span> assoc;</span><br><span class="line"><span class="comment">// 最大块号</span></span><br><span class="line"><span class="keyword">int</span> NOofblock;</span><br><span class="line"><span class="comment">// 最大组号</span></span><br><span class="line"><span class="keyword">int</span> NOofset;</span><br><span class="line"><span class="comment">// 映射模式：直接映射、组相联映射、全相联映射</span></span><br><span class="line"><span class="keyword">int</span> choice;</span><br><span class="line"><span class="comment">// 命中数、命中数、请求地址总数</span></span><br><span class="line"><span class="keyword">float</span> misscount,accesscount,hitcount;</span><br><span class="line"><span class="keyword">int</span> index,byte,tag,ii;</span><br><span class="line"><span class="comment">// z控制循环逻辑，c统计未命中的的类型</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j,x,y,z,c,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// newarray中存储cache中各块的valid位与tag位，默认都是无效的，即cache一开始没有数据</span></span><br><span class="line"><span class="comment">// lru中存储最近使用情况，用来实现LRU替换策略（对应位数越大，代表越久未被使用），默认刚刚被访问</span></span><br><span class="line"><span class="comment">// 第一个索引是组号</span></span><br><span class="line"><span class="keyword">int</span> newarray[<span class="number">300</span>][<span class="number">300</span>]=&#123;<span class="number">0</span>&#125;,lru[<span class="number">300</span>][<span class="number">300</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ans=<span class="string">'y'</span>;</span><br><span class="line"><span class="comment">// 统计三种未命中情况的数量</span></span><br><span class="line"><span class="keyword">int</span> c1c=<span class="number">0</span>,c2c=<span class="number">0</span>,c3c=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// 命中率与未命中率</span></span><br><span class="line"><span class="keyword">float</span> missrate=<span class="number">0</span>, hitrate=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择映射模式：直接映射、组相联映射、全相联映射</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Cache Simulation Project:"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n1. Direct_mapped\n2. Set_associate\n3. Fully_associate\n\n: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">1</span>||choice==<span class="number">2</span>||choice==<span class="number">3</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Incorrect input."</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择cache大小：16、64、128、256（字节）</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\nCache Size from range[64/128/256](byte): "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cachesize);</span><br><span class="line"><span class="keyword">if</span>(cachesize==<span class="number">64</span>||cachesize==<span class="number">128</span>||cachesize==<span class="number">256</span> || cachesize==<span class="number">16</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Incorrect input."</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择块大小：1、2、4（4字节）</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\nBlock Size from range[1/2/4](word,4byte): "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;blocksize);</span><br><span class="line"><span class="keyword">if</span>(blocksize==<span class="number">1</span>||blocksize==<span class="number">2</span>||blocksize==<span class="number">4</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Incorrect input."</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择组相连路数，即一个组中块的数量</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\nEnter the value for n-way Set value from[1/2/4/8/16]: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;assoc);</span><br><span class="line"><span class="keyword">if</span>(assoc==<span class="number">1</span>||assoc==<span class="number">2</span>||assoc==<span class="number">4</span>||assoc==<span class="number">8</span>||assoc==<span class="number">16</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Incorrect input.\n"</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(ii = <span class="number">0</span>; ii &lt; <span class="number">500</span>; ii++)</span><br><span class="line">before[ii]=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件，读取请求数据的字节地址</span></span><br><span class="line">fp= fopen(<span class="string">"project.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;byte)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">bytearray[i++]=byte;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算块大小（字节为单位）</span></span><br><span class="line">blockinbyte=blocksize*<span class="number">4</span>;</span><br><span class="line"><span class="comment">// 计算cache中块的总数</span></span><br><span class="line">NOofblock=cachesize/blockinbyte;</span><br><span class="line"><span class="comment">// 计算组的总数</span></span><br><span class="line">NOofset=NOofblock/assoc;</span><br><span class="line"><span class="comment">// 初始化未命中数、命中数、访问数</span></span><br><span class="line">misscount=<span class="number">0</span>;</span><br><span class="line">hitcount=<span class="number">0</span>;</span><br><span class="line">accesscount=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个一个处理请求数据的地址</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 无论是否命中，请求地址数+1</span></span><br><span class="line">accesscount++;</span><br><span class="line"><span class="comment">// 将请求地址用4字节为单位表示</span></span><br><span class="line">        wordaddress[j]=bytearray[j]/<span class="number">4</span>;</span><br><span class="line">        <span class="comment">// 由于blocksize也以4字节为单位，相除得到块号</span></span><br><span class="line">blockaddress[j]=wordaddress[j]/blocksize;</span><br><span class="line"><span class="comment">// 计算块号对应的组号</span></span><br><span class="line">index=blockaddress[j]%NOofset;</span><br><span class="line"><span class="comment">// 计算第tag个对应到该组的块号</span></span><br><span class="line">tag=blockaddress[j]/NOofset;</span><br><span class="line"><span class="comment">// 当映射模式为直接映射或组相联映射</span></span><br><span class="line">x=y=z=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">1</span>||choice==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 遍历该组每个块存储在newarray的valid和tag</span></span><br><span class="line"><span class="keyword">while</span> (z&lt;(assoc*<span class="number">2</span>))</span><br><span class="line">&#123;</span><br><span class="line">c=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// 当cache中valid无效，由于多路组相联中数据是顺序存放的，所以表明数据不在cache中，未命中</span></span><br><span class="line"><span class="comment">// 同时还表明该组还有空位，不需要置换</span></span><br><span class="line"><span class="keyword">if</span>(newarray[index][z]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 填写tag位</span></span><br><span class="line">newarray[index][z+<span class="number">1</span>]=tag;</span><br><span class="line"><span class="comment">// 填写valid位</span></span><br><span class="line">newarray[index][z]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 统计未命中数量</span></span><br><span class="line">misscount++;</span><br><span class="line"><span class="comment">//判断未命中的类型类型</span></span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将该组所有lru加1，表示这一轮循环没有被用到，</span></span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;(assoc*<span class="number">2</span>);m=m+<span class="number">2</span>)</span><br><span class="line">lru[index][m]++;</span><br><span class="line"><span class="comment">// 将刚刚填写的块对应的lru置为0</span></span><br><span class="line">lru[index][z]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变循环变量，退出循环（很奇怪的操作，为何不用break？）</span></span><br><span class="line">z=(assoc*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当tag不为0，表示还有数据可以匹配</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// tag位一致，则数据在cache中，命中</span></span><br><span class="line"><span class="keyword">if</span>(newarray[index][z+<span class="number">1</span>]==tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 增加命中数量</span></span><br><span class="line">hitcount++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上，为了实现LRU的替换策略，更新lru，退出循环</span></span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;(assoc*<span class="number">2</span>);m=m+<span class="number">2</span>)</span><br><span class="line">lru[index][m]++;</span><br><span class="line">lru[index][z]=<span class="number">0</span>;</span><br><span class="line">z=(assoc*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果tag位不一致，则数据不在该块中</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 直接映射时，则肯定是未命中</span></span><br><span class="line"><span class="keyword">if</span>(assoc&lt;<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 直接替换掉，统计未命中数，判断未命中类型，退出循环</span></span><br><span class="line">newarray[index][z+<span class="number">1</span>]=tag;</span><br><span class="line">misscount++;</span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line">z=(assoc*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组相联映射时，则请求的地址可能在同一组的别的块中</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 更新y，确保对应的块是最久没有被访问的</span></span><br><span class="line"><span class="comment">// 因为在置换之前一定会遍历所有的块，而未命中的情况下他们的相对大小不会变（？）</span></span><br><span class="line"><span class="keyword">if</span>(x&lt;lru[index][z])</span><br><span class="line"><span class="comment">// if (lru[index][y] &lt; lru[index][z])</span></span><br><span class="line">&#123;</span><br><span class="line">x=lru[index][z];</span><br><span class="line">y=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果刚刚判断未命中的是该组的最后一个块，那么必须替换</span></span><br><span class="line"><span class="comment">// 否则直接检测下一个块</span></span><br><span class="line"><span class="keyword">if</span>(z==((assoc*<span class="number">2</span>)<span class="number">-2</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// y其对应的块的lru最大，所以被置换的是它</span></span><br><span class="line">newarray[index][y+<span class="number">1</span>]=tag;</span><br><span class="line">misscount++;</span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新lru</span></span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;(assoc*<span class="number">2</span>);m=m+<span class="number">2</span>)</span><br><span class="line">lru[index][m]++;</span><br><span class="line">lru[index][y]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继续循环，去检测该组号为index的组的下一个块</span></span><br><span class="line">z=z+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 统计未命中类型</span></span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)</span><br><span class="line">c1c++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">2</span>)</span><br><span class="line">c2c++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">3</span>)</span><br><span class="line">c3c++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当为全相联映射时</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//全相联映射中cache所有的块均可存该数据</span></span><br><span class="line"><span class="keyword">while</span>(z&lt;=NOofblock)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 同上，valid=0表示未命中且还有空的cache块</span></span><br><span class="line"><span class="keyword">if</span>(newarray[z][<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将该数据块更新到cache中</span></span><br><span class="line">newarray[z][<span class="number">1</span>]=blockaddress[j];</span><br><span class="line">newarray[z][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 统计未命中次数，判断未命中类型，更新lru值，退出循环</span></span><br><span class="line">misscount++;</span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;=NOofblock;m++)</span><br><span class="line">lru[m][<span class="number">1</span>]++;</span><br><span class="line">lru[z][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">z=(NOofblock+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// valid=1表示有数据</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果tag位也一样，则命中</span></span><br><span class="line"><span class="keyword">if</span>(newarray[z][<span class="number">1</span>]==blockaddress[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 统计命中次数，更新lru，退出循环</span></span><br><span class="line">hitcount++;</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;=NOofblock;m++)</span><br><span class="line">lru[m][<span class="number">1</span>]++;</span><br><span class="line">lru[z][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">z=NOofblock+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果tag不一样，表示没有和该块匹配上</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 同上，更新y，确保对应的块是最久没有被访问的</span></span><br><span class="line"><span class="keyword">if</span> (x&lt;lru[z][<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">x=lru[z][<span class="number">1</span>];</span><br><span class="line">y=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果刚刚未匹配的是最后一块，表明未命中</span></span><br><span class="line"><span class="keyword">if</span>(z==NOofblock)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 执行lru替换</span></span><br><span class="line">newarray[y][<span class="number">1</span>]=blockaddress[j];</span><br><span class="line"><span class="comment">// 统计未命中次数，判断未命中类型，更新lru值，自动退出循环</span></span><br><span class="line">misscount++;</span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;=NOofblock;m++)</span><br><span class="line">lru[m][<span class="number">1</span>]++;</span><br><span class="line">lru[y][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 和下一个块匹配</span></span><br><span class="line">z++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>) c1c++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">2</span>) c2c++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">3</span>) c3c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算并打印统计信息</span></span><br><span class="line">    missrate = (misscount/accesscount);</span><br><span class="line">hitrate = (hitcount/accesscount);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n        Miss Rate = %3f \n"</span>,missrate);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n         Hit Rate = %3f \n"</span>,hitrate);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n  Compulsory Miss = %3d \n"</span>,c1c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n    Capacity Miss = %3d \n"</span>,c3c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n    Conflict Miss = %3d \n"</span>,c2c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n       hit Number = %3f \n"</span>,hitcount);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n      miss Number = %3f \n"</span>,misscount);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n    Access Number = %3f \n"</span>,accesscount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入请求地址块号、最大块号、请求地址编号索引，返回未命中的类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">misstype</span><span class="params">(<span class="keyword">int</span> ba, <span class="keyword">int</span> nb, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u,k=<span class="number">0</span>,b=<span class="number">0</span>,m,ii;</span><br><span class="line"><span class="keyword">int</span> blarray[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"><span class="comment">// 初始化blarray</span></span><br><span class="line"><span class="keyword">for</span> (ii=<span class="number">0</span>;ii&lt;<span class="number">500</span>;ii++)</span><br><span class="line">blarray[ii]=<span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查输入块号是否曾被装入cache，曾被装入置k=0，否则k=1</span></span><br><span class="line"><span class="keyword">for</span>(u=<span class="number">0</span>;u&lt;=t;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(before[u]==ba)</span><br><span class="line">&#123;</span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">k=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有被装入，是首次缺失、冷缺失（Compulsory Miss）</span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">type=<span class="number">1</span>;</span><br><span class="line">before[t]=ba;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 曾经被装入，判断是容量缺失（capacity）还是冲突缺失（conflict）</span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 遍历已经请求过地址</span></span><br><span class="line"><span class="comment">// 统计到上次请求该地址后，去了重的请求地址数量</span></span><br><span class="line"><span class="keyword">for</span>(u=(l<span class="number">-1</span>); u&gt;=<span class="number">0</span>; u--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 遇到和本次请求地址相同的块号就结束</span></span><br><span class="line"><span class="keyword">if</span>(blockaddress[u]==ba)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 找到blarray中与该请求地址相同的索引</span></span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;=b;m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(blarray[m]==blockaddress[u])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果blarray中没有该请求地址，将该地址存在blarray中</span></span><br><span class="line"><span class="comment">// 即blarray会对已经访问过的地址去重</span></span><br><span class="line"><span class="keyword">if</span>(m==(b+<span class="number">1</span>))</span><br><span class="line">blarray[b++]=blockaddress[u];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 去重后的数量小于cache中块的总数，即cache还没有满，是conflict miss</span></span><br><span class="line"><span class="comment">// 如果cache已经满了，是capacity miss</span></span><br><span class="line"><span class="keyword">if</span>((b)&lt;nb)</span><br><span class="line">type=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">type=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回未命中的种类</span></span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结合习题1的测试"><a href="#结合习题1的测试" class="headerlink" title="结合习题1的测试"></a>结合习题1的测试</h1><p>根据习题1中的要求，cache一共256个byte，一个block大小为4个字，进行两组测试。由于一个int类型的变量占4个byte，而输入的单位是byte，首先用一小段python代码生成测试样例，即100个交错0和132，之所以不是习题1中10000个是因为代码中存放请求地址的数量最大为500。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        n = <span class="number">132</span> * <span class="number">4</span></span><br><span class="line">        f.write(<span class="string">'0 %d '</span> % n)</span><br></pre></td></tr></table></figure><p>然后测试直接相联： </p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image1.png" alt="image1"></p><p>由于一个int类型的变量占4个byte，所以array[0]和array[132]在cache中的块号为： </p><script type="math/tex; mode=display">\lfloor \frac{0}{16/4} \rfloor mod{\frac{256}{16}} =0 \\ \lfloor \frac{132}{16/4} \rfloor mod{\frac{256}{16}} =1</script><p>所以两者不会相互替换，于是除了最初的2次compulsory miss外，全都命中，实验结果符合预期。而array[131]在cache中的块号为：</p><script type="math/tex; mode=display"> \lfloor \frac{131}{16/4} \rfloor mod{\frac{256}{16}} =0</script><p>和array[0]会不停地冲突！所以实验结果为</p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image2.png" alt="image1"></p><p>同理，测试0和132的两路组相联如下：</p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image3.png" alt="image1"></p><p>测试0和131的两路组相联如下，此时不可能冲突：</p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image4.png" alt="image1"></p><h1 id="参数定量分析"><a href="#参数定量分析" class="headerlink" title="参数定量分析"></a>参数定量分析</h1><p>用以下代码生成样本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        n1 = <span class="number">131</span> * <span class="number">4</span></span><br><span class="line">        n2 = <span class="number">132</span> * <span class="number">4</span></span><br><span class="line">        n3 = <span class="number">130</span> * <span class="number">4</span></span><br><span class="line">        f.write(<span class="string">'0 %d %d %d '</span> % (n1, n2, n3))</span><br></pre></td></tr></table></figure><p>假设cache的大小为256byte，反复执行代码有如下命中率： </p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image5.png" alt="image1"></p><p>可见，在该组测试样本下，为了尽量提高命中率，同时降低电路复杂度，应该使用直接相联，块大小为2个word。不过考虑到样本比较简单，可以适当提高路数，不过应该用更复杂的样本测试。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在本次实验，通过代码的阅读、修改与测试，增强了对cache映射方式的理解，加强了对LRU算法的理解，对于之后的学习必然带来积极影响。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a&gt;实验目的&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;阅读分析附件模拟器代码&lt;/li&gt;
&lt;li&gt;通过读懂代码加深了解cache的实现技术&lt;/li&gt;
&lt;li&gt;结合书后习
      
    
    </summary>
    
      <category term="计算机体系结构" scheme="http://wang22ti.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>mooc-吴恩达老师在斯坦福大学的机器学习公开课2——学习理论</title>
    <link href="http://wang22ti.com/2018/06/05/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE2%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/"/>
    <id>http://wang22ti.com/2018/06/05/mooc-吴恩达老师在斯坦福大学的机器学习公开课2——学习理论/</id>
    <published>2018-06-05T15:52:18.000Z</published>
    <updated>2018-06-11T10:22:45.343Z</updated>
    
    <content type="html"><![CDATA[<p>前置课程请移步<a href="http://wang22ti.com/2018/05/25/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE1%E2%80%94%E2%80%94%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/">第一部分：监督学习</a></p><p>从这里开始的3个lecture，是整个课程的第二部分：学习理论！就是如何熟练地、有效地使用在第一部分学习过的算法。</p><h1 id="Lecture-9"><a href="#Lecture-9" class="headerlink" title="Lecture 9"></a>Lecture 9</h1><h2 id="偏差方差权衡（bias-variance-trade-off）"><a href="#偏差方差权衡（bias-variance-trade-off）" class="headerlink" title="偏差方差权衡（bias variance trade-off）"></a>偏差方差权衡（bias variance trade-off）</h2><p>回到此前关于欠拟合和过拟合的描述，有如下直观的描述：</p><p><img src="/2018/06/05/mooc-吴恩达老师在斯坦福大学的机器学习公开课2——学习理论/1.png" alt="1"></p><p>无论是左图还是右图，都存在巨大的<code>泛化误差（generalization error）</code>，这个会在之后有形式化的定义，指的是模型针对新的样本而非测试集的误差。不过误差带来的原因却截然不同，因此针对欠拟合定义<code>偏差（bias）</code>，指的是即便训练了非常大（甚至是无限大）的数据之后仍然存在的泛化误差；针对过拟合定义<code>方差（variance）</code>，指的是由于训练集不够大，部分特例（比如特别贵或特别便宜的房子）导致模型存在的泛化误差。</p><p>显然，欠拟合是偏差过大的表现，过拟合是方差过大的表现。往往在减小偏差还是减小方差之间，是需要做出适当的权衡的。为了学习在不同情况下如何使用学习算法，即如何权衡偏差与方差，我们要解决以下问题：</p><ol><li>如何对偏差方差权衡进行形式化的定义？（进一步可以讨论模型选择的方法，比如如何选择多项式的次数）</li><li>机器学习中除了关注泛化误差，最关注的是算法是否有效地利用了训练样本，即如何将训练样本中的误差同泛化误差联系起来。</li><li>学习算法可以在怎样的条件下被<strong>证明</strong>是有效的？（比如有什么条件就可以证明一个分类算法的准确率高达（99%）</li></ol><h2 id="经验风险最小化问题（Empirical-risk-minimization，ERM）（一）"><a href="#经验风险最小化问题（Empirical-risk-minimization，ERM）（一）" class="headerlink" title="经验风险最小化问题（Empirical risk minimization，ERM）（一）"></a>经验风险最小化问题（Empirical risk minimization，ERM）（一）</h2><p>我们为什么可以使用之前的模型？实际上，之前的分类模型，比如逻辑回归、支持向量机等等，都是<code>经验风险最小化问题（Empirical risk minimization，ERM）</code>的特例或近似，我们将通过证明经验风险最小化问题的合理性，从而说明第一部分中的分类模型是可靠的、有效的。</p><h3 id="联合界（Union-bound）和Hoeﬀding不等式（Hoeﬀding-inequality）"><a href="#联合界（Union-bound）和Hoeﬀding不等式（Hoeﬀding-inequality）" class="headerlink" title="联合界（Union bound）和Hoeﬀding不等式（Hoeﬀding inequality）"></a>联合界（Union bound）和Hoeﬀding不等式（Hoeﬀding inequality）</h3><p>在此之前，需要介绍两个<code>引理（Lemma）</code>，一个是<code>联合界（Union bound）</code>：</p><script type="math/tex; mode=display">P(A_1\cup\dots\cup A_k) \leq P(A_1)+\dots+P(A_k)</script><p>其中$P$表示事件发生的概率，用文氏图就很容易理解。</p><p>另一个是<code>Hoeﬀding不等式（Hoeﬀding inequality）</code>：</p><p>如果$Z_1,\dots,Z_m$是独立同分布的（IID）且均服从伯努利分布，令</p><script type="math/tex; mode=display">P(Z_i=1)=\phi \\ \hat{\phi}=\frac{1}{m}\sum_{i=1}^m{Z_i}</script><p>则对于任意$\gamma&gt;0$有</p><script type="math/tex; mode=display">P(|\phi-\hat{\phi}|>\gamma) \leq 2\exp(-2\gamma^2m)</script><p>当增加$m$的时候，等式右边的高斯分布会收窄，使得$\phi$偏离$\hat{\phi}$的概率呈指数变小。虽然很像中心极限定理，但是这个不等式在$m$很小的情况下也是成立的。</p><h3 id="符号说明（Notation-explanation）"><a href="#符号说明（Notation-explanation）" class="headerlink" title="符号说明（Notation explanation）"></a>符号说明（Notation explanation）</h3><p>将使用一下符号：</p><script type="math/tex; mode=display">h_\theta(x)=g(\theta^Tx) \\ g(z)=1\{z\geq0\} \\ y\in\{0,1\} \\ S=\{(x^{(i)}, y^{(i)})\}_{i=1}^m, \ (x^{(i)}, y^{(i)})\sim_{IID}D</script><p>显然先假设了这是一个线性模型，其中可以认为$g$是逻辑回归的一个加强版本，而样本集$S$中的样本是独立同分布的。定义假设$h_\theta$的<code>训练误差（training error）</code>：</p><script type="math/tex; mode=display">\hat{\epsilon}(h_\theta)=\hat{\epsilon}_S(h_\theta)=\frac{1}{m}\sum_{i=1}^m{1\{h_\theta(x^{(i)})\neq y^{(i)}\}}</script><p>由于训练误差又被称为<code>风险（risk）</code>，所以经验风险最小化问题就可以被定义为</p><script type="math/tex; mode=display">\hat{\theta}=arg \min_\theta{\hat{\epsilon}(h_\theta)}=arg \min_\theta{\frac{1}{m}\sum_{i=1}^m{1\{h_\theta(x^{(i)})\neq y^{(i)}\}}}</script><p>可以认为，由于这个原始的学习算法是一个<code>NP困难问题</code>，所以提出逻辑回归和支持向量机等凸优化问题，都是对这个非凸问题进行近似处理。为了进一步的证明，可以认为我们选择的是一个函数，而不是参数$\theta$。先定义假设的集合</p><script type="math/tex; mode=display">H=\{h_\theta,\theta\in\R^{n+1},h_\theta:X\mapsto\{0,1\}\}</script><p>其中，$h$是通用的模型，包括神经网络或多分类等等，并不局限于线性与二分类。于是，可以将经验风险最小化模型修改为</p><script type="math/tex; mode=display">\hat{h}=arg \min_{h\in H}{\hat{\epsilon}_S(h)}</script><p>进一步可以定义模型优化的终极目标——泛化误差：</p><script type="math/tex; mode=display">\epsilon(h)=P_{(x,y)\sim D}(h(x)\neq y)</script><p>大多数情况下，$\hat{}$表示我们认为一个量是另外一个量的<code>估计（estimate）</code>，比如用$\hat{\epsilon}$估计（近似表示）$\epsilon$。</p><p>我们要证明的结论是——为什么经验风险最小化模型是合理的？即为什么$\hat{\epsilon}$可以用来估计（近似表示）$\epsilon$，或者能否由$\hat{\epsilon}$得到$\epsilon$的一个上界？注意这个问题的回答此前都是在感性的认知下默认成立的，通过对这个结论的证明还可以得到偏差方差权衡的形式化表达。</p><h3 id="有限集合-H-（finite-H-）"><a href="#有限集合-H-（finite-H-）" class="headerlink" title="有限集合$H$（finite $H$）"></a>有限集合$H$（finite $H$）</h3><p>先讨论假设数量有限的情况，即假设集合$H=\{h_1,h_2,\dots,h_k\},k=|H|$，其中每一个假设$h$都是不带参数的。</p><h4 id="一致性收敛（Uniform-convergence）"><a href="#一致性收敛（Uniform-convergence）" class="headerlink" title="一致性收敛（Uniform convergence）"></a>一致性收敛（Uniform convergence）</h4><p>对于给定的假设$j$，定义对于样本$i$的伯努利变量为</p><script type="math/tex; mode=display">Z_i=1\{ h_j(x^{(i)})\neq y^{(i)} \}</script><p>易知对于单个样本$i$假设$j$的泛化误差为</p><script type="math/tex; mode=display">\epsilon(h_j)=P(Z_i=1)</script><p>由于所有样本都是独立同分布的，所以</p><script type="math/tex; mode=display">\hat{\epsilon}=\frac{1}{m}\sum_{i=1}^m{Z_i}</script><p>利用Hoeﬀding不等式有</p><script type="math/tex; mode=display">P(|\epsilon(h_i)-\hat{\epsilon}(h_i)|>\gamma) \leq 2\exp(-2\gamma^2m)</script><p>即对于任意一个给定的假设，当样本足够大的时候，训练误差可以很好地表示泛化误差。</p><p>那对于整个假设集合呢？设事件$A_j$为$|\epsilon(h_j)-\hat{\epsilon}(h_j)|&gt;\gamma$，于是有</p><script type="math/tex; mode=display">P(\exist h_j\in H,A_j)=P(A_1\cup A_2\cup\dots\cup A_k) \\ \leq \sum_{j=1}^k{}P(A_j) \leq 2k\exp(-2\gamma^2m)=\delta</script><p>两边同时取非，于是有</p><script type="math/tex; mode=display">P(\forall h_j\in H,|\epsilon(h_j)-\hat{\epsilon}(h_j)|\leq\gamma) \geq 1- \delta</script><p>其中$\forall h_j\in H,|\epsilon(h_j)-\hat{\epsilon}(h_j)|\leq\gamma$被称为<code>一致性收敛（Uniform convergence）</code>，表示对于$H$中任意的假设，其训练误差与泛化误差的差值均小于$\gamma$，其概率是大于$1- \delta$的。</p><p>以上固定了样本集合大小$m$和误差阈值$\gamma$，求出了一致性收敛的概率$1-\delta$，于是很容易得到另外两种形式的一致性收敛原则。</p><h4 id="样本复杂度（sample-complexity）"><a href="#样本复杂度（sample-complexity）" class="headerlink" title="样本复杂度（sample complexity）"></a>样本复杂度（sample complexity）</h4><p>给定误差阈值$\gamma$，如果希望一致性概率收敛的概率大于给定的$1-\delta$，即有$P(\forall h_j\in H,|\epsilon(h_j)-\hat{\epsilon}(h_j)|\leq\gamma) \geq 1-\delta$，则要求训练集合的大小$m$大于等于<code>样本复杂度（sample complexity）</code>：</p><script type="math/tex; mode=display">m\geq \frac{1}{2\gamma^2}\log{\frac{2k}{\delta}}</script><p>这是最好理解的一个形式，可以指导我们选择样本的数量，同时也告诉我们可以放心地增加假设的数量$k$。</p><h4 id="误差界（error-bound）"><a href="#误差界（error-bound）" class="headerlink" title="误差界（error bound）"></a>误差界（error bound）</h4><p>给定训练集合大小$m$和概率界$\delta$，有$1-\delta$的概率使得对于任意$h\in H$泛化误差与训练误差的差$\gamma$均小于<code>误差界（error bound）</code>：</p><script type="math/tex; mode=display">|\hat{\epsilon}(h)-\epsilon(h)|\leq\sqrt{\frac{1}{2m}\log{\frac{2k}{\delta}}}</script><h4 id="偏差方差权衡的形式化表达"><a href="#偏差方差权衡的形式化表达" class="headerlink" title="偏差方差权衡的形式化表达"></a>偏差方差权衡的形式化表达</h4><p>一致性收敛往往成立，现在假设已经成立了，即有$\forall h_j\in H,|\epsilon(h_j)-\hat{\epsilon}(h_j)|\leq\gamma$。经验风险最小化模型要做的就是从这$k$个假设中选出使得训练误差最小的那一个，即</p><script type="math/tex; mode=display">\hat{h}=arg \min_{h\in H}{\hat{\epsilon}_S(h)}</script><p>定义理论上的最优假设</p><script type="math/tex; mode=display">h^*=arg \min_{h\in H}\epsilon(h)</script><p>由误差界有</p><script type="math/tex; mode=display">\begin{array}{} \epsilon(\hat{h})&\leq &\hat{\epsilon}(\hat{h}) + \gamma  \\ &\leq & \hat{\epsilon}(h^*) + \gamma \\ &\leq &\epsilon(h^*)+2\gamma \end{array}</script><p>于是，给定样本大小$m$和概率界$\delta$，有$1-\delta$的概率有</p><script type="math/tex; mode=display">\epsilon(\hat{h})\leq \epsilon(h^*)+2\sqrt{\frac{1}{2m}\log{\frac{2k}{\delta}}}</script><p>假设现在用的是线性模型$H$，我们对训练得到的最优假设的泛化误差$\epsilon(\hat{h})$的上界并不满意，我们考虑使用更复杂的模型，比如二次模型$H^{‘}\supseteq H$，那么理论上的最优假设的泛化误差$\epsilon(h^<em>)$一定会减小，然而由于假设数量$k$的增加，最优假设的泛化误差$\epsilon(\hat{h})$的上界并不一定会减小，这就是偏差方差权衡的形式化表达。十分不严谨的、直观的，可以认为$\epsilon(h^</em>)$是分类问题偏差，$2\sqrt{\frac{1}{2m}\log{\frac{2k}{\delta}}}$是分类问题的方差。</p><h1 id="Lecture-10"><a href="#Lecture-10" class="headerlink" title="Lecture 10"></a>Lecture 10</h1><h2 id="经验风险最小化问题（Empirical-risk-minimization，ERM）（二）"><a href="#经验风险最小化问题（Empirical-risk-minimization，ERM）（二）" class="headerlink" title="经验风险最小化问题（Empirical risk minimization，ERM）（二）"></a>经验风险最小化问题（Empirical risk minimization，ERM）（二）</h2><h3 id="无限集合-H-（infinite-H-）"><a href="#无限集合-H-（infinite-H-）" class="headerlink" title="无限集合$H$（infinite $H$）"></a>无限集合$H$（infinite $H$）</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前置课程请移步&lt;a href=&quot;http://wang22ti.com/2018/05/25/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%
      
    
    </summary>
    
      <category term="机器学习" scheme="http://wang22ti.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>每天都写点算法18-6</title>
    <link href="http://wang22ti.com/2018/06/02/%E6%AF%8F%E5%A4%A9%E9%83%BD%E5%86%99%E7%82%B9%E7%AE%97%E6%B3%9518-6/"/>
    <id>http://wang22ti.com/2018/06/02/每天都写点算法18-6/</id>
    <published>2018-06-02T01:45:51.000Z</published>
    <updated>2018-06-02T01:46:06.912Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="算法设计" scheme="http://wang22ti.com/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>日记18-6</title>
    <link href="http://wang22ti.com/2018/06/02/%E6%97%A5%E8%AE%B018-6/"/>
    <id>http://wang22ti.com/2018/06/02/日记18-6/</id>
    <published>2018-06-02T01:25:53.000Z</published>
    <updated>2018-06-22T05:26:32.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18-6-22"><a href="#18-6-22" class="headerlink" title="18-6-22"></a>18-6-22</h1><p>一早起来完成了《操作系统》内核进程调度实验的报告</p><p>中午看了袁老师在上海的报告，</p><h1 id="18-6-21"><a href="#18-6-21" class="headerlink" title="18-6-21"></a>18-6-21</h1><p>吃饭，理发，</p><p>醒来好好又改了一波编译原理，</p><p>加入了复杂的文法和前端，写了报告提交了一份，</p><p>之后写《操作系统》内核进程调度实验的报告</p><h1 id="18-6-20"><a href="#18-6-20" class="headerlink" title="18-6-20"></a>18-6-20</h1><p>晚上形教课，就业动员会，</p><p>虽然没什么关系，但是王老师的话还是值得思考的。</p><p>终于把多级队列搞定了！！舒服！</p><h1 id="18-6-19"><a href="#18-6-19" class="headerlink" title="18-6-19"></a>18-6-19</h1><p>终于搞定了《程序设计模式》，</p><p>交大这次的做法是真的赞，她终将成为传奇。</p><p>主动笔已经在通州待了一整天了。。下午却到了！</p><p>哇，从祝叶舟那里获得神奇hack linux，舒服</p><p>晚上和李老师开党支部的会议。</p><p>回来继续写内核，加入头文件出现了问题，emmm</p><p>头函数总出错，内核和其他的不一样哇</p><h1 id="18-6-18"><a href="#18-6-18" class="headerlink" title="18-6-18"></a>18-6-18</h1><p>端午节，安康，不过来不及一一祝福</p><p>上午继续写《程序设计模式》</p><p>下午和贾宇欣读了linux源码sched.c</p><p>吃饭回来一起看了《古墓丽影》，刺激</p><p>之后写了参观国博的感想，</p><p>萌主已经把需求提取出来了</p><p>声讨交大毕业典礼做法的文章在朋友圈刷屏了</p><p>给静昕整了一下电脑</p><h1 id="18-6-17"><a href="#18-6-17" class="headerlink" title="18-6-17"></a>18-6-17</h1><p>写了一天《系统编程》作业，终于搞定啦</p><p>晚上《程序设计模式》开了个头</p><p>父亲节</p><h1 id="18-6-16"><a href="#18-6-16" class="headerlink" title="18-6-16"></a>18-6-16</h1><p>上午去国博看马克思</p><p>晚上学习部聚餐，哇，小孩贼会玩</p><p>安排了软件工程作业</p><p>其余时间在写《系统编程》作业</p><p>京东收到货就从上海调货啦，服务还是很赞的。</p><h1 id="18-6-15"><a href="#18-6-15" class="headerlink" title="18-6-15"></a>18-6-15</h1><p>稍作调整，有所收获，</p><p>写了《系统编程》3次作业</p><p>问清楚了软件工程作业</p><p>新的主动电容笔到了，不过蓝牙打开不了，换货换货</p><h1 id="18-6-14"><a href="#18-6-14" class="headerlink" title="18-6-14"></a>18-6-14</h1><p>重构了一遍编译原理的实验，</p><p>又看了一部分操作系统内核</p><p>中午班长支书会议，没去1706班的聚餐。。</p><p>编译原理遇到一定的困难。。</p><p>得思考一下战略的问题，不要为了取得战术的胜利导致战术的失败。。</p><h1 id="18-6-13"><a href="#18-6-13" class="headerlink" title="18-6-13"></a>18-6-13</h1><p>操作系统内核开了个头</p><p>写了操作系统的作业</p><h1 id="18-6-12"><a href="#18-6-12" class="headerlink" title="18-6-12"></a>18-6-12</h1><p>终于把编译原理报告写完了，疯狂摊大饼，30多页。。</p><p>晚上支部学长学姐经验交流会，换届。</p><p>回来稍微修改了云计算的API</p><h1 id="18-6-11"><a href="#18-6-11" class="headerlink" title="18-6-11"></a>18-6-11</h1><p>终于听完了CS229第9课！</p><p>晚上学生会换届，绕了一圈。</p><p>emmm，浩男有被调到特研的可能。</p><h1 id="18-6-10"><a href="#18-6-10" class="headerlink" title="18-6-10"></a>18-6-10</h1><p>上午开学代会，包括开幕式、选举式、闭幕式</p><p>常任代表是新的设置，就被选上了</p><p>好累，睡了好久。。</p><p>醒来干了点琐事</p><p>晚上终于把词法分析、四元式加入，哈哈哈哈</p><p>明天细化一下，就可以写报告了。</p><h1 id="18-6-9"><a href="#18-6-9" class="headerlink" title="18-6-9"></a>18-6-9</h1><p>起来看CS229第9课，这好像是第三次看了，终于搞明白想干啥</p><p>中午吃龙虾饭！哇，奢侈。</p><p>下午搞定了SLR1</p><p>晚上学代会预备会与分团会</p><h1 id="18-6-8"><a href="#18-6-8" class="headerlink" title="18-6-8"></a>18-6-8</h1><p>一早起来写编译原理，发现copy函数用错了。。</p><p>浅拷贝为啥专门设一个函数呀？？</p><p>昂，从新来过，抢救过来了</p><p>中午继续参加学代会排练</p><p>晚上学代会排练</p><p>下午和晚上写出了sr0</p><p>从昶霆那里拿了一节软件实践综合，哈哈</p><h1 id="18-6-7"><a href="#18-6-7" class="headerlink" title="18-6-7"></a>18-6-7</h1><p>中午参加学代会排练，</p><p>晚上党支部开会，翔哥从此是正式党员了</p><p>回来和嘉哥疯狂飚英语，看来学CS229还有一些额外的好处。</p><h1 id="18-6-6"><a href="#18-6-6" class="headerlink" title="18-6-6"></a>18-6-6</h1><p>一早起来终于把体系结构的代码注释完了，</p><p>这随性的变量，真教人难受。。。</p><p>中午参加了学代会监票人的第一次彩排。</p><p>晚上学习部最后一次例会，结束啦，最幸福的时刻</p><p>回来把体系结构实验搞定了</p><h1 id="18-6-5"><a href="#18-6-5" class="headerlink" title="18-6-5"></a>18-6-5</h1><p>终于把两份材料交过去啦，</p><p>回来选课。</p><p>终于听完了机器学习的第8节，监督学习结束了！</p><p>末了继续写体系结构实验。。</p><h1 id="18-6-4"><a href="#18-6-4" class="headerlink" title="18-6-4"></a>18-6-4</h1><p>下午去了一趟京东，本以为可以交流一下机器学习、运筹优化方面的知识，</p><p>结果发现来交流的学长学姐不是做技术的。。</p><p>不过还是有收获的。</p><p>回来终于把核函数搞懂了，之后初步写了系统结构实验。</p><h1 id="18-6-3"><a href="#18-6-3" class="headerlink" title="18-6-3"></a>18-6-3</h1><p>慧洁喝多了，一早去了东区一趟，还是小孩啊，晚上又在学习部闹矛盾</p><p>买了便利贴，给材料贴上了，不能再搞混了。</p><p>下午起来把个人陈述搞定了，貌似有点超了。。</p><p>晚上学生会聚餐，终于结束啦，喝得有点多。。</p><p>回来把网上报名搞定了。</p><h1 id="18-6-2"><a href="#18-6-2" class="headerlink" title="18-6-2"></a>18-6-2</h1><p>准备了一天材料。。</p><p>我要学习。。</p><h1 id="18-6-1"><a href="#18-6-1" class="headerlink" title="18-6-1"></a>18-6-1</h1><p>哈哈，儿童节，</p><p>准备夏令营材料，终于把SVM搞懂了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;18-6-22&quot;&gt;&lt;a href=&quot;#18-6-22&quot; class=&quot;headerlink&quot; title=&quot;18-6-22&quot;&gt;&lt;/a&gt;18-6-22&lt;/h1&gt;&lt;p&gt;一早起来完成了《操作系统》内核进程调度实验的报告&lt;/p&gt;
&lt;p&gt;中午看了袁老师在上海的报告，&lt;/p&gt;
      
    
    </summary>
    
      <category term="日记" scheme="http://wang22ti.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo的error——Template_render</title>
    <link href="http://wang22ti.com/2018/05/28/hexo%E7%9A%84error%E2%80%94%E2%80%94Template-render/"/>
    <id>http://wang22ti.com/2018/05/28/hexo的error——Template-render/</id>
    <published>2018-05-28T01:32:45.000Z</published>
    <updated>2018-05-28T01:51:11.012Z</updated>
    
    <content type="html"><![CDATA[<p>学了一晚上吴恩达老师的机器学习，结果一早起来post却遇到了问题<code>Template render error: expected variable end</code>：</p><p><img src="/2018/05/28/hexo的error——Template-render/Snipaste_2018-05-28_08-57-27.png" alt=""></p><p>啊，这是什么鬼啊！我什么都没动啊！</p><p>初步搜索发现是特殊符号的问题，比如<a href="https://www.jianshu.com/p/738ebe02029b" target="_blank" rel="noopener">这位兄弟</a>就提到是特殊符号没有被转义的问题，然而我搜了半天并没有找到一样的情况。最终手动用二分法查找，终于找到了万恶之源：</p><hr><p><img src="/2018/05/28/hexo的error——Template-render/1.png" alt=""></p><hr><p>仔细观察上面的公式，虽然Typora渲染出来了，但是却因为多了一对大括号，hexo渲染不出来！！emmmm，气得想换一个博客，长见识了。</p><p>为了避免莫名其妙的错误，转一个大佬的博客</p><p><a href="https://blog.csdn.net/chwshuang/article/details/52350559" target="_blank" rel="noopener">Hexo在Github中搭建博客系统(6)异常处理</a></p><p>以及hexo官网对于错误的解释</p><p><a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="noopener">问题解答</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学了一晚上吴恩达老师的机器学习，结果一早起来post却遇到了问题&lt;code&gt;Template render error: expected variable end&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/05/28/hexo的error——Templ
      
    
    </summary>
    
      <category term="hexo" scheme="http://wang22ti.com/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo中的markdown和tex公式渲染</title>
    <link href="http://wang22ti.com/2018/05/26/hexo%E4%B8%AD%E7%9A%84markdown%E5%92%8Ctex%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93/"/>
    <id>http://wang22ti.com/2018/05/26/hexo中的markdown和tex公式渲染/</id>
    <published>2018-05-26T12:02:08.000Z</published>
    <updated>2018-06-02T01:49:27.901Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客的正文都是使用markdown的格式存储的，</p><p>默认使用<code>hexo-renderer-marked</code>将markdown转为html（渲染）。</p><p>但是由于markdown不是同一的标准，所以使用编辑器预览的效果和hexo实际渲染的效果并完全相同。</p><p>比如hexo要求<code>#</code>之后必须有空格才能渲染为标题。</p><p>而对于tex公式的渲染则是惨不忍睹：</p><p>不能换行，有些符号无法渲染</p><p>还好有大神解决了问题<a href="https://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="noopener">在Hexo中渲染MathJax数学公式</a></p><p>改用<code>hexo-renderer-kramed</code>渲染即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hexo博客的正文都是使用markdown的格式存储的，&lt;/p&gt;
&lt;p&gt;默认使用&lt;code&gt;hexo-renderer-marked&lt;/code&gt;将markdown转为html（渲染）。&lt;/p&gt;
&lt;p&gt;但是由于markdown不是同一的标准，所以使用编辑器预览的效果和hex
      
    
    </summary>
    
      <category term="hexo" scheme="http://wang22ti.com/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习</title>
    <link href="http://wang22ti.com/2018/05/25/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE1%E2%80%94%E2%80%94%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wang22ti.com/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/</id>
    <published>2018-05-24T16:10:07.000Z</published>
    <updated>2018-06-05T16:05:58.491Z</updated>
    
    <content type="html"><![CDATA[<p>据说这是入门机器学习必不可少的经典教程啦，还可以顺便练一下英语听力。</p><p>虽然之前在各个渠道，包括<code>TensorFlow与深度学习</code>、MOOC《<a href="https://www.icourse163.org/learn/BIT-1001872001" target="_blank" rel="noopener">python机器学习应用</a>》以及<code>知行论坛</code>里或多或少地学过机器学习与神经网络的相关知识，但是觉得还是有必要再认真学习一下经典教程。不过会跳过关于matlab的内容。</p><h1 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h1><p>介绍了课程的一些情况，该课程分为四个部分</p><ol><li><code>监督学习（supervised learning）</code>，用经典的房价预测引出<code>回归（regression）</code>，同样经典的恶性肿瘤预测引出<code>分类（classification）</code></li><li><code>学习理论（learning theory）</code>，不仅要学会理论，还要知道怎么把它用好，比如用数学证明一个手写体识别算法可以达到99.9%的精度</li><li><code>无监督学习（unsupervised learning）</code>，还是恶性肿瘤，还有基因检测的<code>聚类（cluster）</code>、图像3D建模、大规模计算机组织集群、社会关系分析、市场分类、天文数据分析，以及经典的鸡尾酒舞会问题、文本处理、理解机械数据。实验推荐使用<code>MATLAB</code></li><li><code>强化学习（Reinforcement learning）</code>，直升机飞行的自动控制程序、机器人行走控制程序。最基础的概念是<code>回报函数（reward function）</code>，奖励好狗。重要在于定于什么是好的行为，什么是坏的行为。</li></ol><h1 id="Lecture-2"><a href="#Lecture-2" class="headerlink" title="Lecture 2"></a>Lecture 2</h1><h2 id="线性回归（Linear-regression）"><a href="#线性回归（Linear-regression）" class="headerlink" title="线性回归（Linear regression）"></a>线性回归（Linear regression）</h2><p>自动驾驶的案例，司机的行为作为监督学习的样本。</p><p>第一个监督学习的算法，线性回归，回到房价预测问题，首先要引入一些变量：</p><p>​    $x$——训练样本的个数，即数据的行数</p><p>​    $x$——输入变量，<code>特征（feature）</code></p><p>​    $y$——输出变量，<code>目标变量（target）</code></p><p>​    $(x, y)$——训练样本，即数据的一行</p><p>​    $i^{th}$——第$i$个训练样本，即$(x^{(n)}, y^{(n)})$</p><p>由于监督学习有如下框架</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/1.png" alt=""></p><p>所以当设计学习算法的第一步是决定使用怎样的<code>假设h</code>，<strong>第一个</strong>假设是线性的，即假设h为</p><script type="math/tex; mode=display">h(x)=\theta_0 + \theta_1 x</script><p>其中$\theta$被称为<code>参数parameter</code>。</p><p>当然如果引入房屋的其他因素例如卧室的数量，那么假设就变成了</p><script type="math/tex; mode=display">h(x)=h_\theta(x)=\theta_0 + \theta_1 x_1 + \theta_2 x_2</script><p>为了将公式写得更简洁，令$x_0=1$，$n$为特征的数量，则有</p><script type="math/tex; mode=display">h(x)=\sum_{i=0}^n{\theta_i x_i}=\theta^Tx</script><p>为了使得预测与训练数据尽量接近，我要做的是</p><script type="math/tex; mode=display">\min \limits_{\theta} \ J(\theta)=\frac{1}{2} \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2</script><h2 id="梯度下降（Gradient-descent）"><a href="#梯度下降（Gradient-descent）" class="headerlink" title="梯度下降（Gradient descent）"></a>梯度下降（Gradient descent）</h2><p>怎么最小化呢？第一个是一个搜索算法——梯度下降，其基本思想是</p><p>先初始化令</p><script type="math/tex; mode=display">\theta=\vec{0}</script><p>并不停改变$\theta$以减小$J(\theta)$直到我们觉得已经是最小了，其过程如下图所示。</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/mooc-吴恩达老师在斯坦福大学的机器学习公开课（一）——监督学习/2.jpg" alt=""></p><p>我们从山顶一步一步往下走，重要的是我们会在哪里停下。由于出发点的不同，会导致选择完全不同的路径，到达了完全不同的局部最小解。为了每一步都向着最陡峭的方向前进，令</p><script type="math/tex; mode=display">\theta_{i}=\theta_{i}-\alpha \frac{\partial J(\theta)}{\partial \theta_i}</script><p>直到<code>收敛（converge）</code>，其中$\alpha$表示<code>学习速度（learning rate）</code>，决定了每次迈的步子的长度，不宜过小也不宜过大，太小收敛速度慢，太大无法收敛。</p><p>在线性回归中，先假设只有1个训练样本</p><script type="math/tex; mode=display">\frac{\partial J(\theta)}{\partial \theta_i}=\frac{\partial}{\partial \theta_i}\frac{1}{2}(h_{\theta}(x)-y)^2 = (h_{\theta}(x)-y) * \frac{\partial}{\partial \theta_i} (h_{\theta}(x)-y)=\\(h_{\theta}(x)-y) * \frac{\partial}{\partial \theta_i}(\theta_0x_0+\dots+\theta_nx_n-y) =(h_{\theta}(x)-y)* x_i</script><p>那么就有</p><script type="math/tex; mode=display">\theta_{i}=\theta_{i}-\alpha (h_{\theta}(x)-y)x_i</script><h3 id="批量梯度下降（batch-gradient-descent）"><a href="#批量梯度下降（batch-gradient-descent）" class="headerlink" title="批量梯度下降（batch gradient descent）"></a>批量梯度下降（batch gradient descent）</h3><p>如果有$m$个样本，每次都用所有的样本更新$\theta$，则有如下算法</p><hr><p>while not converge: </p><p>​    for i in [0, n]:</p><p>​            $\theta_{i}=\theta_{i}- \alpha \sum_{j=1}^{m}{ (h_{\theta}(x^{(j)})-y^{(j)})x_i^{(j)}}$</p><hr><p>之所以叫“批量”，是因为每次更新$\theta$用的是所有的样本，这类似于操作系统的“批处理”。</p><p>你可能担心收敛的并不是全局最小解，实际上在线性回归的批量梯度下降的时候，其过程如下图所示，</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/3.jpg" alt=""></p><p>所以总会收敛到全局最小解，最小解处梯度为0，当然收敛的检测有很多种，其中一种是比较两次迭代之间值的大小。</p><h3 id="随机梯度下降（Stochastic-gradient-descent-）"><a href="#随机梯度下降（Stochastic-gradient-descent-）" class="headerlink" title="随机梯度下降（Stochastic gradient descent ）"></a>随机梯度下降（Stochastic gradient descent ）</h3><p>如果样本数量$m$很大（例如国家数据），可能即便是一次迭代也需要花费很长时间，所以提出如下算法，其基本思想是每个样本都更新一次$\theta$，从而提高收敛的速度。</p><hr><p>while not converge:</p><p>​    for j in [1, m]:</p><p>​        for i in [0, n]:</p><p>​                    $\theta_{i}=\theta_{i}- \alpha  (h_{\theta}(x^{(j)})-y^{(j)})x_i^{(j)}$</p><hr><p>由于单个样本是毫无回归性的，所以每次更新的方向是随机的，$j(\theta)$的值可能变大也可能变小，但是总体趋势是往下走的，同时最终并不会有稳定的收敛。</p><h2 id="正规方程（Normal-equations）"><a href="#正规方程（Normal-equations）" class="headerlink" title="正规方程（Normal equations）"></a>正规方程（Normal equations）</h2><h3 id="矩阵梯度概念的引入"><a href="#矩阵梯度概念的引入" class="headerlink" title="矩阵梯度概念的引入"></a>矩阵梯度概念的引入</h3><p>实际上最小二乘法求最小值的问题，有解析解，是不需要迭代的。为了推导方便，需要引入一些符号：</p><script type="math/tex; mode=display">\nabla_\theta J= \begin{bmatrix}      \dfrac{\partial J}{\partial \theta_0} \\     \vdots \\     \dfrac{\partial J}{\partial \theta_n} \end{bmatrix} \in  \R ^{n+1}</script><p>所以梯度下降可以写为</p><script type="math/tex; mode=display">\theta = \theta - \alpha \nabla_{\theta}J</script><p>更通用的，</p><script type="math/tex; mode=display">f:\R^{m \times n} \rightarrow \R ,\ \nabla_Af(A)= \begin{bmatrix} \dfrac{\partial f}{\partial A_{11}} &  \cdots &  \dfrac{\partial f}{\partial A_{1n}} \\ \vdots & \ddots & \vdots \\ \dfrac{\partial f}{\partial A_{m1}} & \cdots & \dfrac{\partial f}{\partial A_{mn}}      \end{bmatrix}</script><h3 id="方阵迹的概念与定理"><a href="#方阵迹的概念与定理" class="headerlink" title="方阵迹的概念与定理"></a>方阵迹的概念与定理</h3><p>方阵$A$的迹，即方阵对角线元素之和，记为$tr\ A$</p><script type="math/tex; mode=display">A=\R^{n \times n} ,\  tr\ A= \sum_{i=1}^{n}{A_{ii}}</script><p>定理 1</p><script type="math/tex; mode=display">tr\ AB = tr\ BA \\ tr\ ABC = tr\ CAB =tr\ BCA</script><p>定理 2</p><script type="math/tex; mode=display">f(A)=tr\ AB, \ \nabla_Atr\ AB = B^T</script><p>定理 3</p><script type="math/tex; mode=display">tr\ A = tr\ A^T</script><p>定理 4</p><script type="math/tex; mode=display">a\in \R, \ tr\ a = a</script><p>定理 5</p><script type="math/tex; mode=display">\nabla_A tr\ ABA^TC = CAB + C^TAB^T</script><h3 id="最小二乘法解析解的推导"><a href="#最小二乘法解析解的推导" class="headerlink" title="最小二乘法解析解的推导"></a>最小二乘法解析解的推导</h3><p>预测值矩阵为：</p><script type="math/tex; mode=display">X\theta = \begin{bmatrix} —— (x^{(1)})^T——  \\ —— (x^{(2)})^T—— \\ \vdots \\ —— (x^{(m)})^T——  \end{bmatrix}\theta = \begin{bmatrix} x^{(1)T}\theta \\ x^{(2)T}\theta \\ \vdots \\  x^{(m)T}\theta \end{bmatrix}= \begin{bmatrix} h_\theta (x^{(1)}) \\ h_\theta (x^{(2)}) \\ \vdots \\h_\theta (x^{(m)})\end{bmatrix}</script><p>输出值矩阵为：</p><script type="math/tex; mode=display">y=\begin{bmatrix} y^{(1)} \\ \vdots \\ y^{(m)} \end{bmatrix}</script><p>所以</p><script type="math/tex; mode=display">J(\theta) = \dfrac{1}{2} (X\theta -y)^T(X\theta -y)</script><p>为了求$J(\theta)$的最小值，就要求其梯度为0的$\theta$</p><script type="math/tex; mode=display">0=\nabla_\theta J(\theta) = \nabla_\theta \dfrac{1}{2} (X\theta -y)^T(X\theta -y) \\ =  \dfrac{1}{2} \nabla_\theta (\theta^TX^TX\theta - \theta^TX^Ty - y^TX\theta + y^Ty) \\= \dfrac{1}{2} \nabla_\theta tr (\theta^TX^TX\theta - \theta^TX^Ty - y^TX\theta + y^Ty) \\ = \dfrac{1}{2} [ \nabla_\theta tr(\theta\ I\ \theta^T\ X^TX) -   \nabla_\theta tr(y^TX\theta) -  \nabla_\theta tr(y^TX\theta)] \\= X^TX \theta - X^Ty</script><p>所以令$J(\theta)$最小的$\theta$满足</p><script type="math/tex; mode=display">X^TX \theta = X^Ty</script><p>即正规方程</p><script type="math/tex; mode=display">\theta = (X^TX )^{-1}X^Ty</script><p>十分的漂亮！当然使用的条件是不能有完全相同的两个样本，不然就没有逆矩阵了。</p><h1 id="Lecture-3"><a href="#Lecture-3" class="headerlink" title="Lecture 3"></a>Lecture 3</h1><h2 id="局部加权回归（locally-weighted-regression）"><a href="#局部加权回归（locally-weighted-regression）" class="headerlink" title="局部加权回归（locally weighted regression）"></a>局部加权回归（locally weighted regression）</h2><p>先介绍了<code>欠拟合（underfitting）</code>和<code>过拟合（overfitting）</code>。</p><p>线性回归是一种典型的<code>参数学习算法（parametric learning algorithm）</code>，有固定数目的参数来拟合数据。</p><p>接下来讨论的是<code>非参数学习算法（non-parametric learning algorithm）</code>，算法参数的数量会醉着样本数量$m$线性增长，叫做<code>局部加权回归（locally weighted regression）</code>，可以让我们不必担心特征的选择（尤其是特征的最高次数）。</p><p>线性回归会均匀使用所有样本拟合：</p><hr><p>LR: fit $\theta$ to minimize </p><script type="math/tex; mode=display">\sum_i{(y^{(i)} - x^{(i)})^2}</script><p>return $\theta^Tx$</p><hr><p>而局部加权回归关注输入$x$附近的点:</p><hr><p>LWR: fit $\theta$ to minimize </p><script type="math/tex; mode=display">\sum_i{w^{(i)}(y^{(i)} - x^{(i)})^2}, where \ w^{(i)}=e^{-\dfrac{(x^{(i)} - x)^2}{2}}</script><p>return $\theta^Tx$</p><hr><p>如果$x^{(i)}$离$x$比较近，那么$w^{(i)}$会接近1，反之接近0。</p><p>实际上权重$w$的形式可以有很多，这种形式上和<code>高斯分布（Gaussian distribution，正态分布 Normal distribution）</code>一样的权重只是其中的一种（实际和高斯分布没有任何联系，只是形式一样，而这种形式又很好用）。</p><p>由于算法依赖于输入样本$x$，所以每次预测都需要重新计算假设$h$。</p><p>进一步的，为了控制算法“局部”的范围，引入<code>波长参数（bandwidth parameter）</code>$\tau$，其越小越重视“局部”。</p><hr><p>LWR: fit $\theta$ to minimize </p><script type="math/tex; mode=display">\sum_i{w^{(i)}(y^{(i)} - x^{(i)})^2}, where \ w^{(i)}=e^{-\dfrac{(x^{(i)} - x)^2}{2\tau}}</script><p>return $\theta^Tx$</p><hr><p>当然，如果控制不好$\tau$的大小，也会陷入过拟合或欠拟合。</p><h2 id="线性回归的概率解释（Probabilistic-interpretation）"><a href="#线性回归的概率解释（Probabilistic-interpretation）" class="headerlink" title="线性回归的概率解释（Probabilistic interpretation）"></a>线性回归的概率解释（Probabilistic interpretation）</h2><p>讨论模型的概率含义时，使用的是<strong>线性回归</strong>而非局部加权回归。</p><p>这部分旨在说明一个问题：可以优化的假设$h$非常多，为什么我们要使用最小二乘？这个结论是建立在一系列<code>假设（assumption，符合汉语正常含义的“假设”）</code>上的。</p><p><strong>假设1</strong></p><script type="math/tex; mode=display">y^{(i)} = \theta^Tx^{(i)} + \epsilon^{(i)}</script><p>其中$\epsilon^{(i)}$是<code>误差项（error term）</code>，表示没有选择到的特征给预测值带来的偏差，或者随机变量带来的噪声，比如心情。</p><p><strong>假设2</strong></p><script type="math/tex; mode=display">\epsilon^{(i)} \sim N(0, \sigma^2)</script><p>即$\epsilon^{(i)}$服从期望为0，方差为$\sigma^2$的<a href="https://baike.baidu.com/item/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83/829892?fr=aladdin" target="_blank" rel="noopener">正态分布</a>（如此假设是基于<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/829451?fr=aladdin" target="_blank" rel="noopener">中心极限定理</a>以及数学上的方便，虽然貌似假设期望为0已经默认了我们的假设是正确的，但是要意识到机器学习中的假设都不可能绝对正确，但只要足够精确即可），则有$\epsilon^{(i)}$的<code>概率密度函数（density）</code></p><script type="math/tex; mode=display">P(\epsilon^{(i)}) = \frac{1}{\sqrt{2\pi}\sigma} e^{-\dfrac{(\epsilon^{(i)})^2}{2\sigma^2}}</script><p>因此将假设1代入概率密度函数，$y^{(i)}$也将符合正态分布</p><script type="math/tex; mode=display">P(y^{(i)} | x^{(i)};\theta) = \frac{1}{\sqrt{2\pi}\sigma} e^{-\dfrac{(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}}</script><p>注意，$x^{(i)}$和$\theta$之间用的是分号$;$而非逗号$,$，这表示这里采用的是频率学派（frequentist）的观点，即假设$\theta$是某个确定的值，只是我们暂时不知道，而确定值是不能作为条件概率的条件的，所以只能用分号。（<code>贝叶斯学派（Bayesian）</code>认为$\theta$也是随机变量，服从某个分布）。</p><p><strong>假设3</strong></p><script type="math/tex; mode=display">\epsilon^{(i)}s  \ are \ IID</script><p>即影响$\epsilon^{(i)},i \in [1, m]$是<code>独立同分布（independently and identically distributed ）</code>的。</p><p>因为我们的目标是求$\theta$使得$y$为$y^{(i)}$的概率最大，即有</p><script type="math/tex; mode=display">\max_\limits{\theta} L(\theta)=P(\vec{y} | x;\theta)</script><p>即将$y$的概率密度函数看作是$\theta$的<code>极大似然估计（Maximum Likelihood Estimate，MLE ）</code>函数，就有</p><script type="math/tex; mode=display">L(\theta)=P(\vec{y} | x;\theta) = \prod_{i=1}^m{P(y^{(i)} | x^{(i)};\theta) }\\ =\prod_{i=1}^m{\frac{1}{\sqrt{2\pi}\sigma} e^{-\dfrac{(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}}}</script><p>为了方便运算，令</p><script type="math/tex; mode=display">l(\theta) = \log{L(\theta)} = \sum_{i=1}^m{\log{(\frac{1}{\sqrt{2\pi}\sigma})} - \dfrac{(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}} \\=m \log{\frac{1}{\sqrt{2\pi}\sigma}} - \dfrac{1}{2\sigma^2} \sum_{i=1}^m{ (y^{(i)}-\theta^Tx^{(i)})^2}</script><p>所以我们的目标就等价于</p><script type="math/tex; mode=display">\min_\limits{\theta}  \dfrac{1}{2} \sum_{i=1}^m{ (y^{(i)}-\theta^Tx^{(i)})^2}</script><p>这就从概率的角度解释了为什么采用最小二乘法，这是在以上假设的基础上可以推导出来的。</p><p>这种解释也是为了引出第一个分类算法——逻辑回归。</p><h2 id="逻辑回归（Logistic-regression）"><a href="#逻辑回归（Logistic-regression）" class="headerlink" title="逻辑回归（Logistic regression）"></a>逻辑回归（Logistic regression）</h2><p>在逻辑回归中，</p><script type="math/tex; mode=display">y \in \{ 0, 1\}</script><p>有些人有线性回归解决分类问题，即预测值大于0.5分类为0，反之分类为1，实际上这往往是很糟糕的。</p><p>为了使得</p><script type="math/tex; mode=display">h_{\theta}(x) \in [0,1]</script><p>我们采用这样形式的假设（原因之后讨论）：</p><script type="math/tex; mode=display">h_{\theta}(x)=g(\theta^Tx) = \frac{1}{1+e^{-\theta^Tx}}</script><p>其中</p><script type="math/tex; mode=display">g(z)= \frac{1}{1+e^{-z}}</script><p>被称为<code>Signoid function</code>或<code>Logistic function</code>，它可以将实数集正相关地映射到$[0,1]$。</p><p>进一步地，和上面一样对逻辑回归进行概率上的解释，易知由于$y$服从<code>伯努利分布Bernoulli distribution</code> 即有如下两个式子</p><script type="math/tex; mode=display">P(y=1|x;\theta) = h_\theta(x) \\ P(y=0|x;\theta) = 1- h_\theta(x)</script><p>为了表达的简洁，写为</p><script type="math/tex; mode=display">L(\theta)=P(y|x;\theta) =\prod_{i=1}^{m}h_\theta(x^{(i)})^{y^{(i)}}(1- h_\theta(x^{(i)}))^{1-y^{(i)}}</script><p>同样就有</p><script type="math/tex; mode=display">l(\theta)=\sum_{i=1}^m{y^{(i)}\log{h_\theta(x^{(i)})} + (1-y^{(i)})\log{(1-h_\theta(x^{(i)})}) }</script><p>为了让$l(\theta)$最大，同样使用梯度下降，有</p><script type="math/tex; mode=display">\frac{\partial}{\partial \theta_j}l(\theta) = \sum_{i=1}^m{(y^{(i)}-h_\theta(x^{(i)}))x_j^{(i)}}</script><p>即</p><script type="math/tex; mode=display">θ_j=θ_j + \alpha \sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_j^{(i)}</script><p>这和线性回归中梯度下降的形式几乎完全一样，之后会学习更通用的模型，这种相似不是偶然。但是要注意假设$h$是不一样的，可以称之为梯度上升。</p><h2 id="感知机算法（Perceptron-algorithm）"><a href="#感知机算法（Perceptron-algorithm）" class="headerlink" title="感知机算法（Perceptron algorithm）"></a>感知机算法（Perceptron algorithm）</h2><p>这里只是简单介绍，在第二部分学习理论learning theory中会重新说。</p><p>逻辑回归没有将预测值强制变为0或1，在感知机中：</p><script type="math/tex; mode=display">g(z) = \left \{ \begin{array}{lr} 1, & z>0 \\ 0, &z\leq0  \end{array} \right.</script><p>同样有</p><script type="math/tex; mode=display">h_{\theta}(x)=g(\theta^Tx)</script><p>以及批量梯度上升公式</p><script type="math/tex; mode=display">θ_j=θ_j + \alpha \sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_j^{(i)}</script><h1 id="Lecture-4"><a href="#Lecture-4" class="headerlink" title="Lecture 4"></a>Lecture 4</h1><h2 id="牛顿方法（Newton’s-method）"><a href="#牛顿方法（Newton’s-method）" class="headerlink" title="牛顿方法（Newton’s method）"></a>牛顿方法（Newton’s method）</h2><p>之前一直通过梯度下降拟合并得到$\theta$，牛顿方法是另外的一种。</p><p>为了找到函数的零点，即</p><script type="math/tex; mode=display">find \ \theta  \ s.t \ f(\theta) = 0</script><p>牛顿法从初始点$(\theta_0, f(\theta_0))$不停做切线，令切线与$x$轴交点为新的$\theta$，其过程如下图所示</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/4.png" alt=""></p><p>可以用公式表达为</p><script type="math/tex; mode=display">\theta^{(i+1)} = \theta^{(i)} - \frac{f(\theta^{(i)})}{f^{'}(\theta^{(i)})}</script><p>其中为了方便理解，令</p><script type="math/tex; mode=display">\Delta=\frac{f(\theta^{(i)})}{f^{'}(\theta^{(i)})} \ or \ f^{'}(\theta^{(i)})=\frac{f(\theta^{(i)})}{\Delta}</script><p>应用到逻辑回归的拟合中，就是</p><script type="math/tex; mode=display">\theta^{(t+1)} = \theta^{(t)} - \frac{l^{'}(\theta^{(t)})}{l^{''}(\theta^{(t)})}</script><p>这个方法具有很高的收敛速度，一般在逻辑回归中只需要十几轮迭代，用术语讲是<a href="https://blog.csdn.net/robert_chen1988/article/details/53137997" target="_blank" rel="noopener">二阶收敛（quadratic conversions）</a>，当然我们想知道这个方法适用范围，但是这比算法本身复杂得多。</p><p>将它推广到$n$个特征有</p><script type="math/tex; mode=display">\theta^{(t+1)} = \theta^{(t)} - H^{-1} \nabla_\theta l</script><p>其中</p><script type="math/tex; mode=display">H_{ij}=\frac{\partial ^2l}{\partial\theta_i \partial\theta_j}</script><p>被称为<code>Hessian矩阵（黑塞矩阵，巨难听的翻译）</code>。由于每次迭代都要求矩阵梯度与Hessian矩阵，所以比较特征数量适中的样本（比如几十到上百个）。</p><h2 id="指数分布族（Exponential-family-distribution）"><a href="#指数分布族（Exponential-family-distribution）" class="headerlink" title="指数分布族（Exponential family distribution）"></a>指数分布族（Exponential family distribution）</h2><p>牛顿方法和梯度下降都是拟合的方法，下面不谈拟合的方法，而是说明线性回归和逻辑回归都是一个更广泛模型的特例。在此之前需要介绍<code>指数分布族（Exponential family distribution）</code>，因为高斯分布和伯努利分布实际都是他们的一个特例，它有这样的形式：</p><script type="math/tex; mode=display">P(y;\eta) = b(y) \exp^{\eta^TT(y) -a(\eta)}</script><p>其中$T(y)$被称为<a href="https://baike.baidu.com/item/%E5%85%85%E5%88%86%E7%BB%9F%E8%AE%A1%E9%87%8F/12715941?fr=aladdin" target="_blank" rel="noopener">充分统计量（sufficient statistic）</a>，很多情况下$T(y)=y$。</p><p>一旦$a$、$b$、$T$被固定了，那么指数分布族就“退化”变为某一类概率分布的集合，比如不同均值组成的高斯分布的集合、不同参数的伯努利分布的集合，它们都以$\eta$作为参数。</p><h3 id="伯努利分布是指数分布族的特例"><a href="#伯努利分布是指数分布族的特例" class="headerlink" title="伯努利分布是指数分布族的特例"></a>伯努利分布是指数分布族的特例</h3><p>对于伯努利分布，有</p><script type="math/tex; mode=display">P(j;\phi)=\phi^y(1-\phi)^{1-y} \\ =\exp{(y\log{\phi}+(1-y)\log{(1-\phi)}) }\\ =\exp{(\log{\dfrac{\phi}{1-\phi}y} +\log{(1-\phi)} )}</script><p>所以</p><script type="math/tex; mode=display">b(y)=1 \\ \eta=\log{\dfrac{\phi}{1-\phi}} \\ T(y)=y \\ a(\eta) = -\log{(1-\phi)}</script><p>这已经说明了伯努利分布是指数分布族的一个特例，并且进一步可以得到</p><script type="math/tex; mode=display">\phi = \frac{1}{1+e^{-\eta}} \\ a(\eta)=-\log(1- \frac{1}{1+e^{-\eta}}) = \log(1+e^\eta)</script><p>非常神奇地就得到了Logistic函数。</p><h3 id="高斯分布是指数分布族的特例"><a href="#高斯分布是指数分布族的特例" class="headerlink" title="高斯分布是指数分布族的特例"></a>高斯分布是指数分布族的特例</h3><p>在线性回归的概率解释中，我们注意到高斯分布的方差$\sigma^2$对于结果并不产生影响，所以为了方便推导这里假设高斯分布的方差为1。</p><script type="math/tex; mode=display">\frac{1}{\sqrt{2\pi}} e^{-\dfrac{(y-\mu)^2}{2}}=\frac{1}{\sqrt{2\pi}}e^{-\frac{y^2}{2}}e^{\mu y-\frac{\mu^2}{2}}</script><p>所以很容易得到</p><script type="math/tex; mode=display">b(y)=\frac{1}{\sqrt{2\pi}}e^{-\frac{y^2}{2}} \\ \eta=\mu \\ T(y)=y \\ a(\eta)=\frac{\mu^2}{2}=\frac{\eta^2}{2}</script><p>同样说明了高斯分布是指数分布族的特例。</p><h3 id="哪些分布是指数分布族的特例？"><a href="#哪些分布是指数分布族的特例？" class="headerlink" title="哪些分布是指数分布族的特例？"></a>哪些分布是指数分布族的特例？</h3><p>我们遇到的大多数都是，包括</p><p>多元正态分布（multivariate normal distribution）（高斯分布推广）</p><p>多项式分布（multinomial distribution）（伯努利分布推广）</p><p>泊松分布（poisson distribution）（计数）</p><p>伽马分布（gamma distribution）</p><p>指数分布（exponential distribution）（间隔）</p><p>还有beta distribution、Dirichlet distribution（小数，概率分布建模）、Wishart distribution（协方差矩阵分布）等等。</p><h2 id="广义线性模型（Generalized-linear-models）"><a href="#广义线性模型（Generalized-linear-models）" class="headerlink" title="广义线性模型（Generalized linear models）"></a>广义线性模型（Generalized linear models）</h2><p><strong>假设1</strong> $y$服从指数分布族，即</p><script type="math/tex; mode=display">y|x;\theta \sim ExpFamily(\eta)</script><p><strong>假设2</strong> 我们的目标是对于给定的$x$，输出$T(y)$的数学期望，即</p><script type="math/tex; mode=display">h(x)= E[T(y)|x]</script><p><strong>假设3</strong> 这是一个线性模型，即</p><script type="math/tex; mode=display">\eta=\theta^Tx</script><h3 id="逻辑回归是广义线性模型的特例"><a href="#逻辑回归是广义线性模型的特例" class="headerlink" title="逻辑回归是广义线性模型的特例"></a>逻辑回归是广义线性模型的特例</h3><p>由伯努利分布的结论和假设</p><script type="math/tex; mode=display">h_\theta(x)=E[T(y)|x]=E[y|x]=P(y=1|x;\theta)=\phi= \frac{1}{1+e^{-\eta}}= \frac{1}{1+e^{-\theta^tx}}</script><p>这已经完成了在给定伯努利分布的情况下，由广义线性模型到逻辑回归的推导，其中</p><script type="math/tex; mode=display">g(\eta)=E[y;\eta]=\frac{1}{1+e^{-\eta}}</script><p>$g$被称为<code>正则响应函数（canonical response function）</code>，$g^{-1}$被称为<code>正则关联函数（canonical link function）</code>。这只是两个名字，记住就行。</p><h3 id="Softmax回归是广义线性模型的特例"><a href="#Softmax回归是广义线性模型的特例" class="headerlink" title="Softmax回归是广义线性模型的特例"></a>Softmax回归是广义线性模型的特例</h3><p>由于高斯分布太过简单，我们看一个复杂的，假设$y$服从多项式分布，我们就可以得到Softmax回归的假设$h$。</p><p>在多项式分布中，</p><script type="math/tex; mode=display">y\in \{ 1, 2, \dots, k \}</script><p>有参数</p><script type="math/tex; mode=display">P(y=i)=\phi_i,i=1,2,\dots,k</script><p>由于他们之和一定为1，所以把$\phi_k$仅仅看做简记。</p><p>在多项式分布中，$T(i)$是第$i$位为$1$的$k-1$维的<code>one hot vector</code>，而$T(0)$是全0的$k-1$维列向量。</p><p>定义<code>指示函数（indicator function）</code></p><script type="math/tex; mode=display">1\{True\}=1\\ 1\{False\}=0</script><p>所以</p><script type="math/tex; mode=display">T(y)_i=1\{y=i\}</script><p>于是有</p><script type="math/tex; mode=display">P(y)=\prod_{i=1}^k{\phi_i^{1\{y=i\}}}=\prod_{i=1}^k{\phi_i^{T(y)_i}}</script><p>经过类似的推导后有</p><script type="math/tex; mode=display">\eta=\begin{bmatrix} \log(\phi_1/\phi_k) \\  \log(\phi_2/\phi_k) \\ \vdots\\ \log(\phi_{k-1}/\phi_k) \end{bmatrix} \\ a(\eta)=-\log(\phi_k) \\ b(y)=1</script><p>于是</p><script type="math/tex; mode=display">\phi_i=\frac{e^{\eta_i}}{1+\sum_{j=1}^{k-1}e^{\eta_j}} = \frac{e^{\theta_i^Tx}}{1+\sum_{j=1}^{k-1}e^{\theta_i^Tx}}</script><p>最后</p><script type="math/tex; mode=display">h_\theta(x)=E[T(y)|x;\theta]=\begin{bmatrix}1\{y=1\}\\ 1\{y=2\}\\ \vdots \\ 1\{y=k-1\} \end{bmatrix}=\begin{bmatrix}\phi_1\\ \phi_2\\ \vdots \\ \phi_{k-1} \end{bmatrix}</script><p>对应最小二乘，有</p><script type="math/tex; mode=display">\max\limits_{\theta}L(\theta)=P(\vec{y} | x;\theta) = \prod_{i=1}^m{P(y^{(i)} | x^{(i)};\theta) } =\prod_{i=1}^m{\prod_{i=1}^k{\phi_i^{1\{y=i\}}}}</script><p>所以只要确定了$y$的分布，假设$h$以及需要优化的式子就都确定了。至于拟合的方法，在softmax回归中梯度上升或牛顿方法都是不行的。</p><h1 id="Lecture-5"><a href="#Lecture-5" class="headerlink" title="Lecture 5"></a>Lecture 5</h1><h2 id="生成学习算法（Generative-learning-algorithm）"><a href="#生成学习算法（Generative-learning-algorithm）" class="headerlink" title="生成学习算法（Generative learning algorithm）"></a>生成学习算法（Generative learning algorithm）</h2><p>上述的分类算法，都可以属于<code>判别学习算法（discriminative learning algorithm）</code>，即使用全部样本进行学习后直接给出分类假设$h$。下面要介绍的算法，称为<code>生成学习算法（Generative learning algorithm）</code>，分别学习不同类别的样本，得到不同的假设，然后将输入$x$分别代入不同的假设，比较与哪一个吻合得更好，从而得到分类。利用<code>贝叶斯公式（Bayes Rule ）</code>，对于二分类的生成学习算法，有形式化的语言描述：</p><script type="math/tex; mode=display">Given \ P(x|y) \ and \ P(y) ,\\ P(y=1|x)=\frac{P(x|y=1) P(y=1)}{P(x)}=\frac{P(x|y=1) P(y=1)}{P(x|y=0)+P(x|y=1)} \\ P(y=0|x)=\frac{P(x|y=0) P(y=0)}{P(x)}=\frac{P(x|y=0) P(y=0)}{P(x|y=0)+P(x|y=1)}</script><p>所以重点就在于如何选择$P(x|y)$的形式。</p><h2 id="高斯判别分析（Gaussian-discriminant-Analysis）"><a href="#高斯判别分析（Gaussian-discriminant-Analysis）" class="headerlink" title="高斯判别分析（Gaussian discriminant Analysis）"></a>高斯判别分析（Gaussian discriminant Analysis）</h2><p>假设输入有$n$个特征即$n \in \R^n$，<code>高斯判别分析（Gaussian discriminant Analysis）</code>认为</p><script type="math/tex; mode=display">P(x|y) \sim N(\vec{\mu},\Sigma)</script><p>即服从<code>多元高斯分布</code>，具有如下概率密度公式</p><script type="math/tex; mode=display">P(x;\mu,\Sigma)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{1/2}}\exp{-\frac{1}{2}(x-\mu)^T\Sigma(x-\mu)}</script><p>为了理解高斯判别分析的原理，先以二元为例说明参数对于概率分布的影响。</p><p>协方差矩阵$\Sigma$主对角线影响高度，左图标准二元高斯分布（$\Sigma=I$），中图$\Sigma=0.6I$，右图$\Sigma=2I$。</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/5.png" alt=""></p><p>协方差矩阵$\Sigma$其他元素会使得图形以最高点为中心沿着某个方向变旋转边被挤压：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/6.png" alt=""></p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/7.png" alt=""></p><p>其中</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/8.png" alt=""></p><p>而$\mu$决定了图形的位置：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/9.png" alt=""></p><p>其中$\Sigma=I$,</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/10.png" alt=""></p><p>所以通过学习，得到的两个不同的高斯判别模型，它们有着不同的$\mu$和$\Sigma$，比较理想的是有下图：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/11.png" alt=""></p><p>有了对高斯判别方法的直观理解，下面给出其形式化描述：</p><script type="math/tex; mode=display">P(y)=\phi^y(1-\phi)^{(1-y)} \\ P(x|y=0)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{1/2}}\exp{-\frac{1}{2}(x-\mu_0)^T\Sigma(x-\mu_0)} \\ P(x|y=1)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{1/2}}\exp{-\frac{1}{2}(x-\mu_1)^T\Sigma(x-\mu_1)}</script><p>所以有四个参数$\phi$、$\mu_0$、$\mu_1$和$\Sigma$，有对数极大似然函数：</p><script type="math/tex; mode=display">l(\phi,\mu_0,\mu_1,\Sigma)=\log\prod_{i=1}^m{P(x^{(i)}, y^{(i)})} \\ =\log\prod_{i=1}^m{P(x^{(i)}| y^{(i)})}P(y^{(i)})</script><p>求解之后有：</p><script type="math/tex; mode=display">\phi=\sum_i{y^{(i)}}/m \\ \mu_0=\frac{\sum_{i=1}^{m}{ (1-y^{(i)})x^{(i)} }}{\sum_{i=1}^{m}{(1-y^{(i)})}} \\ \mu_1=\frac{\sum_{i=1}^m{y^{(i)}x^{(i)}}}{\sum_{i=1}^m{y^{(i)}}} \\ \Sigma=\frac{1}{m}\sum_{i=1}^m{(x^{(i)}-\mu_{y^{(i)}})(x^{(i)}-\mu_{y^{(i)}})^T}</script><p>所以对于测试样本，任务是：</p><script type="math/tex; mode=display">\max\limits_{y}P(y|x)=\max\limits_{y}P(y|x)=\max\limits_{y}P(x|y)P(y)/P(x)=\max\limits_{y}P(x|y)P(y)</script><p>当然当$y$满足均匀分布时，有</p><script type="math/tex; mode=display">P(y)\sim Uniform, \ \max\limits_{y}P(x|y)</script><p>虽然并不是很常见。</p><h2 id="高斯判别分析和逻辑回归的关系"><a href="#高斯判别分析和逻辑回归的关系" class="headerlink" title="高斯判别分析和逻辑回归的关系"></a>高斯判别分析和逻辑回归的关系</h2><p>高斯判别分析和逻辑回归都假设了变量服从高斯分布，他们有没有联系呢？实际上，</p><script type="math/tex; mode=display">P(y=1|x;\phi;\Sigma;\mu_0;\mu_1)=\frac{1}{1+e^{-\theta^Tx}}</script><p>其中$\theta$是参数$\phi$、$\mu_0$、$\mu_1$和$\Sigma$的函数，即$x|y\sim Gaussian$是$P(y=1|x)$为Logistic函数的充分条件。那是不是必要条件呢？并不是，因为当$x|y=1$和$x|y=0$均服从泊松分布的时候，更广泛的，均服从指数分布族中的某一分布的时候，$P(y=1|x)$也为Logistic函数。</p><p>这说明$x|y\sim Gaussian$是一个比逻辑回归更强的假设，因此它的好处是需要的样本更少（更强的假设让更多事情变为已知），同时逻辑回归的结果具有更强的健壮性。</p><h2 id="朴素贝叶斯算法（Naive-Bayes-algorithm）"><a href="#朴素贝叶斯算法（Naive-Bayes-algorithm）" class="headerlink" title="朴素贝叶斯算法（Naive Bayes algorithm）"></a>朴素贝叶斯算法（Naive Bayes algorithm）</h2><p>先不管生成学习算法，在垃圾邮件的分类问题中，将所有学习样本（即已有的邮件）中出现的单词视为一个大小为$n$的字典，每一个邮件的特征就是一个$n$维0-1变量，指示对应的单词是否在该邮件中出现过。如果我们假设$x|y$服从多项式分布，从理论上行得通，当时由于$n$往往很大比如50000，那么该模型的参数就有$2^{50000}$个，这是不切实际的。</p><p>所以在<code>朴素贝叶斯算法（Naive Bayes algorithm）</code>算法中，我们做一个非常强的假设</p><script type="math/tex; mode=display">x_i,i=1,2,\dots,n \ conditionally \ independent</script><p>即在一封邮件中单词与单词之间是否出现时相对独立的。虽然这个假设看起来往往不正确，但是可以再大大简化问题的情况下取得良好的分类效果。于是就有</p><script type="math/tex; mode=display">P(y|x)=\prod_{i=1}^n{P(y|x_i)}</script><p>由于$x_i$和$y$均遵循伯努利分布，所以这个模型的参数有</p><script type="math/tex; mode=display">\phi_{i|y=1} =P(x_i=1|y=1) \\ \phi_{i|y=0} =P(x_i=1|y=0) \\ \phi_{y} =P(y=1)</script><p>通过似然函数</p><script type="math/tex; mode=display">L(\phi_{y}, \phi_{i|y=1}, \phi_{i|y=1})=\prod_{i=1}^{m}{P(x^{(i)}, y^{(i)})}</script><p>就很直观的有</p><script type="math/tex; mode=display">\phi_{j|y=1} =\frac{\sum_{i=1}^m{ 1\{  x_j^{(i)}=1,y^{(i)}=1 \} }}{\sum_{i=1}^m{ 1\{  y^{(i)}=1 \} }} \\ \phi_{j|y=0} =\frac{\sum_{i=1}^m{ 1\{  x_j^{(i)}=1,y^{(i)}=0 \} }}{\sum_{i=1}^m{ 1\{  y^{(i)}=0 \} }} \\ \phi_y=\frac{\sum_{i=1}^m{ 1\{  y^{(i)}=1 \} }}{m}</script><p>因此对于一封新的邮件，它是垃圾邮件的概率为</p><script type="math/tex; mode=display">P(y=1|x)=\frac{P(x|y=1)P(y=1)}{P(x)}=\frac{(\prod_{i=1}^nP(x_i|y=1))P(y=1)}{(\prod_{i=1}^nP(x_i|y=1))P(y=1)+(\prod_{i=1}^nP(x_i|y=0))P(y=0)}</script><h2 id="Laplace平滑（Laplace-smoothing）"><a href="#Laplace平滑（Laplace-smoothing）" class="headerlink" title="Laplace平滑（Laplace smoothing）"></a>Laplace平滑（Laplace smoothing）</h2><p>以垃圾邮箱为例，在朴素贝叶斯算法中，如果测试样本中出现了一个新的单词，那么会导致预测值为$\frac{0}{0+0}$的尴尬情况发生。类似的，一个球队连输5场，不能说下一场它一定会输。</p><p>若$y$服从多项式分布并有$k$个取值，有参数</p><script type="math/tex; mode=display">\phi_j=\frac{\sum_{i=1}^m{1\{ y^{(i)}=j \}}}{m}</script><p>用<code>Laplace平滑（Laplace smoothing）</code>解决上述的问题，令</p><script type="math/tex; mode=display">\phi_j=\frac{(\sum_{i=1}^m{1\{ y^{(i)}=j \}})+1}{m+k}</script><p>回到朴素贝叶斯问题，这是$y$服从伯努利分布，只有两个取值，上式自动退化，同时有</p><script type="math/tex; mode=display">\phi_{j|y=1} =\frac{（\sum_{i=1}^m{ 1\{  x_j^{(i)}=1,y^{(i)}=1 \} }）+1}{(\sum_{i=1}^m{ 1\{  y^{(i)}=1 \} })+2} \\ \phi_{j|y=0} =\frac{(\sum_{i=1}^m{ 1\{  x_j^{(i)}=1,y^{(i)}=0 \} })+1}{(\sum_{i=1}^m{ 1\{  y^{(i)}=0 \} })+2}</script><p>之后用贝叶斯公式+全概率公式就可以对新的样本进行预测啦！</p><h1 id="Lecture-6"><a href="#Lecture-6" class="headerlink" title="Lecture 6"></a>Lecture 6</h1><p>在上述的文本分类问题中，朴素贝叶斯以<code>多元伯努利事件模型（Multivariate Bernoulli Event Model）</code>的形式出现。考虑到它忽略了一个单词出现的次数，朴素贝叶斯还有一种常见的形式，称为<code>多项式事件模型（Multinomial Event Model）</code>，即假设$x_i\in\{1,2,\dots,k\}$（$x$服从多项式分布）。这种形式也适用于将连续量进行分段处理。</p><h2 id="多项式事件模型（Multinomial-Event-Model）"><a href="#多项式事件模型（Multinomial-Event-Model）" class="headerlink" title="多项式事件模型（Multinomial Event Model）"></a>多项式事件模型（Multinomial Event Model）</h2><p>假设第$i$封邮件被表示为</p><script type="math/tex; mode=display">(x_1^{(i)},x_2^{(i)},\dots,x_{n_i}^{(i)})</script><p>其中$n_i$表示第$i$封邮件中单词的数目，$x$表示该单词在单词字典中的序号或索引，比如所有样本中有$|V|$个单词，则$x_j\in\{1, 2, \dots, |V|\}$。此时生成学习的式子应该为：</p><script type="math/tex; mode=display">P(x, y)=(\prod_{i=1}^n{P(x_i|y)})P(y)</script><p>模型的参数包括</p><script type="math/tex; mode=display">\phi_{k|y=1}=P(x_j=k|y=1)\\ \phi_{k|y=0}=P(x_j=k|y=0) \\ \phi_y=P(y=1)</script><p>通过极大似然函数</p><script type="math/tex; mode=display">L(\phi,\phi_{i|y=0},\phi_{i|y=1})=\prod_{i=1}^{m}P(x^{(i)}, y^{(i)})=\prod_{i=1}^{m}{(\prod_{j=1}^{n_1}{P(x_j^{(i)}|y;\phi_{i|y=0},\phi_{i|y=1})})P(y^{(i)};\phi_y)}</script><p>可以求得</p><script type="math/tex; mode=display">\phi_{k|y=1}=\frac{ \sum_{i=1}^{m}{\sum_{j=1}^{n_i}1\{ x_j^{(i)}=k ,y^{(i)}=1 \}} }{ \sum_{i=1}^m{1\{y^{(i)}=1\} n_i} } \\ \phi_{k|y=0}=\frac{ \sum_{i=1}^{m}{\sum_{j=1}^{n_i}1\{ x_j^{(i)}=k , y^{(i)}=0 \}} }{ \sum_{i=1}^m{1\{y^{(i)}=0\} n_i} } \\ \phi_y=\frac{\sum_{i=1}^m{ 1\{ y^{(i)}=1 \} }}{m}</script><p>当然还可以加上Laplace平滑：</p><script type="math/tex; mode=display">\phi_{k|y=1}=\frac{ \sum_{i=1}^{m}{\sum_{j=1}^{n_i}1\{ x_j^{(i)}=k,y^{(i)}=1 \}} +1}{ \sum_{i=1}^m{1\{y^{(i)}=1\} n_i}+|V| } \\ \phi_{k|y=0}=\frac{ \sum_{i=1}^{m}{\sum_{j=1}^{n_i}1\{ x_j^{(i)}=k , y^{(i)}=0 \}} +1}{ \sum_{i=1}^m{1\{y^{(i)}=0\} n_i} +|V|}</script><p>在多项式事件模型中，我们实际并不关注词的顺序，即便把一封邮件中的词语打乱，最后也会获得完全相同的结果。自然语言处理中，它有另外一个名字叫<code>一元模型（Unigram Model）</code>。实际上另外的一些模型，例如<code>马尔可夫模型（Markov Model）</code>会考虑词的顺序。实际上，<code>二元模型（Bigram Model）</code>或<code>三元模型（Trigram Model）</code>在文本分类问题上也只会有轻微的改进。</p><h2 id="神经网络（Neural-network）"><a href="#神经网络（Neural-network）" class="headerlink" title="神经网络（Neural network）"></a>神经网络（Neural network）</h2><p>由于此前在高斯判别分析和逻辑回归的关系中的结论，此前的分类算法从本质上来说都可以归结到逻辑回国，都是线性分类算法，下面我们将讨论<code>非线性（non-linear）的分类算法</code>，首先一个代表为<code>神经网络（Neural network）</code>，它使用类似于逻辑回归的简单分类算法构造复杂的非线性分类器。比如可以使用下图表示逻辑回归</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/12.png" alt=""></p><p>用多个不同的逻辑回归就用如下的神经网络，有输入层、隐藏层和输出层三层。</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/13.png" alt=""></p><p>往往用最小二乘法和梯度下降优化神经网络，专业的术语称之为<code>反向传播（Back propagation）</code></p><script type="math/tex; mode=display">\min \limits_{\theta} \ J(\theta)=\frac{1}{2} \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2</script><p>由于是吴老师二十多年前的课，所以关于神经网络，并没有深入展开。</p><h2 id="支持向量机（Support-vector-machine）（一）"><a href="#支持向量机（Support-vector-machine）（一）" class="headerlink" title="支持向量机（Support vector machine）（一）"></a>支持向量机（Support vector machine）（一）</h2><h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><p><code>支持向量机（support vector machine）</code>是一类非线性分析器，很多情况下十分好用，我们从线性的情况讲起。为了更好的说明支持向量机，不得不稍微改变之前符号的形式。</p><script type="math/tex; mode=display">y\in \{-1, +1\} \\ h\in \{-1, +1\}\\ g(z) = \left \{ \begin{array}{lr} 1, & z>0 \\ -1, &z\leq0  \end{array} \right. \\ h_{w,b}=g(w^Tx+b)</script><p>其中$w$是一个$n$维向量，对应$\theta_1$到$\theta_n$，$b$对应$\theta_0$，即把截距$b$分离了出来。</p><h3 id="最大间隔分类器（Maximum-margin-classifier）"><a href="#最大间隔分类器（Maximum-margin-classifier）" class="headerlink" title="最大间隔分类器（Maximum margin classifier）"></a>最大间隔分类器（Maximum margin classifier）</h3><p>我们知道在逻辑回归中，</p><script type="math/tex; mode=display">if\ w^Tx+b>>0\Leftrightarrow confident \ that\ y=1 \\ if\ w^Tx+b<<0\Leftrightarrow confident \ that\ y=0</script><p>所以定义<code>函数间隔（functional margins）</code>，将$y^{(i)}=1$和$y^{(i)}=-1$的情况统一起来：</p><script type="math/tex; mode=display">\hat{\gamma}^{(i)}=y^{(i)}(w^Tx^{(i)}+b)</script><p>如果$y^{(i)}=1$，$w^Tx+b&gt;0$表示预测正确；，如果$y^{(i)}=-1$，$w^Tx+b<0$表示预测正确，于是$\hat{\gamma}^{(i)}>0$表示预测正确。为了让我们的预测结果十分$confident$，我们希望通过优化$w$和$b$，使得$\hat{\gamma}^{(i)}&gt;&gt;0$。然而这个定义存在局限性，即如果成倍地增加$w$和$b$，虽然$\hat{\gamma}^{(i)}$增加了，但是分类器却没有本质的变化，所以对其做归一化处理，引出分类器的<code>几何间隔（geometric margin）</code>如下</0$表示预测正确，于是$\hat{\gamma}^{(i)}></p><script type="math/tex; mode=display">\gamma^{(i)}=y^{(i)}(\frac{w^T}{||w||}x^{(i)}+\frac{b}{||w||})</script><p>直观地感觉如下图所示，之所以叫“几何”间隔，可以理解为实际上它表示样本$(x^{(i)},y^{(i)})$到分类超平面$y=w^Tx+b$的距离，在下图的二维情况中，就表示点到直线的距离。</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/14.png" alt=""></p><p>注意到此时等比放大缩小$w$和$b$对于超平面并不会产生任何影响，<strong>先假设所有的样本是线性可分的，即可以用一个超平面完全区分正样本和负样本</strong>。于是同样直观的，我们假设优化目标为<strong>距离分类超平面最近的点到分类超平面越远越好</strong>，即有<code>最大间隔分类器（Maximum margin classifier）</code>：</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\gamma, w,b} &{\gamma} \\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq\gamma \\ & ||w||=1 \end{array} \right.</script><p>其结果会和逻辑回归差不多好，而且可以扩展到无限维空间，构造非常有效的非线性分类器。这也是构造支持向量机的第一步。</p><h1 id="Lecture-7"><a href="#Lecture-7" class="headerlink" title="Lecture 7"></a>Lecture 7</h1><h2 id="支持向量机（Support-vector-machine）（二）"><a href="#支持向量机（Support-vector-machine）（二）" class="headerlink" title="支持向量机（Support vector machine）（二）"></a>支持向量机（Support vector machine）（二）</h2><h3 id="最优间隔分类器（Optimal-margin-classifier）"><a href="#最优间隔分类器（Optimal-margin-classifier）" class="headerlink" title="最优间隔分类器（Optimal margin classifier）"></a>最优间隔分类器（Optimal margin classifier）</h3><p>最大间隔分类器很直观，但是我们注意到约束$||w||=1$使得模型并不是一个凸优化问题，这就导致很容易陷入局部最小解，因此基于“等比放大缩小$w$和$b$对于超平面并不会产生任何影响”的观点，可以将其改进为以下的模型：</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\gamma, w,b} &{\dfrac{\hat\gamma}{||w||}} \\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq\hat\gamma  \end{array} \right.</script><p>更进一步的，我们可以再等比缩放的时候不对$||w||$做出限制，而令$\hat\gamma = 1$，于是就有<code>最优间隔分类器（Optimal margin classifier）</code></p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{\gamma, w,b} &\dfrac{1}{2}||w||^2 \\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq 1 \end{array} \right.</script><p>这是一个很好的凸优化模型，虽然貌似已经和几何间隔可以没有关系了，但是却可以很好的帮助我们理解它。</p><h3 id="原始优化问题（primal-optimization-problem）与KKT条件"><a href="#原始优化问题（primal-optimization-problem）与KKT条件" class="headerlink" title="原始优化问题（primal optimization problem）与KKT条件"></a>原始优化问题（primal optimization problem）与KKT条件</h3><p>目前来看，问题的形式化描述是非常成功的，现在需要偏离一下主题讲一下<code>原始优化问题（primal optimization problem）</code>、<code>KKT条件（KKT conditions）</code>和<code>对偶优化问题（dual optimization problem）</code>，从而导出一个和当前模型非常不同、但十分高效的模型，而且可以使得最优间隔分类器应用在维数很高、甚至无线维的特征空间中。</p><p>首先，回忆一下拉格朗日乘子法，对于问题</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{w} &f(w) \\ s.t. & h_i(w)=0,i=1,2,\dots,l \end{array} \right.</script><p>有<code>拉格朗日乘子（Lagrangian）</code></p><script type="math/tex; mode=display">L(w,\beta)=f(w)+\sum_{i=1}^l{\beta_ih_i(w)}</script><p>其中$\beta_i$被称为<code>拉格朗日乘数（Lagrange multipliers）</code>。为了求解问题，我们要做的是求解</p><script type="math/tex; mode=display">\frac{\partial L}{\partial w_i}=0,  \frac{\partial L}{\partial \beta_i}=0</script><p>更广泛的，对于原始优化问题</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{w} &f(w) \\ s.t. & g_i(w)\leq0,i=1,2,\dots,k \\ & h_i(w)=0,i=1,2,\dots,l \end{array} \right.</script><p>有<code>一般化的拉格朗日乘子 （generalized Lagrangian）</code></p><script type="math/tex; mode=display">L(w,\alpha,\beta)=f(w)+\sum_{i=1}^k{\alpha_ig_i(w)}+\sum_{i=1}^l{\beta_ih_i(w)}</script><p>我们要求解的是KKT条件：</p><script type="math/tex; mode=display">\begin{array}{rcl} \frac{\partial L}{\partial w_i}&= &0,i=1,\dots,n & (1) \\ \frac{\partial L}{\partial \beta_i}& = & 0,i=1,\dots,l & (2) \\ \alpha_ig_i(w)&= &0,i=1,\dots,k & (3)  \\ g_i(w)&\leq &0,i=1,\dots,k & (4) \\ \alpha_i&\geq &0,i=1,\dots,k & (5) \end {array}</script><p>其中条件$(3)$被称为<code>KKT对偶松弛条件（KKT dual complement condition）</code>。当$ \alpha_i=0$时，表示$f(w)$的极值点在空间$g(w)\leq0$中；当$ \alpha_i&gt;0$时，$g_i(w)=0$，表示$f(w)$的极值点在空间$g(w)\leq0$的边界上。</p><p>定义</p><script type="math/tex; mode=display">\theta_p(w)=\max_{\alpha,\beta:\alpha_i\geq0}{L(w,\alpha, \beta)}</script><p>其中$p$是primal的缩写，且可知</p><script type="math/tex; mode=display">\theta_p(w)=\left \{ \begin{array}{l} \infin, & w不满足原始问题约束 \\ f(w), & otherwise \end{array} \right.</script><p>所以，如下的优化问题</p><script type="math/tex; mode=display">p^*=\min_{w}{\theta_p(w)}=\min_{w}{ \max_{\alpha,\beta:\alpha_i\geq0}{L(w,\alpha, \beta)}}</script><p>是等价于原始问题的！</p><h3 id="对偶优化问题（dual-optimization-problem）与Slater条件"><a href="#对偶优化问题（dual-optimization-problem）与Slater条件" class="headerlink" title="对偶优化问题（dual optimization problem）与Slater条件"></a>对偶优化问题（dual optimization problem）与Slater条件</h3><p>和原始问题很相似，定义</p><script type="math/tex; mode=display">\theta_D(\alpha,\beta)=\min_{w}{L(w,\alpha, \beta)}</script><p>则对偶优化问题为</p><script type="math/tex; mode=display">d^*=\max_{\alpha,\beta:\alpha_i\geq0}{\theta_D(\alpha,\beta)}=\max_{\alpha,\beta:\alpha_i\geq0}{ \min_{w}{L(w,\alpha, \beta)}}</script><p>实际上只是交换了$\max$和$\min$的位置，而且容易证明<code>弱对偶性质（weak duality）</code></p><script type="math/tex; mode=display">d^*\leq p^*</script><p>由于对偶优化问题更加简单且具有很多很好的性质，我们很希望了解：什么条件下对偶最优化问题和原始最优化问题是同解的（即满足<code>强对偶性质(strong duality)</code>）呢？答案是原始问题是一个凸优化问题，即满足<code>Slater条件（Slater&#39;s condition）</code>：</p><ol><li>$f,g$均为凸函数（黑塞矩阵大于0）</li><li>$h$是仿射函数，即有$h_i(w)=a_i^Tw+b_i$。</li><li>$g_i$是严格<code>可执行的（strictly feasible）</code>，即$\exist w$使得$\forall i,g_i(w)&lt;0$</li></ol><p>由于Laster条件是一个充分不必要条件，还可以稍微弱化为<code>Refined Slater条件</code>：</p><ol><li>$f,g$均为凸函数（黑塞矩阵大于0）</li><li>$h$是仿射函数，即有$h_i(w)=a_i^Tw+b_i$</li><li>$g_i(x)\leq0,g_i(x)=a_i^Tw+b_i$</li><li>$g_i(x)&lt;0,g_i(x)\neq a_i^Tw+b_i$</li></ol><p>在上述条件下，存在$w^{<em>}$为原始问题的解，存在$\alpha^{</em>},\beta^{*}$为对偶问题的解，等价于</p><script type="math/tex; mode=display">p^*=d^*=L(w^*,\alpha^*,\beta^*)</script><h3 id="支持向量机的推导"><a href="#支持向量机的推导" class="headerlink" title="支持向量机的推导"></a>支持向量机的推导</h3><p>在导出支持向量机之前，需要说明一下符号的变化。和一般化的拉格朗日乘子有两组变量$\alpha,\beta$不同，在处理支持向量机时将只有$\alpha$；和KKT中一组变量$w$不同，在支持向量机时将有两组$w,b$。</p><p>对于最优间隔分类器</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{\gamma, w,b} &\dfrac{1}{2}||w||^2 \\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq 1 \end{array} \right.</script><p>令</p><script type="math/tex; mode=display">g_i(w,b)=-y^{(i)}(w^Tx^{(i)}+b) +1\leq 0</script><p>有拉格朗日乘子：</p><script type="math/tex; mode=display">L(w,b,\alpha)=\frac{1}{2}||w||^2+\sum_{i=1}^{m}\alpha_ig_i(w,b)=\frac{1}{2}||w||^2-\sum_{i=1}^{m}\alpha_i[y^{(i)}(w^Tx^{(i)}+b) -1]</script><p>在KKT条件中，当$\alpha_i&gt;0$时$g_i(w)=0$，即有几何间隔$\gamma=1$，如下图</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/15.png" alt=""></p><p>落在虚线上的就是$g_i(w)=0$的样本，它们被称为<code>支持向量（support vector）</code>。实际上支持向量一定是很少的，所以在大多数情况下，$g_i(w)&lt;0$且有$\alpha_i=0$。</p><p>显然，最优间隔分类器是满足Refined Slater条件的，所以可求解对偶问题，有</p><script type="math/tex; mode=display">\theta_D(\alpha)=\min_{w,b}{L(w,b,\alpha)}=\min_{w,b}{\frac{1}{2}||w||^2-\sum_{i=1}^{m}\alpha_i[y^{(i)}(w^Tx^{(i)}+b) -1]}</script><p>令</p><script type="math/tex; mode=display">\nabla_wL(w,b,\alpha)=w-\sum_{i=1}^{m}{\alpha_iy^{(i)}x^{(i)}}=0</script><p>则有</p><script type="math/tex; mode=display">w=\sum_{i=1}^{m}{\alpha_iy^{(i)}x^{(i)}}</script><p>同样令</p><script type="math/tex; mode=display">\frac{\partial L}{\partial b}=\sum_{i=1}^{m}{\alpha_iy^{(i)}}=0</script><p>将两个式子代入，有</p><script type="math/tex; mode=display">\theta_D(\alpha)=\sum_{i=1}^m{\alpha_i}-\frac{1}{2}\sum_{i=1}^m{ \sum_{j=1}^m{ y^{(i)}y^{(j)}\alpha_i\alpha_j(x^{(i)})^Tx^{(i)} } }</script><p>于是得到对偶问题，即支持向量机：</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\alpha} &W(\alpha)= \sum_{i=1}^m{\alpha_i}-\frac{1}{2}\sum_{i,j=1}^m{ y^{(i)}y^{(j)}\alpha_i\alpha_j\langle x^{(i)},x^{(j)}\rangle }  \\ s.t. & \alpha_i\geq0,i=1,2,\dots,m \\ & \sum_{i=1}^m{\alpha_iy^{(i)}}=0 \end{array} \right.</script><p>由最优解$\alpha^*$可以得到</p><script type="math/tex; mode=display">w^*=\sum_{i=1}^{m}{\alpha_i^*y^{(i)}x^{(i)}}</script><p>再将其代入原始模型，有</p><script type="math/tex; mode=display">b^*=-\frac{ \max_\limits{i:y^{(i)}=-1}{w^{*T}x^{(i)} } + \min_\limits{i:y^{(i)}=1}{w^{*T}x^{(i)} } }{2}</script><p>直观的理解就是在给定超直线簇中找到距离支持向量距离相同的那一条。</p><p>于是对于预测样本</p><script type="math/tex; mode=display">h_{w,b}(x)=g(w^{*T}x+b^*)=g((\sum_{i=1}^{m}{\alpha_i^*y^{(i)}x^{(i)}})^Tx+b^*)=g(\sum_{i=1}^{m}{\alpha_i^*y^{(i)}\langle x^{(i)},x\rangle }+b^*)</script><p>通过对支持向量机要求解的问题和对预测样本计算的观察，可以发现由于样本中支持向量很少，$\alpha_i=0$是非常常见的，所以对于维度很高的样本，只需要很少的数量的样本就可以求解问题。而且对于输入特征$x^{(i)}$也仅有内积计算$\langle x^{(i)},x\rangle $，对于它的处理，接下来介绍<code>核（kernel）</code>的概念。</p><h1 id="Lecture-8"><a href="#Lecture-8" class="headerlink" title="Lecture 8"></a>Lecture 8</h1><h2 id="支持向量机（Support-vector-machine）（三）"><a href="#支持向量机（Support-vector-machine）（三）" class="headerlink" title="支持向量机（Support vector machine）（三）"></a>支持向量机（Support vector machine）（三）</h2><h3 id="核（Kernel）"><a href="#核（Kernel）" class="headerlink" title="核（Kernel）"></a>核（Kernel）</h3><p>目前版本的支持向量机还只能处理低维可分问题，因此有<code>属性映射（feature mapping）</code>，即将属性映射到高维空间，在足够高的维度中一定是线性可分的，比如</p><script type="math/tex; mode=display">\phi(x)=\begin{bmatrix} x \\ x^2\\\vdots\\ x^n  \end{bmatrix}</script><p>然后将$\phi(x)$代入到之前版本的支持向量机中，于是就有大量计算$\langle \phi(x^{(i))},\phi(x^{(j)})\rangle$。有时候，$\phi(x)$的维数会非常地高，甚至是无线维的，此时无法快速地计算时间复杂度为$O(n^2)$的$\langle\phi(x^{(i)}),\phi(x^{(j)})\rangle$，但是在很多特例情况下，可以转换为可以快速地计算<code>核（kernel）</code>：</p><script type="math/tex; mode=display">K(x^{(i)},x^{(j)})=\langle\phi(x^{(i)}),\phi(x^{(j)})\rangle</script><p>就比如</p><script type="math/tex; mode=display">x,z\in\R,\\ K(x,z)=(x^Tz)^2=(\sum_{i=1}^nx_iz_i)(\sum_{j=1}^nx_jz_j)=\sum_{i=1}^n{\sum_{j=1}^n{(x_ix_j)(z_iz_j)}}=\phi(x)^T\phi(z)</script><p>所以可以用时间复杂度为$O(n)$的核函数</p><script type="math/tex; mode=display">K(x,z)=(x^Tz)^2</script><p>代替函数映射</p><script type="math/tex; mode=display">\phi(x)^T\phi(z),\phi(x)=[x_ix_j\ for\ i\ in\ [1,n] \ for\ j\ in\ [1,n]]</script><p>的计算！</p><p>当然还可以扩展一下，用核函数</p><script type="math/tex; mode=display">K(x,z)=(x^Tz+c)^2=\sum_{i,j=1}^n(x_ix_j)(z_iz_j)+\sum_{i=1}^n{\sqrt{2c}x_i\sqrt{2c}z_i}+c^2</script><p>代替函数映射</p><script type="math/tex; mode=display">\phi(x)=[x_ix_j\ for\ i\ in\ [1,n] \ for\ j\ in\ [1,n]] + [\sqrt{2c}x_i\ for\ i\ in\ [1,n] ] + c</script><p>更一步可以用核函数$K(x,z)=(x^Tz+c)^d$代替d次多项式。</p><p>直观地看（并不完全正确），核函数就是用来表现$\phi(x)$和$\phi(z)$的相似程度，由于这种相似程度只有相对意义，所以在满足核函数要求之后，只要能够表述相似性的函数都可以，不论具有什么形式！比如一个比较好的核函数为</p><script type="math/tex; mode=display">K(x,z)=\exp(-\dfrac{||x-z||^2}{2\sigma^2})</script><p>它被称为<code>高斯核（Gaussian Kernel）</code>，在某些情况下用在支持向量机中是非常有效的。</p><p>既然这样的函数都可以作为核，我们不禁发问——对于一个新函数，我们如何判断它可不可以作为核呢？首先要定义<code>核矩阵（Kernel matrix）</code>：</p><script type="math/tex; mode=display">K,K_{ij}=K(x^{(i)},x^{(j)})=\langle\phi(x^{(i)}),\phi(x^{(j)})\rangle=\langle\phi(x^{(j)}),\phi(x^{(i)})\rangle=K(x^{(j)},x^{(i)})=K_{ji}</script><p>首先核矩阵一定是<code>对称矩阵（symmetric matrix）</code>，其次对于一个核函数即</p><script type="math/tex; mode=display">\exists\phi,L(x,z)=\phi(x)^T\phi(z)</script><p>有</p><script type="math/tex; mode=display">z^TKz=\sum_i{\sum_j{z_iK_{ij}z_j}}=\sum_i{ \sum_j{ z_i\phi(x^{(i)})^T\phi(x^{(j)})z_j } }\\ =\sum_i{ \sum_j{ z_i\sum_k{ \phi_k(x^{(i)}) \phi_k(x^{(j)}) }z_j } } \\ =\sum_k{ \sum_i{ \sum_j{ z_i\phi_k(x^{(i)}) \phi_k(x^{(j)})z_j } } }\\=\sum_k{(\sum_i{z_i\phi(x^{(i)})})^2} \geq 0</script><p>即核矩阵$K$是一个<code>半正定矩阵（semi-definite matrix）</code>！实际上有Mercer定理：</p><blockquote><p>核矩阵$K$是半正定矩阵是函数$K$为合法的核函数的充要条件。</p></blockquote><p>这样就可以根据特征映射$\phi(x)$愉快地选择核函数了，然后就可以在支持向量机中将所有$\langle\phi(x^{(i)}),\phi(x^{(j)})\rangle$替换为$K(x^{(i)},x^{(j)})$，并不需要将$\phi(x)$显示地表达出来就可以高效地将数据映射到线性可分的高维空间中。</p><p>虽然是从支持向量机中引出了核的概念，并使得支持向量机十分强大，但是核的应用要远远比支持向量机广。包括之前的算法，比如线性回归、逻辑回归、感知机模型，只要可以写为内积的形式，就可以引入核的概念加快计算速度。</p><h3 id="L1-norm软边界（soft-margin）支持向量机"><a href="#L1-norm软边界（soft-margin）支持向量机" class="headerlink" title="L1 norm软边界（soft margin）支持向量机"></a>L1 norm软边界（soft margin）支持向量机</h3><p>现在的支持向量机仍然只能处理线性可分问题。一方面，有些问题正负样本是交错分布的，所以要么低维线性不可分，要么是高维过拟合；另一方面，会出现如下的情况：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/16.png" alt=""></p><p>即极少数<code>异常点（outlier）</code>导致整个超平面出现剧烈的变化，实际分类效果也不好。所以，为了减少噪音的影响，稍微调整一下最优间隔分类器（可能已经记不得这个概念了，实际上之前讲对偶优化、核都是为了高效地求解这个问题，也是最原始的支持向量机）为<code>L1 norm软边界（soft margin）支持向量机</code>：</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{\gamma, w,b} &\dfrac{1}{2}||w||^2 +C\sum_{i=1}^m{\xi_i}\\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq 1-\xi_i \\ & \xi_i\geq0,i=1,\dots,m \end{array} \right.</script><p>这个名字可能很让人困惑，实际上就是允许$y^{(i)}(w^Tx^{(i)}+b) $小于$0$即允许部分样本是错误的；同时这样的错误必然是少数，所以加上一个惩罚函数$C\sum_{i=1}^m{\xi_i}$。</p><p>和之前一样，有拉格朗日乘子：</p><script type="math/tex; mode=display">L(w,b,\xi,\alpha,r)=\frac{1}{2}w^Tw+C\sum_{i=1}^m{\xi_i}-\sum_{i=1}^M{\alpha_i[y^{(i)}(w^Tw+b)-1+\xi_i]}-\sum_{i=1}^m{r_i\xi_i}</script><p>同样，可以推导出对偶问题</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\alpha} &W(\alpha)= \sum_{i=1}^m{\alpha_i}-\frac{1}{2}\sum_{i,j=1}^m{ y^{(i)}y^{(j)}\alpha_i\alpha_j\langle x^{(i)},x^{(j)}\rangle }  \\ s.t. & 0 \leq \alpha_i\leq C,i=1,2,\dots,m \\ & \sum_{i=1}^m{\alpha_iy^{(i)}}=0 \end{array} \right.</script><p>其实和之前相比仅仅加了一个小于等于$C$的条件，同时由KKT松弛条件有</p><script type="math/tex; mode=display">\alpha_i=0 \Rightarrow y^{i}(w^Tx^{(i)}+b)\geq1 \\ \alpha_i=C \Rightarrow y^{i}(w^Tx^{(i)}+b)\leq1 \\ 0<\alpha_i<C \Rightarrow y^{i}(w^Tx^{(i)}+b)=1</script><p>这会用在<code>SMO算法</code>的收敛判定中。</p><h3 id="坐标上升法（Coordinate-ascent）"><a href="#坐标上升法（Coordinate-ascent）" class="headerlink" title="坐标上升法（Coordinate ascent）"></a>坐标上升法（Coordinate ascent）</h3><p>下面介绍的是求解L1正则化软边界支持向量机模型的SMO算法，在此之前需要介绍<code>坐标上升法（Coordinate ascent）</code>，其针对的是没有约束的优化问题</p><script type="math/tex; mode=display">\max_\alpha{W(\alpha_1,\alpha_2,\dots,\alpha_m)}</script><p>实际上就是每次只将一个$\alpha$视为变量，其他的作为常量求最大值：</p><hr><p>Loop until convergence:</p><p>​    for $i=1,\dots,m$:</p><p>​         $\alpha_i= arg \max_{\hat{\alpha}_i}{W(\alpha_1,\dots,\alpha_{i-1},\hat{\alpha}_i,\dots,\alpha_m)}$</p><hr><p>直观地理解有下图：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/17.png" alt=""></p><p>和牛顿方法比起来，虽然可能迭代的次数比较多，但是每轮迭代是非常简单高效的。</p><h3 id="顺序最小优化算法（Sequence-minimal-optimization，SMO）"><a href="#顺序最小优化算法（Sequence-minimal-optimization，SMO）" class="headerlink" title="顺序最小优化算法（Sequence minimal optimization，SMO）"></a>顺序最小优化算法（Sequence minimal optimization，SMO）</h3><p>由于在问题</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\alpha} &W(\alpha)= \sum_{i=1}^m{\alpha_i}-\frac{1}{2}\sum_{i,j=1}^m{ y^{(i)}y^{(j)}\alpha_i\alpha_j\langle x^{(i)},x^{(j)}\rangle }  \\ s.t. & 0 \leq \alpha_i\leq C,i=1,2,\dots,m \\ & \sum_{i=1}^m{\alpha_iy^{(i)}}=0 \end{array} \right.</script><p>存在约束$\sum_{i=1}^m{\alpha_iy^{(i)}}=0$，所以不可能直接用坐标上升法。顺序最小优化算法是对其的改进，每轮迭代中更新两个参数，将其他参数作为固定值，比如固定$\alpha_1,\alpha_2$有</p><script type="math/tex; mode=display">\alpha_1y^{(1)}+\alpha_2y^{(2)}=\zeta</script><p>于是约束就可以被表示为下图</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/18.png" alt=""></p><p>即红色线段的是满足约束的$\alpha_1,\alpha_2$。</p><p>由于$y\in\{-1,1\}$，所以有</p><script type="math/tex; mode=display">\alpha_1=(\zeta-\alpha_2y^{(2)})y^{(1)}</script><p>所以</p><script type="math/tex; mode=display">W(\alpha_1,\alpha_2,\dots,\alpha_m)=W((\zeta-\alpha_2y^{(2)})y^{(1)},\alpha_2,\dots,\alpha_m) \propto\alpha_2^2</script><p>即$W$是关于$\alpha_2$的一个二次函数，用$\alpha_2^{new,unclipped}$来表示极值点，于是有</p><script type="math/tex; mode=display">\alpha_2^{new}=\left \{ \begin{array}{l} H, & \alpha_2^{new,unclipped}>H \\ \alpha_2^{new,unclipped}, &L\leq\alpha_2^{new,unclipped}\leq H \\ L, & \alpha_2^{new,unclipped}<L \end{array}  \right.</script><p>这样就可以得到$\alpha_1^{new}$，进行下一轮循环直到收敛（满足KKT条件）。</p><p>而具体如何选择每一轮固定的两个参数，需要一个启发式算法，需要参考John C. Platt（算法发明者）的论文，在这里占一个坑。</p><blockquote><p>！@#￥%……&amp;*（）</p></blockquote><h3 id="支持向量机的两个应用"><a href="#支持向量机的两个应用" class="headerlink" title="支持向量机的两个应用"></a>支持向量机的两个应用</h3><p>一个手写体识别，将$n\times n$的图片变为$x\in \R^{n\times n}$的特征，之后可以用高斯核直接上，效果在20年前是等价于最好的神经网络的。</p><p>另一个是蛋白质分类，由于蛋白质长度不一样，所以将氨基酸的四元排列出现的次数作为特征，比如AABB，BCAD，这是一个$4^{20}$的高维向量，因为有20种氨基酸。处理那么大的数据，需要使用一种<code>动态规划算法（Dynamic Programming）</code>和新的核，在此不做展开，占一个坑。</p><blockquote><p>！@#￥%……&amp;*（）</p></blockquote><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此，学完了第一部分——监督学习，其中包括很多学习算法，基本知识已经合格</p><p>不过，课程刚刚完成了1/4，下面要讲的是如何真正理解学习算法，什么时候它是有效的，什么时候是糟糕的，怎么样才能将现有的算法用好。</p><p>详情移步<a href="http://wang22ti.com/2018/06/05/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE2%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/">第二部分：学习理论</a>（这个文档已经很冗长了，大量的公式的渲染已经拖累了编辑体验）</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;据说这是入门机器学习必不可少的经典教程啦，还可以顺便练一下英语听力。&lt;/p&gt;
&lt;p&gt;虽然之前在各个渠道，包括&lt;code&gt;TensorFlow与深度学习&lt;/code&gt;、MOOC《&lt;a href=&quot;https://www.icourse163.org/learn/BIT-100
      
    
    </summary>
    
      <category term="机器学习" scheme="http://wang22ti.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>《编译原理》实验4-语法分析器（算符优先分析法）python实现</title>
    <link href="http://wang22ti.com/2018/05/24/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C4-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B9%8B%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90%E6%B3%95python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wang22ti.com/2018/05/24/《编译原理》实验4-语法分析器之算符优先分析法python实现/</id>
    <published>2018-05-24T00:47:45.000Z</published>
    <updated>2018-06-08T07:11:09.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        本次实验中，我用python3.5实现了一个算符优先文法的语法分析类，具有以下功能：</p><ol><li><p>根据文法的起始符号、非终结符号、产生式自动生成文法终结符号的Firstvt集和Lastvt集，并进一步生成文法的优先矩阵。</p></li><li><p>根据优先矩阵实现输入串的分析程序，在分析失败的时候输出对应出错位置与错误信息。</p></li><li><p>扩充实验指导书给定的文法，并设计针对的测试样例，以验证分析程序健壮性。</p></li><li><p>根据设置的日志等级，输出对应的日志信息。</p></li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>​        实验中实现的算符优先文法的语法分析类名为OPGAnalyzer，具体描述信息如下：</p><p><img src="/2018/05/24/《编译原理》实验4-语法分析器之算符优先分析法python实现/1.png" alt=""></p><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p>​        为了测试程序的健壮性，在实验指导书指定的文法的基础上加入产生式’E→E—‘初始化分析器，循环调用analyse函数分析符号串’i+i<em>i’, ‘i</em>i/(i+i)-i’, ‘=’, ‘i=i<em>i’, ‘(i+i)</em>i/i’, ‘/i+’, ‘<em>i’, ‘((i</em>i-i)+(i))’, ‘i++’, ‘(i—+i)<em>i’, ‘i-+i’, ‘’, ‘)+i’, ‘(‘是否满足文法，其中’=’和’i=i</em>i’针对的是输入非法终结符号的情况，’i++’和’(i—+i)*i’针对的是文法’E→E—‘，’)+i’针对的是在寻找最左素短语时找不到&lt;关系的情况，’(‘针对的是在寻找最左素短语时找不到&gt;关系的情况。输出结果如下图所示，程序可以再分析不成功的情况下输出对应的错误信息，完全符合预期。</p><p><img src="/2018/05/24/《编译原理》实验4-语法分析器之算符优先分析法python实现/2.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：课件中优先矩阵存在问题，通过比对网上相同文法分析得到的优先矩阵和本程序求得的优先矩阵确认无误；课件中对于分析失败的情况没有深入的说明，通过再次阅读书本深入理解算法与素短语的概念，结合课件中的示例完成分析算法。</p><p>​        本程序的优点包括：比较完整地实现了OPG分析算法，在分析失败的时候输出对应出错位置与错误信息，根据日志等级输出日志信息；分析器只需要输入起始符号、产生式、终结符号就可以初始化，自动生成Firstvt集、Lastvt集和优先矩阵；文法可以进一步扩充，程序具有较好的健壮性。</p><p>​        本程序还存在可以优化的地方，主要包括：将输入符号串改为由词法分析器生成的二元式从文件中读取，为完整编译器的实现打下良好的基础；</p><p>​        本实验中，通过实现OPG文法分析算法，加深了我对算法的理解，提高了我对问题分析、抽象的能力，为实现完整编译器打下了良好的基础。</p><h1 id="附录：程序源码"><a href="#附录：程序源码" class="headerlink" title="附录：程序源码"></a>附录：程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPGAnalyzer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, overs, productions, log_level=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.productions = productions</span><br><span class="line">        self.productions[<span class="string">'S'</span>] = [<span class="string">'#'</span> + start + <span class="string">'#'</span>, ]</span><br><span class="line">        self.nonterminals = self.productions.keys()</span><br><span class="line">        self.overs = overs</span><br><span class="line">        self.overs.append(<span class="string">'#'</span>)</span><br><span class="line">        self.log_level = log_level</span><br><span class="line">        self.get_firstvt()</span><br><span class="line">        self.get_lastvt()</span><br><span class="line">        self.get_relation_matrix()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成firstvt集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_firstvt</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.firstvt = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="comment"># 根据规则1，遍历产生式</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="comment"># 若有规则U→b…或规则U→Vb…，将b加入U的firstvt集中，同时将元组(U, b)入栈</span></span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.firstvt[nontermainal].add(right[<span class="number">0</span>])</span><br><span class="line">                    stack.append((nontermainal, right[<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">if</span> len(right) &gt; <span class="number">1</span> <span class="keyword">and</span> right[<span class="number">1</span>] <span class="keyword">in</span> self.overs <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                    self.firstvt[nontermainal].add(right[<span class="number">1</span>])</span><br><span class="line">                    stack.append((nontermainal, right[<span class="number">1</span>]))</span><br><span class="line">        <span class="comment"># 根据规则2，反复遍历产生式直到栈为空</span></span><br><span class="line">        <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">            V, b = stack.pop()</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="comment"># 对每一个形如U→V…的规则</span></span><br><span class="line">                    <span class="keyword">if</span> V == right[<span class="number">0</span>]:</span><br><span class="line">                        <span class="comment"># 如果b不在U的firstvt集中，将b加入U的firstvt集中，同时将元组(U, b)入栈</span></span><br><span class="line">                        <span class="keyword">if</span> b <span class="keyword">not</span> <span class="keyword">in</span> self.firstvt[nontermainal]:</span><br><span class="line">                            self.firstvt[nontermainal].add(b)</span><br><span class="line">                            stack.append((nontermainal, b))</span><br><span class="line">        <span class="keyword">if</span> self.log_level:</span><br><span class="line">            print(self.firstvt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成lastvt集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_lastvt</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.lastvt = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="comment"># 根据规则1，遍历产生式</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="comment"># 若有规则U→…a或规则U→…aV，将a加入U的lastvt集中，同时将元组(U, a)入栈</span></span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">-1</span>] <span class="keyword">in</span> overs:</span><br><span class="line">                    self.lastvt[nontermainal].add(right[<span class="number">-1</span>])</span><br><span class="line">                    stack.append((nontermainal, right[<span class="number">-1</span>]))</span><br><span class="line">                <span class="keyword">if</span> len(right) &gt; <span class="number">1</span> <span class="keyword">and</span> right[<span class="number">-2</span>] <span class="keyword">in</span> self.overs <span class="keyword">and</span> right[<span class="number">-1</span>] <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                    self.lastvt[nontermainal].add(right[<span class="number">-2</span>])</span><br><span class="line">                    stack.append((nontermainal, right[<span class="number">-2</span>]))</span><br><span class="line">        <span class="comment"># 根据规则2，反复遍历产生式直到栈为空</span></span><br><span class="line">        <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">            V, a = stack.pop()</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="comment"># 对每一个形如U→…V的规则</span></span><br><span class="line">                    <span class="keyword">if</span> V == right[<span class="number">-1</span>]:</span><br><span class="line">                        <span class="comment"># 如果a不在U的lastvt集中，将a加入U的firstvt集中，同时将元组(U, a)入栈</span></span><br><span class="line">                        <span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> self.lastvt[nontermainal]:</span><br><span class="line">                            self.lastvt[nontermainal].add(a)</span><br><span class="line">                            stack.append((nontermainal, a))</span><br><span class="line">        <span class="keyword">if</span> self.log_level:</span><br><span class="line">            print(self.lastvt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成优先矩阵</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_relation_matrix</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 1为大于，0为等于，-1为小于</span></span><br><span class="line">        self.relation_matrix = pd.DataFrame(index=overs, columns=overs)</span><br><span class="line">        <span class="comment"># 对于每一条规则</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="comment"># 对于产生式右部的每一个非末尾符号</span></span><br><span class="line">                <span class="keyword">for</span> i, a <span class="keyword">in</span> enumerate(right[:<span class="number">-1</span>]):</span><br><span class="line">                    <span class="comment"># 如果是终结符</span></span><br><span class="line">                    <span class="keyword">if</span> a <span class="keyword">in</span> self.overs:</span><br><span class="line">                        <span class="comment"># 如果是形如…ab…的产生式右部，置a=b</span></span><br><span class="line">                        <span class="keyword">if</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            b = right[i + <span class="number">1</span>]</span><br><span class="line">                            self.relation_matrix[a][b] = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="comment"># 如果是形如…aU…的产生式右部，对于U的firstvt集中的每一个非终结符b，置a&lt;b</span></span><br><span class="line">                            <span class="keyword">for</span> b <span class="keyword">in</span> self.firstvt[right[i + <span class="number">1</span>]]:</span><br><span class="line">                                self.relation_matrix[a][b] = <span class="number">-1</span></span><br><span class="line">                            <span class="comment"># 如果是形如…aVb…的产生式右部，置a=b</span></span><br><span class="line">                            <span class="keyword">if</span> i + <span class="number">2</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">2</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                                b = right[i + <span class="number">2</span>]</span><br><span class="line">                                self.relation_matrix[a][b] = <span class="number">0</span></span><br><span class="line">                    <span class="comment"># 如果是形如…Ub…的产生式右部，对于U的firstvt集中的每一个非终结符a_，置a_&gt;b</span></span><br><span class="line">                    <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                        U, b = a, right[i + <span class="number">1</span>]</span><br><span class="line">                        <span class="keyword">for</span> a_ <span class="keyword">in</span> self.lastvt[U]:</span><br><span class="line">                            self.relation_matrix[a_][b] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level:</span><br><span class="line">            <span class="comment"># 行列违反直觉，故转置输出</span></span><br><span class="line">            print(self.relation_matrix.T)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断string是否不是任何一个产生式的右部</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_not_right</span><span class="params">(self, string)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                tag = <span class="keyword">True</span></span><br><span class="line">                <span class="comment"># 如果string长度和right不相同，当然不是，下一个产生式</span></span><br><span class="line">                <span class="keyword">if</span> len(right) != len(string):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 逐个比对right和string的符号</span></span><br><span class="line">                <span class="keyword">for</span> ch1, ch2 <span class="keyword">in</span> zip(right, string):</span><br><span class="line">                    <span class="comment"># 如果终结符号与非终结符号类别不相同，不是，下一个产生式</span></span><br><span class="line">                    <span class="keyword">if</span> (ch1 <span class="keyword">in</span> self.overs <span class="keyword">and</span> ch2 <span class="keyword">not</span> <span class="keyword">in</span> self.overs) <span class="keyword">or</span> (ch1 <span class="keyword">not</span> <span class="keyword">in</span> self.overs <span class="keyword">and</span> ch2 <span class="keyword">in</span> self.overs):</span><br><span class="line">                        tag = <span class="keyword">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="comment"># 如果是均为终结符号，如果不相同，不是，下一个产生式</span></span><br><span class="line">                    <span class="keyword">if</span> ch1 <span class="keyword">in</span> self.overs <span class="keyword">and</span> ch1 != ch2:</span><br><span class="line">                        tag = <span class="keyword">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 匹配到某一产生式右部，返回False</span></span><br><span class="line">                <span class="keyword">if</span> tag:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="comment"># 没有匹配到任何一个产生式右部，返回True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_fail_info</span><span class="params">(self, info=<span class="string">''</span>)</span>:</span></span><br><span class="line">        print(<span class="string">'fail'</span>, self.raw_string, <span class="string">'[%d, %s] %s.'</span> % (self.index, self.a, info))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析算法的主体程序</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OPG</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化分析栈stack和待分析输入符号a</span></span><br><span class="line">        stack = [<span class="string">'#'</span>, ]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从本质上说，每轮循环都是在找最左素短语，即最靠近栈顶拥有&lt;…&gt;形式的短语</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 由于只有终结符号有偏序关系，先找到最接近栈顶的终结符号</span></span><br><span class="line">            j = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> stack[j] <span class="keyword">not</span> <span class="keyword">in</span> self.overs:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果该终结符号 &gt; 待分析输入符号a，这是可能被规约的情况</span></span><br><span class="line">            <span class="keyword">if</span> self.relation_matrix[stack[j]][self.a] == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 查找&lt;关系</span></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                    <span class="comment"># temp记录较为靠近栈顶的终结符号</span></span><br><span class="line">                    temp = stack[j]</span><br><span class="line">                    <span class="comment"># 找下一个终结符号</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                        j -= <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> j &gt;= -len(stack) <span class="keyword">and</span> stack[j] <span class="keyword">in</span> self.overs <span class="keyword">or</span> j &lt; -len(stack):</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="comment"># 无论找到&lt;关系还是找不到，结束查找</span></span><br><span class="line">                    <span class="keyword">if</span> j &lt; -len(stack) <span class="keyword">or</span> self.relation_matrix[stack[j]][temp] == <span class="number">-1</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 大多数情况下，由于#的优先级总是比较低的，可以找到&lt;关系，&lt;与&gt;之间的就是待归约串</span></span><br><span class="line">                <span class="comment"># 如果待归约串并匹配任何一个产生式右部，那么归约失败，输出失败信息并return</span></span><br><span class="line">                <span class="comment"># 少数情况下，找不到&lt;关系，同样归约失败，输出失败信息并return</span></span><br><span class="line">                <span class="keyword">if</span> j &lt; -len(stack):</span><br><span class="line">                    self.print_fail_info(<span class="string">'cannot find "&lt;" relation'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> self.is_not_right(stack[j + <span class="number">1</span>:]):</span><br><span class="line">                    self.print_fail_info(<span class="string">'cannot fit any right of productions'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="comment"># 找到了最左素短语，归约</span></span><br><span class="line">                stack = stack[:j + <span class="number">1</span>] + [<span class="string">'N'</span>, ]</span><br><span class="line">                <span class="keyword">if</span> self.log_level:</span><br><span class="line">                    print(stack, j, self.a)</span><br><span class="line">                <span class="comment"># 归约后检查是否满足成功条件，满足则输出成功信息并return</span></span><br><span class="line">                <span class="comment"># 不满足则继续查找素短语</span></span><br><span class="line">                <span class="keyword">if</span> stack == [<span class="string">'#'</span>, <span class="string">'N'</span>] <span class="keyword">and</span> self.a == <span class="string">'#'</span>:</span><br><span class="line">                    print(<span class="string">'ok  '</span>, self.raw_string)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 如果该终结符号 &lt;或= 待分析输入符号a，那么不是最左素短语（重点在“左”）</span></span><br><span class="line">            <span class="comment"># 那么将a入栈，并分析下一个输入符号，即向右寻找最左素短语</span></span><br><span class="line">            <span class="comment"># 当然如果已经没有下一个输入符号，归约失败，输出失败信息并return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> self.index == len(self.string) - <span class="number">1</span>:</span><br><span class="line">                    self.print_fail_info(<span class="string">'cannot find "&gt;" relation'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                stack.append(self.a)</span><br><span class="line">                self.index += <span class="number">1</span></span><br><span class="line">                self.a = self.string[self.index]</span><br><span class="line">                <span class="keyword">if</span> self.a <span class="keyword">not</span> <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.print_fail_info(<span class="string">'unfined terminal char'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> self.log_level:</span><br><span class="line">                    print(stack, j, self.a)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析程序的入口程序，过滤导致死循环的空串，并初始化string</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.raw_string = string</span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.string = string + <span class="string">'#'</span></span><br><span class="line">        self.a = self.string[self.index]</span><br><span class="line">        <span class="keyword">if</span> string == <span class="string">''</span>:</span><br><span class="line">            self.print_fail_info(<span class="string">'the input string cannot be null'</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.a <span class="keyword">not</span> <span class="keyword">in</span> self.overs:</span><br><span class="line">            self.print_fail_info(<span class="string">'unfined terminal char'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.OPG()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># S和N不可以作为非终结符，为测试算法健壮性，加入文法'E→E--'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'T'</span>, <span class="string">'E-T'</span>, <span class="string">'E--'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'F'</span>, <span class="string">'T/F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">&#125;</span><br><span class="line">start = <span class="string">'E'</span></span><br><span class="line">nonterminals = productions.keys()</span><br><span class="line"><span class="comment"># '#'不可以作为终结符号</span></span><br><span class="line">overs = [<span class="string">'+'</span>, <span class="string">'*'</span>, <span class="string">'i'</span>, <span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'/'</span>, <span class="string">'-'</span>]</span><br><span class="line"></span><br><span class="line">opg_analyzer = OPGAnalyzer(start=start, productions=productions, overs=overs, log_level=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 以下测试样例中，</span></span><br><span class="line"><span class="comment"># '='和'i=i*i'针对的是输入非法终结符号的情况</span></span><br><span class="line"><span class="comment"># 'i++'和'(i--+i)*i'针对的是文法'E→E--'</span></span><br><span class="line"><span class="comment"># ')+i'针对的是在寻找最左素短语时找不到 &lt;关系 的情况</span></span><br><span class="line"><span class="comment"># '('针对的是在寻找最左素短语时找不到 &gt;关系 的情况</span></span><br><span class="line">string_list = [<span class="string">'i+i*i'</span>, <span class="string">'i*i/(i+i)-i'</span>, <span class="string">'='</span>, <span class="string">'i=i*i'</span>, <span class="string">'(i+i)*i/i'</span>, <span class="string">'/i+'</span>, <span class="string">'*i'</span>, <span class="string">'((i*i-i)+(i))'</span>, <span class="string">'i++'</span>, <span class="string">'(i--+i)*i'</span>, <span class="string">'i-+i'</span>, <span class="string">''</span>, <span class="string">')+i'</span>, <span class="string">'('</span>]</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    opg_analyzer.analyse(string)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序功能描述&quot;&gt;&lt;a href=&quot;#程序功能描述&quot; class=&quot;headerlink&quot; title=&quot;程序功能描述&quot;&gt;&lt;/a&gt;程序功能描述&lt;/h1&gt;&lt;p&gt;​        本次实验中，我用python3.5实现了一个算符优先文法的语法分析类，具有以下功能：&lt;/p
      
    
    </summary>
    
      <category term="编译原理" scheme="http://wang22ti.com/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>mooc-牛津大学xDeepMind自然语言处理</title>
    <link href="http://wang22ti.com/2018/05/22/mooc-%E7%89%9B%E6%B4%A5%E5%A4%A7%E5%AD%A6xDeepMind%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    <id>http://wang22ti.com/2018/05/22/mooc-牛津大学xDeepMind自然语言处理/</id>
    <published>2018-05-22T09:14:37.000Z</published>
    <updated>2018-05-22T09:14:48.664Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="自然语言处理" scheme="http://wang22ti.com/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>读书-《统计自然语言处理》</title>
    <link href="http://wang22ti.com/2018/05/21/%E8%AF%BB%E4%B9%A6-%E3%80%8A%E7%BB%9F%E8%AE%A1%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%8B/"/>
    <id>http://wang22ti.com/2018/05/21/读书-《统计自然语言处理》/</id>
    <published>2018-05-21T10:59:31.000Z</published>
    <updated>2018-05-21T11:01:00.576Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="自然语言处理" scheme="http://wang22ti.com/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>每天都写点算法18-5</title>
    <link href="http://wang22ti.com/2018/05/21/%E6%AF%8F%E5%A4%A9%E9%83%BD%E5%86%99%E7%82%B9%E7%AE%97%E6%B3%9518-5/"/>
    <id>http://wang22ti.com/2018/05/21/每天都写点算法18-5/</id>
    <published>2018-05-21T10:57:55.000Z</published>
    <updated>2018-06-02T01:45:15.152Z</updated>
    
    <content type="html"><![CDATA[<p>这个月主要在刷poj</p><h1 id="1001"><a href="#1001" class="headerlink" title="1001"></a>1001</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a1001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BigDecimal <span class="title">QuickPow</span> <span class="params">(BigDecimal base, <span class="keyword">int</span> n)</span><span class="comment">//循环版快速幂</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BigDecimal ans = BigDecimal.valueOf(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                ans = ans.multiply(base);<span class="comment">//ans * base</span></span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            base = base.multiply(base);<span class="comment">//base * base</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            String s;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            Scanner in = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">            <span class="keyword">while</span> (in.hasNext ()) &#123;</span><br><span class="line">                s = in.next ();</span><br><span class="line">                n = in.nextInt ();</span><br><span class="line">                BigDecimal ret = QuickPow (<span class="keyword">new</span> BigDecimal (s), n);</span><br><span class="line">                String stringRet = ret.stripTrailingZeros().toPlainString ();</span><br><span class="line">                <span class="keyword">if</span> (stringRet.charAt (<span class="number">0</span>) == <span class="string">'0'</span>) &#123;</span><br><span class="line">                    stringRet = stringRet.substring (<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println (stringRet);</span><br><span class="line">            &#125;</span><br><span class="line">            in.close ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1002"><a href="#1002" class="headerlink" title="1002"></a>1002</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a1002</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        <span class="keyword">int</span> t = in.nextInt ( );</span><br><span class="line">        TreeMap&lt;String, Integer&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;String, Integer&gt; ( );</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String str = in.next ( );</span><br><span class="line">            String res = <span class="keyword">new</span> String ( );</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length ( ); i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = str.charAt (i);</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'A'</span> || ch == <span class="string">'B'</span> || ch == <span class="string">'C'</span>) &#123;</span><br><span class="line">                    res += <span class="string">'2'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'D'</span> || ch == <span class="string">'E'</span> || ch == <span class="string">'F'</span>) &#123;</span><br><span class="line">                    res += <span class="string">'3'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'G'</span> || ch == <span class="string">'H'</span> || ch == <span class="string">'I'</span>) &#123;</span><br><span class="line">                    res += <span class="string">'4'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'J'</span> || ch == <span class="string">'K'</span> || ch == <span class="string">'L'</span>) &#123;</span><br><span class="line">                    res += <span class="string">'5'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'M'</span> || ch == <span class="string">'N'</span> || ch == <span class="string">'O'</span>) &#123;</span><br><span class="line">                    res += <span class="string">'6'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'P'</span> || ch == <span class="string">'R'</span> || ch == <span class="string">'S'</span>) &#123;</span><br><span class="line">                    res += <span class="string">'7'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'T'</span> || ch == <span class="string">'U'</span> || ch == <span class="string">'V'</span>) &#123;</span><br><span class="line">                    res += <span class="string">'8'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'W'</span> || ch == <span class="string">'X'</span> || ch == <span class="string">'Y'</span>) &#123;</span><br><span class="line">                    res += <span class="string">'9'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res += ch;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeMap.containsKey (res)) &#123;</span><br><span class="line">                treeMap.put (res, treeMap.get (res) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                treeMap.put (res, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        in.close ( );</span><br><span class="line"></span><br><span class="line">        Iterator it = treeMap.keySet ( ).iterator ( );</span><br><span class="line">        <span class="keyword">boolean</span> tag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext ( )) &#123;</span><br><span class="line">            String key = (String) it.next ( );</span><br><span class="line">            Integer num = treeMap.get (key);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                String key1 = key.substring (<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">                String key2 = key.substring (<span class="number">3</span>, key.length ( ));</span><br><span class="line">                System.out.println (key1 + <span class="string">'-'</span> + key2 + <span class="string">' '</span> + num.toString ( ));</span><br><span class="line">                tag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tag) &#123;</span><br><span class="line">            System.out.println (<span class="string">"No duplicates. "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1003"><a href="#1003" class="headerlink" title="1003"></a>1003</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a1003</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        Vector&lt;Double&gt; v = <span class="keyword">new</span> Vector&lt;Double&gt; ();</span><br><span class="line">        v.add (.<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = in.nextDouble ();</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="number">0.00</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (d &lt;= .<span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println (<span class="number">1</span> + <span class="string">" card(s)"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v.lastElement () &lt; d)   &#123;</span><br><span class="line">                <span class="keyword">while</span> (v.lastElement () &lt; d) &#123;</span><br><span class="line">                    v.add (v.lastElement () + <span class="number">1</span>. / i++);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println (v.size () + <span class="string">" card(s)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> l = <span class="number">0</span>, r = v.size () - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> center = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span> (r - l &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v.elementAt (center) &gt;= d) &#123;</span><br><span class="line">                        r = center;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        l= center;</span><br><span class="line">                    &#125;</span><br><span class="line">                    center = (l + r) / <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println ((r+<span class="number">1</span>) + <span class="string">" card(s)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        in.close ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1004"><a href="#1004" class="headerlink" title="1004"></a>1004</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a1004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += in.nextDouble ();</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal average = <span class="keyword">new</span> BigDecimal (sum / <span class="number">12</span>);</span><br><span class="line">        System.out.println (<span class="string">'$'</span> + average.setScale (<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).toString ());</span><br><span class="line">        in.close ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1005"><a href="#1005" class="headerlink" title="1005"></a>1005</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a1005</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Double&gt; v = <span class="keyword">new</span> Vector&lt;Double&gt; ( );</span><br><span class="line">        <span class="keyword">int</span> year = <span class="number">1</span>;</span><br><span class="line">        v.add (Math.sqrt (year++ * <span class="number">50</span> * <span class="number">2</span> / Math.PI));</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        <span class="keyword">int</span> t = in.nextInt ( );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> x = in.nextDouble ( );</span><br><span class="line">            <span class="keyword">double</span> y = in.nextDouble ( );</span><br><span class="line">            <span class="keyword">double</span> dis = Math.sqrt (x * x + y * y);</span><br><span class="line">            <span class="keyword">if</span> (v.lastElement ( ) &lt; dis) &#123;</span><br><span class="line">                <span class="keyword">while</span> (v.lastElement ( ) &lt; dis) &#123;</span><br><span class="line">                    v.add (Math.sqrt (year++ * <span class="number">50</span> * <span class="number">2</span> / Math.PI));</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println (<span class="string">"Property "</span> + i + <span class="string">": This property will begin eroding in year "</span> + v.size ( ) + <span class="string">'.'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> l = <span class="number">0</span>, r = v.size ( ) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> center = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span> (r - l &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v.elementAt (center) &gt;= dis) &#123;</span><br><span class="line">                        r = center;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        l = center;</span><br><span class="line">                    &#125;</span><br><span class="line">                    center = (l + r) / <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println (<span class="string">"Property "</span> + i + <span class="string">": This property will begin eroding in year "</span> + (r + <span class="number">1</span>) + <span class="string">'.'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        in.close ( );</span><br><span class="line">        System.out.println (<span class="string">"END OF OUTPUT."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1006"><a href="#1006" class="headerlink" title="1006"></a>1006</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 超时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a1006</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = in.nextInt ( );</span><br><span class="line">            <span class="keyword">int</span> e = in.nextInt ( );</span><br><span class="line">            <span class="keyword">int</span> i = in.nextInt ( );</span><br><span class="line">            <span class="keyword">int</span> d = in.nextInt ( );</span><br><span class="line">            <span class="keyword">if</span> (p == -<span class="number">1</span> &amp;&amp; e == -<span class="number">1</span> &amp;&amp; i == -<span class="number">1</span> &amp;&amp; d == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            p %= <span class="number">23</span>;</span><br><span class="line">            e %= <span class="number">28</span>;</span><br><span class="line">            i %= <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (i &lt;= d) &#123;</span><br><span class="line">                i += <span class="number">33</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">28</span> == e &amp;&amp; i % <span class="number">23</span> == p) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i += <span class="number">33</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf (<span class="string">"Case %d: the next triple peak occurs in %d days.\n"</span>, n++, i - d);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        in.close ( );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> p, e, i, d;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; p &gt;&gt; e &gt;&gt; i &gt;&gt; d) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">-1</span> &amp;&amp; e == <span class="number">-1</span> &amp;&amp; i == <span class="number">-1</span> &amp;&amp; d == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p %= <span class="number">23</span>;</span><br><span class="line">        e %= <span class="number">28</span>;</span><br><span class="line">        i %= <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= d) &#123;</span><br><span class="line">            i += <span class="number">33</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">28</span> == e &amp;&amp; i % <span class="number">23</span> == p) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i += <span class="number">33</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; n++ &lt;&lt; <span class="string">": the next triple peak occurs in "</span> &lt;&lt; i - d &lt;&lt; <span class="string">" days."</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1083"><a href="#1083" class="headerlink" title="1083"></a>1083</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(<span class="number">401</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span>(n--) &#123;</span><br><span class="line"><span class="keyword">int</span> s, t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line"><span class="keyword">if</span>(t &lt; s) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = t;</span><br><span class="line">t = s;</span><br><span class="line">s = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s &amp; <span class="number">1</span>) &#123;</span><br><span class="line">s += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t &amp; <span class="number">1</span>) &#123;</span><br><span class="line">t += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt;= t; i++) &#123;</span><br><span class="line">v[i]++;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *max_element(v.begin(), v.end()) * <span class="number">10</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1503"><a href="#1503" class="headerlink" title="1503"></a>1503</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a1503</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        BigInteger sum = <span class="keyword">new</span> BigInteger (<span class="string">"0"</span>);</span><br><span class="line">        BigInteger zero = <span class="keyword">new</span> BigInteger (<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            BigInteger i = in.nextBigInteger ();</span><br><span class="line">            <span class="keyword">if</span> (i.compareTo (zero) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum = sum.add (i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println (sum);</span><br><span class="line">        in.close ( );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1753"><a href="#1753" class="headerlink" title="1753"></a>1753</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 65535</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pieces[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> ans = inf;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tag = pieces[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(tag != pieces[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">pieces[x][y] = <span class="number">1</span> - pieces[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">reverse(x, y);</span><br><span class="line"><span class="keyword">if</span>(x + <span class="number">1</span> &lt; <span class="number">4</span>) reverse(x + <span class="number">1</span>, y);</span><br><span class="line"><span class="keyword">if</span>(x - <span class="number">1</span> &gt;=<span class="number">0</span>) reverse(x - <span class="number">1</span>, y);</span><br><span class="line"><span class="keyword">if</span>(y + <span class="number">1</span> &lt; <span class="number">4</span>) reverse(x, y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(y - <span class="number">1</span> &gt;=<span class="number">0</span>) reverse(x, y - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (is_ok()) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; t) ans = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y == <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> newx = (x + <span class="number">1</span>) % <span class="number">4</span>;  </span><br><span class="line">    <span class="keyword">int</span> newy = y + ( x + <span class="number">1</span> ) / <span class="number">4</span>;</span><br><span class="line">dfs(newx, newy, t);</span><br><span class="line"></span><br><span class="line">flip(x, y);</span><br><span class="line">dfs(newx, newy, t+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">flip(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">'b'</span>) &#123;</span><br><span class="line">pieces[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pieces[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == inf) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2159"><a href="#2159" class="headerlink" title="2159"></a>2159</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> sa, sb;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sa &gt;&gt; sb;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m1(<span class="number">26</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m2(<span class="number">26</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sa.size(); i++) &#123;</span><br><span class="line">m1[sa[i] - <span class="string">'A'</span>] += <span class="number">1</span>;</span><br><span class="line">m2[sb[i] - <span class="string">'A'</span>] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(m1.begin(), m1.end());</span><br><span class="line">sort(m2.begin(), m2.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (m1[i] != m2[i]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2255"><a href="#2255" class="headerlink" title="2255"></a>2255</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> root = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; b[index] != root; index++);</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">f(a.substr(<span class="number">1</span>, index), b.substr(<span class="number">0</span>, index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a.size() - <span class="number">1</span> - index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">f(a.substr(index+<span class="number">1</span>), b.substr(index+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> a, b;</span><br><span class="line"><span class="keyword">while</span>( <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b ) &#123;</span><br><span class="line">f(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2262"><a href="#2262" class="headerlink" title="2262"></a>2262</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> notprime[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    notprime[<span class="number">0</span>] = notprime[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>( !notprime[i] ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt; N; j += i) &#123;</span><br><span class="line">     notprime[j] = <span class="number">1</span>;</span><br><span class="line">&#125;    </span><br><span class="line">&#125;     </span><br><span class="line">&#125;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prime();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!notprime[i] &amp;&amp; !notprime[n-i]) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d = %d + %d\n"</span>,n , i, n-i);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2739"><a href="#2739" class="headerlink" title="2739"></a>2739</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> su[MAX],cnt;  </span><br><span class="line"><span class="keyword">int</span> isprime[MAX];   </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(isprime, <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * MAX);<span class="comment">//初始化认为所有数都为素数 </span></span><br><span class="line">    isprime[<span class="number">0</span>] = isprime[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//0和1不是素数  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">2</span>; i &lt;= MAX; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(isprime[i])  </span><br><span class="line">            su[cnt++] = i;<span class="comment">//保存素数i  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j = <span class="number">1</span>; j &lt; cnt &amp;&amp; su[j] * i &lt; MAX; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            isprime[su[j] * i] = <span class="number">0</span>;<span class="comment">//筛掉小于等于i的素数和i的积构成的合数  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">prime();</span><br><span class="line"><span class="keyword">int</span> res[<span class="number">100001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= cnt &amp;&amp; sum + su[j] &lt;= <span class="number">100001</span>; j++) &#123;</span><br><span class="line">sum += su[j];</span><br><span class="line">res[sum] += <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2965"><a href="#2965" class="headerlink" title="2965"></a>2965</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 65535</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pieces[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> ans = inf;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v_ans; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(pieces[i][j] != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">pieces[x][y] = <span class="number">1</span> - pieces[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">reverse(x, y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">reverse(x, i);</span><br><span class="line">reverse(i, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(is_ok()) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; t) &#123;</span><br><span class="line">ans = t;</span><br><span class="line"><span class="keyword">while</span>(!v_ans.empty()) v_ans.pop_back();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) v_ans.push_back(v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( y == <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> newx = (x + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> newy = y + (x + <span class="number">1</span>) / <span class="number">4</span>;</span><br><span class="line">dfs(newx, newy, t);</span><br><span class="line"></span><br><span class="line">v.push_back(x);</span><br><span class="line">v.push_back(y);</span><br><span class="line">open(x, y);</span><br><span class="line">dfs(newx, newy, t+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">open(x, y);</span><br><span class="line">v.pop_back();</span><br><span class="line">v.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">pieces[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pieces[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; v_ans.size() ; i+=<span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v_ans[i] + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v_ans[i+<span class="number">1</span>] + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3006"><a href="#3006" class="headerlink" title="3006"></a>3006</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> notprime[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    notprime[<span class="number">0</span>] = notprime[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>( !notprime[i] ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt; N; j += i) &#123;</span><br><span class="line">     notprime[j] = <span class="number">1</span>;</span><br><span class="line">&#125;    </span><br><span class="line">&#125;     </span><br><span class="line">&#125;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prime();</span><br><span class="line">    <span class="keyword">int</span> a, d, n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;d, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; a == <span class="number">0</span> &amp;&amp; d == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = a;</span><br><span class="line"><span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!notprime[sum]) &#123;</span><br><span class="line">        n--;</span><br><span class="line">&#125;</span><br><span class="line">sum += d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum - d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2094"><a href="#2094" class="headerlink" title="2094"></a>2094</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>, s)) &#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">"#"</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> quicksum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">' '</span>) <span class="keyword">continue</span>;</span><br><span class="line">quicksum += (i + <span class="number">1</span>) * (s[i] - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; quicksum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3299"><a href="#3299" class="headerlink" title="3299"></a>3299</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> t = <span class="number">200</span>, d = <span class="number">200</span>, humidex = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">char</span> tag;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tag;</span><br><span class="line"><span class="keyword">if</span>(tag == <span class="string">'E'</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tag == <span class="string">'T'</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tag == <span class="string">'D'</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tag == <span class="string">'H'</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; humidex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tag;</span><br><span class="line"><span class="keyword">if</span> (tag == <span class="string">'T'</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tag == <span class="string">'D'</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tag == <span class="string">'H'</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; humidex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> e, h;</span><br><span class="line"><span class="keyword">if</span> (humidex == <span class="number">200</span>) &#123;</span><br><span class="line">e = <span class="number">6.11</span> * <span class="built_in">exp</span>(<span class="number">5417.7530</span> * (<span class="number">1</span>/<span class="number">273.16</span> - <span class="number">1</span>/(d + <span class="number">273.16</span>)));</span><br><span class="line">h = <span class="number">0.5555</span> * (e <span class="number">-10</span>);</span><br><span class="line">humidex = t + h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(d == <span class="number">200</span>) &#123;</span><br><span class="line">h = humidex - t;</span><br><span class="line">e = h / <span class="number">0.5555</span> + <span class="number">10</span>;</span><br><span class="line">d =  <span class="number">1</span> / (<span class="number">1</span>/<span class="number">273.16</span> - <span class="built_in">log</span>(e / <span class="number">6.11</span>) / <span class="number">5417.7530</span>) - <span class="number">273.16</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">e = <span class="number">6.11</span> * <span class="built_in">exp</span>(<span class="number">5417.7530</span> * (<span class="number">1</span>/<span class="number">273.16</span> - <span class="number">1</span>/(d + <span class="number">273.16</span>)));</span><br><span class="line">h = <span class="number">0.5555</span> * (e <span class="number">-10</span>); </span><br><span class="line">t = humidex - h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"T %.1f D %.1f H %.1f\n"</span>, t, d, humidex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个月主要在刷poj&lt;/p&gt;
&lt;h1 id=&quot;1001&quot;&gt;&lt;a href=&quot;#1001&quot; class=&quot;headerlink&quot; title=&quot;1001&quot;&gt;&lt;/a&gt;1001&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="算法设计" scheme="http://wang22ti.com/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>读书-《计算机体系结构——量化研究方法》</title>
    <link href="http://wang22ti.com/2018/05/18/%E8%AF%BB%E4%B9%A6-%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%87%8F%E5%8C%96%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95%E3%80%8B/"/>
    <id>http://wang22ti.com/2018/05/18/读书-《计算机体系结构——量化研究方法》/</id>
    <published>2018-05-18T01:03:03.000Z</published>
    <updated>2018-05-18T09:05:23.406Z</updated>
    
    <content type="html"><![CDATA[<p>John Hennessy和David Patterson两位先生获得了2017年图灵奖，《计算机体系结构》课上董岚老师向我们推荐了这本书。我买到的是第5版中文版，介绍了很多比较先进的系统结构方法，课程要求很大程度上已经与之脱节，很多内容藏在附录里，包括指令集基本原理、存储器层次结构回顾、流水线的基础与中级概念。</p><h1 id="量化设计与分析基础"><a href="#量化设计与分析基础" class="headerlink" title="量化设计与分析基础"></a>量化设计与分析基础</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>计算机性能的高速增长带来的<code>成本优势</code>、人们几乎<code>不再使用汇编语言</code>、出现了独立于厂商的<code>标准化操作系统</code>，降低了引入新的计算机体系结构的成本和风险，使得人们有可能在80年代开发<code>精简指令集计算机RISC</code>，其代表包括<code>MIPS</code>和<code>ARM</code>。                                                                                                                                                                                                                                                                                                                     </p><p>精简指令集主要聚焦<code>指令级并行开发</code>和<code>缓存的使用</code>，前者早期依靠<code>流水线</code>，后期依靠<code>多指令发射</code></p><p>体系结构和组织方式的发展导致计算机性能飞速发展，对于计算机行业的影响：显著增强了可供用户使用的功能、导致新型计算机的出现<code>数据仓库</code>、微处理机占据主导地位、软件开发（脚本语言、解释语言、SaSS）。</p><p>从2003年开始，由于<code>风冷芯片最大功耗</code>和<code>无法有效地开发更多指令集并行</code>，处理器性能从依赖指令级并行<code>ILP</code>转向数据级并行<code>DLP</code>和线程级并行<code>TLP</code>，乃至请求级并行<code>RLP</code>。</p><h2 id="计算机的分类"><a href="#计算机的分类" class="headerlink" title="计算机的分类"></a>计算机的分类</h2><div class="table-container"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">特点或关键因素</th></tr></thead><tbody><tr><td style="text-align:center">个人移动设备PMD</td><td style="text-align:center">成本、能耗、尺寸、实时性能</td></tr><tr><td style="text-align:center">桌面计算</td><td style="text-align:center">市场最大，性价比趋势</td></tr><tr><td style="text-align:center">服务器</td><td style="text-align:center">可用性、可扩展性、吞吐量</td></tr><tr><td style="text-align:center">集群（仓库）级计算机（WSC）</td><td style="text-align:center">集群是通过局域网从逻辑上将一组计算机以一台计算机的方式工作，最大的集群为仓库，性价比和功耗是关键</td></tr><tr><td style="text-align:center">超级计算机</td><td style="text-align:center">浮点性能、高速内部网络</td></tr><tr><td style="text-align:center">嵌入式计算机</td><td style="text-align:center">计算能力相差大、以最低的价格满足需求</td></tr></tbody></table></div><h2 id="并行度与并行体系结构的分类"><a href="#并行度与并行体系结构的分类" class="headerlink" title="并行度与并行体系结构的分类"></a>并行度与并行体系结构的分类</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;John Hennessy和David Patterson两位先生获得了2017年图灵奖，《计算机体系结构》课上董岚老师向我们推荐了这本书。我买到的是第5版中文版，介绍了很多比较先进的系统结构方法，课程要求很大程度上已经与之脱节，很多内容藏在附录里，包括指令集基本原理、存储
      
    
    </summary>
    
      <category term="计算机体系结构" scheme="http://wang22ti.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>《计算机体系结构》实验5-tomasuluo算法</title>
    <link href="http://wang22ti.com/2018/05/16/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C5-tomasuluo%E7%AE%97%E6%B3%95/"/>
    <id>http://wang22ti.com/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/</id>
    <published>2018-05-15T16:10:00.000Z</published>
    <updated>2018-05-15T16:19:40.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>(1) 加深对指令级并行性及开发的理解。 </p><p>(2) 加深对Tomasulo算法的理解。  </p><p>(3) 掌握Tomasulo算法在指令流出、执行、写结果各阶段对浮点操作指令以及load和store 指令进行什么处理。  </p><p>(4) 掌握采用了Tomasulo算法的浮点处理部件的结构。 </p><p>(5) 掌握保留站的结构。  </p><p>(6) 给定被执行代码片段，对于具体某个时钟周期，能够写出保留站、指令状态表以及浮点 寄存器状态表内容的变化情况。</p><h1 id="执行实验指导书中的程序"><a href="#执行实验指导书中的程序" class="headerlink" title="执行实验指导书中的程序"></a>执行实验指导书中的程序</h1><p>假设浮点功能部件的延迟时间为加减法2个时钟周期，乘法10个时钟周期，除法40 个时钟周期，Load部件2个时钟周期。对于下面的代码段，给出当指令MUL.D写结果时，保留站、load缓冲器以及寄存器状态表中的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L.D     F6，24(R2)</span><br><span class="line">L.D     F2，12(R3)</span><br><span class="line">MUL.D  F0，F2，F4</span><br><span class="line">SUB.D   F8，F6，F2</span><br><span class="line">DIV.D    F10，F0，F6</span><br><span class="line">ADD.D   F6，F8，F2</span><br></pre></td></tr></table></figure><p>按步进方式执行上述代码，观察每一个时钟周期前后各信息表中内容的变化情况。</p><p>给出在第3个时钟周期时，保留站、load缓冲器以及寄存器状态表中的内容；再步进10个时钟周期，给出这时保留站、load缓冲器以及寄存器状态表中的内容。</p><h2 id="执行到MUL-D写结果"><a href="#执行到MUL-D写结果" class="headerlink" title="执行到MUL.D写结果"></a>执行到MUL.D写结果</h2><p>​        按照实验要求，代码执行到MUL.D写结果如下图所示，可见此时L.D、MUL.D、SUB.D、ADD.D均已经执行完，且执行的周期与题目要求的延迟时间相同；由于指令DIV.D和指令MUL.D之间存在RAW依赖，所以还没有执行；虽然ADD.D与DIV.D之间存在WAR依赖，但是由于tomasuluo算法已经将之消除，所以ADD.D已经执行完毕。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image1.png" alt="">                             </p><p>观察保留站，发现由于SUB.D和ADD.D分别于第8、第11个周期写回，所以Add保留站均为空；由于刚好执行到Mul.D写回，Mult1的busy刚刚变为No；由于Div.D还在等待Mul.D写入F0的数据，Mult2仍然处于busy状态，其中Vj=M5即Mul.D刚刚写入F0的值，而Vk=M1即此前L.D写入F6的值（不过现在F6中的值已经被ADD.D覆盖）。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image2.png" alt=""> </p><p>观察Load部件，由于两个L.D指令分别于第4、第5个周期写回，所以Load部件均为No Busy。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image3.png" alt=""> </p><p>观察寄存器，发现F0的值刚刚被修改为M5，而F10的值仍然为空。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image4.png" alt="">  </p><h2 id="执行到第3个周期"><a href="#执行到第3个周期" class="headerlink" title="执行到第3个周期"></a>执行到第3个周期</h2><p>按照实验要求执行到第3个周期，可以观察到由于L.D的延迟时间为2个周期，所以第1条L.D指令刚好执行完，还没有写回；第2条L.D指令还在执行；MUL.D指令被流出。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image5.png" alt="">    </p><p>观察保留站可以发现此时Mult1已经处于Busy的状态，OP字段指明操作，Vk由于不存依赖已经被读取，而由于存在RAW依赖Vj并没有值而Qj为Load2表示等待Load2的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image6.png" alt=""> </p><p>观察Load部件，由于Load1已经写回，所以取得了值即将R2的值加上24作为地址对应的内存单元的值，而Load2刚刚计算出地址，还没有取得对应内存单元的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image7.png" alt=""> </p><p>观察寄存器，可以发现F0、F2、F6只是记录了对应的Qi，还没有取得对应的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image8.png" alt="">    </p><h2 id="执行到第13个周期"><a href="#执行到第13个周期" class="headerlink" title="执行到第13个周期"></a>执行到第13个周期</h2><p> 按照实验要求再执行10个周期到第13个周期，可以发现两个L.D指令已经写回；ADD.D指令由于和SUB.D指令存在RAW依赖所以从第9个开始执行并于第11个周期写回；MUL.D指令在第二个L.D指令写回后开始执行，由于延时为10个周期所以还没有执行完；DIV.D指令由于和MUL.D指令存在RAW依赖，所以还在等待。从中我们可以看出tomasuluo算法对于WAW、WAR依赖的消除，从而提高了程序的并发度与执行效率。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image9.png" alt=""> </p><p>观察保留站，由于Mult1的Vk不存在依赖，所以已经获得寄存器F4的值，而Vj为M2即Load2放到寄存器F2的值；由于Mult2依赖Mult1的输出，所以其Vj是空缺的，Qj记录了它正在等待Mult1。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image10.png" alt=""> </p><p>观察Load部件，由于两个L.D指令分别于第4、第5个周期写回，所以Load部件均为No Busy。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image11.png" alt=""> </p><p>和执行到第3个周期不同，此时F2、F6、F8已经有了计算写入的值M2、M4、M3，而F0和F10仍然在等待来自Mult1和Mult2的信号以取得对应的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image12.png" alt=""> </p><h1 id="执行自己编写的程序"><a href="#执行自己编写的程序" class="headerlink" title="执行自己编写的程序"></a>执行自己编写的程序</h1><p>假设浮点功能部件的延迟时间为加减法3个时钟周期，乘法8个时钟周期，除法40个时钟周期。自己编写一段程序，重复上述的工作。</p><p>我编写的程序为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L.D      F2, 24(R0)</span><br><span class="line">L.D      F4, 12(R1)</span><br><span class="line">ADD.D  F2, F4, F6</span><br><span class="line">MUL.D   F0, F4, F6</span><br><span class="line">SUB.D    F8, F0, F2</span><br><span class="line">DIV.D      F10, F8, F0</span><br></pre></td></tr></table></figure><h2 id="执行到第3个周期-1"><a href="#执行到第3个周期-1" class="headerlink" title="执行到第3个周期"></a>执行到第3个周期</h2><p>按照实验要求执行到第3个周期，可以观察到由于L.D的延迟时间为2个周期，所以第1条L.D指令刚好执行完，还没有写回；第2条L.D指令还在执行；ADD.D指令被流出。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image13.png" alt=""> </p><p>观察保留站可以发现此时Add1已经处于Busy的状态，OP字段指明操作，Vk由于不存依赖已经被读取，而由于存在RAW依赖Vj并没有值而Qj为Load2表示等待Load2的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image14.png" alt=""> </p><p>观察Load部件，由于Load1已经写回，所以取得了值即将R0的值加上24作为地址对应的内存单元的值，而Load2刚刚计算出地址，还没有取得对应内存单元的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image15.png" alt=""> </p><p>观察寄存器，可以发现F2、F4只是记录了对应的Qi，还没有取得对应的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image16.png" alt=""> </p><h2 id="执行到第13个周期-1"><a href="#执行到第13个周期-1" class="headerlink" title="执行到第13个周期"></a>执行到第13个周期</h2><p>按照实验要求再执行10个周期到第13个周期，可以发现两个L.D指令已经写回；<br>指令ADD.D和指令MUL.D均均和第2条L.D存在RAW依赖所以均在第6个周期开始执行。由于ADD的延迟为3个周期，所以它在第8个周期结束时执行完并于第9个周期被写回；而MUL.D的延迟为8个周期所以恰好执行完，还没有写回。由于指令SUB.D和指令DIV.D和MUL.D均存在RAW依赖，所以均还没有执行。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image17.png" alt=""> </p><p>​        观察保留站可以发现，由于ADD.D已经写回，所以Add1的Busy变为No，而指令SUB.D即Add2在本周期周到了来自F2即Add1的写回值，所以Vk变为了M2，Qj为Mult1表示在等待Mult1即指令MULT.D的值。而Mult2中的指令DIV.D与指令SUB.D和指令MUL.D均存在RAW依赖，所以其Vj和Vk均为空，Qj为Add2而Qk为Mult1。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image18.png" alt=""> </p><p>观察Load部件，由于两个L.D指令分别于第4、第5个周期写回，所以Load部件均为No Busy。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image19.png" alt=""> </p><p>和执行到第3个周期不同，此时F2、F4已经有了计算写入的值M2、M1，而F0、F8和F10仍然在等待来自Mult1、Add2和Mult2的信号以取得对应的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image20.png" alt=""> </p><h1 id="心得体会​"><a href="#心得体会​" class="headerlink" title="心得体会​"></a>心得体会​</h1><p>​        解决WAW和WAR冒险主要依靠寄存器重命名实现，因为这两种冒险本质上并没有数据的依赖，仅仅是因为选择了同一个寄存器。而tomasuluo算法将同一名字的寄存器映射到不同的保留站当中，当保留站满的时候就不流出指令，于是从根本上杜绝了冒险的可能。</p><p>解决RAW冒险主要通过广播总线实现的，即一方面在广播信号中加入信号的来源（比如Add1、Add2、Add3、Mult1、Mult2等等），另一方面需要读的组件不停地接受总线的广播信息直到来源地址与期待的相同，由于广播信息由写回操作产生，得不到信息就不执行，由此避免了RAW冒险。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a&gt;实验目的&lt;/h1&gt;&lt;p&gt;(1) 加深对指令级并行性及开发的理解。 &lt;/p&gt;
&lt;p&gt;(2) 加深对Tomasulo算法的理解。  &lt;/p&gt;
&lt;p&gt;(3
      
    
    </summary>
    
      <category term="计算机体系结构" scheme="http://wang22ti.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>tex中的数学公式</title>
    <link href="http://wang22ti.com/2018/05/13/tex%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <id>http://wang22ti.com/2018/05/13/tex中的数学公式/</id>
    <published>2018-05-13T09:46:12.000Z</published>
    <updated>2018-05-15T14:22:51.945Z</updated>
    
    <content type="html"><![CDATA[<p>因为要写markdown和论文，就初步学了一点，重点是参考资料：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C_&#123;2m&#125;^n \times \frac&#123;a&#125;&#123;b&#125; \cdot</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">C_{2m}^n \times \frac{a}{b} \cdot m</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\sqrt&#123;2&#125; \neq \sqrt[3]&#123;2&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\sqrt{2} \neq \sqrt[3]{2}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\sum_&#123;n=1&#125;^&#123;4&#125;&#123;a_n&#125; \bmod n \not\in N \</span><br><span class="line">\prod_&#123;i=1&#125;^&#123;4&#125;&#123;b_i&#125; \</span><br><span class="line">\int_&#123;0&#125;^&#123;1&#125;&#123;sin(x)&#125; dx \</span><br><span class="line">\lim_&#123;x \rightarrow \infty&#125;&#123;f(x)&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\sum_{n=1}^{4}{a_n} \bmod n \not\in N \\ \prod_{i=1}^{4}{b_i} \\\int_{0}^{1}{sin(x)} dx \\\lim_{x \rightarrow \infty}{f(x)}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% 加\begin&#123;equation&#125; \end&#123;equation&#125;会自动编号</span><br><span class="line">\left  &#123;  \</span><br><span class="line">    \begin&#123;array&#125; &#123;lr&#125; </span><br><span class="line">    x=\cos( \dfrac&#123;3&#125;&#123;2&#125; t),                 \\  </span><br><span class="line">    y=s,                                     &amp; 0\leq s\leq L,|t|\leq1.  \\ </span><br><span class="line">    z=t \sin(3\pi t),</span><br><span class="line">   \end&#123;array&#125;  </span><br><span class="line">\right.</span><br><span class="line">% emmm这是一个大括号公式，但是markdown显示有问题</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125; </span><br><span class="line">0 &amp; \cdots  &amp; 1 \\</span><br><span class="line">\vdots &amp;   \ddots  &amp; 1       \\</span><br><span class="line">1 &amp; 0 &amp; 1</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">% emmmm这是一个矩阵</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\vec&#123;ab&#125; \   \overrightarrow&#123;AB&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\vec{ab} \   \overrightarrow{AB}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\because \space \therefore \space \exists \space \forall</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\because \space \therefore \space \exists \space \forall</script><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]  tex数学公式和字符表示方法 <code>最基础</code></p><p><a href="https://blog.csdn.net/u014595019/article/details/51319344" target="_blank" rel="noopener">https://blog.csdn.net/u014595019/article/details/51319344</a></p><p>[2] 怎样用LaTeX优雅地打印数学的一切</p><p><a href="https://www.jianshu.com/p/f5d475d6904e" target="_blank" rel="noopener">https://www.jianshu.com/p/f5d475d6904e</a></p><p>[3] Latex大括号及多行公式</p><p><a href="https://blog.csdn.net/lemolemac/article/details/9057471" target="_blank" rel="noopener">https://blog.csdn.net/lemolemac/article/details/9057471</a></p><p>[4] LaTex排版技巧：[5]如何输入矩阵</p><p><a href="https://jingyan.baidu.com/article/f3e34a128c53aef5ea653542.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/f3e34a128c53aef5ea653542.html</a></p><p>[5] LaTeX：公式及编号</p><p><a href="https://blog.csdn.net/garfielder007/article/details/51584396" target="_blank" rel="noopener">https://blog.csdn.net/garfielder007/article/details/51584396</a></p><p>[6] 常用数学符号的 LaTeX 表示方法 <code>附符号表</code></p><p><a href="http://www.mohu.org/info/symbols/symbols.htm" target="_blank" rel="noopener">http://www.mohu.org/info/symbols/symbols.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为要写markdown和论文，就初步学了一点，重点是参考资料：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/
      
    
    </summary>
    
    
      <category term="tex" scheme="http://wang22ti.com/tags/tex/"/>
    
  </entry>
  
  <entry>
    <title>朝花夕拾——遗传算法入门</title>
    <link href="http://wang22ti.com/2018/05/12/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>http://wang22ti.com/2018/05/12/朝花夕拾——遗传算法入门/</id>
    <published>2018-05-12T02:06:17.000Z</published>
    <updated>2018-05-12T09:33:57.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>遗传算法（Genetic  Algorithm）是受生物净化学说和遗传学说的启发发展起来的，生物在进化的过程中不断繁殖、生存竞争、适者生存、遗传和变异。可以如下类比：</p><p>生物的遗传类比为算法中的分离规律、自由规律</p><p>生物的变异类比为算法中的基因重组、基因突变、染色体变异 </p><h2 id="研究对象"><a href="#研究对象" class="headerlink" title="研究对象"></a>研究对象</h2><p>各种功能非线性、多变量、多目标、复杂的自适应体用问题</p><h2 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h2><ul><li>智能式搜索：依据适应度（目标函数）进行智能搜索</li><li>渐进式优化：利用复制、交换、突变等操作，使得下一代结果有优于上一代的趋势</li><li>全局最优解：采用交换和突变操作产生新个体，使得搜索得到的优化结果逼近全局最优解</li><li>黑箱式结构：根据问题的特征进行编码（输入）和确定适应度（输出），只考虑输入输出关系，并不深究该关系的原因</li><li>通用性强：不要求明确的数学表达式，只需要一些简单的原则要求，可以应用于解决离散问题、函数关系不明确的复杂问题。</li><li>并行式运算：每次迭代计算都是对群体中的所有个体同时进行运算，搜索速度快</li></ul><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><ul><li><p>求解Michalewicz Function </p><script type="math/tex; mode=display">f(x,y) = 21.5 + xsin{4\pi x} + ysin{20\pi y}</script></li><li><p>建筑学桁架结构优化问题</p></li></ul><h2 id="发展简史"><a href="#发展简史" class="headerlink" title="发展简史"></a>发展简史</h2><ul><li>萌芽期：50年代后期到70年代中期</li><li>成长期：70年代中期到80年代末期</li><li>发展期：90年代</li></ul><h2 id="遗传算法和遗传规划特别有效的领域"><a href="#遗传算法和遗传规划特别有效的领域" class="headerlink" title="遗传算法和遗传规划特别有效的领域"></a>遗传算法和遗传规划特别有效的领域</h2><ul><li>结构优化设计</li><li>人工智能</li><li>复杂问题优化</li><li>复杂系统分析</li><li>综合应用</li></ul><h2 id="遗传算法和遗传规划自身需要完善的环节"><a href="#遗传算法和遗传规划自身需要完善的环节" class="headerlink" title="遗传算法和遗传规划自身需要完善的环节"></a>遗传算法和遗传规划自身需要完善的环节</h2><ul><li>编码技术和程序表达技术的改进</li><li>复制、交换、突变等遗传操作的改进</li><li>适应度的表达和计算的改进</li><li>寻求其他有效遗传算子，防止近源杂交、过早收敛</li><li>进一步讨论遗传算法和遗传规划的机理</li><li>开发遗传算法和遗传规划的商业软件</li></ul><h1 id="基本运算过程"><a href="#基本运算过程" class="headerlink" title="基本运算过程"></a>基本运算过程</h1><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol><li>编码，随机产生初始群体</li><li>个体评价（适应度验算）、选择、确定是否输出</li><li>随机交叉运算</li><li>随机变异运算</li><li>选择、复制、按照适应度大小排序</li><li>转向个体评价，开始新循环</li></ol><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>遗传算法的工作对象是字符串，对字符串的编码要求：</p><ul><li>字符串要反映所研究问题的性质</li><li>字符串的表达要便于计算机处理</li></ul><h2 id="适应度"><a href="#适应度" class="headerlink" title="适应度"></a>适应度</h2><p>在遗传算法中衡量个体优劣的尺度就是适应度，根据适应度的大小决定个体繁殖的数量或者决定其是否消亡，适应度是驱动遗传算法的动力。</p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>复制算子将优良个体在下一代予以繁殖，体现了“适者生存”的自然选择原则，个体被复制的数量是按照适应度的大小决定的，适应度大的复制得多，适应度小的复制的少，群体中个体总数保持不变。复制方式有：</p><ul><li>等差方式：收敛较快，常用于初选</li><li>轮盘方式：选择复制对象，直到满足所需要的个体数目，以防止过早的收敛，常用于精选，示意如下</li></ul><div class="table-container"><table><thead><tr><th>个体序号i</th><th>1 2 3 4  5 6 7 8 9 10</th></tr></thead><tbody><tr><td>适应度xi</td><td>8 2 17  7 2 12 11 7 3 7</td></tr><tr><td>适应度累计值Si</td><td>8 10 27  34 36 48 59 66 69 76</td></tr><tr><td>随机数R[0,Sn]</td><td>23 49  76 13 1 27 57</td></tr><tr><td>被选中的个体号i</td><td>3 7 10  3 1 3 7</td></tr></tbody></table></div><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>交换是遗传算法中产生新个体的主要手段，将两个个体的部分字符互相交换。</p><ul><li>执行交换的个体是随机选择的</li><li>交换的概率一般为50%到80%（通用值，可以根据需求改变）</li><li>通过某种方式，先选择交换个体，再选择被交换个体，同时判断不要自交、多交</li></ul><h2 id="变异"><a href="#变异" class="headerlink" title="变异"></a>变异</h2><p>变异是遗传算法中产生新个体的另一种方法，借鉴了生物学中的突变现象，将被选择的个体的部分字符进行补运算。</p><ul><li>变异对象的选择是随机的</li><li>变异的位数是随机的</li><li>变异起始位数是随机的</li><li>变异的概率可以根据需求改变</li></ul><h2 id="终止条件"><a href="#终止条件" class="headerlink" title="终止条件"></a>终止条件</h2><p>遗传算法是一种反复迭代的搜索算法，他通过多次进化逐渐逼近最优解。</p><ul><li>最常见的终止条件是迭代次数</li><li>当目标函数有最优目标值时，可采用控制偏差的方式实现终止</li><li>第三种终止方式是检查适应度的变化程度</li></ul><h2 id="模式理论"><a href="#模式理论" class="headerlink" title="模式理论"></a>模式理论</h2><p>详情参考<a href="http://wenku.baidu.com/link?url=0qGrc-t4903O4VtCCO93D853treODmX1fmsG1CndGYA7U44K0n-vD4srVptqjVgnGbG_85Cev79UG1_QwYrve7XjSfUwh71xeQkLtBNyuoC" target="_blank" rel="noopener">百度文库</a></p><h1 id="算子及参数技术"><a href="#算子及参数技术" class="headerlink" title="算子及参数技术"></a>算子及参数技术</h1><h2 id="遗传算子（GeneticOperators）"><a href="#遗传算子（GeneticOperators）" class="headerlink" title="遗传算子（GeneticOperators）"></a>遗传算子（GeneticOperators）</h2><ul><li>选择算子（Selection     Operator）</li><li>交叉算子（Crossover     Operator）</li><li>复制算子（reproduction     Operator）</li><li>变异算子（Mutation     Operator）</li><li>重排序算子（Reordering     Operator）</li><li>倒序算子（Inversion     Operator）</li><li>生态算子（Niche     Operator）</li><li>显性算子（Dominance     Operator）</li></ul><h2 id="参数技术"><a href="#参数技术" class="headerlink" title="参数技术"></a>参数技术</h2><ul><li>编码（Coding）&amp;解码（Decoding）</li><li>适应度函数（Fitness     Function）&amp;评估（Evaluation）</li><li>选择（Selection）&amp;复制（Reproduction）</li><li>交换（Crossover）</li><li>变异（Mutation）</li><li>其他算子（操作）</li></ul><h2 id="编码-amp-解码"><a href="#编码-amp-解码" class="headerlink" title="编码&amp;解码"></a>编码&amp;解码</h2><h3 id="编码原则"><a href="#编码原则" class="headerlink" title="编码原则"></a>编码原则</h3><p>原则一：有意义积木块编码原则</p><p>   应使用能易于产生与所求问题相关的、且具有低阶、短定义长度模式的编码方案。</p><p>原则二：最小字符集编码原则</p><p>   应使用能使问题得到自然表示或描述的具有最小编码字符集的编码方案。</p><h3 id="编码方法"><a href="#编码方法" class="headerlink" title="编码方法"></a>编码方法</h3><p>编码在各个阶段也是可以变的。</p><p><strong>【十进制码（Decimal Code）】</strong></p><ul><li>直接用十进制数编码，使用较少。</li><li>优点：无需解码</li><li>缺点：突变的可能性太多，有9种（变异是9种补运算，即1可以变成2—9和0；个体选择是随机的，个体的起始位是随机的，个体变异的位数是随机的，变异成什么东西，补运算后是什么东西是随机的等四种随机性，而二进制编码只有三种随机性）；交换较粗略（交换变化很大，初选时可以用，但是交换很多次后就不可以用），在多次循环后收敛太慢。【适用于变量多，数字大，初选阶段】</li></ul><p><strong>【二进制码（Binary Code）】</strong></p><ul><li>缺点：需要解码，增大了运算量。</li><li>优点：突变时取反即可，唯一确定；交换时可精确变化，在多代循环后收敛速度较快。｛在突变的时候唯一确定（补运算），交换比十进制是最精确的，多代循环后收敛速度快。用在变量少，精选阶段，但是解码需要大量运算。｝</li></ul><ul><li>由于符号位和小数点位的存在，使用由十进制转化而来的直接二进制码，在交换和变异的环节中容易出现问题，故使用间接二进制码，每一个二进制码均为正整数。间接码的位数公式：<script type="math/tex; mode=display">2^m < (U_{max} - U_{min})/d <= x^{m+1}</script></li></ul><p>​    其中d为问题的解的精确度，定义域为[Umin, Umax]，则码的位数为m+1。</p><p>​    间接码的解码公式：</p><script type="math/tex; mode=display">x=U_{min} + (U_{max}-U_{min}) / (2^m-1) * \sum_{i=1}^{m}{b_i * 2 ^i-1}</script><p><strong>【格雷码（Gray Code）】</strong></p><ul><li>增强遗传算法的局部搜索能力，便于对连续函数进行局部空间搜索。使用非常广泛。解码时，先将格雷码转化成二进制码，再将二进制码转化为十进制真实数；或直接将格雷码转化为十进制真实数。</li></ul><ul><li>二进制码转换为格雷码</li></ul><script type="math/tex; mode=display">g_1 = b_1</script><script type="math/tex; mode=display">g_i = b_i -1 \oplus b_i</script><ul><li><p>格雷码转换为二进制码</p><script type="math/tex; mode=display">b_1 = g_1</script><script type="math/tex; mode=display">b_i = b_i -1 \oplus g_i</script></li></ul><p><strong>【浮点数编码（Floating-point Code）】</strong></p><p><strong>【符号编码（CharacterCode）】</strong></p><p>个体染色体编码串中的基因值取自一个无数值含义、而只有代码含义的符号集。常用于桥梁、机器人等的设计。</p><p><strong>【多参数级联编码（United Multiparameter Encoding）】</strong></p><p>将各个参数分别编码，然后将它们按照一定的顺序连接在一起的编码方法。</p><p><strong>【多参数交叉编码（Multiparameter Crossover Code）】</strong></p><p>将各个参量分别编码，然后将它们起主要作用的码集中在一起，并按一定的顺序连接的编码方法，防止操作的时候集中于某一个变量。【比如相同的位数放到一起】</p><h1 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h1><p>一下实现了利用遗传算法求解函数</p><script type="math/tex; mode=display">f(x) = x(4-x)</script><p>的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Getmaximum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> codingBit;</span><br><span class="line"><span class="keyword">private</span> String[] sample;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfSample;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfReproduction;<span class="comment">//每轮交换中交换对数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfLocation;<span class="comment">//每对交换中交换的位数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberofMutation;<span class="comment">//每轮变异种变异个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfDelete;<span class="comment">//每轮评估中淘汰的个数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> HashMap&lt;Integer, String&gt; CodingDictionary1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> HashMap&lt;String, Integer&gt; CodingDictionary2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*(<span class="number">4</span>-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBinaryString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String string = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; codingBit; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">string = <span class="string">'1'</span> + string;</span><br><span class="line">i /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">string = <span class="string">'0'</span> + string;</span><br><span class="line">i /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateDictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.pow(<span class="number">2</span>, codingBit); i++) &#123;</span><br><span class="line">CodingDictionary1.put(i, getBinaryString(i));</span><br><span class="line">CodingDictionary2.put(getBinaryString(i), i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateFirstGeneration</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">sample = <span class="keyword">new</span> String[numberOfSample];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length; i++) &#123;</span><br><span class="line">sample[i] = CodingDictionary1.get( (<span class="keyword">int</span>) (Math.random()*CodingDictionary1.size()) );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reproduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfReproduction; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>) (Math.random() * sample.length);</span><br><span class="line"><span class="keyword">int</span> n = (<span class="keyword">int</span>) (Math.random() * sample.length);</span><br><span class="line"><span class="keyword">char</span>[] m_s = sample[m].toCharArray();</span><br><span class="line"><span class="keyword">char</span>[] n_s = sample[n].toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfLocation; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> location = (<span class="keyword">int</span>) (Math.random() * codingBit);</span><br><span class="line"><span class="keyword">char</span> temp = n_s[location];</span><br><span class="line">n_s[location] = m_s[location];</span><br><span class="line">m_s[location] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sample[m] = <span class="keyword">new</span> String(m_s);</span><br><span class="line">sample[n] = <span class="keyword">new</span> String(n_s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mutation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberofMutation; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>) (Math.random() * sample.length);</span><br><span class="line"><span class="keyword">char</span>[] m_s = sample[m].toCharArray();</span><br><span class="line"><span class="keyword">int</span> location = (<span class="keyword">int</span>)(Math.random() * codingBit);</span><br><span class="line"><span class="keyword">if</span> (m_s[location] == <span class="number">0</span>) &#123;</span><br><span class="line">m_s[location] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m_s[location] == <span class="number">1</span>) &#123;</span><br><span class="line">m_s[location] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sample[m] = <span class="keyword">new</span> String(m_s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Selection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; sample.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> ( f(CodingDictionary2.get(sample[i]).intValue()) &lt; f(CodingDictionary2.get(sample[j]).intValue() )) &#123;</span><br><span class="line">String temp = sample[i];</span><br><span class="line">sample[i] = sample[j];</span><br><span class="line">sample[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfDelete; i++) &#123;</span><br><span class="line">sample[sample.length - i - <span class="number">1</span>] = sample[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length; i++) &#123;</span><br><span class="line">System.out.println(CodingDictionary2.get(sample[i]));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Getmaximum</span><span class="params">(<span class="keyword">int</span> codingBit, <span class="keyword">int</span> numberOfRandomNumbers, <span class="keyword">int</span> numberOfReproduction, <span class="keyword">int</span> numberOfLocation,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> numberofMutation, <span class="keyword">int</span> numberOfDelete)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.codingBit = codingBit;</span><br><span class="line"><span class="keyword">this</span>.numberOfSample = numberOfRandomNumbers;</span><br><span class="line"><span class="keyword">this</span>.numberOfReproduction = numberOfReproduction;</span><br><span class="line"><span class="keyword">this</span>.numberOfLocation = numberOfLocation;</span><br><span class="line"><span class="keyword">this</span>.numberofMutation = numberofMutation;</span><br><span class="line"><span class="keyword">this</span>.numberOfDelete = numberOfDelete;</span><br><span class="line">CodingDictionary1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">CodingDictionary2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Getmaximum getmaximum = <span class="keyword">new</span> Getmaximum(<span class="number">5</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">getmaximum.generateDictionary();</span><br><span class="line"><span class="comment">//System.out.println(getmaximum.CodingDictionary1);</span></span><br><span class="line"><span class="comment">//System.out.println(getmaximum.CodingDictionary2);</span></span><br><span class="line">getmaximum.generateFirstGeneration(<span class="number">0</span>, (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, getmaximum.codingBit));</span><br><span class="line">getmaximum.print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( i &lt; <span class="number">60</span>) &#123;</span><br><span class="line">getmaximum.reproduction();</span><br><span class="line"><span class="comment">//getmaximum.print();</span></span><br><span class="line">getmaximum.Mutation();</span><br><span class="line"><span class="comment">//getmaximum.print();</span></span><br><span class="line">getmaximum.Selection();</span><br><span class="line">getmaximum.print();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="python实现代码"><a href="#python实现代码" class="headerlink" title="python实现代码"></a>python实现代码</h1><h2 id="单变量"><a href="#单变量" class="headerlink" title="单变量"></a>单变量</h2><p>求一个比较复杂的函数</p><script type="math/tex; mode=display">f(x)=(x - 30)  (x - 20)  (x - 15) (x - 10)</script><p>的最小值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    len_of_code = <span class="number">10</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">20</span></span><br><span class="line">    num_of_select = <span class="number">3</span></span><br><span class="line">    num_of_selected = <span class="number">2</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">2</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.5</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">3</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (x - <span class="number">30</span>) * (x - <span class="number">20</span>) * (x - <span class="number">15</span>) * (x - <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].rjust(self.len_of_code, <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].rjust(self.len_of_code - <span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="comment"># random.seed(1)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            self.sample_list.append(int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code))</span><br><span class="line">        print(<span class="number">0</span>, self.sample_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.f(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.f(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.f(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        <span class="comment"># print(dict_value_to_int)</span></span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) == self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line">        <span class="comment"># print(self.sample_list)</span></span><br><span class="line">        print(len(self.sample_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="comment"># random.seed(1)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="comment"># print(self.sample_list[i], code, bit)</span></span><br><span class="line">                    <span class="keyword">if</span> code[bit] == <span class="string">'1'</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line">        <span class="comment"># print(self.sample_list)</span></span><br><span class="line">        print(len(self.sample_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="comment"># random.seed(1)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                <span class="comment"># print(code_a, code_b, bit)</span></span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line">        <span class="comment"># print(self.sample_list)</span></span><br><span class="line">        <span class="comment"># print(len(self.sample_list))</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">300</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            print(self.num_of_iteration, self.sample_list)</span><br><span class="line">            <span class="comment"># if len(set(self.sample_list)) == 1:</span></span><br><span class="line">            <span class="comment">#     break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">x = np.linspace(<span class="number">5</span>, <span class="number">35</span>, <span class="number">1000</span>)</span><br><span class="line">y = g.f(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">point_x = g.sample_list[<span class="number">0</span>]</span><br><span class="line">plt.scatter(point_x, g.f(point_x))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/1.png" alt=""></p><h2 id="双变量"><a href="#双变量" class="headerlink" title="双变量"></a>双变量</h2><p>在单变量的基础上改进，求函数</p><script type="math/tex; mode=display">f(x,y)=x sin(y) + ysin(x)</script><p>的最值，并与枚举结果比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入双变量</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    len_of_code = <span class="number">22</span></span><br><span class="line">    num_of_var = <span class="number">2</span></span><br><span class="line">    len_of_code_for_per_var = int(len_of_code / num_of_var)</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">20</span></span><br><span class="line">    num_of_select = <span class="number">3</span></span><br><span class="line">    num_of_selected = <span class="number">2</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.2</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">3</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.5</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">3</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="comment"># return (x - 1) ** 2 + (y - 2) ** 2</span></span><br><span class="line">        x = x * self.accuracy</span><br><span class="line">        y = y * self.accuracy</span><br><span class="line">        <span class="keyword">return</span> x * math.sin(y) + y * math.sin(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].rjust(self.len_of_code_for_per_var, <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].rjust(self.len_of_code_for_per_var - <span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        x, y = num</span><br><span class="line">        <span class="keyword">return</span> self.get_code_by_int_for_per_var(x) + self.get_code_by_int_for_per_var(y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_int_by_code_for_per_var(str[:self.len_of_code_for_per_var]), \</span><br><span class="line">               self.get_int_by_code_for_per_var(str[self.len_of_code_for_per_var:])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            x = int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var)</span><br><span class="line">            y = int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var)</span><br><span class="line">            self.sample_list.append((x, y))</span><br><span class="line">        print(self.num_of_iteration, <span class="string">'iteration: '</span>,</span><br><span class="line">              [(i * self.accuracy, j * self.accuracy) <span class="keyword">for</span> i, j <span class="keyword">in</span> self.sample_list])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            x, y = sample</span><br><span class="line">            <span class="keyword">if</span> self.f(x, y) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.f(x, y)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.f(x, y)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) == self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> code[bit] == <span class="string">'1'</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line">        print(len(self.sample_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">300</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            print(self.num_of_iteration, <span class="string">'iteration: '</span>,</span><br><span class="line">                  [(i * self.accuracy, j * self.accuracy) <span class="keyword">for</span> i, j <span class="keyword">in</span> self.sample_list])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">data = np.ndarray((<span class="number">1024</span> * <span class="number">2</span>, <span class="number">1024</span> * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">-1024</span>, <span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">-1024</span>, <span class="number">1024</span>):</span><br><span class="line">        data[i][j] = g.f(i, j)</span><br><span class="line"></span><br><span class="line">print(g.f(g.sample_list[<span class="number">0</span>][<span class="number">0</span>], g.sample_list[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line">print(data.min())</span><br></pre></td></tr></table></figure><p>经过300轮的循环后基本找到了最小值所在的点，和枚举得到的最小值相比几乎一致。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/2.png" alt=""></p><h2 id="任意变量"><a href="#任意变量" class="headerlink" title="任意变量"></a>任意变量</h2><p>在双变量的基础上改进，求函数</p><script type="math/tex; mode=display">f(x,y,z)=x sin(yz) + ysin(xz)+ zsin(xy)</script><p>的最值，并与枚举结果比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进一步改为任意变量</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = <span class="number">3</span></span><br><span class="line">    len_of_code_for_per_var = <span class="number">11</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">10</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">10</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以重载该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="comment"># return vars[0] * math.sin(vars[1]) + vars[1] * math.sin(vars[0])</span></span><br><span class="line">        <span class="keyword">return</span> vars[<span class="number">0</span>] * math.sin(vars[<span class="number">1</span>] * vars[<span class="number">2</span>]) + vars[<span class="number">1</span>] * math.sin(vars[<span class="number">2</span>] * vars[<span class="number">0</span>]) + vars[<span class="number">2</span>] * math.sin(</span><br><span class="line">            vars[<span class="number">1</span>] * vars[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].rjust(self.len_of_code_for_per_var, <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].rjust(self.len_of_code_for_per_var - <span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) == self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> code[bit] == <span class="string">'1'</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">1000</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">len_of_data = <span class="number">2</span> ** (g.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line">data = np.zeros((len_of_data * <span class="number">2</span>, len_of_data * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(-len_of_data, len_of_data):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">        lists = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">            lists.append(g.fit_func((i, i * j, i * k)))</span><br><span class="line">        data[i][j] = min(lists)</span><br><span class="line"></span><br><span class="line">print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br><span class="line">print(data.min())</span><br></pre></td></tr></table></figure><p>经过300轮的循环后基本找到了最小值所在的点，甚至比枚举得到的还要小。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/3.png" alt=""></p><h2 id="参数自适应"><a href="#参数自适应" class="headerlink" title="参数自适应"></a>参数自适应</h2><p>在上一个问题中遇到了不容易收敛的情况，改进如下，基本思路是加大群体稳定后的突变率以提高“天才”诞生的概率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改进参数自动优化</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = <span class="number">3</span></span><br><span class="line">    len_of_code_for_per_var = <span class="number">11</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">10</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">10</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># now_best_result = 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以重载该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="comment"># return vars[0] * math.sin(vars[1]) + vars[1] * math.sin(vars[0])</span></span><br><span class="line">        <span class="keyword">return</span> vars[<span class="number">0</span>] * math.sin(vars[<span class="number">1</span>] * vars[<span class="number">2</span>]) + vars[<span class="number">1</span>] * math.sin(vars[<span class="number">2</span>] * vars[<span class="number">0</span>]) + vars[<span class="number">2</span>] * math.sin(</span><br><span class="line">            vars[<span class="number">1</span>] * vars[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].zfill(self.len_of_code_for_per_var)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].zfill(self.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># print(self.num_of_iteration)</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list[:<span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &gt;= self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># if code[bit] == '1':</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '0' + code[bit + 1:]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '1' + code[bit + 1:]</span></span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize_para</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.sample_list[<span class="number">0</span>] == self.sample_list[int(self.num_of_sample * <span class="number">0.95</span>)]:</span><br><span class="line">            self.probability_for_mutation = min(<span class="number">0.99</span>, self.probability_for_mutation * <span class="number">2</span>)</span><br><span class="line">            self.num_of_bit_for_mutation = max(int(random.random() * <span class="number">4</span>), int(self.num_of_bit_for_mutation * <span class="number">0.8</span>))</span><br><span class="line">            <span class="comment"># self.num_of_bit_for_mutation = max(int(self.len_of_code * 0.1), self.num_of_bit_for_mutation - 1)</span></span><br><span class="line">            <span class="comment"># self.num_of_select = max(3, self.num_of_select - 1)</span></span><br><span class="line">            <span class="comment"># self.num_of_selected = min(10, self.num_of_selected + 1)</span></span><br><span class="line">            <span class="comment"># self.probability_for_exchange = max(0.5, self.probability_for_exchange - 1)</span></span><br><span class="line">            <span class="comment"># self.num_of_bit_for_exchange = max(5, self.num_of_bit_for_exchange - 1)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># self.probability_for_mutation = max(0.01, self.probability_for_mutation / 2)</span></span><br><span class="line">            <span class="comment"># self.num_of_bit_for_mutation = min(int(self.len_of_code * 0.9), int(self.num_of_bit_for_mutation * 1.2))</span></span><br><span class="line">            self.probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">            self.num_of_bit_for_mutation = <span class="number">20</span></span><br><span class="line">            <span class="comment"># self.num_of_select = 5</span></span><br><span class="line">            <span class="comment"># self.num_of_selected = 10</span></span><br><span class="line">            <span class="comment"># self.probability_for_exchange = 0.9</span></span><br><span class="line">            <span class="comment"># self.num_of_bit_for_exchange = 15</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">500</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line">            self.optimize_para()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">len_of_data = <span class="number">2</span> ** (g.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line">data = np.zeros((len_of_data * <span class="number">2</span>, len_of_data * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(-len_of_data, len_of_data):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">        lists = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">            lists.append(g.fit_func((i, i * j, i * k)))</span><br><span class="line">        data[i][j] = min(lists)</span><br><span class="line"></span><br><span class="line">print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br><span class="line">print(data.min())</span><br></pre></td></tr></table></figure><p>可以发现无论是在收敛速度还是收敛全局最优解的概率都有所提高。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/4.png" alt=""></p><h1 id="解决规划问题"><a href="#解决规划问题" class="headerlink" title="解决规划问题"></a>解决规划问题</h1><h2 id="简单线性规划问题"><a href="#简单线性规划问题" class="headerlink" title="简单线性规划问题"></a>简单线性规划问题</h2><p>初步尝试求解线性规划问题如代码中所示，并用Gurobi求解验证准确性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初步尝试求解线性规划问题</span></span><br><span class="line"><span class="comment"># max = x1 + 0.3*x2</span></span><br><span class="line"><span class="comment"># s.t</span></span><br><span class="line"><span class="comment">#   x1 + x2 = 35</span></span><br><span class="line"><span class="comment">#   5*x1 + x2 &gt;= 70</span></span><br><span class="line"><span class="comment">#   5*x1 + 4*x2 &gt;= 140</span></span><br><span class="line"><span class="comment">#   x2 &lt;= 25</span></span><br><span class="line"><span class="comment">#   x1, x2 &gt;= 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = <span class="number">2</span></span><br><span class="line">    len_of_code_for_per_var = <span class="number">6</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">1</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">10</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">10</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constrs</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> vars[<span class="number">0</span>] + vars[<span class="number">1</span>] != <span class="number">35</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * vars[<span class="number">0</span>] + vars[<span class="number">1</span>] &lt; <span class="number">70</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * vars[<span class="number">0</span>] + <span class="number">4</span> * vars[<span class="number">1</span>] &lt; <span class="number">140</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> vars[<span class="number">1</span>] &gt; <span class="number">25</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以重载该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objective_func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.constrs(vars):</span><br><span class="line">            <span class="keyword">return</span> vars[<span class="number">0</span>] + <span class="number">0.3</span> * vars[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> self.is_get_max:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.objective_func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].zfill(self.len_of_code_for_per_var)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].zfill(self.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># if str[0] == '0':</span></span><br><span class="line">        <span class="comment">#     return int(str, 2)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     return int(int(str[1:], 2) * -1)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list[:<span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int(random.random() * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &gt;= self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># if code[bit] == '1':</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '0' + code[bit + 1:]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '1' + code[bit + 1:]</span></span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize_para</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.sample_list[<span class="number">0</span>] == self.sample_list[int(self.num_of_sample * <span class="number">0.95</span>)]:</span><br><span class="line">            self.probability_for_mutation = min(<span class="number">0.99</span>, self.probability_for_mutation * <span class="number">2</span>)</span><br><span class="line">            self.num_of_bit_for_mutation = max(int(random.random() * <span class="number">4</span>), int(self.num_of_bit_for_mutation * <span class="number">0.8</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">            self.num_of_bit_for_mutation = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">300</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line">            self.optimize_para()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line">print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gurobipy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># max = x1 + 0.3*x2</span></span><br><span class="line"><span class="comment"># s.t</span></span><br><span class="line"><span class="comment">#   x1 + x2 = 35</span></span><br><span class="line"><span class="comment">#   5*x1 + x2 &gt;= 70</span></span><br><span class="line"><span class="comment">#   5*x1 + 4*x2 &gt;= 140</span></span><br><span class="line"><span class="comment">#   x2 &lt;= 25</span></span><br><span class="line"><span class="comment">#   x1, x2 &gt;= 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">m = Model(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line">x1 = m.addVar(name=<span class="string">'x1'</span>, lb=<span class="number">0</span>)</span><br><span class="line">x2 = m.addVar(name=<span class="string">'x2'</span>, lb=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    x1 + x2 == <span class="number">35</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    <span class="number">5</span> * x1 + x2 &gt;= <span class="number">70</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    <span class="number">5</span> * x1 + <span class="number">4</span> * x2 &gt;= <span class="number">140</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    x2 &lt;= <span class="number">25</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.setObjective(x1 + <span class="number">0.3</span> * x2, GRB.MAXIMIZE)</span><br><span class="line"></span><br><span class="line">m.optimize()</span><br><span class="line"><span class="keyword">if</span> m.status == GRB.Status.OPTIMAL:</span><br><span class="line">    print(x1, x2)</span><br><span class="line">    print(m.getObjective().getValue())</span><br></pre></td></tr></table></figure><p>gurobi求解的结果为：</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/5.png" alt=""></p><p>而遗传算法在300轮（往往不需要）之后也得到了相同的解。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/6.png" alt=""></p><h2 id="稍微复杂的线性规划问题"><a href="#稍微复杂的线性规划问题" class="headerlink" title="稍微复杂的线性规划问题"></a>稍微复杂的线性规划问题</h2><p>和上一个部分相似，只不过问题变复杂了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 尝试求解比较复杂的线性规划问题</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key_list</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [key <span class="keyword">for</span> key <span class="keyword">in</span> dict.keys()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">min_nutrition = &#123;</span><br><span class="line">    <span class="string">'calories'</span>: <span class="number">1800</span>,</span><br><span class="line">    <span class="string">'protein'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'fat'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'sodium'</span>: <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line">categories = get_key_list(min_nutrition)</span><br><span class="line">cost = &#123;</span><br><span class="line">    <span class="string">'hamburger'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">2.89</span>,</span><br><span class="line">    <span class="string">'hot dog'</span>: <span class="number">2.50</span>,</span><br><span class="line">    <span class="string">'fries'</span>: <span class="number">1.89</span>,</span><br><span class="line">    <span class="string">'macaroni'</span>: <span class="number">2.09</span>,</span><br><span class="line">    <span class="string">'pizza'</span>: <span class="number">1.99</span>,</span><br><span class="line">    <span class="string">'salad'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'milk'</span>: <span class="number">0.89</span>,</span><br><span class="line">    <span class="string">'ice cream'</span>: <span class="number">1.59</span></span><br><span class="line">&#125;</span><br><span class="line">foods = get_key_list(cost)</span><br><span class="line">nutritionValues = &#123;</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'calories'</span>): <span class="number">410</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'protein'</span>): <span class="number">24</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'fat'</span>): <span class="number">26</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'sodium'</span>): <span class="number">730</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'calories'</span>): <span class="number">420</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'protein'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'sodium'</span>): <span class="number">1190</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'calories'</span>): <span class="number">560</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'protein'</span>): <span class="number">20</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'fat'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'sodium'</span>): <span class="number">1800</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'calories'</span>): <span class="number">380</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'protein'</span>): <span class="number">4</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'fat'</span>): <span class="number">19</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'sodium'</span>): <span class="number">270</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'protein'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'sodium'</span>): <span class="number">930</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'protein'</span>): <span class="number">15</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'sodium'</span>): <span class="number">820</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'protein'</span>): <span class="number">31</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'sodium'</span>): <span class="number">1230</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'calories'</span>): <span class="number">100</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'fat'</span>): <span class="number">2.5</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'sodium'</span>): <span class="number">125</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'calories'</span>): <span class="number">330</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'sodium'</span>): <span class="number">180</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_vars</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list, dict(zip(list, [<span class="number">0</span>, ] * len(list)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buy_key, buy = add_vars(foods)</span><br><span class="line">print(buy_key, buy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = len(buy_key)</span><br><span class="line">    len_of_code_for_per_var = <span class="number">13</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = int(len_of_code * <span class="number">0.3</span>)</span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = int(len_of_code * <span class="number">0.6</span>)</span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constrs</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> categories:</span><br><span class="line">            <span class="keyword">if</span> sum(vars[i] * nutritionValues[food, c] <span class="keyword">for</span> i, food <span class="keyword">in</span> enumerate(foods)) &lt; min_nutrition[c]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objective_func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.constrs(vars):</span><br><span class="line">            <span class="keyword">return</span> sum(vars[i] * cost[food] <span class="keyword">for</span> i, food <span class="keyword">in</span> enumerate(foods))</span><br><span class="line">        <span class="keyword">elif</span> self.is_get_max:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.objective_func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].zfill(self.len_of_code_for_per_var)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].zfill(self.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># if str[0] == '0':</span></span><br><span class="line">        <span class="comment">#     return int(str, 2)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     return int(int(str[1:], 2) * -1)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list[:<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产生第一代样本</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int(random.random() * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &gt;= self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># if code[bit] == '1':</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '0' + code[bit + 1:]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '1' + code[bit + 1:]</span></span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize_para</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.sample_list[<span class="number">0</span>] == self.sample_list[int(self.num_of_sample * <span class="number">0.95</span>)]:</span><br><span class="line">            self.probability_for_mutation = min(<span class="number">0.99</span>, self.probability_for_mutation * <span class="number">2</span>)</span><br><span class="line">            self.num_of_bit_for_mutation = max(int(random.random() * int(self.len_of_code * <span class="number">0.3</span>)), int(self.num_of_bit_for_mutation * <span class="number">0.8</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">            self.num_of_bit_for_mutation = int(self.len_of_code * <span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">1000</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line">            self.optimize_para()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gurobipy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">categories, minNutrition = multidict(&#123;</span><br><span class="line">    <span class="string">'calories'</span>: <span class="number">1800</span>,</span><br><span class="line">    <span class="string">'protein'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'fat'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'sodium'</span>: <span class="number">1000</span>&#125;)</span><br><span class="line"></span><br><span class="line">foods, cost = multidict(&#123;</span><br><span class="line">    <span class="string">'hamburger'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">2.89</span>,</span><br><span class="line">    <span class="string">'hot dog'</span>: <span class="number">2.50</span>,</span><br><span class="line">    <span class="string">'fries'</span>: <span class="number">1.89</span>,</span><br><span class="line">    <span class="string">'macaroni'</span>: <span class="number">2.09</span>,</span><br><span class="line">    <span class="string">'pizza'</span>: <span class="number">1.99</span>,</span><br><span class="line">    <span class="string">'salad'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'milk'</span>: <span class="number">0.89</span>,</span><br><span class="line">    <span class="string">'ice cream'</span>: <span class="number">1.59</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nutrition values for the foods</span></span><br><span class="line">nutritionValues = &#123;</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'calories'</span>): <span class="number">410</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'protein'</span>): <span class="number">24</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'fat'</span>): <span class="number">26</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'sodium'</span>): <span class="number">730</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'calories'</span>): <span class="number">420</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'protein'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'sodium'</span>): <span class="number">1190</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'calories'</span>): <span class="number">560</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'protein'</span>): <span class="number">20</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'fat'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'sodium'</span>): <span class="number">1800</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'calories'</span>): <span class="number">380</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'protein'</span>): <span class="number">4</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'fat'</span>): <span class="number">19</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'sodium'</span>): <span class="number">270</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'protein'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'sodium'</span>): <span class="number">930</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'protein'</span>): <span class="number">15</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'sodium'</span>): <span class="number">820</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'protein'</span>): <span class="number">31</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'sodium'</span>): <span class="number">1230</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'calories'</span>): <span class="number">100</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'fat'</span>): <span class="number">2.5</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'sodium'</span>): <span class="number">125</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'calories'</span>): <span class="number">330</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'sodium'</span>): <span class="number">180</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model</span></span><br><span class="line">m = Model(<span class="string">"diet"</span>)</span><br><span class="line"></span><br><span class="line">buy = m.addVars(foods, name=<span class="string">"buy"</span>)</span><br><span class="line"></span><br><span class="line">m.setObjective(buy.prod(cost), GRB.MINIMIZE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nutrition constraints</span></span><br><span class="line">m.addConstrs(</span><br><span class="line">    (quicksum(nutritionValues[f, c] * buy[f] <span class="keyword">for</span> f <span class="keyword">in</span> foods) &gt;= minNutrition[c]</span><br><span class="line">     <span class="keyword">for</span> c <span class="keyword">in</span> categories), <span class="string">"_"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printSolution</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> m.status == GRB.Status.OPTIMAL:</span><br><span class="line">        print(<span class="string">'\nCost: %g'</span> % m.objVal)</span><br><span class="line">        print(<span class="string">'\nBuy:'</span>)</span><br><span class="line">        buyx = m.getAttr(<span class="string">'x'</span>, buy)</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> foods:</span><br><span class="line">            <span class="keyword">if</span> buy[f].x &gt; <span class="number">0.0001</span>:</span><br><span class="line">                print(<span class="string">'%s %g'</span> % (f, buyx[f]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'No solution'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m.optimize()</span><br><span class="line">printSolution()</span><br></pre></td></tr></table></figure><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/7.png" alt=""></p><p>在遗传算法1000轮之后，总体来说结果基本符合预期，精度还有值得提高的空间，速度也有很大的提高空间。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/8.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;p&gt;遗传算法（Genetic  Algorithm）是受生物净化学说和遗传学说的启发发展起来的，生物在进化的过程中不断繁殖、生存竞争、适者生存、
      
    
    </summary>
    
      <category term="遗传算法" scheme="http://wang22ti.com/categories/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>朝花夕拾——《数据库系统原理》课程设计</title>
    <link href="http://wang22ti.com/2018/05/12/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    <id>http://wang22ti.com/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/</id>
    <published>2018-05-11T16:29:02.000Z</published>
    <updated>2018-05-11T17:12:40.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统效果"><a href="#系统效果" class="headerlink" title="系统效果"></a>系统效果</h1><p>最终实现网页端的图书管理系统，采用的框架为Windows + MySQL + Django + Python的组合。其中逻辑控制以及同数据库的交互由Python和Django提供的接口实现，用户界面网页使用html + CSS+ JavaScript的组合渲染完成。</p><p>一方面，为了方便图书馆管理员对图书进行入库、借阅、归还、查询等操作，同时也方便学生对图书信息和个人借阅信息的查询，对该系统进行了细致的设计。主要体现在：自动判定管理员与其他用户进而跳转到不同界面、美化用户界面、提供即时的搜索结果反馈、对一些项目的填写采用下拉框的方式、提供部分项目的模糊搜索、自动计算例如归还截止日期等信息等等。总体来说，功能完备，具有较好的用户体验。</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>本图书借阅管理系统，允许管理员和已注册用户使用。管理员具有较高权限，可以进行查询、插入和更新等操作，如图书入库、办理借书证、图书信息查询、用户信息查询、办理图书借阅归还，处理挂失等等；其他用户权限较低，可查询图书信息和本人的历史借阅信息。</p><h2 id="系统目标"><a href="#系统目标" class="headerlink" title="系统目标"></a>系统目标</h2><h3 id="目标概述"><a href="#目标概述" class="headerlink" title="目标概述"></a>目标概述</h3><p>（1）  对系统的用户身份进行认证，根据用户类别跳转到对应界面</p><p>（2）  图书入库</p><p>（3）  办理借书证</p><p>（4）  图书借阅和归还</p><p>（5）  查询图书和读者信息</p><p>（6）  维护图书和读者信息</p><p>（7）  逾期不还的处理</p><p>（8）  处理图书遗失和证件挂失</p><h3 id="系统包含信息"><a href="#系统包含信息" class="headerlink" title="系统包含信息"></a>系统包含信息</h3><p>（1）  图书管理员和读者的密码和身份</p><p>（2）  图书的信息，包括图书编号、书名、作者、出版社、单价、类别、入库时间、入库数量、借阅数量、遗失数量等等。其中，类别包括计算机、语文、数学、小说、英语、地理、物理、化学、政治、生物、历史等等</p><p>（3）  读者的信息，包括用户登录id、登录密码、姓名、性别、出日、级别、办证日期、联系电话、手机号码、证件是否丢失、电子邮箱等等。其中，不同级别会员的最长出借天数、最多借书次数、会费、逾期收费均不同</p><p>（4）  读者的借阅、归还、逾期和挂失信息</p><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><p>（1）  图书编号和读者登录id唯一</p><p>（2）  读者借阅的图书一定是系统中提供的图书</p><p>（3）  读者不能重复借阅同一本书</p><p>（4）  读者遗失的图书一定是本人借阅的图书</p><p>（5）  图书被借阅数量不能超过入库数量减去遗失数量</p><p>（6）  遗失图书数量不能超过图书入库数量</p><p>（7）  已挂失的借书证不能登录</p><p>（8）  最长结束天数和最多借书册数由会员级别决定</p><p>（9）  各种信息具有实际意义，例如数量均为非负整数、日期合法等等</p><h3 id="系统交互"><a href="#系统交互" class="headerlink" title="系统交互"></a>系统交互</h3><p>（1）  认证</p><p>验证用户身份，输入用户id和密码，随后的交互取决于用户的身份。</p><p>（2）  读者可进行如下交互</p><div class="table-container"><table><thead><tr><th>查询图书信息</th><th>按书名、图书类别、作者、出版社进行模糊查询，结果以列表的方式呈现</th></tr></thead><tbody><tr><td>查询借阅信息</td><td>按书名、图书编号模糊查询，列出该读者的借阅历史，可按是否逾期显示不同结果，结果以列表的方式呈现</td></tr></tbody></table></div><p>（3）  管理员可进行如下交互</p><div class="table-container"><table><thead><tr><th>查询图书信息</th><th>按书名、图书类别、作者、出版社进行模糊查询，结果以列表的方式呈现</th></tr></thead><tbody><tr><td>查询读者信息</td><td>按用户登录id和姓名进行模糊查询，结果以列表的方式呈现</td></tr><tr><td>图书入库</td><td>登记入库图书的各项信息，分配一个新的编号</td></tr><tr><td>办理借阅证</td><td>登记读者各项信息，用户登录id由用户决定，但不允许重复</td></tr><tr><td>图书借阅归还</td><td>不同级别读者最长借阅时间和最多借阅数量均不同</td></tr><tr><td>查询借阅信息</td><td>按书名、图书编号、读者登录id、读者姓名模糊查询，列出满足条件的借阅历史，可按是否逾期显示不同结果，结果以列表的方式呈现</td></tr><tr><td>挂失处理</td><td>包括借书证挂失和图示遗失处理，借书证挂失在挂失数据表中处理，图书遗失在借阅表和图书表中处理</td></tr></tbody></table></div><h2 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h2><h3 id="顶层数据流图"><a href="#顶层数据流图" class="headerlink" title="顶层数据流图"></a>顶层数据流图</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image3.png" alt=""></p><h3 id="0层数据流图"><a href="#0层数据流图" class="headerlink" title="0层数据流图"></a>0层数据流图</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image4.png" alt=""></p><h3 id="1层数据流图（借书）"><a href="#1层数据流图（借书）" class="headerlink" title="1层数据流图（借书）"></a>1层数据流图（借书）</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image5.png" alt=""></p><h3 id="1层数据流图（还书）"><a href="#1层数据流图（还书）" class="headerlink" title="1层数据流图（还书）"></a>1层数据流图（还书）</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image6.png" alt=""></p><h3 id="1层数据流图（查询）"><a href="#1层数据流图（查询）" class="headerlink" title="1层数据流图（查询）"></a>1层数据流图（查询）</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image7.png" alt=""></p><h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><h3 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h3><div class="table-container"><table><thead><tr><th><strong>数据项名</strong></th><th><strong>含义</strong></th><th><strong>类型</strong></th><th><strong>最大长度</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td><strong>读者登录id</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td>决定了要借阅的图书</td></tr><tr><td><strong>读者姓名</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>读者性别</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>出生日期</strong></td><td>读者相关</td><td>日期型</td><td></td><td></td></tr><tr><td><strong>电话</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>手机</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>会员级别</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td>决定了最长借阅天数和最多借阅册书</td></tr><tr><td><strong>办证日期</strong></td><td>读者相关</td><td>日期型</td><td></td><td></td></tr><tr><td><strong>电子邮箱</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>图书编号</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td>决定了要借阅的图书</td></tr><tr><td><strong>书名</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>作者</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>类别编号</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td>决定了图书类别</td></tr><tr><td><strong>单价</strong></td><td>图书相关</td><td>浮点型</td><td></td><td></td></tr><tr><td><strong>出版社</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>入库日期</strong></td><td>图书相关</td><td>时间型</td><td></td><td></td></tr><tr><td><strong>入库数量</strong></td><td>图书相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>遗失数量</strong></td><td>图书相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>出借数量</strong></td><td>图书相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>出借日期</strong></td><td>借书相关</td><td>时间型</td><td></td><td></td></tr><tr><td><strong>是否遗失</strong></td><td>借书相关</td><td>布尔型</td><td></td><td></td></tr><tr><td><strong>归还时间</strong></td><td>借书相关</td><td>时间型</td><td></td><td>归还时间为1970年1月1日表示没有归还</td></tr><tr><td><strong>最长借书天数</strong></td><td>级别相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>最多借书册数</strong></td><td>级别相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>会费</strong></td><td>级别相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>挂失日期</strong></td><td>挂失相关</td><td>时间型</td><td></td></tr></tbody></table></div><h3 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h3><div class="table-container"><table><thead><tr><th>名 称</th><th><strong>含 义</strong></th><th><strong>组 成</strong></th></tr></thead><tbody><tr><td><strong>读者信息</strong></td><td>定义读者的基本信息</td><td>读者登录id、姓名、性别、生日、电话号、手机号、级别、办证日期、邮箱、是否丢失、余额</td></tr><tr><td><strong>图书信息</strong></td><td>定义图书的基本信息</td><td>图书编号、图书名称、作者、出版社、图书类别编号、价格、入库时间、入库数量、借出数量、丢失数量</td></tr><tr><td><strong>借阅信息</strong></td><td>定义读者的借阅信息</td><td>读者编号、图书编号、借书日期、归还日期、是否丢失</td></tr><tr><td><strong>会员级别</strong></td><td>反应读者不同的级别</td><td>级别名称、最长借书数、最多借书册数、会费</td></tr><tr><td><strong>图书类别</strong></td><td>反应图书的不同类型</td><td>类别编号、类别名称</td></tr><tr><td><strong>图书丢失</strong></td><td>反应图书丢失的状态</td><td>读者编号、图书编号、挂失时间</td></tr></tbody></table></div><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><div class="table-container"><table><thead><tr><th><strong>数据流</strong></th><th><strong>说明</strong></th><th><strong>来源</strong></th></tr></thead><tbody><tr><td><strong>图书信息查询</strong></td><td>根据条件进行组合查询</td><td>读者或管理员</td></tr><tr><td><strong>借阅信息查询</strong></td><td>进行图书借阅</td><td>管理员、书籍、查询结果</td></tr><tr><td><strong>借阅归还登记</strong></td><td>将借阅情况进行记录</td><td>借阅、归还图书信息</td></tr><tr><td><strong>读者信息查询</strong></td><td>列出读者个人信息</td><td>管理员</td></tr><tr><td><strong>借书证挂失</strong></td><td>读者挂失借书证</td><td>管理员</td></tr><tr><td><strong>借书证办理</strong></td><td>根据读者信息进行数据录入</td><td>管理员</td></tr></tbody></table></div><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><div class="table-container"><table><thead><tr><th><strong>处理过程</strong></th><th><strong>说 明</strong></th><th><strong>输 入</strong></th></tr></thead><tbody><tr><td><strong>图书借阅</strong></td><td>将读者借阅的信息进行登记</td><td>读者编号、图书编号</td></tr><tr><td><strong>图书归还</strong></td><td>读者借出的书籍进行归还操作</td><td>读者编号、图书编号</td></tr><tr><td><strong>图书遗失</strong></td><td>读者借阅图书丢失</td><td>读者编号、图书编号</td></tr><tr><td><strong>图书入库</strong></td><td>录入新书信息</td><td>图书信息</td></tr><tr><td><strong>借书证办理</strong></td><td>读者办理借书证</td><td>读者详细信息</td></tr><tr><td><strong>借书证挂失</strong></td><td>借书证丢失</td><td>读者编号</td></tr></tbody></table></div><h1 id="设计概要"><a href="#设计概要" class="headerlink" title="设计概要"></a>设计概要</h1><h2 id="系统ER图"><a href="#系统ER图" class="headerlink" title="系统ER图"></a>系统ER图</h2><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image8.png" alt=""></p><h2 id="系统功能设计"><a href="#系统功能设计" class="headerlink" title="系统功能设计"></a>系统功能设计</h2><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image9.png" alt=""></p><h1 id="程序系统结构"><a href="#程序系统结构" class="headerlink" title="程序系统结构"></a>程序系统结构</h1><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="数据库逻辑结构设计"><a href="#数据库逻辑结构设计" class="headerlink" title="数据库逻辑结构设计"></a>数据库逻辑结构设计</h3><p>由于概念设计的结果是ER图，而DBMS一般采用关系模型，因此数据库的逻辑设计过程就是将ER图转化为关系模式的过程。由于关系模型所具有的优点，逻辑设计可以充分运用关系数据库规范化理论，使设计过程形式化进行，设计结果是一组关系模式的定义。</p><div class="table-container"><table><thead><tr><th>读者</th><th>reader(reader_id,reader_name,sex,birthday,phone,mobile,  day,password,date_lastlogin,balance,is_loss,level,e_mail)</th></tr></thead><tbody><tr><td>图书</td><td>book(book_id,book_name,author,publisher,price,  date_in,num_in,num_out,numloss,category_id)</td></tr><tr><td>图书类别</td><td>boookcategory(category_id,category)</td></tr><tr><td>挂失记录</td><td>lossreport(book_id,reader_id,date_loss)</td></tr><tr><td>借阅</td><td>borrow(book_id,reader_id,  date_borrow,date_return,is_loss)</td></tr><tr><td>级别</td><td>memberlevel(level,  most_books_for_borrow,   most_days_for_borrow,  fee_for_one_year)</td></tr></tbody></table></div><h3 id="系统用表"><a href="#系统用表" class="headerlink" title="系统用表"></a>系统用表</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image10.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image11.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image12.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image13.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image14.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image15.png" alt=""></p><h2 id="数据库的连接"><a href="#数据库的连接" class="headerlink" title="数据库的连接"></a>数据库的连接</h2><p>由于Django框架对于MySQL支持很好，连接数据库只要在配置文件settings.py和模型文件model.py中加入相关信息即可，得到的结果如下图所示：</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image16.png" alt=""></p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image17.png" alt=""></p><p>命令行运行makemigrations和migrate后，其中我创建的表名称格式为client_*</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image18.png" alt=""></p><h2 id="程序文件结构"><a href="#程序文件结构" class="headerlink" title="程序文件结构"></a>程序文件结构</h2><p>最后，整个工程的目录即主要文件功能如下：</p><div class="table-container"><table><thead><tr><th>area.css, font.css, module.css, special.css</th><th>网页中用到的各种样式表</th></tr></thead><tbody><tr><td>background.jpg</td><td>背景图片</td></tr><tr><td>home.js, home_user.js</td><td>home.html和home_user.html两个文件用到的脚本文件，主要控制子网页的显示或显示以及部分动画</td></tr><tr><td>index.html</td><td>登录界面</td></tr><tr><td>home.html, home_user.html</td><td>管理员和用户的主页</td></tr><tr><td>book_loss.html, borrow_retutn.html  card_loss.html, card_build.html  not_return.html, not_return.html  table_search_book.html  table_search_reader.html</td><td>子网页，分别实现一个或多个操作</td></tr><tr><td>models.py</td><td>定义数据库结构的文件</td></tr><tr><td>views.py</td><td>完成URL响应以及对应逻辑操作的文件</td></tr><tr><td>settings.py</td><td>项目配置文件</td></tr><tr><td>urls.py</td><td>配置url与views.py中函数的对应关系</td></tr></tbody></table></div><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image19.png" alt=""></p><h1 id="系统详细设计与运行界面"><a href="#系统详细设计与运行界面" class="headerlink" title="系统详细设计与运行界面"></a>系统详细设计与运行界面</h1><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>用户输入用户名和密码，后台自动判别身份。登录失败，并不会发生跳转。</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image20.png" alt=""></p><p>登录界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image21.png" alt=""></p><p>管理员主页</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image22.png" alt=""></p><p>用户主页</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image23.png" alt=""></p><h2 id="读者登录"><a href="#读者登录" class="headerlink" title="读者登录"></a>读者登录</h2><p>读者登陆成功后，可以查询个人借阅历史或查询图书信息。信息的查询均为模糊查询，所有的查询在每次输入后都有即时的反馈，查询结果用表格展示，具体如下。</p><h3 id="查询个人借阅历史"><a href="#查询个人借阅历史" class="headerlink" title="查询个人借阅历史"></a>查询个人借阅历史</h3><p>查询界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image24.png" alt=""></p><p>查询子页面代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image25.png" alt=""></p><p>查询逻辑响应代码，注意到由于Cookie的使用，用户并不需要另外输入用户信息</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image26.png" alt=""></p><h3 id="查询图书信息"><a href="#查询图书信息" class="headerlink" title="查询图书信息"></a>查询图书信息</h3><p>查询界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image27.png" alt=""></p><p>查询子页面代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image28.png" alt=""></p><p>查询逻辑响应代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image29.png" alt=""></p><h2 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h2><p>管理员登录成功后，可以办理借还图书任务，办理图书入库任务，可以查询图书信息、读者信息和所有读者的借阅历史，办理图书遗失、证件遗失、证件办新任务。具体情况如家所示。</p><h3 id="图书借还"><a href="#图书借还" class="headerlink" title="图书借还"></a>图书借还</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image30.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image31.png" alt=""></p><p>逻辑控制代码，其中针对不同的情况，例如没有剩余的数、结束量已经达到最大、用户重复借书等等，都有相应的控制，出现不正常的情况会有弹窗提示</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image32.png" alt=""></p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image33.png" alt=""></p><h3 id="图书入库"><a href="#图书入库" class="headerlink" title="图书入库"></a>图书入库</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image34.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image35.png" alt=""></p><p>逻辑控制代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image36.png" alt=""></p><h3 id="图书信息查询"><a href="#图书信息查询" class="headerlink" title="图书信息查询"></a>图书信息查询</h3><p>和普通用户后所使用的完全一样，不做赘述</p><h3 id="用户信息查询"><a href="#用户信息查询" class="headerlink" title="用户信息查询"></a>用户信息查询</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image37.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image38.png" alt=""></p><p>逻辑控制代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image39.png" alt=""></p><h3 id="借阅信息查询"><a href="#借阅信息查询" class="headerlink" title="借阅信息查询"></a>借阅信息查询</h3><p>和普通用户后所使用的基本一样，只是需要另外输入用户信息，不做赘述</p><h3 id="图书挂失办理"><a href="#图书挂失办理" class="headerlink" title="图书挂失办理"></a>图书挂失办理</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image40.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image41.png" alt=""></p><p>逻辑控制代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image42.png" alt=""></p><h3 id="借书证挂失办理"><a href="#借书证挂失办理" class="headerlink" title="借书证挂失办理"></a>借书证挂失办理</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image43.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image44.png" alt=""></p><p>逻辑控制代码，其中完成挂失后会自动给用户发送一份邮件</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image45.png" alt=""></p><h3 id="借书证办新"><a href="#借书证办新" class="headerlink" title="借书证办新"></a>借书证办新</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image46.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image47.png" alt=""></p><p>逻辑控制代码，其中完成挂失后会自动给用户发送一份邮件</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image48.png" alt=""></p><h1 id="系统使用说明"><a href="#系统使用说明" class="headerlink" title="系统使用说明"></a>系统使用说明</h1><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><div class="table-container"><table><thead><tr><th>编程语言</th><th>Python3.5</th></tr></thead><tbody><tr><td>框架</td><td>Django</td></tr><tr><td>操作系统</td><td>Windows或Linux</td></tr><tr><td>已兼容浏览器</td><td>IE、Firefox、Edge</td></tr></tbody></table></div><h2 id="系统亮点"><a href="#系统亮点" class="headerlink" title="系统亮点"></a>系统亮点</h2><p>（1） 系统功能完备，完整性约束完整</p><p>（2） 系统界面采用扁平化设计，辅助以响应动画，比较美观</p><p>（3） 后台自动根据用户登录名判定用户身份，自动跳转到对应界面</p><p>（4） 查询操作均采用模糊查询、即时查询，部分查询条件，例如日期类别，采用选择框，简化用户操作，优化用户体验</p><p>（5） 用户查询时不必另外输入个人信息，这得益于cookie的使用</p><h1 id="实验难点与总结改进"><a href="#实验难点与总结改进" class="headerlink" title="实验难点与总结改进"></a>实验难点与总结改进</h1><p>纵观整个实验有以下几个难点：</p><p>（1） 实验平台的搭建。本来我使用的数据库是SQL Server，但最后发现Django的框架对于它的支持程度非常差，最终选择了开源的MySQL。</p><p>（2） 用户界面的编写。此前我并没有上过网站开发的课程，这次相当于是边学边写，从html的到CSS再到JavaScript，遇到不会的就搜索资料，最后终于初步掌握了网站及脚本的开发。</p><p>（3） 网站页面和服务器之间的参数传递。网页给服务器可以用post方法，用户信息可以使用cookie，而服务器给网页传递的参数，我使用的是Django提供的语句，它内嵌在网页中，和python语句很相似。</p><p>（4） 业务逻辑的实现。整个系统对于数据库查询操作比较多，同时又要顾及完整性约束，一次写成功并不容易。我采用的是快速迭代，小步快跑的方法，每次写几个功能，写完之后再和原来的功能进行整合优化。</p><p>终于完成了实验，本次课程设计实现的是高校图书借阅管理系统。</p><p>总的来说，我的系统还存在着一些优化的地方。一方面是功能的完善，例如加入图片、金额系统等等，另一方面是细节的优化，例如数据库查询的速度、还有即时查询的体验等等。</p><p>此次课设需要用到本学期数据库学习的几乎全部知识。除第七章数据库设计之外，还包括规范优化基本表，正确使用索引、触发器和存储过程，正确使用数据库增、删、改、查语句等等。</p><p>通过动手编程，完成了对所学知识的复习与实践，并加深了自己对知识的理解。做完之后，我对整个数据库原理的掌握也更为系统和规范。此外，此次实验还用到了网站开发的界面设计，使得我初步掌握了python的云端开发。这必将各位的进一步学习带来诸多积极的影响。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统效果&quot;&gt;&lt;a href=&quot;#系统效果&quot; class=&quot;headerlink&quot; title=&quot;系统效果&quot;&gt;&lt;/a&gt;系统效果&lt;/h1&gt;&lt;p&gt;最终实现网页端的图书管理系统，采用的框架为Windows + MySQL + Django + Python的组合。其中逻辑
      
    
    </summary>
    
      <category term="数据库系统原理" scheme="http://wang22ti.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
</feed>
