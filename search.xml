<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>《软件综合实践》课程设计-基于龙芯处理器的C语言编译系统的设计与实现</title>
      <link href="/2018/10/08/%E3%80%8A%E8%BD%AF%E4%BB%B6%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E4%BA%8E%E9%BE%99%E8%8A%AF%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>《模式识别》实验2-贝叶斯分类器设计</title>
      <link href="/2018/10/08/%E3%80%8A%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB%E3%80%8B%E5%AE%9E%E9%AA%8C2-%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%E8%AE%BE%E8%AE%A1/"/>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>笔记-Anaconda</title>
      <link href="/2018/09/25/%E7%AC%94%E8%AE%B0-Anaconda/"/>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>笔记-python标准包常见错误</title>
      <link href="/2018/09/02/%E7%AC%94%E8%AE%B0-python%E6%A0%87%E5%87%86%E5%8C%85%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-《数学之美》</title>
      <link href="/2018/09/02/%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E3%80%8B/"/>
      <content type="html"><![CDATA[<p>本来买这本书只是因为名字——“数学是美的！是有趣的！”袁岚峰老师在讲蓝眼睛岛问题（<a href="https://www.bilibili.com/video/av29527174" target="_blank" rel="noopener">上</a>）（<a href="https://www.bilibili.com/video/av30113899" target="_blank" rel="noopener">下</a>）的时候就这么呼吁。翻了翻目录，却是讲自然语言处理的，而且几乎以Google作为模板，然而这并不服算妨碍啦！</p><h1 id="文字和语言vs数字和信息"><a href="#文字和语言vs数字和信息" class="headerlink" title="文字和语言vs数字和信息"></a>文字和语言vs数字和信息</h1><blockquote><p>语言和数学的产生都是为了记录和传播信息，但是直到香农提出信息论，人们才将两者自觉的联系起来。</p></blockquote><h1 id="自然语言处理——从规则到统计"><a href="#自然语言处理——从规则到统计" class="headerlink" title="自然语言处理——从规则到统计"></a>自然语言处理——从规则到统计</h1><h1 id="统计语言模型"><a href="#统计语言模型" class="headerlink" title="统计语言模型"></a>统计语言模型</h1><h1 id="谈谈分词"><a href="#谈谈分词" class="headerlink" title="谈谈分词"></a>谈谈分词</h1><h1 id="隐含马尔可夫模型"><a href="#隐含马尔可夫模型" class="headerlink" title="隐含马尔可夫模型"></a>隐含马尔可夫模型</h1><h1 id="信息的度量和作用"><a href="#信息的度量和作用" class="headerlink" title="信息的度量和作用"></a>信息的度量和作用</h1><h1 id="贾里尼克和现代语言处理"><a href="#贾里尼克和现代语言处理" class="headerlink" title="贾里尼克和现代语言处理"></a>贾里尼克和现代语言处理</h1><h1 id="简单之美——布尔代数和搜索引擎"><a href="#简单之美——布尔代数和搜索引擎" class="headerlink" title="简单之美——布尔代数和搜索引擎"></a>简单之美——布尔代数和搜索引擎</h1><h1 id="图论和网络爬虫"><a href="#图论和网络爬虫" class="headerlink" title="图论和网络爬虫"></a>图论和网络爬虫</h1><h1 id="PageRank——Google的民主表决式网页排名技术"><a href="#PageRank——Google的民主表决式网页排名技术" class="headerlink" title="PageRank——Google的民主表决式网页排名技术"></a>PageRank——Google的民主表决式网页排名技术</h1><h1 id="如何确定网页和查询的相关性"><a href="#如何确定网页和查询的相关性" class="headerlink" title="如何确定网页和查询的相关性"></a>如何确定网页和查询的相关性</h1><h1 id="有限状态机和动态规划——地图与本地搜索的核心技术"><a href="#有限状态机和动态规划——地图与本地搜索的核心技术" class="headerlink" title="有限状态机和动态规划——地图与本地搜索的核心技术"></a>有限状态机和动态规划——地图与本地搜索的核心技术</h1><h1 id="Google-AK-47的设计者——阿米特·辛格博士"><a href="#Google-AK-47的设计者——阿米特·辛格博士" class="headerlink" title="Google AK-47的设计者——阿米特·辛格博士"></a>Google AK-47的设计者——阿米特·辛格博士</h1><h1 id="余弦定理与新闻分类"><a href="#余弦定理与新闻分类" class="headerlink" title="余弦定理与新闻分类"></a>余弦定理与新闻分类</h1><h1 id="矩阵运算和文本处理中的两个分类问题"><a href="#矩阵运算和文本处理中的两个分类问题" class="headerlink" title="矩阵运算和文本处理中的两个分类问题"></a>矩阵运算和文本处理中的两个分类问题</h1><h1 id="信息指纹及其应用"><a href="#信息指纹及其应用" class="headerlink" title="信息指纹及其应用"></a>信息指纹及其应用</h1><h1 id="由电视剧《暗算》所想到的——谈谈密码学的数学原理"><a href="#由电视剧《暗算》所想到的——谈谈密码学的数学原理" class="headerlink" title="由电视剧《暗算》所想到的——谈谈密码学的数学原理"></a>由电视剧《暗算》所想到的——谈谈密码学的数学原理</h1><h1 id="闪光的不一定是金子——谈谈搜索引擎反作弊问题和搜索结果的权威性问题"><a href="#闪光的不一定是金子——谈谈搜索引擎反作弊问题和搜索结果的权威性问题" class="headerlink" title="闪光的不一定是金子——谈谈搜索引擎反作弊问题和搜索结果的权威性问题"></a>闪光的不一定是金子——谈谈搜索引擎反作弊问题和搜索结果的权威性问题</h1><h1 id="谈谈数学模型的重要性"><a href="#谈谈数学模型的重要性" class="headerlink" title="谈谈数学模型的重要性"></a>谈谈数学模型的重要性</h1><h1 id="不要把鸡蛋装在一个笼子里——谈谈最大熵模型"><a href="#不要把鸡蛋装在一个笼子里——谈谈最大熵模型" class="headerlink" title="不要把鸡蛋装在一个笼子里——谈谈最大熵模型"></a>不要把鸡蛋装在一个笼子里——谈谈最大熵模型</h1><h1 id="拼音输入法的数学原理"><a href="#拼音输入法的数学原理" class="headerlink" title="拼音输入法的数学原理"></a>拼音输入法的数学原理</h1><h1 id="自然语言处理的教父马库斯和他的优秀弟子们"><a href="#自然语言处理的教父马库斯和他的优秀弟子们" class="headerlink" title="自然语言处理的教父马库斯和他的优秀弟子们"></a>自然语言处理的教父马库斯和他的优秀弟子们</h1><h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><h1 id="马尔可夫链的扩展——贝叶斯网络"><a href="#马尔可夫链的扩展——贝叶斯网络" class="headerlink" title="马尔可夫链的扩展——贝叶斯网络"></a>马尔可夫链的扩展——贝叶斯网络</h1><h1 id="条件随机场、文法分析和其他"><a href="#条件随机场、文法分析和其他" class="headerlink" title="条件随机场、文法分析和其他"></a>条件随机场、文法分析和其他</h1><h1 id="维比特和他的维比特算法"><a href="#维比特和他的维比特算法" class="headerlink" title="维比特和他的维比特算法"></a>维比特和他的维比特算法</h1><h1 id="上帝的算法——期望最大化算法"><a href="#上帝的算法——期望最大化算法" class="headerlink" title="上帝的算法——期望最大化算法"></a>上帝的算法——期望最大化算法</h1><h1 id="逻辑回归和搜索广告"><a href="#逻辑回归和搜索广告" class="headerlink" title="逻辑回归和搜索广告"></a>逻辑回归和搜索广告</h1><h1 id="各个击破算法和Google云计算基础"><a href="#各个击破算法和Google云计算基础" class="headerlink" title="各个击破算法和Google云计算基础"></a>各个击破算法和Google云计算基础</h1><h1 id="Google大脑和人工神经网络"><a href="#Google大脑和人工神经网络" class="headerlink" title="Google大脑和人工神经网络"></a>Google大脑和人工神经网络</h1><h1 id="大数据的威力——谈谈数据的重要性"><a href="#大数据的威力——谈谈数据的重要性" class="headerlink" title="大数据的威力——谈谈数据的重要性"></a>大数据的威力——谈谈数据的重要性</h1>]]></content>
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于保研的一些总结</title>
      <link href="/2018/09/02/%E5%85%B3%E4%BA%8E%E4%BF%9D%E7%A0%94%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<blockquote><p>北京交通大学计算机与信息技术学院2015级</p><p>2年半排名11/198，保研排名3/198，六级526</p><p>无国奖，美赛H奖，一堆校级奖项，</p><p>做过几个项目，一篇EI在投</p></blockquote><p>转眼已经是2018年10月12日，一切早已在9月28日尘埃落定，我也终于安下心情，记录一下这段时光。如果想了解一些细节，尽管找我吧。</p><h1 id="未名湖"><a href="#未名湖" class="headerlink" title="未名湖"></a>未名湖</h1><p>5月，我忽然意识到要联系老师了。</p><p>现在来看，那时已经很迟了，很多同学不经意间已经实习了很久。托徐老师的福，我很幸运的联系到了北大计算所的冯老师，专业也是我一直很感兴趣的自然语言处理。然而这之后就犯了一个战略性的大错误。</p><p>咨询过学长学姐（感谢何、吴、苏、才、顼、由、宋、高、叶几位学长学姐），要机试要面试，却盯着第11不放，一直死扣几门课程的大作业。</p><p>很快审判日到了，经过期末考试后几天的仓促准备（感谢佳丽），北大叉院的机试仅仅做出3题（poj难度），虽然勉勉强强进了50%，但是面试又是一塌糊涂，关于自然语言处理的最基本问题都无法回答，自然就GG了。其中凌晨3点发的面试通知邮件，几乎一宿没睡，内心的挣扎在此不述（后来才知道一般来说做出来1道就可以进）。</p><p>很惨淡的是，虽然进了软件所的夏令营，但是和北大信科又冲突了。虽然知道没什么机会，但是还是没有打开那心结，挣扎着身心，又去数媒组试了一下。马老师是我在北大见过少数慈善的老师，但是后来才知道，没有提前联系老师的我，实力不够强劲的我，在硕士名额减少60%的北大，是没有什么机会的。</p><p>忽然有一种理想幻灭的感觉。</p><h1 id="桑基韬"><a href="#桑基韬" class="headerlink" title="桑基韬"></a>桑基韬</h1><p>完全失去了夏令营的机会，我开始考虑本校，第一次认真的了解一些基本常识。</p><p><a href="https://www.zhihu.com/question/23679630/answer/233282268" target="_blank" rel="noopener">求详细介绍下院士、长江、百人、千人、万人、青千、杰青、各类学者人才计划等等？</a></p><p><a href="https://www.zhihu.com/question/66251104/answer/239964441" target="_blank" rel="noopener">现在科研项目中的重点项目、重大项目、重大研究计划项目，重点研发计划有什么区别和联系？</a></p><p>意外地发现了使我成为迷弟的桑老师。85年的教授，高高瘦瘦的，给我一种意气风发的学长的感觉。他很开心的告诉我是一个“相信眼缘的人”。其实我也是，要不是父母对于平台的要求，以及后来的际遇，我真的不愿意离开他。</p><h1 id="紫金港"><a href="#紫金港" class="headerlink" title="紫金港"></a>紫金港</h1><p>没几天，我就踏上了前往浙大实习的路，这只是当时偶然的报名。</p><p>一个月的时间，学到了很多东西，也认识了很多好朋友（舍友兼知己倪、一同实习的李、谢、金、宁、赵），当然也很感谢刘新国老师的指导（还有学长学姐们的帮助）。当然，还有友鑫的款待。</p><p>老师推荐我和金参加实习直博面试。英语口语一直是我的弱项，对实习项目的介绍当然是很糟糕了，还有自我介绍部分，完全俗套，没有足够的突出综合素质。总之，老师只能招收一个人，我怀着极端复杂的心情回了趟家。</p><p>垓下一战的感觉。</p><h1 id="九推"><a href="#九推" class="headerlink" title="九推"></a>九推</h1><p>第一天上午，计算所VIPL笔试，90%的淘汰率让大家望而生畏，一共就来了20人。但是数学是真的全忘了，，</p><p>下午，机试，虽然vs环境很麻烦，但幸好题目难度并不是很大，马马虎虎吧</p><p>晚上，做面试ppt，真的很匆忙，，</p><p>第二天上午，参加计算所体检</p><p>下午面试，这次总结了前几次的教训，突出个人品质并结合实例说明，，</p><p>王树徽老师和我开玩笑：照片那么精神，为啥真人那么憔悴？（那可是99元的照片啊）</p><p>之傍晚火急火燎地赶上去杭州的火车，终于在12点半躺在湿漉漉的青旅床单上。</p><p>中途收到卿老师的电话，问我去不去国科大计算机学院。</p><p>第三天上午，准备面试；下午倒是比较顺利，选的2个英文题目应该还算可以，对老师的方向也很了解，不过课程相关的问题依旧一塌糊涂。</p><p>下午又火急火燎地回到北京，京城初秋的午夜真是冷冷清清。</p><p>第4填上午，去校医院体检。心想，应该结束了吧？</p><h1 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h1><p>吃完午饭准备上楼睡觉，许老师忽然打电话：</p><p>黄老师在信工所有一个名额，不过以后都是在计算所学习，你来不来？</p><p>当然！火急火燎地前往香山，火急火燎地面试，火急火燎地见黄老师，</p><p>大佬的笑容，慈祥的神色，可能这就是期待已久的场景吧。</p><p>无心插柳柳成荫。</p>]]></content>
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>联想miix5pro连接技嘉GamingBox1080</title>
      <link href="/2018/08/28/%E8%81%94%E6%83%B3miix5pro%E8%BF%9E%E6%8E%A5%E6%8A%80%E5%98%89GamingBox1080/"/>
      <content type="html"><![CDATA[<h1 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h1><p>想用GPU加速机器学习任务，但是买1060及以上的笔记本又大又重，而且很多钱花在144Hz的屏幕、机械键盘等零件上；如果买台式机也得1万多，而且宿舍没有什么地方放，毫无便携的可能，思前想后，想起来miix5pro是有一个满血的雷电3接口，有着40Gbps的吞吐率，正好买一个外接显卡。</p><p>主要考虑<a href="https://item.jd.com/5685757.html?dist=jd" target="_blank" rel="noopener">惠普的外接盒子</a>和<a href="https://detail.tmall.com/item.htm?id=559309220532&amp;ns=1&amp;abbucket=14" target="_blank" rel="noopener">技嘉的Gaming box</a>（还有<a href="http://cn.razerzone.com/razer-core-v2" target="_blank" rel="noopener">雷蛇的盒子</a>但是太贵了）。两者价格差不多，技嘉的优势在于1080、便携、送雷电3数据线和鼠标，惠普的优势在于盒子和接口的扩展性。于是查了不少相关的测评：</p><p><a href="https://www.bilibili.com/video/av12205290?from=search&amp;seid=12560254674047576198" target="_blank" rel="noopener">【开箱拆解】史上最小外置显卡盒AORUS GTX 1070 GAMING BOX全网首发开箱拆解，评测稍后发~</a></p><p><a href="https://www.zhihu.com/question/63245941" target="_blank" rel="noopener">如何评价技嘉的gaming box显卡拓展？</a></p><p><a href="https://www.zhihu.com/question/39218012" target="_blank" rel="noopener">如何评价雷蛇的外置显卡Razer Core？</a></p><p><a href="https://post.smzdm.com/p/724215/" target="_blank" rel="noopener">HP 惠普 GA1-1007cl OMEN 暗影精灵 显卡扩展坞简单开箱</a></p><p><a href="https://www.chiphell.com/forum.php?mod=viewthread&amp;tid=1837389&amp;page=1#pid38624312" target="_blank" rel="noopener">【MacBook Pro 2016外接 GTX 1080显卡】- 技嘉 AORUS GTX 1080 Gaming Box</a></p><p><a href="https://zhuanlan.zhihu.com/p/33071814" target="_blank" rel="noopener">MacbookPro搭配技嘉外置显卡拓展坞AORUS GTX 1070 GamingBox使用感受，神经网络训练和简明安装教程</a></p><p>另外一个评论总结比较到位</p><p><img src="/2018/08/28/联想miix5pro连接技嘉GamingBox1080/6.png" alt=""></p><p>正纠结着，又看到一个评论</p><p><img src="/2018/08/28/联想miix5pro连接技嘉GamingBox1080/1.png" alt=""></p><p>嗯……那就买技嘉的吧，已经1080了，2、3年内并不会不够用。</p><h1 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h1><p><img src="/2018/08/28/联想miix5pro连接技嘉GamingBox1080/2.jpg" alt=""><br><img src="/2018/08/28/联想miix5pro连接技嘉GamingBox1080/3.jpg" alt=""><br><img src="/2018/08/28/联想miix5pro连接技嘉GamingBox1080/4.jpg" alt=""><br><img src="/2018/08/28/联想miix5pro连接技嘉GamingBox1080/5.jpg" alt=""></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>由于重装过系统，所以直接插上并不能识别，所以要先安装雷电3的驱动，这是<a href="http://driverdl.lenovo.com.cn/lenovo/DriverFilesUploadFloder/52684/ThunderboltDriver-CZME06AF.exe" target="_blank" rel="noopener">miix5pro的</a>。实际上还有一个更好的方案更新所有驱动，就是安装<a href="https://downloadcenter.intel.com/" target="_blank" rel="noopener">Intel的升级助手</a></p><p>之后就可是识别雷电3啦，但是要识别显卡，还去<a href="https://www.nvidia.com/zh-cn/geforce/geforce-experience/" target="_blank" rel="noopener">英伟达官网</a>下载GEFORCE EXPERIENCE软件，它会提示安装对应的驱动并保持更新。安装之后可以使用控制面板设置在1080上跑的程序：</p><p><img src="/2018/08/28/联想miix5pro连接技嘉GamingBox1080/7.png" alt=""></p><p>注意不要安装技嘉的软件！！！我也不知道为什么，总之安装了之后，不仅设置显卡很慢，还会经常掉盘，体验极差，emmmmm</p><p>为了跑tensorflow，又折腾了一会，见<a href="http://wang22ti.com/2018/07/25/%E7%AC%94%E8%AE%B0-tensorflow/">tensorflow的笔记</a>。</p><h1 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h1><p>懒得跑分了，直接开了一局守望先锋，在极高的画质下人比较少时稳定在55帧以上，人很多很混乱的时候在45帧以上，作为二合一的本子，这样的性能已经让人很满意了，有着质的飞跃。</p><p>当然，由于低压CPU的限制，GPU图形部分并没有能够跑满，大概60-70%吧。此外如果作为鼠标的拓展坞，似乎流畅度不如直接插在电脑上。</p><p>装上CUDA之后跑tensorflow也没有问题，速度有明显的提高，没有亏本。</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>不知道是显卡还是电脑的问题，主要出现了三个问题：</p><ol><li>连接上显卡后经常掉盘，即使是在跑神经网络的时候</li><li>有时连接不上显示器</li><li>鼠标接在显卡上会间歇性卡顿</li></ol><p>很扎心，于是联系客服寄过去修了。</p>]]></content>
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-Git实用教程</title>
      <link href="/2018/08/13/mooc-Git%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <content type="html"><![CDATA[<p>注册GitHub有一段时间了，一直用它托管博客，觉得还是应该学一下git的原理，至少是最基础的部分吧！看的是小甲鱼的教程，<a href="https://www.bilibili.com/video/av27780400?zw" target="_blank" rel="noopener">哔哩哔哩</a>和<a href="http://study.163.com/course/courseMain.htm?courseId=1003109018" target="_blank" rel="noopener">网易云课堂</a>都有。</p><h1 id="git是个什么玩意"><a href="#git是个什么玩意" class="headerlink" title="git是个什么玩意"></a>git是个什么玩意</h1><p>讲了什么是版本管理，git的历史，不做赘述</p><h1 id="git理论基础"><a href="#git理论基础" class="headerlink" title="git理论基础"></a>git理论基础</h1><h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><p>Windows/mac去<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>下载，ubuntu使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h2 id="git全局初始化"><a href="#git全局初始化" class="headerlink" title="git全局初始化"></a>git全局初始化</h2><p>git使用之前需要配置，让它知道主人是谁，注意不要使用中文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"****"</span></span><br><span class="line">git config --global user.email <span class="string">"****"</span></span><br></pre></td></tr></table></figure><p>之后使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>就可以查看相关信息了。</p><h2 id="git记录的是什么"><a href="#git记录的是什么" class="headerlink" title="git记录的是什么"></a>git记录的是什么</h2><p>常规版本的思路是记录每一次的更改：</p><p><img src="https://xxx.ilovefishc.com/forum/201604/21/190850u33aqh9ku93k3kz3.png" alt=""></p><p>但是git记录的是每个版本的：</p><p><img src="https://xxx.ilovefishc.com/forum/201604/21/190850p05ig3nhe56eh0gp.png" alt=""></p><p>本地仓库有 Git 维护的三棵“树”组成——工作区域、暂存区域和 Git 仓库 ，这是 Git 的核心框架。</p><p><code>工作区域（Working Directory）</code>就是本地存放项目代码的地方。    </p><p><code>暂存区域（Stage）</code>事实上只是一个文件（比如隐藏文件<code>.git</code>），保存即将提交的文件信息。    </p><p><code>仓库（Repository）</code>就是安全存放数据的位置，其中有提交的所有版本的数据。其中，HEAD 指向最新放入仓库的版本。   </p><p>Git 的工作流程一般是：    </p><ol><li>在工作目录中添加、修改文件；    </li><li>将需要进行版本管理的文件放入暂存区域；    </li><li>将暂存区域的文件提交到 Git 仓库。    </li></ol><p>因此，Git 管理的文件有三种状态：<code>已修改（modified）</code>、<code>已暂存（staged）</code>和<code>已提交（committed）</code>，依次对应上边的每一个流程。 </p><p><img src="https://xxx.ilovefishc.com/forum/201604/21/185430j73kd854krr3p58d.png" alt=""> </p><h2 id="git局部初始化"><a href="#git局部初始化" class="headerlink" title="git局部初始化"></a>git局部初始化</h2><p>在项目的根目录执行初始化后，就会出现暂存区域文件夹<code>.git</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>在该目录新建一个README.txt文件后将之加入暂存区域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br></pre></td></tr></table></figure><p>之后将新的版本提交，其中<code>-m</code>表示注释信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"add a readme file"</span></span><br></pre></td></tr></table></figure><p>在操作的过程中，显示提交成功如下</p><p><img src="/2018/08/13/mooc-Git实用教程/1.png" alt=""></p><p>然而我在GitHub的两个仓库中并没有发现文件的影子！仔细一想，这和GitHub应该还没啥关系，但究竟去哪里了呢？先占一个坑</p><p>其实还在本机，，终于明白了，，commit和push不是一个意思，，</p><h1 id="查看工作状态和历史提交"><a href="#查看工作状态和历史提交" class="headerlink" title="查看工作状态和历史提交"></a>查看工作状态和历史提交</h1><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>可以查看当前状态如下，在默认的分支master中，没有需要提交的，工作树是干净的。</p><p><img src="/2018/08/13/mooc-Git实用教程/2.png" alt=""></p><p>加入一个MIT协议文件<code>LIENSE</code>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Copyright (C) &lt;year&gt; &lt;copyright holders&gt;</span><br><span class="line"></span><br><span class="line">　　Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</span><br><span class="line">　　</span><br><span class="line">　　The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span><br></pre></td></tr></table></figure><p>这时再查看状态会提示有个一文件更改了但是还没有放入暂存区域</p><p><img src="/2018/08/13/mooc-Git实用教程/3.png" alt=""></p><p>将之add到缓存区域后再查看状态就会提示有一个新的文件可以被提交</p><p><img src="/2018/08/13/mooc-Git实用教程/4.png" alt=""></p><p>这时可以使用rest命令反悔，从而回到更改了但是没有放到暂存区域的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset LISENCE</span><br></pre></td></tr></table></figure><p>重新add并commit后，又回到了没有需要提交的，工作树是干净的状态。修改LISENCE再查看状态，因为此时是工作目录文件和暂存区域文件不同，所以输出有所不同，第一个建议和之前相同，第二个会将暂存区域的文件覆盖掉工作目录修改后的文件。</p><p><img src="/2018/08/13/mooc-Git实用教程/5.png" alt=""></p><p>将之add到暂存区域后并commit，可以查看所有的版本信息，黄色的是唯一的版本ID。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="/2018/08/13/mooc-Git实用教程/6.png" alt=""></p><h1 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h1><p>在3课树之间的转换有如下的示意图</p><p><img src="/2018/08/13/mooc-Git实用教程/7.png" alt=""></p><p>先退回到上一个版本，再查看日志就只有2个版本了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure><p>该命令的选项如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rest --mix HEAD~</span><br><span class="line">git rest --soft HEAD~</span><br><span class="line">git rest --hard HEAD~</span><br></pre></td></tr></table></figure><p>其中soft表示只影响仓库；mix是缺省值，表示仓库回到以前的版本后并用以前版本覆盖暂存区域；hard则更进一步，还要覆盖工作目录。</p><p>进一步地，还可以通过指定ID切换版本（一般只要输入前几位），比如回到最后一个版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 82811</span><br></pre></td></tr></table></figure><h1 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a>版本对比</h1><p>新建一个项目test2，其中有2个文件game.py和README.md，提交后修改两个文件。运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>可以查看工作目录和暂存区域之间的区别（似乎有点崩），其中a是暂存区临时目录，b是工作区临时目录。</p><p><img src="/2018/08/13/mooc-Git实用教程/8.png" alt=""></p><p>绿色表示新增加的，白色表示共有的。如果文件很长，会有交互命令，用<code>h</code>可以查看帮助，在此不赘述。当然也可以比较两个版本的快照：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff id1 id2</span><br></pre></td></tr></table></figure><p>当前工作目录和某个版本的快照：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当前工作目录和当前版本的快照：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><p>当前暂存区域和某个版本的快照：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached [id]</span><br></pre></td></tr></table></figure><h1 id="修改最后一次提交、删除重命名文件"><a href="#修改最后一次提交、删除重命名文件" class="headerlink" title="修改最后一次提交、删除重命名文件"></a>修改最后一次提交、删除重命名文件</h1><p>如果提交后发现这个版本漏了一些东西，又不想制造一个新的版本，怎么办？使用如下命令即可，不需要回滚</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend [-m <span class="string">"****"</span>]</span><br></pre></td></tr></table></figure><p>删除了已经add的文件后，可以恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- [filename]</span><br></pre></td></tr></table></figure><p>那如果想彻底删除已经提交的文件呢？因为有可能加入了不想加入的东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br></pre></td></tr></table></figure><p>那么使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm filename</span><br></pre></td></tr></table></figure><p>删除工作目录和暂存区内容后再软回滚版本。不过，如果工作目录和暂存区文件不一样，就会提示错误，这是要用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -f filename</span><br></pre></td></tr></table></figure><p>当然也可以只删除暂存区域的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached filename</span><br></pre></td></tr></table></figure><p>直接在系统中修改文件名会出错，需要使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv/ren oldfile newfile</span><br></pre></td></tr></table></figure><h1 id="创建和切换分支"><a href="#创建和切换分支" class="headerlink" title="创建和切换分支"></a>创建和切换分支</h1><p>优秀的分支管理是git的灵魂！分支的意义如下</p><p><img src="/2018/08/13/mooc-Git实用教程/9.png" alt=""></p><p>创建一个叫feature的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch feature</span><br></pre></td></tr></table></figure><p>此时查看带有分支的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --decorate --oneline</span><br></pre></td></tr></table></figure><p>切换分支名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br></pre></td></tr></table></figure><p>当然也可以直接创建并切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature2</span><br></pre></td></tr></table></figure><p>在feature分支下做出修改并提交，再切换回master分支后，工作区和暂存区都回到master的状态！可以以图形化的方法看一下所有分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --decoreate --oneline --graph --all</span><br></pre></td></tr></table></figure><h1 id="合并和删除分支"><a href="#合并和删除分支" class="headerlink" title="合并和删除分支"></a>合并和删除分支</h1><p>将指定的分支合并到本分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge branchname</span><br></pre></td></tr></table></figure><p>但是如果有2个同名文件但内容不同，自动合并就会失败，git会在冲突的文件中打入标记，修改后提交就会完成自动合并。删除分支也很简单，其实只是删除了一个指针</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d brachname</span><br></pre></td></tr></table></figure><h1 id="匿名分支与checkout"><a href="#匿名分支与checkout" class="headerlink" title="匿名分支与checkout"></a>匿名分支与checkout</h1><p>创建匿名分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD~</span><br></pre></td></tr></table></figure><p>实际上就是把HEAD指针向前指了，但是又没有告诉名字，所以再切换到其他分支的时候，会丢掉所有的更改，这可以用来做实验。切换到别的分支的时候如果想保留改匿名分支，可以立刻用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch new_branch_name id</span><br></pre></td></tr></table></figure><p>如果错过了又忘记了id，就再也找不到了。</p><p>check和reset命令都可以恢复指定快照的指定文件，并且不影响HEAD指针。区别是reset只恢复到暂存区（不允许和soft、hard使用），checkout同时覆盖暂存区和工作目录。因此reset要比checkout安全一些。</p><p>check和reset命令都可以恢复指定快照，都是通过移动指针和覆盖文件产生的。第一个不同在于checkout会检查工作状态是不是clean，因此比较reset —hard更加安全。另一个区别是reset会移动HEAD及其分支指向，而checkout只会移动HEAD。</p><h1 id="创建GitHub账户"><a href="#创建GitHub账户" class="headerlink" title="创建GitHub账户"></a>创建GitHub账户</h1><p>小甲鱼的免费教程只有这些，可是又发现了<a href="https://blog.csdn.net/qq_36974281/article/details/81427893" target="_blank" rel="noopener">大佬的教程</a>，结合起来应该没问题了。我尝试进行了一次操作：</p><ol><li>用git clone url把我再GitHub创建的仓库克隆下来</li><li>用<code>git remote add repository_name url</code>将本地库和远程库关联</li><li>对工作目录进行一定修改，add并commit</li><li>用<code>git push</code>将本地仓库提交到GitHub，这时会弹出窗口让输入GitHub的账号密码，输入后就正确地提交了！</li></ol><p>可能还有情况没有遇到，之后再琢磨啦，何况还有一本git的书再吃灰呢。</p>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-深度学习工程师-5-序列模型</title>
      <link href="/2018/08/12/mooc-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E7%A8%8B%E5%B8%88-5-%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/"/>
      <content type="html"><![CDATA[<h1 id="循环序列模型"><a href="#循环序列模型" class="headerlink" title="循环序列模型"></a>循环序列模型</h1><h2 id="什么是序列数据"><a href="#什么是序列数据" class="headerlink" title="什么是序列数据"></a>什么是序列数据</h2><p><img src="/2018/08/12/mooc-深度学习工程师-5-序列模型/1.png" alt=""></p><h2 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h2><p>用$T_x^{(i)}$表示第$i$个样本的长度，$x^{(i)<t>}$表示第$i$个序列中的第$t$个单元。对于一个句子，首先用所有的单词制作一个一维词典，之后对于每一个词采用one-hot的方式编码。</t></p><h2 id="循环网络模型"><a href="#循环网络模型" class="headerlink" title="循环网络模型"></a>循环网络模型</h2><p>为什么不使用标准的神经网络呢？因为</p><ol><li>不同序列的长度不一定相同，即便使用填充的方法，这显然不是一个好的编码方法</li><li>无法共享在不同位置提取的特征，参数数量过多</li></ol><p>RNN解决了这个问题，</p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-深度学习工程师-4-卷积神经网络</title>
      <link href="/2018/08/09/mooc-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E7%A8%8B%E5%B8%88-4-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <content type="html"><![CDATA[<p>总的来说，这门课程比CS229容易一些，也可能是神经网络发展时间的问题，很多内容是经验上的，所以在差不多一周的学习之后，来到了最重要的部分啦。</p><h1 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h1><h2 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h2><p>由于神经网络的发展，<code>计算机视觉（computer vision）</code>的研究再近几年取得了突飞猛进的发展，也给其他与计算机交叉的领域带来很多灵感。计算机视觉的任务主要有：图像分类（image classification）、物体检测（object detection）、图像风格转换等等。计算机视觉的挑战主要来自于巨大的输入，一张1000*1000*3的图像有3百万维度的输入特征，如果神经网络的第一层是大小为1000全连接层，那么第一层权重就有30亿个，很难有足够的数据防止不过拟合，对硬件的要求也很高——而这并不能算很大的图片。</p><p>所以，计算机视觉必须进行卷积操作。</p><h2 id="卷积的定义"><a href="#卷积的定义" class="headerlink" title="卷积的定义"></a>卷积的定义</h2><p>卷积是一个应用广泛的定义，在图像处理中实际上就是——以<code>过滤器（filter）</code>/<code>核（kernel）</code>为权重，对原图像相同大小的区域进行加权求和；一次卷积实际只生成了一个像素点的值，对图像的卷积操作实际上是多次卷积操作结果的拼接。</p><p>网上有很多用信号等概念对卷积进行解释，比如<a href="https://blog.csdn.net/bitcarmanlee/article/details/54729807" target="_blank" rel="noopener">最容易理解的对卷积(convolution)的解释</a>和<a href="https://blog.csdn.net/panglinzhuo/article/details/75207855" target="_blank" rel="noopener">深度学习中的卷积与反卷积</a>。实际上他们可能并没有什么必然的实际意义上的联系，只是数学上的形式相同，毕竟不同的卷积核作用大相径庭；他们为了佐证实际意义上的联系都选用了恰好有对应意义的核。用于竖直边缘检测的核如下图所示，在数学上就是图片对应区域左边减去右边。在非边缘的区域，像素的值比较接近，在完全相同（比如都是255）的的情况下卷积的计算结果就为0；在边缘区域，像素值相差较大，左边减去右边的绝对值就很大——因此可以检测竖直边缘。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/4.png" alt="1"></p><p>同理使用旋转180°的核就可以检测水平边缘。下面左图叫做Sobel filter，健壮性好于上面的那个；右图叫做Scharr filter；全是$\frac{1}{9}$的核可以对图片进行平滑处理。但是在卷积神经网络中，我们做的不是手动选择卷积核，而是通过梯度等手段让计算机选择卷积核，即选择提取的特征，这在之后的课程中会提到。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/2.png" alt="1"><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/3.png" alt="1"></p><h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p>对于大小为$n^2$的图像和核$f^2$的卷积核，得到的是大小为$(n-f+1)^2$的图片，这样有两个缺点，一个是每做一次卷积操作图片就会变小一点，另一个是边缘的像素点没有被充分采样。所以通过对原图像用0进行扩充到$(n+f-1)^2$维，即外层增加$p=\frac{f-1}{2},f=2k-1,k\in \N_+$圈。之所以是奇数主要是计算机视觉中的惯例，这样更方便自然的padding和用中心点标记核的位置。</p><p>根据padding的情况，可以定义两种卷积。<code>valid convolution</code>是完全没有padding，而<code>same convolution</code>保证了卷积后的图像大小和原图相同。</p><h2 id="步长（stride）"><a href="#步长（stride）" class="headerlink" title="步长（stride）"></a>步长（stride）</h2><p>步长$s$就是每次卷积核在图上移动的距离，最终输出图像的大小为$\lfloor\frac{n+2p-f}{s}+1\rfloor^2$，向下取整是为了所有的卷积核都是完全在图像上的。</p><p>此外，吴老师在这里解释了计算机的卷积和其他地方的卷积的区别。数学或信号学定义的卷积需要把卷积核做竖直和水平的反转，再进行之前操作，目的是可以使用结合律，但是这在神经网络中并不重要。在数学上，之前介绍的卷积常常被称为<code>互相换（cross correlation）</code>，不过在计算机领域还是习惯叫做卷积。</p><h2 id="3D卷积"><a href="#3D卷积" class="headerlink" title="3D卷积"></a>3D卷积</h2><p>所谓3D卷积是指对具有多个通道（又称深度）的图像进行卷积，此时卷积核的通道数和图像的通道数相同，卷积过程如下图所示</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/5.png" alt="1"></p><p>实际和2d的并没有什么不同，只不过每次计算量变大了一些。</p><h2 id="多个卷积核"><a href="#多个卷积核" class="headerlink" title="多个卷积核"></a>多个卷积核</h2><p>如果想要同时提取多个特征，就需要使用多个卷积核，分别对图像做卷积操作后堆叠在一起即可，如下图所示</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/6.png" alt="1"></p><p>即卷积得到的图像如果是有第3维的，第3维的大小表示的是提取的特征的数量，而非其他！</p><h2 id="单层卷积网络"><a href="#单层卷积网络" class="headerlink" title="单层卷积网络"></a>单层卷积网络</h2><p>有了上面的铺垫，终于可以搭建神经网络啦，如下图所示是一个单层神经网络，其中原图是输入$a^{[0]}$，过滤器是参数$W^{[1]}$，卷积操作相当于传统神经网络的矩阵乘法，通过激活函数后各个特征堆叠在一起的就是$a^{[1]}$。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/7.png" alt="1"></p><p>举个例子，如果一层10个3×3×3的卷积核，一共又(3×3×3+1)×10个参数，这是输入图片的大小无关！这样就可以避免过拟合。于是，为了表示整个网络，就有超多的记号如下图</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/8.png" alt="1"></p><p>其中$m$是mini-batch的大小。</p><h2 id="简单CNN示例"><a href="#简单CNN示例" class="headerlink" title="简单CNN示例"></a>简单CNN示例</h2><p>一个简单的、完全由卷积层构成的神经网络如下图所示，在最后一个卷积层后通过平坦化提取到了1960个特征，再后面就是传统的神经网络了！注意到经过几层神经网络后，图片的大小逐渐减小，深度逐渐增大，一般是有这个趋势的。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/9.png" alt="1"></p><p>除了卷积层，CNN通常还有<code>池化层（pooling layers）</code>和<code>全连接层（full connecting layers）</code>，可以使得网络更加强大。</p><h2 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h2><p>池化层通常用来缩减模型大小，提高计算速度，同时提高模型特征的健壮性。一般的池化层有两种，一个是<code>最大池化层（max pooling layer）</code>，如下图所示，和卷积很类似，不过是对选定范围内的值直接取最大值，可以理解为选择该范围中最突出的特征，过滤掉不重要的特征。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/10.png" alt="1"></p><p>还有一个是<code>平均池化层（average pooling layer）</code>，即将取最大值的操作改为取平均值。平均池化层很少使用，比如将一个具有很深的输入转化为只有$1\times1\times n_c$的形式。</p><p>当然，池化层的深度要和输入的通道数相同。最重要的是池化层并没有任何要学习的参数，只是一个固定的转换。至于池化层的padding，基本上都是0，极少的特例会在之后讲解。</p><h2 id="典型CNN示例"><a href="#典型CNN示例" class="headerlink" title="典型CNN示例"></a>典型CNN示例</h2><p>以下的神经网络基于经典神经网络<code>LeNet-5</code>，注意到由于池化层没有超参数，所以连同前面的卷积层被认为是同一层。这里有大量的超参数，设计的思路会在之后讲解，不过常规的做法不是自己设计，而是从别人的论文中汲取经验。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/11.png" alt="1"></p><p>观察这个典型神经网络的参数，可以发现：参数主要集中在全连接层；activation大小减小的速度不能太快；在卷积部分activation的长和宽逐渐减小而深度逐渐增大。很多CNN都有这样的模式。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/12.png" alt="1"></p><h2 id="为什么使用CNN"><a href="#为什么使用CNN" class="headerlink" title="为什么使用CNN"></a>为什么使用CNN</h2><p>和全连接层相比，为什么卷积在神经网络中很有效呢？因为它有着<code>参数共享（parameter sharing）</code>和<code>稀疏连接（sparsity of connections）</code>两个特性，使得它减少了参数，在防止过拟合的同时加快了训练速度。参数共享是指一个卷积核中的参数被图片中的不同区域反复使用，从而用很少的参数对图片所有区域实现了同一特征的提取；稀疏连接是指卷积得到的每一个像素点都只和对应区域的值有关，和其他区域的值没有任何关系。此外，CNN很擅长捕捉<code>平移不变性（translation invariance）</code>，即相同物体在图片中平移几个像素，CNN仍然可以提取出十分相似的特征。</p><p>了解CNN的结构后，如何训练它也就很简单啦，在此不做赘述。</p><h1 id="卷积神经网络实例探究"><a href="#卷积神经网络实例探究" class="headerlink" title="卷积神经网络实例探究"></a>卷积神经网络实例探究</h1><h2 id="LeNet-5"><a href="#LeNet-5" class="headerlink" title="LeNet-5"></a>LeNet-5</h2><p>Lecun Y, Bottou L, Bengio Y, et al. Gradient-based learning applied to  document recognition[J]. Proceedings of the IEEE, 1998,  86(11):2278-2324. </p><p>那时没有padding的概念，大家更喜欢使用平均池化，激活函数用的是sigmoid和tanh，最后的输出用了一个很古老的分类器而非softmax，整个网络规模也不大。同时，由于当时计算机很慢，所以论文中用很复杂的推导使得过滤器的通道数和输入通道数可能并不一样——现在已经不使用了。此外，还在池化层增加了激活函数，这是很难理解的地方。吴老师给的示意图如下</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/14.png" alt="1"></p><p>吴老师推荐精读文章的第二部分，有网络结构的详细说明；泛读第三部分，有有趣的实验结果。论文中的示意图如下</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/13.png" alt="1"></p><h2 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h2><p>Krizhevsky A, Sutskever I, Hinton G E. ImageNet classification with deep  convolutional neural networks[C] International Conference on Neural  Information Processing Systems. Curran Associates Inc.  2012:1097-1105. </p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/15.png" alt="1"></p><p>AlexNet和LeNet非常相似，但是效果好得多，这篇论文也是深度学习在计算机视觉领域大规模应用的开端。效果好一方面是因为规模大得多，另一方面是因为使用了Relu函数。同时在几年前，GPU还没有那么快，文章中介绍了将模型拆分到两个GPU同时训练的方法。此外，文章中的网络还有<code>局部响应归一化层（local response normalization）</code>，不过后来发现对于效果的提升并不明显，所以现在很少使用了。原文的示意图如下</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/16.png" alt="1"></p><h2 id="VGG-16Net"><a href="#VGG-16Net" class="headerlink" title="VGG-16Net"></a>VGG-16Net</h2><p>Simonyan K, Zisserman A. Very Deep Convolutional Networks for Large-Scale Image Recognition[J]. Computer Science, 2014. </p><p>这个网络十分地深邃，之所以名字中有16就是一共有16个卷积层核全连接层，一共有1.38亿个参数，这是最大的缺点。网络中所有的卷积层都是3×3的核，步长为1，same；所有的池化层都是2×2，步长为2的最大池化层；所以没有那么多超参数，最大的优势是简化了网络的结构。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/17.png" alt="1"></p><p>此外还有VGG-19，比VGG16更加深邃，但是性能核VGG-16不相上下，所以大家通常使用VGG-16。</p><h2 id="残差网络（ResNet）"><a href="#残差网络（ResNet）" class="headerlink" title="残差网络（ResNet）"></a>残差网络（ResNet）</h2><p>He K, Zhang X, Ren S, et al. Deep Residual Learning for Image Recognition[J].  2015:770-778. </p><p>很深的网络是很难训练的，因为存在梯度消失或者梯度爆炸，普通的网络训练误差和层数的关系如下图所示。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/19.png" alt="1"></p><p>所以何大佬提出残差网络，其思想是加入直接向更深层传导梯度的路径。从此，巨深的网络变为可能，甚至可以超过100层。其基本结构<code>残差块（residual block）</code>如下图所示，其中的弧线被称为<code>short cut</code>或者<code>skip connection</code></p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/18.png" alt="1"></p><p>即有</p><script type="math/tex; mode=display">a^{[l+2]}=g(z^{[l+2]}+w_sa^{[l]})=g(w^{[l+2]}a^{[l+1]}+b^{[l+2]}+w_sa^{[l]})</script><p>其中$w_s$为了保证，相加的矩阵维度相同；不过由于残差网络基本使用same卷积，所以常常为单位矩阵。假设$l+1$层和$l+2$层是在原网络基础上增加的；如果他们的参数均为0，即它们什么都没有学习到，那么考虑到Relu函数的特性与$a$基本大于0，$a^{[l]}$直接传导到最后，并没有什么危害；如果新加的两层学习到了一些特征，那么网络的效果就会增强，这是残差块效果的基本理解。典型的plain网络转化为残差网络如下图所示，很明显是在VGG的基础上改进的。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/20.png" alt="1"></p><h2 id="1×1的卷积核"><a href="#1×1的卷积核" class="headerlink" title="1×1的卷积核"></a>1×1的卷积核</h2><p>Lin M, Chen Q, Yan S. Network In Network[J]. Computer Science, 2013. </p><p>1×1卷积（又称<code>network in network</code>）看起来没什么作用，不过从另外一个角度来看，可以被认为是共用卷积核为权重的全连接网络。虽然在林敏的论文里的架构并没有得到广泛应用，但是1×1卷积却很有影响力，包括下节的Inception都受到它的启发。它的作用在于可以压缩或者增加通道的数量！</p><h2 id="Inception网络"><a href="#Inception网络" class="headerlink" title="Inception网络"></a>Inception网络</h2><p>Szegedy C, Liu W, Jia Y, et al. Going deeper with convolutions[C]// IEEE  Conference on Computer Vision and Pattern Recognition. IEEE, 2015:1-9. </p><p>当构建卷积层的时候，要设计卷积核的大小、需不需要池化层，而Inception的作用在于代替人做决定。虽然导致了网络更加复杂，但是表现却非常好。其核心原理如下图所示</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/21.png" alt="1"></p><p>它将左边的输入分别用不同大小的same卷积层和same池化层进行操作后拼接在一起，从而获得一个256通道的输出，由计算机决定各个卷积核的大小以及是否需要池化层。然而如果之后直接对深度为256的输入进行卷积操作，比如用32个5×5的same卷积核，那么浮点乘法计算量将到达1.2亿次！这是不能忍受的，所以还会加入一层1×1的卷积层，称为<code>瓶颈层（bootleneck layer）</code>从而减小计算量，如下图所示</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/22.png" alt="1"></p><p>浮点计算量下降到了1.24千万次。事实证明，只要合理地设计好1×1的卷积层，并不会降低网络的性能。一个典型的Inception组件如下图所示。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/23.png" alt="1"></p><p>最后，典型的Inception网络十分地庞大。其中，黄色的分支是让隐藏层的输出也参与训练，从而避免过拟合。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/24.png" alt="1"></p><h2 id="使用经典模型的建议"><a href="#使用经典模型的建议" class="headerlink" title="使用经典模型的建议"></a>使用经典模型的建议</h2><h3 id="使用开源的解决方案"><a href="#使用开源的解决方案" class="headerlink" title="使用开源的解决方案"></a>使用开源的解决方案</h3><p>由于神经网络的复杂性，它们很难被复制，即便是顶尖大学的学生也很难通过阅读他人的论文复制研究成果（而复制是进行进一步研究的第一步）。幸运的是很多深度学习研究者都习惯吧自己的成果开源到Github之类的网站上，所以吴老师也推荐我们把代码放到上面。而在我们阅读文献后，吴老师建议我们去网上找一个开源的实现（实际上吴老师自己也常常这么做），通常比从头开始要容易得多。</p><p>下面吴老师竟然实操如何下载GitHub的代码！他用了一个更高端的方法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> URL</span><br></pre></td></tr></table></figure><h3 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h3><p>迁移学习的概念此前已经有所叙述。将开源网络下载下来后，根据自己的需要对其进行修改，建议是冻结保留的开源网络的参数，只训练自己加入的参数，这样可能用很小的数据集就可以获得很强性能——幸运的是很多数据集都支持这种操作，常见的是设置<code>trainableParamer=0</code>或<code>freeze=1</code>。另外一个方法是先用保留的网络计算训练集，将得到的特征存入硬盘，再用这些训练比如一个简单的softmax网络。</p><p>如果自己的数据集比较大，可以冻结更少的层，没冻结的层可以接着用，也可以去掉换为自己的网络。如果自己的数据集特别大，那就不要冻结啦。计算机视觉应该是用迁移学习最多的领域了。</p><h3 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h3><p>和其他领域不同，计算机视觉的数据集的大小总显得不足，因此需要扩充数据集。最简单的是镜像对称和随机裁剪，使用旋转、局部扭曲等方法也没有坏处，只是比较复杂。第二类方法是色彩转换，对RGB各通道进行一些操作，比较专业的有PCA采样。</p><p>一般是一个或多个现场进程数据的读取与增强，另一个线程进行训练。</p><h2 id="计算机视觉现状"><a href="#计算机视觉现状" class="headerlink" title="计算机视觉现状"></a>计算机视觉现状</h2><p>由于计算机视觉的复杂性，所以即便已经有很多数据集也显得不够，于是计算机视觉就更加依赖于hand-engineering，收集更多的数据、设计更复杂的模型等等。幸运的是我们还有迁移学习可以使用。</p><p>在竞赛中，为了在benchmark中脱颖而出，有以下两个建议，虽然不建议在工业界使用：</p><ol><li><code>集成（ensembling）</code>，独立训练多个神经网络并平均它们的输出。</li><li>在测试的时候使用<code>muti-crop</code>，即将一幅图及其镜面图取上下左右中共10个作为数据增强。</li></ol><p>使用开源资源的3个阶段：论文架构、架构的开源实现、迁移学习</p><h1 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h1><h2 id="目标定位"><a href="#目标定位" class="headerlink" title="目标定位"></a>目标定位</h2><p><code>图像分类（Image Classification）</code>是指给每张图片打上一个标签，比如车；<code>目标分类定位（Object Classification with localization）</code>是指不仅打上一个标签，还要用方框指出，比如车的具体位置；<code>目标检测（Object Detection）</code>是本周的重点，也是近几年得益于自动驾驶研究快速发展的技术，是指识别图片中的多个物体并指出其位置，例如图中所有的车、人、路灯等等。由于分类与定位是检测的基础，所以从前两者开始讲起。</p><p>我们已经很熟悉图像分类问题了，先卷积再全连接最后用softmax输出结果。在目标定位中，需要在结果中加入位置信息，可以使用$b_x,b_y,b_h,b_w$来描述目标位置，其含义如下图所示。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/25.png" alt="1"></p><p>如果一共要分为3类，输出常见的形式如下所示</p><script type="math/tex; mode=display">y=\begin{bmatrix}  p_c \\ b_x\\ b_y\\ b_h\\ b_w \\ c_1 \\c_2 \\ c_3\end{bmatrix}</script><p>其中$p_c$指示是否有合理的分类，若$p_c=0$则其余的参数都没有任何意义。于是损失函数可以有如下的形式</p><script type="math/tex; mode=display">L(\hat{y},y)=y_1\sum_{i=1}^n{(\hat{y}_i-y_i)^2} + (1-y_1)(\hat{y}_1-y_1)^2</script><p>当然这只是举例，比如$p_c$也可以使用逻辑回归的形式。</p><h2 id="特征点检测"><a href="#特征点检测" class="headerlink" title="特征点检测"></a>特征点检测</h2><p>上一部分用方框表示物体的位置，完全可以推广为<code>特征点（landmark）</code>，比如人脸识别和<code>人体姿态检测（people pose detection）</code>：</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/26.png" alt="1"></p><h2 id="基于滑动窗口的目标检测"><a href="#基于滑动窗口的目标检测" class="headerlink" title="基于滑动窗口的目标检测"></a>基于滑动窗口的目标检测</h2><p>有了图像识别乃至目标定位的神经网络，我们可以使用不同大小的矩形作为窗口并选择一定的步长进行滑动操作，使用神经网络对每一次分割得到的图片进行分类或定位，从而实现目标检测。如下图所示</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/27.png" alt="1"></p><p>显然，这种方法计算量巨大。传统使用的简单的线性分类器，而在神经网络的时代，这似乎是无法忍受的。幸运的是，计算成本的问题已经有了很好的解决解决方案，大大提高了在CNN上应用滑动窗口方法的效率。</p><h2 id="滑动窗口的卷积实现"><a href="#滑动窗口的卷积实现" class="headerlink" title="滑动窗口的卷积实现"></a>滑动窗口的卷积实现</h2><p>Sermanet P, Eigen D, Zhang X, et al. OverFeat: Integrated Recognition,  Localization and Detection using Convolutional Networks[J]. Eprint  Arxiv, 2013. </p><p>全连接层是可以被卷积层代替的，只要卷积核和输入的大小完全相同即可：</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/28.png" alt="1"></p><p>于是将上面的神经网络训练好后输入一张较大的图：</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/29.png" alt="1"></p><p>同时输出了所有滑动窗口的结果！这就实现了加速。</p><h2 id="YOLO算法"><a href="#YOLO算法" class="headerlink" title="YOLO算法"></a>YOLO算法</h2><h3 id="边界矩形预测"><a href="#边界矩形预测" class="headerlink" title="边界矩形预测"></a>边界矩形预测</h3><p>Redmon J, Divvala S, Girshick R, et al. You only look once: Unified,  real-time object detection[C] Proceedings of the IEEE conference on  computer vision and pattern recognition. 2016: 779-788. </p><p>有了滑动窗口的卷积实现，结合目标定位的方法，就可以预测目标的<code>边界矩形（bounding box）</code>了，输出是一个3维的矩阵，通道数就是每个窗口的特征数，第一个通道$p_c$表示为某一分类的概率。这个算法被称为YOLO算法，由于采用卷积的方式，所以快到可以实时识别。此外，此时$b_x,b_y\in[0,1],b_h,b_w&gt;0$，因为边界矩阵可能不局限于一个窗口内。</p><p>实际上，原论文中的实现更加复杂，这里只是一个合理的方法。不过原论文的难度相当大，吴老师也是和其他大佬讨论后才搞明白的。</p><h3 id="交并比"><a href="#交并比" class="headerlink" title="交并比"></a>交并比</h3><p><code>交并比（intersection over union）</code>函数，即交集比上并集，可以用来改善上述网络的结果：</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/30.png" alt="1"></p><p>通常认为交并比大于0.5就是一个正确的预测，当然也可以另外设定。更广泛的，交并比可以衡量任意两个box的重叠程度。</p><h3 id="非极大值抑制"><a href="#非极大值抑制" class="headerlink" title="非极大值抑制"></a>非极大值抑制</h3><p>目前为止学习的算法都存在一个问题：同一个物体会被多次检测。典型的情况如下图所示：</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/31.png" alt="1"></p><p><code>非极大值抑制（non-max suppression）</code>可以解决这个问题其思路是：去除所有$p_c$过小（比如0.6以下）的边界矩形，然后重复选择$p_c$最大的矩形并删去与之有着较大（比如0.5以上）交并比的矩形直到所有矩形都被操作过。如果要检测多类物体，则需要对每一类物体单独执行一次算法。</p><h3 id="Anchor-boxes"><a href="#Anchor-boxes" class="headerlink" title="Anchor boxes"></a>Anchor boxes</h3><p>目前为止学习的算法都存在一个问题：一个窗口中只能检测出一个目标。典型的情况如下图所示：</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/32.png" alt="1"></p><p>设置anchor box可以在一定程度上解决这个问题。其思想是预先定义多个不同的anchor box，比如一个站着的（anchor box 1），一个躺着的（anchor box 2），然后将特征按照anchor box的数量复制，并将训练集重新组合如下所示</p><script type="math/tex; mode=display">y=\begin{bmatrix}  p_c \\ b_x\\ b_y\\ b_h\\ b_w \\ c_1 \\c_2 \\ c_3 \\ p_c \\ b_x\\ b_y\\ b_h\\ b_w \\ c_1 \\c_2 \\ c_3\end{bmatrix}=\begin{bmatrix}  1 \\ b_x\\ b_y\\ b_h\\ b_w \\ 1 \\ 0 \\ 0 \\ 1 \\ b_x\\ b_y\\ b_h\\ b_w \\ 0 \\ 1 \\ 0\end{bmatrix}</script><p>不过如果只定义2个anchor box，并不能处理1个窗口中出现3个及以上目标的情况，也不能处理有相同anchor box的2个目标。不过考虑到当每个窗口设置得足够小的时候，这些情况发生的概率还是蛮低的。设置anchor box的意义更大程度上在于指导网络box的形状。</p><p>怎么选择anchor box呢？一般是手动指定，多达5到10个。还有一个在论文中给出的更高级的版本，使用了k-means算法对box进行聚类。</p><h3 id="整合到一起"><a href="#整合到一起" class="headerlink" title="整合到一起"></a>整合到一起</h3><p>将上述内容整合到一起就是完整的YOLO算法，再次不做赘述。YOLO几乎是目前最好的检测算法，整合了很多模型中精妙的部分。</p><h2 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h2><p>Girshick R, Donahue J, Darrell T, et al. Rich feature hierarchies for  accurate object detection and semantic segmentation[C]//Proceedings of  the IEEE conference on computer vision and pattern recognition. 2014:  580-587. </p><p>在进行滑动窗口的时候，检测了很多其实并不会有什么的大块区域，所以<code>R-CNN（区域分割CNN，Region proposal CNN）</code>先将图像进行分割，之后再对相应的Window进行检测：</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/33.png" alt="1"></p><p>因为整个过程有两步，所以R-CNN是很慢的，于是有很多的改进版本，包括以下的Fast R-CNN和Faster R-CNN：</p><p>Girshick R. Fast r-cnn[C] Proceedings of the IEEE international conference on computer vision. 2015: 1440-1448. </p><p>Ren S, He K, Girshick R, et al. Faster r-cnn: Towards real-time object  detection with region proposal networks[C] Advances in neural  information processing systems. 2015: 91-99. </p><p>吴老师还是认为YOLO算法更有前景，所以这里只是简要的介绍了一下。但是R-CNN在学界还是有很大影响力的，所以还是需要关注的。</p><h1 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h1><h2 id="什么是人脸识别"><a href="#什么是人脸识别" class="headerlink" title="什么是人脸识别"></a>什么是人脸识别</h2><p>展示了百度的刷脸进入的视频（去京东的时候也有使用），其中涉及到了<code>人脸识别（face recognition）</code>和<code>活体检测（liveness detection）</code>。活体检测也可以使用监督学习完成，但不是本部分的重点。</p><p><code>人脸验证（face verification）</code>输入图片和ID，判断是否为一个人。人脸识别较之困难多，数据库中有K个人，对于给定的输入图片，要输出图片对应人的ID或者输出没有匹配信息。如果通过人脸验证实现人脸识别，那么就对验证的准确率有很高的要求。</p><h2 id="One-shot-学习问题"><a href="#One-shot-学习问题" class="headerlink" title="One-shot 学习问题"></a>One-shot 学习问题</h2><p>人脸识别难度很大程度来自于One-shot学习问题，即训练某个人的样本很可能只有一张。一种简单的方法是用softmax网络输出，但是由于样本实在太少所以效果并不好，而且有新人加入就要重新学习整个网络吗？这显然不是一个好方法。</p><p>比较好的解决方法是学习一个“相似”函数，即输入时两张图片，输出为两者的相似度或者差异度。当两张图片的差异度小于某个阈值$\tau$，就认为时同一个人；反之则不是。</p><h2 id="Siamese-network"><a href="#Siamese-network" class="headerlink" title="Siamese network"></a>Siamese network</h2><p>Taigman Y, Yang M, Ranzato M A, et al. Deepface: Closing the gap to  human-level performance in face verification[C] Proceedings of the IEEE conference on computer vision and pattern recognition. 2014: 1701-1708. </p><p>正常的神经网络会通过softmax输出图片分类，在Siamese网络中并不会这样做，其输出就是一个，比如128维的向量（embedding）。可以理解为这个神经网络是一个巨大的函数，它的作用就是将图片转化为向量，相似的图片对应的向量间的距离比较小，不相似的图片对应的向量间距离远。</p><h2 id="triplet-loss"><a href="#triplet-loss" class="headerlink" title="triplet loss"></a>triplet loss</h2><p>Schroff F, Kalenichenko D, Philbin J. Facenet: A unified embedding for  face recognition and clustering[C]//Proceedings of the IEEE conference  on computer vision and pattern recognition. 2015: 815-823. </p><p>如何定义上述网络的损失，才能将神经网络训练好呢？通常使用三元组损失，即对于任意一个人A，再找一张ta的图片P，和一张不是ta的图片N，如果将神经网络看作函数f，我们希望有</p><script type="math/tex; mode=display">||f(A)-f(P)||^2 + \alpha \leq ||f(A)-f(N)||^2</script><p>其中$\alpha$是一个超参数，为了避免所有的输出均为$\vec{0}$。于是就可以定义损失函数：</p><script type="math/tex; mode=display">L(A,P,N)=\max(||f(A)-f(P)||^2  - ||f(A)-f(N)||^2 + \alpha,0) \\ J=\sum_{i=1}^m{L(A^{(i)},P^{(i)},N^{(i)})}</script><p>不过，随机选择的三元组是没有用的，要选择足够有难度分辩的才行：</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/34.png" alt="1"></p><h2 id="人脸认证与二分类问题"><a href="#人脸认证与二分类问题" class="headerlink" title="人脸认证与二分类问题"></a>人脸认证与二分类问题</h2><p>上述模型可以改进为一个二分类问题，即将两幅图片分别输入网络，得到两个embedding后输入到一个逻辑回归的网络判别是否为同一个人。逻辑网络的训练用的损失函数很简单，比如</p><script type="math/tex; mode=display">\hat{y}=\sigma(w_i\sum_{k=1}^{128}{|f(x^{(i)})_k-f(x^{(j)})_k|}+b)</script><p>其中$x^i$是匹配的图片，$x^j$是数据库中的图片。或者是是$\kappa^2$相似度:</p><script type="math/tex; mode=display">\hat{y}=\sigma(w_i\sum_{k=1}^{128}{\frac{(f(x^{(i)})_k-f(x^{(j)})_k)^2}{f(x^{(i)})_k+f(x^{(j)})_k}}+b)</script><p>当然，为了计算的实时性，数据库中存储的不一定是图片，而是对应计算好的bedding。数据集如下所示：</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/35.png" alt="1"></p><h1 id="风格迁移"><a href="#风格迁移" class="headerlink" title="风格迁移"></a>风格迁移</h1><h2 id="什么是风格迁移"><a href="#什么是风格迁移" class="headerlink" title="什么是风格迁移"></a>什么是风格迁移</h2><p>如下图所示，不做赘述。</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/36.png" alt="1"></p><h2 id="深度学习网络究竟在学习什么"><a href="#深度学习网络究竟在学习什么" class="headerlink" title="深度学习网络究竟在学习什么"></a>深度学习网络究竟在学习什么</h2><p>Zeiler M D, Fergus R. Visualizing and  understanding convolutional networks[C] European conference on computer vision. Springer, Cham, 2014: 818-833. </p><p>通过对激活程度最高单元的可视化展示可知，神经网络的浅层往往学习的是线条、颜色、明暗等局部特征，而深层学习到的则是例如车轮、狗、人脸等高级的、全局的特征，如下图所示</p><p><img src="/2018/08/09/mooc-深度学习工程师-4-卷积神经网络/37.png" alt="1"></p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>Gatys L A, Ecker A S, Bethge M. A neural algorithm of artistic style[J]. arXiv preprint arXiv:1508.06576, 2015. </p><p>最初生成网络生成的图片是一副随机初始化的早点，之后使用梯度下降优化损失函数，使得Generated图片的内容逐渐靠近Content图片，而风格逐渐靠近Style图片，所以损失函数有如下的形式：</p><script type="math/tex; mode=display">J(G)=\alpha J_{content}(C,G)+\beta J_{style}(S,G)</script><p>虽然说一般只会用一个参数，但是为了和论文保持一致用了2个。</p><h3 id="内容损失函数"><a href="#内容损失函数" class="headerlink" title="内容损失函数"></a>内容损失函数</h3><p>根据深度学习网络学习的内容，我们假设在一个预训练好的网络，比如VGG网络中第$l$层表达了图形的内容，令$a^{<a href="C">l</a>}$和$a^{<a href="G">l</a>}$是第$l$层的输出，则令</p><script type="math/tex; mode=display">J_{content}(C,G)=\frac{1}{2}||a^{[l](C)}-a^{[l](G)}||^2</script><h3 id="风格损失函数"><a href="#风格损失函数" class="headerlink" title="风格损失函数"></a>风格损失函数</h3><p>内容比较好定义，那如何定义风格呢？我们把通道数总是称为特征数，如果通道A与通道B总是同时被激活，即某两种特征总是一起出现，那么就可以认为是一种风格。令$a_{i,j,k}^{[l]}$是第$l$层在通道$k$上位于$(i,j)$的输出，则定义第$l$层的风格矩阵$G^{[l]}(n_c^{[l]}\times n_c^{[l]})$：</p><script type="math/tex; mode=display">G_{kk'}^{[l]}=\sum_{i=1}^{n_H^{[l]}}\sum_{j=1}^{n_W^{[l]}}a_{ijk}^{[l]}a_{ijk'}^{[l]}</script><p>则有</p><script type="math/tex; mode=display">J_{style}^{[l]}(S,G)=||G^{[l](S)}-G^{[l](G)}||_F^2 = \sum_{k}\sum_{k'}(G_{kk'}^{[l](S)}-G_{kk'}^{[l](G)})^2</script><p>由于加入的层数越多模拟的风格越好，所以</p><script type="math/tex; mode=display"> J_{style}(S,G)=\sum_l{\lambda^{[l]}J_{style}^{[l]}(S,G)}</script><p>综述就可以完成风格迁移。</p><h1 id="一维和三维的卷积"><a href="#一维和三维的卷积" class="headerlink" title="一维和三维的卷积"></a>一维和三维的卷积</h1><p>其实理解了2维之后，1维和3维的情况就很容易啦。1维又称序列模型，比如心电图峰值数据，典型使用RNN处理，但是仍然有人在使用CNN处理。3维由骨骼CT图像和电影。</p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-深度学习工程师-3-结构化机器学习项目</title>
      <link href="/2018/08/06/mooc-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E7%A8%8B%E5%B8%88-3-%E7%BB%93%E6%9E%84%E5%8C%96%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE/"/>
      <content type="html"><![CDATA[<p>这一部分可能和<a href="http://wang22ti.com/2018/06/05/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE2%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/">学习理论</a>比较接近，但是听完后会发现十分的工程化、经验化。但是由于神经网络的复杂性，当模型表现不好时，有相当多可能的做法：</p><p><img src="/2018/08/06/mooc-深度学习工程师-3-结构化机器学习项目/1.png" alt="1"></p><p>如何选择呢？</p><h1 id="正交化"><a href="#正交化" class="headerlink" title="正交化"></a>正交化</h1><p>所谓<code>正交化（orthogonalization）</code>，就是要求改变参数的时候只有一项性能指标发生改变，例如在汽车中方向盘只改变方向，油门只提高速度，刹车只减速。在机器学习中，有四个性能指标：</p><div class="table-container"><table><thead><tr><th style="text-align:center">性能指标</th><th style="text-align:center">正交化方法</th></tr></thead><tbody><tr><td style="text-align:center">fit training set well on cost function</td><td style="text-align:center">更复杂的神经网络、更好的优化算法、换一个网络架构</td></tr><tr><td style="text-align:center">fit dev set well on cost function</td><td style="text-align:center">正则化、更大的训练集、换一个网络架构</td></tr><tr><td style="text-align:center">fit test set on cost function</td><td style="text-align:center">更大的开发集</td></tr><tr><td style="text-align:center">performs well in real world</td><td style="text-align:center">改变开发集或者损失函数</td></tr></tbody></table></div><p>由于early stopping不是一个正交化的方法，所以吴老师很少使用。</p><h1 id="单一数字评估指标"><a href="#单一数字评估指标" class="headerlink" title="单一数字评估指标"></a>单一数字评估指标</h1><p>当开始机器学习项目的时候，设置单一的评估指标是很有效的，只要观察该指标就知道模型是变好了还是变坏了。比如<code>查全率（precision）</code>和<code>查准率（recall）</code>的调和平均数，比如各个分指标的加权平均数。另外一个方法是将某一个指标作为优化目标，其他指标作为约束条件，建立一个简单的优化模型。</p><p>其中精确率和召回率的定义如下</p><p><img src="/2018/08/06/mooc-深度学习工程师-3-结构化机器学习项目/2.png" alt="1"></p><script type="math/tex; mode=display">Precision = \frac{TP}{TP+FP} \\ Recall = \frac{TP}{TP+FN}</script><h1 id="训练-开发-测试集划分（一）"><a href="#训练-开发-测试集划分（一）" class="headerlink" title="训练/开发/测试集划分（一）"></a>训练/开发/测试集划分（一）</h1><p>除了单一的指标，开发集的选择也是十分重要的，要保证训练集的分布和开发集是基本相同的。在机器学习时代，训练集和测试集的比例是7:3或者三者的比例是6:2:2。当数据比较少的时候是合理的，比如100到10000。但是在深度学习的时代需要更大的数据集，比例可能为98:1:1。由于测试集是用在系统开发完之后用以对系统性能进行评估的，所以大小要使得评估结果有足够的置信度。</p><p>如果发现评估指标和预期效果不一致的时候，需要改变开发/测试集或者指标。不一致的原因可能是有意想不到的额外因素，比如在对猫的分类中的色情图片；还有可能是测试集和开发集的分布意外的不同，比如一个是精美的专业的，另外一个是随意的业余的。</p><h1 id="和人的水平进行对比"><a href="#和人的水平进行对比" class="headerlink" title="和人的水平进行对比"></a>和人的水平进行对比</h1><p>比较机器和人的表现的原因为：机器学习的效果变好了，甚至在一些领域接近了人的水平；当机器的水平超过人类时，得益于其效率会有很好的产出。更重要的是，人在很多领域已经做得很好，十分接近理论最优（Bayes optimal），如下图所示</p><p><img src="/2018/08/06/mooc-深度学习工程师-3-结构化机器学习项目/3.png" alt="1"></p><p>之所以机器在超过人之后进步会变慢，一方面是因为人的水平已经十分接近贝叶斯误差了，另一方面更重要的是在此之后又很多本来可以使用的方法变得无效了，比如通过人的努力获得标注的训练数据、依靠人的观察力分析哪里还可以提高，方便的误差方差分析……根本来说，此前是依靠人的基础的、感性的智慧取得进步，而后的进步则来自人更加抽象、高级的智慧了。</p><p>其中，什么是方便的误差方差分析呢？如果将人的水平作为贝叶斯误差的近似，则人小于训练集的误差称为<code>可避免误差（avoidable error）</code>，将训练集小于开发集上的误差称为方差，则当可避免误差大于方差的时候，可以认为模型还不够好，误差大于方差；反之则方差大于误差。这在很多场合比直接将贝叶斯误差设为0要好得多。</p><p>要知道常言道，人与人的差距比人与狗的差距还大，人的哪一种水平可以作为贝叶斯误差的估计呢？一般人的业余水平？普通职业水平？高的职业水平？高水平职业团队水平？比如在医学骨骼鉴别中分别为3%以上、1%、0.7%、0.5%，于是我们知道贝叶斯误差一定小于0.5%，所以尽可能使用最小的误差作为人类水平。当然，这样的训练样本也很难得，很多论文中对于人类水平的定义也不一样，一般只要超过普通职业水平，就也可以被认为也是人类水平，这样的系统也具备了部署的价值。</p><p>如果机器已经超过了人了，该怎么办呢？此时无法得知是模型过拟合了还是人类水平没有达到贝叶斯误差的水平。如果此前规定的人类水平是高水平职业团队的，那么很难依靠直觉判断进一步优化的方向。这样的问题包括在线广告推荐、产品推荐、物流预测、偿款预测等等，而这些问题都是有海量结构化的数据的，没有自然感知。而在自然感知领域，机器还是很难超过人类的，实现的包括部分的语音识别、图像识别、医学任务。</p><h1 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h1><p>当模型还没有达到人的水平的时候，应该人工检查算法中犯的错误，这就是<code>误差分析（error analysis）</code>，它可以告诉我们这个错误是否值得被改进。比如一个识别猫的程序，在预测值为猫的图片里存在一定数量的狗，要不要花很长时间去设计排除狗的算法呢？我们需要手动地一张一张看开发集中被标记为猫的图片里有多少的狗，如果狗占了50%，那么是可能值得的，因为可以使误差一下下降一半；如果是5%，那么就要很慎重地考虑了。这类似于体系结构中的Amdahl定律，把精力花在最重要的事情上。</p><p>有时在做误差分析的时候可以同时并行评估几个想法。比如有多个改进识别猫的程序，剔除狗的影响、剔除大型猫科动物的影响、更好地处理模糊图像，可以画出下面的这张表：</p><p><img src="/2018/08/06/mooc-深度学习工程师-3-结构化机器学习项目/4.png" alt="1"></p><p>中途也可以加入新的列比如滤镜。最后很容易地，在这个例子中，应该优先优化模糊和大型猫科动物。</p><p>在误差分析中，如果发现有些训练样本中的标签是错误的该怎么办呢？由于深度学习算法对训练集中的随机误差具有相当好的健壮性，所以如果确认训练样本中的错误足够随机，比如偶然地敲错键盘，那么不管他可能也没什么问题。但是算法对于<code>系统性（systematic）</code>的误差就没有那么健壮了，比如某个人一直把白色的狗标记为猫。</p><p>如果错误是在开发集或者测试集上呢？那么就在上图中增加一列统计错误标记的比例，并增加一定的备注。如果发现这个比例已经影响到结果的评估了，即错误标记带来的误差在所有误差中的比例已经很大了，那么就去修正它。修正要同时在开发和测试集合进行，以确保它们是同分布的；同时无论算法是否预测正确的样本，都应该被修正，否则偏差可能更大；此外保持开发和测试集合同分布是很重要的，训练集是可以略有不同的，也是很常见的。</p><p>总之，要承认这种方法是有重大意义的，虽然没有什么技术含量，虽然十分无趣繁琐，但是确实要这么做，也不用羞于承认自己这么做。</p><h1 id="用快速原型-迭代的方法开发系统"><a href="#用快速原型-迭代的方法开发系统" class="headerlink" title="用快速原型+迭代的方法开发系统"></a>用快速原型+迭代的方法开发系统</h1><p>对于一个采用神经网络解决的问题，改进的方法实在是太多了，不可能面面俱到。所以一般的策略是</p><ol><li>设计开发/测试集以及单一的数字评估指标</li><li>建立快速简陋的模型</li><li>使用偏差/方差权衡以及误差分析确定主要因素</li><li>根据主要因素迭代改进</li></ol><p>如果在该领域十分有经验，那么原型可以稍微复杂一些；如果在该领域，准确的说是该问题已经有相当成熟的论文，那么可以更复杂一些。但是无论如何吴老师都不推荐第一次处理某问题就使用十分复杂的模型。大多数团队都是想得太复杂导致浪费了时间。</p><p>当然，如果目标不是解决某个问题，而是提出新的机器学习算法，就另当别论了，这是完全不同的目标。</p><h1 id="训练-开发-测试集划分（二）"><a href="#训练-开发-测试集划分（二）" class="headerlink" title="训练/开发/测试集划分（二）"></a>训练/开发/测试集划分（二）</h1><p>开发测试集的分布必须相同，而训练集和它们基本相同即可，并不需要完全相同。比如有20万张爬虫得到的图片，1万张用户上传的图片，正确的做法不是将它们完全混合打散后进行划分，而是留一部分用户的图片，比如5000张单独作为开发集和训练集，剩下的和所有爬虫得到的混合后作为训练集。</p><p>需不需要把收集到的数据都用掉？不一定。当在训练集表现良好而在开发集反之时，由于训练集的分布和开发集的分布不同，比如训练集都是清晰容易识别的图片而开发集都是模糊难识别的，所以此时并不能断言模型过拟合了。要弄清楚是过拟合还是分布不同，需要再定义一个<code>训练-开发集（Training-dev set）</code>，它的分布和训练集相同（即从训练集中随机抽取），但是不会用于训练，而是用来作为和开发集的对照组。在方差很大的情况下，如果训练-开发误差和训练误差相差很大，那么可以断言是过拟合了；反之则说明方差来自于训练集和开发集的分布不同，或者叫<code>数据不匹配（data mismatch）</code>。</p><p>所以最终关注的数据有人类水平误差、训练集误差、训练-开发集误差、开发误差、测试误差，在大多数情况下它们是递增的，相邻两项的差距分别表示了可避免偏差、方差、数据不匹配、开发集过拟合几个问题。在不同的情况下，牢记它们的定义和分布这个概念，分析起来不会吃力的。还可以结合下面这张表</p><p><img src="/2018/08/06/mooc-深度学习工程师-3-结构化机器学习项目/5.png" alt="1"></p><h1 id="处理数据不匹配"><a href="#处理数据不匹配" class="headerlink" title="处理数据不匹配"></a>处理数据不匹配</h1><p>如果误差主要是数据不匹配导致的，该如何处理呢？其实并无完全系统的方法，不过可以手动查看进行误差分析，搞清楚训练集和开发集之间的不同。比如语音后视镜的输入可能比一般语音输入有更多的地址，比室内的输入有更多的噪音。这样可以用各种方法，比如用<code>人工合成数据（artificial data synthesis）</code>加入噪音，使用生成对抗模型，有意识地收集更多相似数据，使得训练集更像开发集。</p><p>合成数据的时候需要注意的是，如果有1万小时的纯净语言和1小时的噪声，虽然人听起来没什么问题，但是模型很容易对噪音过拟合。同样的，用模型生成的车，或者一个游戏中出现的车来训练车的识别网络，也很有可能对那些车过拟合。</p><h1 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h1><p>当在开发智能后视镜的时候，如果已经有1万小时一般语音输入训练好的网络，而专门用于后视镜的语音只有1小时，怎么办呢？有人提出了<code>迁移学习（transfer learning）</code>，即利用已经训练好的网络对底层特征的把握，对其作修改后利用少量数据就可以完成模型的训练。如下图所示，将最后一层网络更换为了随机初始化的多层网络。</p><p><img src="/2018/08/06/mooc-深度学习工程师-3-结构化机器学习项目/6.png" alt="1"></p><p>如果新的数据很少，那么只训练新的最后的网络；反之可以对所有参数重新训练，对原网络的训练称为<code>预训练（pre-training）</code>，对新网络中原网络部分的训练称为微调<code>（fine tuning）</code>。</p><p>什么时候迁移学习是有效的呢？当然，任务A和任务B必须有相同的输入，比如图片或语音，其次任务A的数据比任务B的多得多，最后是任务A的特征对任务B是有意义的。由于单个任务A的数据对于任务B的价值一定小于任务B本身的数据，所以当没有满足第二个条件的时候，就不必如此劳神了。</p><h1 id="多任务学习"><a href="#多任务学习" class="headerlink" title="多任务学习"></a>多任务学习</h1><p>迁移学习的过程是串行的，在<code>多任务学习（muti-task learning）</code>中，单个神经网络同时进行多个任务，从每个任务学习到的知识都可以帮助其他任务的应用。比如在图像识别中要辨别有没有车、人、路牌、信号灯，正常是训练4个网络，但也可以只训练一个。该网络的输出是一个4维0-1向量，分别指示有没有对应的物体，和softmax不同的是可以判定同时出现了多个物体。其损失函数为</p><script type="math/tex; mode=display">\frac{1}{m}\sum_{i=1}^{m}{ \sum_{j=1}^4{L(\hat{y}_j^{(i)},y_j^{(i)})} }</script><p>其中$L$通常是用逻辑回归的交叉熵。由于识别这几个物体都需要使用几个十分底层的特征，所以同时训练4个任务反而比分别训练效果要好。如果一张图片只有部分标签，如有人无车，而不知道有没有路牌和信号灯怎么办呢？并不影响，求和中只对有标记的操作即可。总结起来，多任务学习使用的条件有：</p><ol><li>多个任务之间共享相同的底层特征</li><li>通常情况下，每个任务的数据量是相似的</li><li>可以训练一个可以处理所有任务的大型网络</li></ol><p>多任务学习和迁移学习相比并不那么常用，不过物体检测是个例外。</p><h1 id="端到端学习"><a href="#端到端学习" class="headerlink" title="端到端学习"></a>端到端学习</h1><p>近期神经网络最大的进展就是<code>端到端学习（end-to-end learning）</code>的兴起，简而言之以前一些任务需要多个环节才能完成，而现在用一个神经网络去代替（这让很多从事多年中间件的人很头大）。端到端学习的一个挑战是需要大量的数据。所以在数据量小的时候，传统的方法也是很好的。比如门禁系统先识别脸的位置，之后再用所有员工的脸与之比对；机器翻译中需要先提取文本特征，之后逐个转换并组合；从图片判断骨骼年龄需要分割每块骨骼，然后根据每一块的结果得到结论。</p><p>如何判断端到端学习是否适用呢？首先要理解端到端学习的优缺点。其优点包括</p><ol><li>真正的“让数据说话”，即完全依靠神经网络去提取统计特征，不加入任何人类的知识，尤其是成见。比如早期语音识别系统中强迫机器识别音节——这可能对人类语言学家来说是有意义的，但是可能对机器来说是没有意义的。</li><li>减少了组件的设计，简化了工作流程。</li></ol><p>其缺点包括：</p><ol><li>需要大量的端到端数据。</li><li>排除了一些的确很有用的人工设计的组件，即没有利用已有的人的智慧，虽然机器学习研究者都很鄙视手动设计的东西。但是神经网络的知识一方面来自数据，另一方面来自人；当有成吨的数据的时候，人的知识当然并不重要，不过在数据不大的时候，精心设计的组件确实可以将知识直接注入网络。</li></ol><p>于是，决定时候使用端到端学习的因素就是：是否有足够多的端到端数据，使得网络能够学到足够复杂的端到端映射。</p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-深度学习工程师-1-神经网络和深度学习</title>
      <link href="/2018/07/31/mooc-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E7%A8%8B%E5%B8%88-1-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p>这部分是在学习完斯坦福CS229中监督学习和学习理论两部分后学习的，分类还是机器学习。</p><p><a href="http://wang22ti.com/2018/05/25/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE1%E2%80%94%E2%80%94%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/">mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习</a></p><p><a href="http://wang22ti.com/2018/06/05/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE2%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/">mooc-吴恩达老师在斯坦福大学的机器学习公开课2——学习理论</a></p><p>这是第一章——神经网络与深度学习。</p><h1 id="深度学习概论"><a href="#深度学习概论" class="headerlink" title="深度学习概论"></a>深度学习概论</h1><h2 id="什么是神经网络"><a href="#什么是神经网络" class="headerlink" title="什么是神经网络"></a>什么是神经网络</h2><p>标准的开头，是以房屋价格预测引出了<code>Relu（Rectified Linear Unit，修正线性单元）</code>函数和<code>神经元（neuron）</code>的概念，以及如下图的多层神经网络：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/1.png" alt="1"></p><h2 id="用神经网络进行监督学习"><a href="#用神经网络进行监督学习" class="headerlink" title="用神经网络进行监督学习"></a>用神经网络进行监督学习</h2><p>现有的有实际应用价值的神经网络大多数属于监督学习，对于分类和回归的基本介绍，给出了一些例子：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/2.png" alt="2"></p><p>给出了<code>卷积神经网络（CNN，Convolution Neural Network）</code>、<code>循环神经网络（RNN，Recurrent Neural Network）</code>、<code>结构化数据（structured data）</code>、<code>非结构化数据（Unstructured data）</code>的概念。其中CNN主要用于处理图片，RNN主要用于处理一维序列数据，在自动驾驶中需要使用混合的网络。</p><h2 id="为什么深度学习会兴起"><a href="#为什么深度学习会兴起" class="headerlink" title="为什么深度学习会兴起"></a>为什么深度学习会兴起</h2><p>深度学习的兴起得益于信息化社会产生的大量数据、更快的运算速度和神经网络算法的发展创新。和传统的机器学习算法相比，深度学习的优势表现在处理大规模<code>带有标记（labeled）</code>的数据上。</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/3.png" alt=""></p><p>其中，更快的运算速度也给算法的改进带来的便捷与可能：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/4.png" alt=""></p><h1 id="神经网络基础"><a href="#神经网络基础" class="headerlink" title="神经网络基础"></a>神经网络基础</h1><h2 id="二分分类（binary-classification）"><a href="#二分分类（binary-classification）" class="headerlink" title="二分分类（binary classification）"></a>二分分类（binary classification）</h2><p>在图像的二分类问题（判断是不是猫）中，将$64<em>64</em>3$的图片的特征向量定义为$x_{(64<em>64</em>3)*1}$。目标是以$x$作为输入，输出结果标签$y\in\{0,1\}$。和之前不同的是，在样本矩阵$x\in\R^{n\times m}$中，单个样本是以列向量的形式出现的；而$y \in \R^{1\times m}$。</p><h2 id="logistic回归"><a href="#logistic回归" class="headerlink" title="logistic回归"></a>logistic回归</h2><p>先介绍了sigmoid函数，不赘述。</p><p>接着是logistic回归的损失函数，由于最小二乘法在这里不是凸优化问题，所以使用Loss函数和Cost函数（前者用于单样本，后者用于多样本）：</p><script type="math/tex; mode=display">L(\hat{y},y)= -(y\log{\hat{y}}+(1-y)\log{(1-\hat{y})})  \\ J(\theta)=\frac{1}{m}\sum_{i=1}^{m}{L(\hat{y}^{(i)},y^{(i)})}</script><p>之后讲了梯度下降和导数，不赘述。</p><h2 id="计算图（Computation-Graph）"><a href="#计算图（Computation-Graph）" class="headerlink" title="计算图（Computation Graph）"></a>计算图（Computation Graph）</h2><p>计算图解释了神经网络优化过程中的前向和后向，如下图所示</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/5.png" alt=""></p><h2 id="logistic回归中的梯度下降"><a href="#logistic回归中的梯度下降" class="headerlink" title="logistic回归中的梯度下降"></a>logistic回归中的梯度下降</h2><p>先将了逻辑回归中单样本的梯度下降，即计算每一个参数的偏导数后减去与学习率的乘积，这里用到了链式法则。和在机器学习课程中学到的，最后的形式和梯度下降很像。</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/6.png" alt=""></p><p>之后是$m$个样本的情况：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/7.png" alt=""></p><h2 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h2><p>注意到上述的优化算法有2层显式循环，在数据量越来越大、规模越来越大的神经网络中，这显然是不可接受的，所以引入<code>向量化（Vectorization）</code>对其加速。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">a = np.random.rand(<span class="number">10000000</span>)</span><br><span class="line">b = np.random.rand(<span class="number">10000000</span>)</span><br><span class="line"></span><br><span class="line">tic = time.time()</span><br><span class="line">c = np.dot(a, b)</span><br><span class="line">toc = time.time()</span><br><span class="line">print(c)</span><br><span class="line">print(<span class="string">"Vectorized version:"</span>, <span class="number">1000</span> * (toc - tic), <span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line">tic = time.time()</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a_, b_ <span class="keyword">in</span> zip(a, b):</span><br><span class="line">    c += a_*b_</span><br><span class="line">toc = time.time()</span><br><span class="line">print(c)</span><br><span class="line">print(<span class="string">"Vectorized version:"</span>, <span class="number">1000</span> * (toc - tic), <span class="string">"ms"</span>)</span><br></pre></td></tr></table></figure><p>从表面上看，向量化只是使用了<code>np.dot()</code>一类的函数代替了for-loop的过程；实质上是因为这一类函数使用了<code>SIMD（single instruction multiple data）</code>的并行指令，这在CPU和GPU上都是成立了，只不过GPU更擅长。在吴恩达老师的电脑上取得了约300的加速比，我的也差不多：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/8.png" alt=""></p><p>经验法则是：<code>尽可能地避免使用显式的For-loop循环</code>。在python中numpy中就有很多向量化的函数。</p><h2 id="向量化的logistic回归"><a href="#向量化的logistic回归" class="headerlink" title="向量化的logistic回归"></a>向量化的logistic回归</h2><p>利用向量化的表达方式，可以将logistic中的for-loop循环替代掉，示意代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = <span class="number">100</span></span><br><span class="line">m, n = <span class="number">10</span>, <span class="number">3</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">X = np.zeros(shape=(n, m))</span><br><span class="line">Y = np.zeros(shape=(<span class="number">1</span>, m))</span><br><span class="line">W = np.zeros(shape=(n, <span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(loop):</span><br><span class="line">    <span class="comment"># 正向</span></span><br><span class="line">    Z = np.dot(W.T, X) + b</span><br><span class="line">    A = sigmoid(Z)</span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    dZ = A - Y</span><br><span class="line">    dW = np.dot(X, dZ.T) / m</span><br><span class="line">    db = np.sum(dZ) / m</span><br><span class="line">    W -= alpha * dW</span><br><span class="line">    b -= alpha * db</span><br></pre></td></tr></table></figure><h2 id="python中的广播与向量"><a href="#python中的广播与向量" class="headerlink" title="python中的广播与向量"></a>python中的广播与向量</h2><p>为了使得代码更加高效、简洁，numpy引入了<code>广播（broadcast）</code>的机制，可以让shape不同的ndarray直接按元素进行四则运算。上述代码中已经有所展示，其基本规则如下图所示：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/9.png" alt=""></p><p>其优势在于提高了代码的表现力，一行代码可以完成很多操作；缺点在于可能因此写出很难修改的bug。类似地可以运行以下的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">X = np.random.randn(<span class="number">5</span>)</span><br><span class="line">print(X.shape)</span><br><span class="line">print(np.dot(X, X.T))</span><br><span class="line"></span><br><span class="line">X = np.random.randn(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">print(X.shape)</span><br><span class="line">print(np.dot(X, X.T))</span><br></pre></td></tr></table></figure><p>会有如此输出：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/10.png" alt=""></p><p>之所以不同是因为X = np.random.randn(5)返回的ndarray的<code>秩（rank）</code>为1，即它既不是一个行向量也不是一个列向量。所以为了避免如此带来的错误，在编写神经网络的时候要避免使用rank=1的ndarray；如果因为某种原因生成了，要使用reshape()函数将之转换为行向量或列向量。同时也可以使用声明机制保证避免这样的事情发生：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(a.shape == (<span class="number">5</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="Jupyter-Ipython笔记本的快速指南"><a href="#Jupyter-Ipython笔记本的快速指南" class="headerlink" title="Jupyter/Ipython笔记本的快速指南"></a>Jupyter/Ipython笔记本的快速指南</h2><p>哇，看到这里简直被吴老师的良心所感动，一个泰山北斗级的巨佬亲自教我们如何避免写代码的bug也就罢了，还专门教如何使用工具。他的ipython是用在Coursera，不过很快我也发现Pycharm也支持：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/11.png" alt=""></p><p>这个东西充分利用了makrdown和python的交互特性，使得可以在markdown中嵌入可执行的代码块，名副其实地适合当Notebook。不过我的笔记都是放在博客上的，所以就还是使用py的格式吧哈哈。</p><h2 id="logistic回归损失函数的解释"><a href="#logistic回归损失函数的解释" class="headerlink" title="logistic回归损失函数的解释"></a>logistic回归损失函数的解释</h2><p>见监督学习的笔记，不赘述。</p><h1 id="浅层神经网络"><a href="#浅层神经网络" class="headerlink" title="浅层神经网络"></a>浅层神经网络</h1><h2 id="神经网络概览"><a href="#神经网络概览" class="headerlink" title="神经网络概览"></a>神经网络概览</h2><p>最基本的神经网络可以看作神经元的叠加，其中用带有中括号的上标表示表示层数，比如</p><script type="math/tex; mode=display">z^{[1]}=W^{[1]}x+b^{[1]}</script><p>不用小括号是因为小括号的上标表示样本数。</p><h2 id="神经网络的表示"><a href="#神经网络的表示" class="headerlink" title="神经网络的表示"></a>神经网络的表示</h2><p>如蓝色所示，神经网络分为输入层、隐藏层和输出层。在计算层数的时候，不考虑输入层，所以如红色所示，这是一个2层的神经网络。为了统一的表达，输入向量$X$被记为$a^{[0]}$，输出$\hat{y}$被记为$a^{[2]}$，a表示activation即激活的意思。类似的，每一层的参数如右下角的紫色所示。除了输入层每一层的激活函数都有参数，如绿色所示。</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/12.png" alt=""></p><p>对于上图的神经网络，需要注意的是向量化后每层输入输出的维数，这是单样本的情况：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/13.png" alt=""></p><p>多样本的情况，实际就是继续进行<code>堆叠（stack）</code>，从表示上换成大写字母，上述维度为1的矩阵换为样本数量：</p><script type="math/tex; mode=display">Z^{[1]}= W^{[1]}X+b^{[1]} \\ A^{[1]}=\sigma(z^{[1]}) \\ Z^{[2]}=W^{[2]}A^{[2]}+b^{[2]} \\ A^{[2]}=\sigma(Z^{[2]})</script><p>于是我们完成了2层神经网络的向量化，其实更深的神经网络大多是重复这样的过程。</p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p>在搭建神经网络的时候，重要的是选择隐藏层和输出层的激活函数。迄今为止我们用的激活函数都是logistic函数，这并不是唯一的选择，<a href="https://www.jiqizhixin.com/articles/2017-10-10-3" target="_blank" rel="noopener">机器之心</a>对此有所总结。</p><h3 id="tanh-z"><a href="#tanh-z" class="headerlink" title="tanh(z)"></a>tanh(z)</h3><p>双曲正切函数几乎总是比sigmoid函数表现得好，它可以看作是sigmoid函数的平移，将输出的平均值控制在0附近。</p><script type="math/tex; mode=display">g(z)=\tanh{z}=\frac{e^z-e^{-z}}{e^z+e^{-z}}\in (-1, 1)</script><p>现在几乎不使用sigmoid函数了，唯一的例外的输出层。由于不同层的激活函数可能不同，所以会在函数符号上也加上带有方括号的上标。</p><h3 id="Relu"><a href="#Relu" class="headerlink" title="Relu"></a>Relu</h3><p>sigmoid函数和Relu函数都有一个缺点，即当$z$过大或过小的时候函数的斜率很小，会拖慢梯度下降的速度。所以机器学习中最受欢迎的是Relu函数</p><script type="math/tex; mode=display">g(z)=max(0, z)</script><p>虽然在$z=0$处导数不存在，但是实际上遇到0向量是很罕见的，何况还可以定义一下$z=0$处的导数。Relu函数几乎已经成为激活函数的默认选择了。</p><h3 id="带泄露的Relu（leaky-Relu）"><a href="#带泄露的Relu（leaky-Relu）" class="headerlink" title="带泄露的Relu（leaky Relu）"></a>带泄露的Relu（leaky Relu）</h3><p>虽然Relu函数在$z&lt;0$时的导数为0，但是在实践中这并不影响，而且它还有一个变种叫<code>带泄露的Relu（leaky Relu）</code>，在在$z&lt;0$时的导数是一个较小的常数，在实践中带泄露的Relu表现比Relu好些。</p><script type="math/tex; mode=display">g(z)=max(\alpha z, z),\alpha \in (0, 1)</script><h2 id="为什么需要非线性的激活函数"><a href="#为什么需要非线性的激活函数" class="headerlink" title="为什么需要非线性的激活函数"></a>为什么需要非线性的激活函数</h2><p>如果使用的是恒等激活函数（线性激活函数），那么无论有多少层，输出的只不过是出入特征的线性组合，所以不如去掉隐藏层。除非引入非线性的函数，否则是得不到比线性函数更复杂的函数的。</p><p>除了一些和压缩有关的非常特殊的情况，只有在输出层才会使用线性激活函数。</p><h2 id="激活函数的导数"><a href="#激活函数的导数" class="headerlink" title="激活函数的导数"></a>激活函数的导数</h2><p>在进行反向传播的时候，必须要计算激活函数的导数。对于sigmoid函数</p><script type="math/tex; mode=display">g'(x)=g(x)(1-g(x))=a(1-a)</script><p>对于tanh函数</p><script type="math/tex; mode=display">g'(x)=1-(g(x))^2=1-a^2</script><p>Relu函数就不必赘述啦。</p><h2 id="神经网络中的梯度下降"><a href="#神经网络中的梯度下降" class="headerlink" title="神经网络中的梯度下降"></a>神经网络中的梯度下降</h2><p>2层神经网络的梯度下降在单样本的情况下如下图所示，需要牢记的是$dz$是$\frac{\part L}{\part z}$的简写，之后用链式法则从后往前求解即可。</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/14.png" alt=""></p><p>在多样本的情况下很类似，其中参数<code>axis=1</code>表示横向求和，<code>keepdims=True</code>是为了避免秩为1的ndarray出现。</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/15.png" alt=""></p><h2 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h2><p>在logistic回归中，将权重全都初始化为0是OK的，但是在神经网络中怎么做会使得梯度下降完全失效。因为所有的神经元都完全对称的，这导致所有参数每一行都是一样的，通过归纳可知在任何轮迭代之后所有的神经元都是一样的，这就提取不出新的特征，网络完全无效。所以在python中可以如此初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w_1 = np.random.randn((<span class="number">2</span>, <span class="number">2</span>)) * <span class="number">0.01</span></span><br><span class="line">b_1 = np.zeros((<span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">#......</span></span><br></pre></td></tr></table></figure><p>之所以要加上0.01的系数是防止使用sigmoid函数或tanh函数的时候梯度很小，在深层的神经网络中，可能要尝试0.01以外的数。</p><h1 id="深层神经网络"><a href="#深层神经网络" class="headerlink" title="深层神经网络"></a>深层神经网络</h1><p>深浅是相对的，有些任务只有深层的神经网络才能解决，用参数$l$表示神经网络的层数。</p><h2 id="深层网络中的前向传播"><a href="#深层网络中的前向传播" class="headerlink" title="深层网络中的前向传播"></a>深层网络中的前向传播</h2><p>有了此前的学习，可以写出前向传播的递推形式：</p><script type="math/tex; mode=display">Z^{[l]}=W^{[l]}A^{[l-1]}+b^{[l]} \\ A^{[l]}=g^{[l]}(Z^{[l]})</script><p>整个前向传播就是递推公式关于层数$l$的循环。</p><h2 id="核对矩阵的维数"><a href="#核对矩阵的维数" class="headerlink" title="核对矩阵的维数"></a>核对矩阵的维数</h2><p>为了减少代码中的错误，一个比较好的方法是仔细核对每一层矩阵的维数。令$n^{l}$表示第$l$行特征的数量（神经元的个数），则有：</p><script type="math/tex; mode=display">W^{[l]},dW^{[l]}:(n^{[l]},n^{[n-1]}) \\ Z^{[l]},dZ^{[l]},A^{[l]},dA^{[l]}:(n^{[l]}, m) \\ b^{[l]},db^{[l]}:(n^{[l]},1)</script><h2 id="为什么深层网络是有效的"><a href="#为什么深层网络是有效的" class="headerlink" title="为什么深层网络是有效的"></a>为什么深层网络是有效的</h2><p>一种解释是最早提取的是简单的特征，例如边缘，之后的层通过这个特征的组合可以提取更加复杂的特征，例如眼睛的轮廓，如下图所示：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/16.png" alt=""></p><p>另一种理论来自于电路理论，为了实现相同功能的电路，浅层的电路网络需要的电子原件是以指数的方式增加的：</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/17.png" alt=""></p><p>实际上“深层网络”只是“具有很多隐藏层的神经网络”的包装说法。不管公关层面的问题，深层网络的确是有效的，但是真正搭建神经网络的时候往往是从逻辑回归开始，把层数作为超参数进行调试。不过有些人十分喜欢使用特别特别深邃的神经网络，其实只有一小部分问题的确适合这么做。</p><h2 id="搭建深层神经网络"><a href="#搭建深层神经网络" class="headerlink" title="搭建深层神经网络"></a>搭建深层神经网络</h2><p>整个神经网络的计算分为前向传播和后向传播，其过程如下图中绿色箭头所示，红色箭头表示反向传播。需要注意的是前向传播的过程中需要缓存$Z^{[l]},W^{[l]},b^{[l]}$。</p><p><img src="/2018/07/31/mooc-深度学习工程师-1-神经网络和深度学习/18.png" alt=""></p><p>于是有反向传播的递推形式：</p><script type="math/tex; mode=display">dZ^{[l]}=dA^{[l]}*{g^{[l]}}'(Z^{[l]}) \\ dW^{[l]}=\frac{1}{m}dZ^{[l]}A^{[l-1]^T} \\ db^{[l]}=\frac{1}{m}np.sum(dZ^{[l]},axis=1,keepdim=True) \\ dA^{[l-1]}=W^{[l]^T}dZ^{[l]}</script><p>其实可以发现整个算法即使只使用numpy来实现也不需要特别多的代码，然而网络输出的效果有时令吴老师都吃惊，这是因为复杂性不是来自算法而是来自数据。</p><h2 id="参数与超参数"><a href="#参数与超参数" class="headerlink" title="参数与超参数"></a>参数与超参数</h2><p>神经网络的参数是指$W,b$，超参数包括学习率$\alpha$、学习的轮数、隐藏层的数量、每个隐藏层神经元的数量、激活函数的选择等等，它们控制了$W,b$最后的值，即控制参数的参数。</p><p>其实深度学习还有其他一些超参数，包括momentum、mini bathch的大小、regularizations……会在第2部分进行讲解。</p><p>由于有如此多的超参数，实际上深度学习是一个很需要经验的过程，甚至由于数据的改变同一网络也会随时间改变。简而言之就是尝试，不停地尝试直到管用。下一部分的学习就是如何用系统化的方法尝试各种超参数的设置。</p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化</title>
      <link href="/2018/07/31/mooc-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E7%A8%8B%E5%B8%88-2-%E6%94%B9%E5%96%84%E6%B7%B1%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E8%AF%95%E3%80%81%E6%AD%A3%E5%88%99%E5%8C%96%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
      <content type="html"><![CDATA[<h1 id="深度学习的实用层面"><a href="#深度学习的实用层面" class="headerlink" title="深度学习的实用层面"></a>深度学习的实用层面</h1><h2 id="训练-开发-测试集"><a href="#训练-开发-测试集" class="headerlink" title="训练/开发/测试集"></a>训练/开发/测试集</h2><p>通常将所有的数据分为训练/开发/测试（train/development/test）三个集合，其中在传统的机器学习中占比为60/20/20，在大数据时代占比可以达到98/1/1，甚至是99.5/0.4/0.1。</p><p>有时候为了获得更大的数据集，可能导致训练集和开发测试集的分布并不相同。例如在识别猫的任务中训练集来自网络爬去，开发测试集来自网友上传，很有可能前者是制作精良的专业的而后者很随意很模糊。但无论如何开发集的数据要来自同一分布。</p><p>此外，如果不需要获得无偏误差，是可以不需要测试集的。</p><h2 id="偏差-方差"><a href="#偏差-方差" class="headerlink" title="偏差/方差"></a>偏差/方差</h2><p>几乎所有机器学习的从业人员都希望深刻理解偏差与方差，但它们易学难精，尤其是在深度学习中很少考虑偏差-方差权衡。在机器学习的基础上，该部分引入了最优误差（贝叶斯误差），提出了先偏差后方差的思路，此外不做赘述。</p><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><h3 id="L2正则化"><a href="#L2正则化" class="headerlink" title="L2正则化"></a>L2正则化</h3><p>当怀疑过拟合的时候，首先想到的应该是正则化，在逻辑回归中很常见的L2正则化：</p><script type="math/tex; mode=display">J(w,b) = \frac{1}{m}\sum_{i=1}^m{l(\hat{y}^{(i)},y^{(i)})}+\frac{\lambda}{2m}||w||_2^2</script><p>其中$||w||_2^2=\sum_{j=1}^{n_x}w_j^2=w^Tw$。不加上$b$的正则化项只是因为考虑到$w$已经是一个高位向量了，完全也可以加上。另外一个正则化的方法是L1正则化：</p><script type="math/tex; mode=display">\frac{\lambda}{2m}\sum_{j=1}^{n_x}|w_j|=\frac{\lambda}{2m}||w||_1</script><p>这样的正则化会导致$w$比较稀疏，有人说目的是压缩模型，但是吴老师反对这种观点。还有一个细节是lambda是python的保留字，所以要使用lambd来命名。</p><p>在神经网络中，有如下正则化表达式：</p><script type="math/tex; mode=display">J(w^{[1]},b^{[1]},\dots,w^{[l]}, b^{[l]})=\frac{1}{m}\sum_{i=1}^m{l(\hat{y}^{(i)},y^{(i)})}+\frac{\lambda}{2m}\sum_{l=1}^l{||w^{[l]}||_F^2}</script><p>其中$||w^{[l]}||_F^2=\sum_{i=1}^{n^{[l-1]}}{\sum_{j=1}^{n^{[l]}}{(w_{ij}^{[l]})^2}}$，被称为<code>弗罗贝尼乌斯范数（Frobenius norm）</code>，用下标F表示。由于线性代数的种种原因，没有叫“矩阵L2范数”，虽然这样看起来更自然。</p><p>于是就有反向传播：</p><script type="math/tex; mode=display">dw^{[l]}=(from \ back \ propgation) + \frac{\lambda}{m}{w^{[l]}}</script><p>因此弗罗贝尼乌斯范数有时被称为<code>权重衰减参数</code>，即它会占用原来反向传播的权重。吴老师在这门课对于正则化的有效性的解释也来自于此，即将模型像线性化的方向转变，从而了降低方差。</p><h3 id="Dropout正则化"><a href="#Dropout正则化" class="headerlink" title="Dropout正则化"></a>Dropout正则化</h3><p>还有一个非常实用的正则化——<code>Dropout（随机失活）正则化</code>，其基本思想是在训练每一个样本过程中随机令某些神经元失效，如下图所示：</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/1.png" alt="1"></p><p>常见gropout的实现方法是<code>反向随机失活inverted dropout</code>，以3层神经网络为例其基本过程为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d3 = np.random.rand(a3.shape[<span class="number">0</span>], a3.shape[<span class="number">1</span>]) &lt; keep_prob</span><br><span class="line">a3 = np.multiply(a3, d3)</span><br><span class="line">a3 /= keep_prob</span><br></pre></td></tr></table></figure><p>之所以有最后一行是为了确保a3的期望不发生变化，这在测试阶段是很重要的，由于我们不希望输出是随机的，所以此时也不会有dropout。当然，keep_prob的设置完全可以根据每一层神经元的数量而不同，在神经元较多的层中较低，反之则较高甚至是1.</p><p>为什么dropout正则化是有效的？因为它使得神经网络的权重不会集中于某个参数，相当于起到了收缩权重的效果，这和L2正则化是类似的。</p><p>dropout正则化的缺点是训练过程中的损失函数$J$是难以表达的。一个处理方法是先将所有的keep_prob设置为1，确保此时的损失函数是单调减的，然后再设置为期望的值。</p><h3 id="其他正则化方法"><a href="#其他正则化方法" class="headerlink" title="其他正则化方法"></a>其他正则化方法</h3><p><code>数据扩增（data augmentation）</code>：在处理图片的时候，可以通过反转、裁剪、扭曲等操作扩大训练集，不过这不如新的图片。</p><p><code>early stopping</code>：在训练过程中同时计算training error和dev error，会发现有曲线</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/2.jpg" alt="1"></p><p>在紫色点的时候有着中等大小的佛罗贝尼乌斯范数，停止训练即可。这种方法的缺点是不能独立的处理优化损失函数和防止过拟合两个过程，于是需要考虑的东西更加复杂。不过和L2正则化相比只需要进行一次梯度下降，不需要对超参数$\lambda$进行搜索。吴老师还是倾向于使用L2正则化的。</p><h2 id="正则化输入（Normalizing-inputs）"><a href="#正则化输入（Normalizing-inputs）" class="headerlink" title="正则化输入（Normalizing inputs）"></a>正则化输入（Normalizing inputs）</h2><p>正则化输入可以加快训练速度，它分为两步，第一步是零均值化：</p><script type="math/tex; mode=display">\mu=\frac{1}{m}\sum_{i=1}^m{x^{(i)}} \\ x=x-\mu</script><p>第二步是方差归一化：</p><script type="math/tex; mode=display">\sigma^2=\frac{1}{m}\sum_{i=1}^m{x^{(i)}}^2 \\ x =x/ \sigma^2</script><p>注意的是这个过程是在整个数据集上完成的。为什么这是有效的呢？直观的理解如下图所示</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/3.jpg" alt="1"></p><p>通过输入正则化，将样本空间从扁平状变为圆形，即将特征束缚在相似的范围中，因此就可以设置较大的学习率以提高训练速度。由于正则化并不会带来什么危害，所以吴老师经常不管特征差距如何也进行一次输入正则化操作。</p><h2 id="梯度爆炸与梯度消失"><a href="#梯度爆炸与梯度消失" class="headerlink" title="梯度爆炸与梯度消失"></a>梯度爆炸与梯度消失</h2><p>训练神经网络遇到的一个重要问题是<code>梯度爆炸与梯度消失（vanishing/exploding gradients）</code>，是指梯度在训练的过程中快速变大或变小，甚至以指数的方式。这也是此前神经网络无法向深层发展的重要原因。以最简单的例子说明，假设神经网络的每层仅有2个神经元，激活函数均为恒等函数，$b^{[l]}=0$。故有</p><script type="math/tex; mode=display">\hat{y}=w^{[l]}w^{[l-1]}\dots w^{[2]}w^{[1]}x</script><p>当初始化$w^{[l]}=1.5I$时有</p><script type="math/tex; mode=display">\hat{y}=w^{[l]}(1.5I)^{l-1}x</script><p>若L很大，则发生梯度爆炸。反之若$w^{[l]}=0.5I$，则发生梯度消失。</p><p>为了尽量避免梯度爆炸与梯度消失，有一种初始化的方法叫<code>Xavier初始化</code>，它令每一层$w$的方差初始化为输入特征数量的倒数。比如如果激活函数为Relu，则有</p><script type="math/tex; mode=display">w^{[l]}=np.randon.randn(shape) * np.sqrt(\frac{2}{n^{[l-1]}})</script><p>如果是tanh函数，则有</p><script type="math/tex; mode=display">w^{[l]}=np.randon.randn(shape) * np.sqrt(\frac{1}{n^{[l-1]}})</script><p>还有方法如下，但是吴老师并不常用：</p><script type="math/tex; mode=display">w^{[l]}=np.randon.randn(shape) * np.sqrt(\frac{2}{n^{[l-1]}+n^{[l]}})</script><p>其他参数都不如$w$重要。</p><h2 id="梯度检验"><a href="#梯度检验" class="headerlink" title="梯度检验"></a>梯度检验</h2><p>在进行反向传播的时候，如果不确定偏导$g(\theta)$是否正确，可以使用</p><script type="math/tex; mode=display">\frac{f(\theta+\epsilon)+f(\theta-\epsilon)}{2\epsilon}-g(\theta)</script><p>来检验，这实际是简单的微积分知识。实际操作中将所有的参数$w,b$联接为一个超大的向量$\theta$，于是有</p><script type="math/tex; mode=display">for\ each \ i: \\ d\theta_{approx}=\frac{J(\theta_1,\theta_2,\dots,\theta_i+\epsilon,\dots)+J(\theta_1,\theta_2,\dots,\theta_i-\epsilon,\dots)}{2\epsilon}</script><p>之后计算</p><script type="math/tex; mode=display">\frac{||d\theta_{approx}-d\theta||_2}{||d\theta_{approx}||_2+||d\theta||_2}</script><p>当$\epsilon=10^{-7}$时，若结果$<10^{-7}$，那就比较稳；如果$>10^{-3}$，就很不稳了。</10^{-7}$，那就比较稳；如果$></p><p>梯度检验很慢，只能用于debug的时候，在训练的时候需要关掉；在发现问题的时候，仔细检查是在哪个$i$；不要与dropout同时使用；使用的时候记得正则化项。</p><h1 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h1><p>这个部分的重点在于如何提高训练的速度。</p><h2 id="mini-batch"><a href="#mini-batch" class="headerlink" title="mini-batch"></a>mini-batch</h2><p>向量化使得一次性可以计算全部样本，可是当训练样本很大，比如5,000,000的时候，一次计算要花的时间也不少，却也只能进行一次梯度下降，所以一次使用$m$个样本进行训练，将之视为一个mini-batch并记为$x^{\{1\}}$。每一次梯度下降称为一个<code>iterator</code>，每一次完全遍历样本集称为一个<code>epoch</code>。</p><p>当使用mini-batch进行训练的时候，损失函数是抖动下降的</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/4.png" alt="1"></p><p>和随机梯度下降相比由于每次考虑了较多的样本，所以梯度的方向比较稳定。下图中蓝色表示batch梯度下降，紫色表示随机梯度下降，绿色表示mini-batch梯度下降。</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/5.png" alt="1"></p><p>通常，当样本数量大于2000的时候考虑使用mini-batch梯度下降，每个mini-batch的大小取2的整数幂为佳，一般不超过1024。</p><h2 id="指数加权平均"><a href="#指数加权平均" class="headerlink" title="指数加权平均"></a>指数加权平均</h2><p><code>指数加权平均（exponentially weighted average）</code>是很多优化算法的基础，从最基本的对气温的处理来看，设$\theta_t$为1年中第$t$天的气温，则使用</p><script type="math/tex; mode=display">v_0=0 \\ v_t=\beta v_{t-1}+(1-\beta)\theta_t</script><p>得到的向量$v_\theta$可以看作是对气温进行$\frac{1}{1-\beta}$天的平均，如下图所示，其中蓝色的点为原始气温数据，黄色线$\beta=0.5$，红色线$\beta=0.9$，绿色线$\beta=0.98$。</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/6.png" alt="1"></p><p>之所以名字中带有“指数”，是因为将递推式展开后较早数据的权重是以指数的方式递减的。虽然这种方法的精度不如滑动窗口平均，但是有着极小的内存开销和极快的速度，因此在机器学习中更常用。</p><p>实际上，由于初期有$v_0=0$，所以导致初期的数据较小，比如$\beta=0.98$时绿色线在初期应该很低。所以要使用如下公式进行<code>偏差修正（bias correction）</code>：</p><script type="math/tex; mode=display">v_t=\frac{v_t}{1-\beta^t}</script><p>从而才能真正得到上图绿色的线。</p><h2 id="动量梯度下降法"><a href="#动量梯度下降法" class="headerlink" title="动量梯度下降法"></a>动量梯度下降法</h2><p><code>动量（momentum）梯度下降算法</code>的速度总是快于标准的梯度下降，其基本思想时对梯度做指数加权平均，并用平均梯度做梯度下降。在进行mini-batch梯度下降的过程中，梯度总会沿着某个方向抖动，因此在做平均后可以在一定程度上消除这种抖动，减少无谓的下降，进而可以采用更大的学习率。如下图的三维图所示，蓝色是标准的梯度下降过程，红色是经过指数平均后的梯度下降过程，可见减少了$z$方向的抖动，增加了$xy$平面上每步的距离。</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/7.png" alt="1"></p><p>具体的实现为初始化$v_{dW}=v_{db}=\vec{0}$，之后在每轮迭代中有</p><script type="math/tex; mode=display">v_{dW}=\beta v_{dW}+(1-\beta)dW \\ v_{db}=\beta v_{db}+(1-\beta)db \\ W=W-\alpha v_{dW},b=b-v_{db}</script><p>其中$\beta=0.9$是一个健壮性很好的超参数。由于在10轮迭代之后就没有多少偏差了，所以一般不需要对其修正。</p><h2 id="RMSprop算法"><a href="#RMSprop算法" class="headerlink" title="RMSprop算法"></a>RMSprop算法</h2><p><code>root mean square prop, RMSprop算法</code>也可以加快梯度下降的速度，其基本过程和动量梯度下降很像，也是为了减小非重要方向上的梯度从而提高学习率：</p><script type="math/tex; mode=display">S_{dW}=\beta S_{dW}+(1-\beta)(dW)^2 \\ S_{db}=\beta S_{db}+(1-\beta)(db)^2 \\ W=W-\alpha\frac{dW}{\sqrt{S_{dW}+\epsilon}},b=b-\alpha\frac{db}{\sqrt{S_{db}+\epsilon}}</script><p>其中$\epsilon$是一个比较小的常数例如$10^{-8}$，为了避免$S_{dW}$过小。</p><h2 id="Adam算法"><a href="#Adam算法" class="headerlink" title="Adam算法"></a>Adam算法</h2><p>在深度学习领域，大佬们提出过很多优化算法，但是很快被证明没有足够的泛化能力，不能应用在多种模型中。而<code>Adam，Adaptive Moment Estimation算法</code>和RMSprop算法算是在动量梯度算法之后的特例，前者的基本思想是将动量梯度下降和RMSprop算法结合起来。</p><p>首先初始化$v_{dW}=S_{dW}=v_{db}=S_{db}=\vec{0}$，有了此前的铺垫，很容易理解有</p><script type="math/tex; mode=display">v_{dW}=\beta_1 v_{dW}+(1-\beta_1)dW , v_{db}=\beta_1 v_{db}+(1-\beta_1)db  \\ S_{dW}=\beta_2 S_{dW}+(1-\beta_2)(dW)^2 ,S_{db}=\beta_2 S_{db}+(1-\beta_2)(db)^2 \\ v_{dW}^{corrected}=\frac{v_{dW}}{1-\beta_1^t}, v_{db}^{corrected}=\frac{v_{db}}{1-\beta_1^t} \\ S_{dW}^{corrected}=\frac{S_{dW}}{1-\beta_2^t}, S_{db}^{corrected}=\frac{S_{db}}{1-\beta_2^t} \\ W=W-\alpha\frac{v_{dW}^{corrected}}{\sqrt{S_{dW}^{corrected}}+\epsilon},b=b-\alpha\frac{v_{db}^{corrected}}{\sqrt{S_{db}^{corrected}}+\epsilon}</script><p>其中$\beta_1=0.9,\beta_2=0.999,\epsilon=10^{-8}$是一个比较常见的设置，一般只调整$\alpha$。</p><h2 id="学习率衰减"><a href="#学习率衰减" class="headerlink" title="学习率衰减"></a>学习率衰减</h2><p>一个加快神经网络训练速度的方法是随着时间慢慢减少学习率，即<code>学习率衰减（learning rate decay）</code>，其基本思路是将学习率设置为epoch的函数，比如</p><script type="math/tex; mode=display">\alpha=\frac{1}{1+\#epoch *decay \ rate}</script><p>或者</p><script type="math/tex; mode=display">\alpha = 0.95^{\#epoch}\alpha_0 \\ \alpha=\frac{k}{\sqrt{\#epoch}}\alpha_0</script><p>或者手动设置的分段函数。</p><h2 id="局部最优的问题"><a href="#局部最优的问题" class="headerlink" title="局部最优的问题"></a>局部最优的问题</h2><p>和直觉不同，实际上在具有很多特征的神经网络中遇到局部最小点的概率是非常非常小的，往往遇到的都是鞍点。当然这里必须贴出吴老师讲鞍点的图片。</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/8.png" alt="1"></p><p>真正麻烦的是梯度很小的<code>平台（plateaus）</code>，这也是此前优化算法所解决的问题。</p><h1 id="超参数调试、Batch正则化和程序框架"><a href="#超参数调试、Batch正则化和程序框架" class="headerlink" title="超参数调试、Batch正则化和程序框架"></a>超参数调试、Batch正则化和程序框架</h1><h2 id="超参数调试"><a href="#超参数调试" class="headerlink" title="超参数调试"></a>超参数调试</h2><h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>上面一堆加快训练速度的方法也带来了很多超参数，如下图所示</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/9.png" alt="1"></p><p>其中在吴老师看来，学习率是最重要的，打黄色框次之，紫色框又次之，没打框的几乎不<code>调试（tune）</code>。怎么调试呢？总体的思路是<code>随机生成，由粗糙到精细</code>。不使用网格（grid）是由于无法提前得知哪个参数最重要，因此可以试验多个独立的参数。</p><h3 id="超参数范围"><a href="#超参数范围" class="headerlink" title="超参数范围"></a>超参数范围</h3><p>在对$\alpha$的调试中，往往采用对数坐标轴：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="number">-4</span> * np.random.rand()</span><br><span class="line">alpha = <span class="number">10</span> ** r</span><br></pre></td></tr></table></figure><p>而对于$\beta$的调试，由于其集中于0.9到0.99999，往往对$1-\beta$采用对数坐标轴。</p><h3 id="超参数训练实践：pandas-vs-caviar"><a href="#超参数训练实践：pandas-vs-caviar" class="headerlink" title="超参数训练实践：pandas vs caviar"></a>超参数训练实践：pandas vs caviar</h3><p>当硬件资源有限的时候，我们只能盯着一个模型并观察其运行状况，每隔一段时间对超参数进行改变；当有很多硬件资源的时候，我们可以同时跑多个模型。前者的行为像熊猫，后者的行为像鱼类，当然在硬件充分的情况下当然使用后一种方法。</p><h2 id="Batch-归一化"><a href="#Batch-归一化" class="headerlink" title="Batch 归一化"></a>Batch 归一化</h2><p>batch归一化可以使得参数搜索更加容易，从而更方便地训练大型网络。</p><h3 id="归一化的过程"><a href="#归一化的过程" class="headerlink" title="归一化的过程"></a>归一化的过程</h3><p>此前讨论过正则化输入，如果可以应用在隐藏层，岂不是更好？一个版本是对$a$操作，另一个版本是对$z^{<a href="i">l</a>}$操作，也是吴老师默认的方法，以下的公式省略了层数信息：</p><script type="math/tex; mode=display">\mu=\frac{1}{m}\sum_i{z^{(i)}} \\ \sigma^2=\frac{1}{m}\sum_i(z_i-\mu)^2 \\ z_{norm}^{(i)}=\frac{z^{(i)}-\mu}{\sqrt{\sigma^2+\epsilon}} \\ \tilde{z}^{(i)}=\gamma z_{norm}^{(i)}+\beta</script><p>其中$\gamma$和$\beta$是和$w$、$b$地位等同的学习变量，会用$\tilde{z}^{<a href="i">l</a>}$代替$z^{<a href="i">l</a>}$的计算如下图所示，（又增加了很多参数）在tensorflow中使用函数<code>tf.nn.batch_normalization</code>完成这些操作。</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/10.png" alt="1"></p><p>要注意的是这里的$\beta$和优化算法中的没有任何关系，易知其维度为$(n^{[l]}, 1)$。另外，由于均值会被归一化为0，所以此时参数$b$根本不起作用，完全可以去掉：</p><script type="math/tex; mode=display">z^{[l]}=w^{[l]}z^{[l-1]}\\ \dots\\ \tilde{z}^{[l]}=\gamma^{[l]} z_{norm}^{[l]}+\beta^{[l]}</script><h3 id="归一化有效性的解释"><a href="#归一化有效性的解释" class="headerlink" title="归一化有效性的解释"></a>归一化有效性的解释</h3><p>为什么归一化可以加快训练速度呢？直观来看是将正则化输入的过程加在了所有的隐藏层上。</p><p>更深层的第一个原因要结合<code>covariate shift</code>，即如何已经学习到了映射$x\to y$，如果$x$的分布发生了变化，那么需要重新进行学习。在神经网络中，中间层$l$可以看作是映射，前$l-1$层的输出可以看作是$x$，在训练的过程中$x$是不停改变的，所以$l$层也会不停变化。而batch的作用是限制了$x$的变化，即$z^{[l]}$的均值始终为0，方差始终为1，因此它减弱了前后层的关联，使得每一层的学习更加独立，这有助于训练的加速——当然这也很感性了。</p><p>另外一个原因是在mini-batch中输入本来就是有噪声的，加入归一化后又增加了一部分噪声，这和dropout很相似，因此微微加入了正则化的功能。不过这种正则化是很微弱的，如果想要正则化还是要和dropout一起用。此外，对于dropout来说mini-batch越大，其正则化效果就越弱，这是个有趣的性质。</p><h3 id="测试阶段的处理"><a href="#测试阶段的处理" class="headerlink" title="测试阶段的处理"></a>测试阶段的处理</h3><p>由于在测试阶段没有mini-batch的概念，所以要通过别的方法获得对测试样本归一化的$\mu,\sigma$。一种方法是考虑到网络一旦训练完毕，参数都是固定的，这个时候即使是每批训练样本进入网络，那么BN层计算的均值标准差都是固定不变的。我们可以采用这些数值来作为测试样本所需要的均值、标准差。</p><script type="math/tex; mode=display">E[x]:E_B[\mu_B] \\ Var[x]:\frac{m}{m-1}E_B[\sigma_B^2] \\ y=\frac{\gamma}{\sqrt{Var[x]+\epsilon}}x+(\beta-\frac{\gamma E[x]}{\sqrt{Var[x]+\epsilon}})</script><p>emmm，这部分实际参考的是<a href="https://blog.csdn.net/hjimce/article/details/50866313" target="_blank" rel="noopener">CSDN</a>。</p><h2 id="softmax回归"><a href="#softmax回归" class="headerlink" title="softmax回归"></a>softmax回归</h2><p>多分类问题中用$C$表示分类的数量，在神经网络中则有$n^{[l]}=C$，输出特征$y$的每一维表示分类的概率。由于概率之和必须为1，所以需要再加上一个softmax层，计算方法为</p><script type="math/tex; mode=display">t = \exp(z^{[l]}) \\ a^{[l]}=\frac{t}{\sum_{i=1}^4{t_i}}</script><p>softmax是相对与hardmax的，可以看作是逻辑回归的推广，后者会输出一个one-hot向量。没有隐藏层的softmax分类器的作用如下图所示</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/11.png" alt="1"></p><p>其损失函数为</p><script type="math/tex; mode=display">L(\hat{y}, y)=-\sum_{j=1}^Cy_j\log\hat{y}_j \\ J(W,b)=\frac{1}{m}\sum_{i=1}^m{L(\hat{y}^{(i)}, y^{(i)})}</script><p>要注意的是在向量化的表示中$Y,\hat{Y}$的维度均为$(C,m)$。反向传播的公式为</p><script type="math/tex; mode=display">dz^{[l]}=\hat{y}-y</script><h2 id="深度学习框架tensorflow"><a href="#深度学习框架tensorflow" class="headerlink" title="深度学习框架tensorflow"></a>深度学习框架tensorflow</h2><p>用numpy实现CNN、RNN或者交大规模神经网络并不现实，这时需要借助各种优秀的程序框架，这和知道矩阵乘法的过程但是仍然调用numpy一样，由于深度学习已经成熟了，所以可以提高工作的效率。常见的框架即选择标准如下所示，他们每个月都在进化，所以优劣在此不赘述。</p><p><img src="/2018/07/31/mooc-深度学习工程师-2-改善深层神经网络：超参数调试、正则化以及优化/12.png" alt="1"></p><p>当然，吴老师介绍的是tensorflow，其作用只要需要用内置函数完成前向传播后可以自动得到反向传播，同时提供了大量优化函数。需要注意的是tensorflow的计算图和吴老师课程使用的并不一样，其他就不赘述了，参见我的博客<a href="http://wang22ti.com/2018/07/25/tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">tensorflow学习笔记</a>。</p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-matlab</title>
      <link href="/2018/07/29/%E7%AC%94%E8%AE%B0-matlab/"/>
      <content type="html"><![CDATA[<p>本准备完全自学的，正好《模式识别》和《人工智能》这两门课的首选语言都是Matlab，就提前学一下吧！</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>最新版（2018a，即2018年上半年版本）的安装参考博客<a href="https://blog.csdn.net/josslyn/article/details/79898261" target="_blank" rel="noopener">MATLAB2018a 64安装</a>。</p>]]></content>
      
      <categories>
          
          <category> matlab </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>学习-caffe</title>
      <link href="/2018/07/29/%E7%AC%94%E8%AE%B0-caffe/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-GAN</title>
      <link href="/2018/07/29/%E7%AC%94%E8%AE%B0-GAN/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-吴恩达老师在斯坦福大学的机器学习机器学习公开课3——无监督学习</title>
      <link href="/2018/07/26/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE3%E2%80%94%E2%80%94%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-tensorflow</title>
      <link href="/2018/07/25/%E7%AC%94%E8%AE%B0-tensorflow/"/>
      <content type="html"><![CDATA[<p>以下内容主要来自<a href="http://www.tensorfly.cn/tfdoc/get_started/introduction.html" target="_blank" rel="noopener">tensorflow中文官网教程</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>windows下直接以管理员身份在cmd输入即可，下载速度很快</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure><p>不过如果电脑上没有Anaconda或者vs2017会报<code>ImportError: DLL load failed: 找不到指定的模块</code>的错误，只需要在<a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=53587下载缺少的环境即可。" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=53587下载缺少的环境即可。</a></p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="图和会话"><a href="#图和会话" class="headerlink" title="图和会话"></a>图和会话</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">matrix1 = tf.constant([[<span class="number">3.</span>, <span class="number">4.</span>]])</span><br><span class="line">matirx2 = tf.constant([[<span class="number">4.</span>], [<span class="number">5.</span>]])</span><br><span class="line"></span><br><span class="line">product = tf.matmul(matrix1, matirx2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    res = sess.run([product])   <span class="comment"># 返回的类型是list</span></span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><h2 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">counter = tf.Variable(<span class="number">0</span>, name=<span class="string">'counter'</span>)</span><br><span class="line">constant = tf.constant(<span class="number">2</span>)</span><br><span class="line">op_add = tf.add(counter, constant)</span><br><span class="line">update = tf.assign(counter, op_add)</span><br><span class="line"><span class="comment"># update = tf.assign_add(counter, constant)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># init = tf.initialize_all_variables() 官网上用的是这个，不过过时了</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    print(sess.run(counter))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        sess.run(op_add)</span><br><span class="line">        res = sess.run(update)</span><br><span class="line">        print(res)</span><br><span class="line">    sub_output = tf.subtract(res, constant)</span><br><span class="line">    update2 = tf.assign(counter, sub_output)</span><br><span class="line">    print(sess.run([update, sub_output]))</span><br></pre></td></tr></table></figure><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 官网的类型在tf.types里，应该过时了</span></span><br><span class="line">input1 = tf.placeholder(dtype=tf.float32)</span><br><span class="line">input2 = tf.placeholder(dtype=tf.float32)</span><br><span class="line">out1 = tf.multiply(input1, input2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    res = sess.run(out1, feed_dict=&#123;input1: <span class="number">7.</span>, input2: <span class="number">3.</span>&#125;)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><h1 id="mnist手写体识别入门"><a href="#mnist手写体识别入门" class="headerlink" title="mnist手写体识别入门"></a>mnist手写体识别入门</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># from tensorflow.examples.tutorials.mnist import input_data</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib.learn.python.learn.datasets.mnist <span class="keyword">import</span> read_data_sets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 独热法编码方式</span></span><br><span class="line">mnist = read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(dtype=tf.float32, shape=[<span class="keyword">None</span>, <span class="number">784</span>])</span><br><span class="line"><span class="comment"># 中括号不能丢</span></span><br><span class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>, <span class="number">10</span>]), dtype=tf.float32)</span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]), dtype=tf.float32)</span><br><span class="line">y = tf.nn.softmax(tf.matmul(x, W) + b)</span><br><span class="line">y_ = tf.placeholder(dtype=tf.float32, shape=[<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line">cross_entropy = -tf.reduce_sum(y_ * tf.log(y))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x: batch_xs, y_: batch_ys&#125;)</span><br><span class="line"></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line">res = sess.run(accuracy, feed_dict=&#123;x: mnist.test.images, y_: mnist.test.labels&#125;)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h1 id="mnist手写体识别进阶"><a href="#mnist手写体识别进阶" class="headerlink" title="mnist手写体识别进阶"></a>mnist手写体识别进阶</h1><p>以下参照的是<a href="https://www.bilibili.com/video/av25566267/?p=45" target="_blank" rel="noopener">哔哩哔哩的视频</a>，不过有所改动，神经网络示意图如下。</p><p><img src="/2018/07/25/笔记-tensorflow/1.jpg" alt=""></p><p>深度学习没有显卡果然是不行的，这么简单的一个神经网络的训练，在我i7 7500U无独显的本子上跑了52分钟才收敛，而且最终的正确率只有94.71%。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.contrib.learn.python.learn.datasets.mnist <span class="keyword">import</span> read_data_sets</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># (55000 * 28 * 28)</span></span><br><span class="line">mnist = read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line">input_x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">28</span> * <span class="number">28</span>]) / <span class="number">255</span></span><br><span class="line">output_y = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line">input_x_image = tf.reshape(input_x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">test_x = mnist.test.images[:<span class="number">3000</span>]</span><br><span class="line">test_y = mnist.test.labels[:<span class="number">3000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一层卷积，输出为28 * 28 * 32</span></span><br><span class="line">conv1 = tf.layers.conv2d(</span><br><span class="line">    inputs=input_x_image,  <span class="comment"># 输入为28 * 28 * 1</span></span><br><span class="line">    filters=<span class="number">32</span>,  <span class="comment"># 过滤器的数量，输出的深度为32</span></span><br><span class="line">    kernel_size=[<span class="number">5</span>, <span class="number">5</span>],  <span class="comment"># 过滤器的大小</span></span><br><span class="line">    strides=<span class="number">1</span>,  <span class="comment"># 步长为1</span></span><br><span class="line">    padding=<span class="string">'same'</span>,  <span class="comment"># 输出的大小仍然为28 * 28，需要对输入补零</span></span><br><span class="line">    activation=tf.nn.relu  <span class="comment"># 激活函数为relu</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一层池化（亚采样），输出为14 * 14 * 32</span></span><br><span class="line">pool1 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv1,</span><br><span class="line">    pool_size=[<span class="number">2</span>, <span class="number">2</span>],  <span class="comment"># 过滤器大小为2 * 2</span></span><br><span class="line">    strides=<span class="number">2</span>,  <span class="comment"># 步长大小为2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二层卷积，输出为14 * 14 * 64</span></span><br><span class="line">conv2 = tf.layers.conv2d(</span><br><span class="line">    inputs=pool1,</span><br><span class="line">    filters=<span class="number">64</span>,  <span class="comment"># 过滤器的数量，输出的深度为64</span></span><br><span class="line">    kernel_size=[<span class="number">5</span>, <span class="number">5</span>],  <span class="comment"># 过滤器的大小</span></span><br><span class="line">    strides=<span class="number">1</span>,  <span class="comment"># 步长为1</span></span><br><span class="line">    padding=<span class="string">'same'</span>,  <span class="comment"># 输出的大小仍然为28 * 28，需要对输入补零</span></span><br><span class="line">    activation=tf.nn.relu  <span class="comment"># 激活函数为relu</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二层池化，输出为7 * 7 * 64</span></span><br><span class="line">pool2 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv2,</span><br><span class="line">    pool_size=[<span class="number">2</span>, <span class="number">2</span>],  <span class="comment"># 过滤器大小为2 * 2</span></span><br><span class="line">    strides=<span class="number">2</span>,  <span class="comment"># 步长大小为2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平坦化</span></span><br><span class="line">flat = tf.reshape(pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1024个神经元全连接层</span></span><br><span class="line">dense = tf.layers.dense(</span><br><span class="line">    inputs=flat,</span><br><span class="line">    units=<span class="number">1024</span>,  <span class="comment"># 1024个神经元</span></span><br><span class="line">    activation=tf.nn.relu  <span class="comment"># 激活函数为relu</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 丢弃50%</span></span><br><span class="line">dropout = tf.layers.dropout(</span><br><span class="line">    inputs=dense,</span><br><span class="line">    rate=<span class="number">0.5</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10个神经元的全连接层，不需要激活函数做非线性化</span></span><br><span class="line">logits = tf.layers.dense(</span><br><span class="line">    inputs=dropout,</span><br><span class="line">    units=<span class="number">10</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算误差</span></span><br><span class="line">loss = tf.losses.softmax_cross_entropy(</span><br><span class="line">    onehot_labels=output_y,</span><br><span class="line">    logits=logits</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Adam优化器最小化误差</span></span><br><span class="line">train_op = tf.train.AdamOptimizer(learning_rate=<span class="number">0.005</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line"><span class="comment"># 会返回两个局部变量，所以初始化的时候要注意</span></span><br><span class="line">accuracy = tf.metrics.accuracy(</span><br><span class="line">    labels=tf.arg_max(output_y, dimension=<span class="number">1</span>),</span><br><span class="line">    predictions=tf.arg_max(logits, dimension=<span class="number">1</span>)</span><br><span class="line">)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">init = tf.group(tf.global_variables_initializer(), tf.local_variables_initializer())</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练神经网络</span></span><br><span class="line">start = time()</span><br><span class="line">old_accuracy = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20000</span>):</span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">    train_op.run(feed_dict=&#123;input_x: batch[<span class="number">0</span>], output_y: batch[<span class="number">1</span>]&#125;)</span><br><span class="line">    test_accuracy = accuracy.eval(feed_dict=&#123;input_x: test_x, output_y: test_y&#125;)</span><br><span class="line">    <span class="keyword">if</span> abs(test_accuracy - old_accuracy) &lt; <span class="number">0.00001</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    old_accuracy = test_accuracy</span><br><span class="line">    print(<span class="string">"Step=%d [Test accuracy=%.4f, time=%ds]"</span> % (i, test_accuracy, time() - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出测试集上的正确率</span></span><br><span class="line">final_accuracy = accuracy.eval(feed_dict=&#123;input_x: mnist.test.images, output_y: mnist.test.labels&#125;)</span><br><span class="line">print(<span class="string">"final test accuracy is %.4f"</span> % final_accuracy)</span><br></pre></td></tr></table></figure><p>另一份代码和tensorflow官网差不多，计算速度很快，不过准确率抖动很厉害，几分钟后在测试集的准确率为94.32%。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow.examples.tutorials.mnist.input_data <span class="keyword">as</span> input_data</span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)  <span class="comment"># 下载并加载mnist数据</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])  <span class="comment"># 输入的数据占位符</span></span><br><span class="line">y_actual = tf.placeholder(tf.float32, shape=[<span class="keyword">None</span>, <span class="number">10</span>])  <span class="comment"># 输入的标签占位符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于初始化所有的权值 W</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于初始化所有的偏置项 b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于构建卷积层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于构建池化层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建网络</span></span><br><span class="line">x_image = tf.reshape(x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])  <span class="comment"># 转换输入数据shape,以便于用于网络中</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>])</span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)  <span class="comment"># 第一个卷积层</span></span><br><span class="line">h_pool1 = max_pool(h_conv1)  <span class="comment"># 第一个池化层</span></span><br><span class="line"></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>])</span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)  <span class="comment"># 第二个卷积层</span></span><br><span class="line">h_pool2 = max_pool(h_conv2)  <span class="comment"># 第二个池化层</span></span><br><span class="line"></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>])</span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])  <span class="comment"># reshape成向量</span></span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)  <span class="comment"># 第一个全连接层</span></span><br><span class="line"></span><br><span class="line">keep_prob = tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)  <span class="comment"># dropout层</span></span><br><span class="line"></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line">y_predict = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)  <span class="comment"># softmax层</span></span><br><span class="line"></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_actual * tf.log(y_predict))  <span class="comment"># 交叉熵</span></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">1e-3</span>).minimize(cross_entropy)  <span class="comment"># 梯度下降法</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_predict, <span class="number">1</span>), tf.argmax(y_actual, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))  <span class="comment"># 精确度计算</span></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">sess.run(tf.initialize_all_variables())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20000</span>):</span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:  <span class="comment"># 训练100次，验证一次</span></span><br><span class="line">        train_acc = accuracy.eval(feed_dict=&#123;x: batch[<span class="number">0</span>], y_actual: batch[<span class="number">1</span>], keep_prob: <span class="number">1.0</span>&#125;)</span><br><span class="line">        print(<span class="string">'step'</span>, i, <span class="string">'training accuracy'</span>, train_acc)</span><br><span class="line">        train_step.run(feed_dict=&#123;x: batch[<span class="number">0</span>], y_actual: batch[<span class="number">1</span>], keep_prob: <span class="number">0.5</span>&#125;)</span><br><span class="line"></span><br><span class="line">test_acc = accuracy.eval(feed_dict=&#123;x: mnist.test.images, y_actual: mnist.test.labels, keep_prob: <span class="number">1.0</span>&#125;)</span><br><span class="line">print(<span class="string">"test accuracy"</span>, test_acc)</span><br></pre></td></tr></table></figure><p>此外，Session()和InteractiveSession()的区别参见<a href="https://blog.csdn.net/M_Z_G_Y/article/details/80416226" target="_blank" rel="noopener">博客</a>。run()和eval()的区别参见<a href="https://blog.csdn.net/chengshuhao1991/article/details/78554743" target="_blank" rel="noopener">博客</a>。</p><h1 id="GPU版本的安装"><a href="#GPU版本的安装" class="headerlink" title="GPU版本的安装"></a>GPU版本的安装</h1><p>有外置显卡，当然要安装GPU版本的Tensorflow啦，主要参考<a href="https://www.cnblogs.com/fanfzj/p/8521728.html" target="_blank" rel="noopener">博客</a>。不过该博文提供的版本是9.0的，而我安装的时候（2018年8月30日）已经有了9.2。此外，根据<a href="https://github.com/google/prettytensor/issues/1" target="_blank" rel="noopener">GitHub的讨论</a>，要修改会话的设置，否则会报Cannot assign a device to node的错误，以下是改进的GPU版本的手写体GAN程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">tf_device = <span class="string">'/gpu:1'</span></span><br><span class="line"><span class="keyword">with</span> tf.device(tf_device):</span><br><span class="line">    sess = tf.InteractiveSession(config=tf.ConfigProto(allow_soft_placement=<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line">    mb_size = <span class="number">128</span></span><br><span class="line">    Z_dim = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">weight_var</span><span class="params">(shape, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.get_variable(name=name, shape=shape, initializer=tf.contrib.layers.xavier_initializer())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bias_var</span><span class="params">(shape, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> tf.get_variable(name=name, shape=shape, initializer=tf.constant_initializer(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># discriminater net</span></span><br><span class="line"></span><br><span class="line">    X = tf.placeholder(tf.float32, shape=[<span class="keyword">None</span>, <span class="number">784</span>], name=<span class="string">'X'</span>)</span><br><span class="line"></span><br><span class="line">    D_W1 = weight_var([<span class="number">784</span>, <span class="number">128</span>], <span class="string">'D_W1'</span>)</span><br><span class="line">    D_b1 = bias_var([<span class="number">128</span>], <span class="string">'D_b1'</span>)</span><br><span class="line"></span><br><span class="line">    D_W2 = weight_var([<span class="number">128</span>, <span class="number">1</span>], <span class="string">'D_W2'</span>)</span><br><span class="line">    D_b2 = bias_var([<span class="number">1</span>], <span class="string">'D_b2'</span>)</span><br><span class="line"></span><br><span class="line">    theta_D = [D_W1, D_W2, D_b1, D_b2]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># generator net</span></span><br><span class="line"></span><br><span class="line">    Z = tf.placeholder(tf.float32, shape=[<span class="keyword">None</span>, <span class="number">100</span>], name=<span class="string">'Z'</span>)</span><br><span class="line"></span><br><span class="line">    G_W1 = weight_var([<span class="number">100</span>, <span class="number">128</span>], <span class="string">'G_W1'</span>)</span><br><span class="line">    G_b1 = bias_var([<span class="number">128</span>], <span class="string">'G_B1'</span>)</span><br><span class="line"></span><br><span class="line">    G_W2 = weight_var([<span class="number">128</span>, <span class="number">784</span>], <span class="string">'G_W2'</span>)</span><br><span class="line">    G_b2 = bias_var([<span class="number">784</span>], <span class="string">'G_B2'</span>)</span><br><span class="line"></span><br><span class="line">    theta_G = [G_W1, G_W2, G_b1, G_b2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">(z)</span>:</span></span><br><span class="line">        G_h1 = tf.nn.relu(tf.matmul(z, G_W1) + G_b1)</span><br><span class="line">        G_log_prob = tf.matmul(G_h1, G_W2) + G_b2</span><br><span class="line">        G_prob = tf.nn.tanh(tf.nn.relu(G_log_prob))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> G_prob</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discriminator</span><span class="params">(x)</span>:</span></span><br><span class="line">        D_h1 = tf.nn.relu(tf.matmul(x, D_W1) + D_b1)</span><br><span class="line">        D_logit = tf.matmul(D_h1, D_W2) + D_b2</span><br><span class="line">        D_prob = tf.nn.sigmoid(D_logit)</span><br><span class="line">        <span class="keyword">return</span> D_prob, D_logit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    G_sample = generator(Z)</span><br><span class="line">    D_real, D_logit_real = discriminator(X)</span><br><span class="line">    D_fake, D_logit_fake = discriminator(G_sample)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # reduce_mean(-log(sigmoid(D_logit_real)))</span></span><br><span class="line">    <span class="comment"># D_loss_real = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(</span></span><br><span class="line">    <span class="comment">#     logits=D_logit_real, labels=tf.ones_like(D_logit_real)))</span></span><br><span class="line">    <span class="comment"># # reduce_mean(-log(1-sigmoid(D_logit_real)))</span></span><br><span class="line">    <span class="comment"># D_loss_fake = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(</span></span><br><span class="line">    <span class="comment">#     logits=D_logit_fake, labels=tf.zeros_like(D_logit_fake)))</span></span><br><span class="line">    <span class="comment"># D_loss = D_loss_real + D_loss_fake</span></span><br><span class="line">    <span class="comment"># # reduce_mean(-log(sigmoid(D_logit_fake)))</span></span><br><span class="line">    <span class="comment"># G_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(</span></span><br><span class="line">    <span class="comment">#     logits=D_logit_fake, labels=tf.ones_like(D_logit_fake)))</span></span><br><span class="line">    D_loss = -tf.reduce_mean(tf.log(D_real) + tf.log(<span class="number">1.</span> - D_fake))</span><br><span class="line">    G_loss = -tf.reduce_mean(tf.log(D_fake))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要指定更新的变量，不然几乎不收敛</span></span><br><span class="line">    D_optimizer = tf.train.AdamOptimizer().minimize(D_loss, var_list=theta_D)</span><br><span class="line">    G_optimizer = tf.train.AdamOptimizer().minimize(G_loss, var_list=theta_G)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sample_Z</span><span class="params">(m, n)</span>:</span></span><br><span class="line">        <span class="string">'''Uniform prior for G(Z)'''</span></span><br><span class="line">        <span class="keyword">return</span> np.random.uniform(<span class="number">-1.</span>, <span class="number">1.</span>, size=[m, n])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot</span><span class="params">(samples)</span>:</span></span><br><span class="line">        fig = plt.figure(figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">        gs = gridspec.GridSpec(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">        gs.update(wspace=<span class="number">0.05</span>, hspace=<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, sample <span class="keyword">in</span> enumerate(samples):  <span class="comment"># [i,samples[i]] imax=16</span></span><br><span class="line">            ax = plt.subplot(gs[i])</span><br><span class="line">            plt.axis(<span class="string">'off'</span>)</span><br><span class="line">            ax.set_xticklabels([])</span><br><span class="line">            ax.set_aspect(<span class="string">'equal'</span>)</span><br><span class="line">            plt.imshow(sample.reshape(<span class="number">28</span>, <span class="number">28</span>), cmap=<span class="string">'Greys_r'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'out/'</span>):</span><br><span class="line">        os.makedirs(<span class="string">'out/'</span>)</span><br><span class="line"></span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        <span class="keyword">if</span> it % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            samples = sess.run(G_sample, feed_dict=&#123;</span><br><span class="line">                Z: sample_Z(<span class="number">16</span>, Z_dim)&#125;)  <span class="comment"># 16*784</span></span><br><span class="line">            fig = plot(samples)</span><br><span class="line">            plt.savefig(<span class="string">'out/&#123;&#125;.png'</span>.format(str(i).zfill(<span class="number">3</span>)), bbox_inches=<span class="string">'tight'</span>)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            plt.close(fig)</span><br><span class="line"></span><br><span class="line">        X_mb, _ = mnist.train.next_batch(mb_size)</span><br><span class="line"></span><br><span class="line">        _, D_loss_curr = sess.run([D_optimizer, D_loss], feed_dict=&#123;</span><br><span class="line">            X: X_mb, Z: sample_Z(mb_size, Z_dim)&#125;)</span><br><span class="line">        _, G_loss_curr = sess.run([G_optimizer, G_loss], feed_dict=&#123;</span><br><span class="line">            Z: sample_Z(mb_size, Z_dim)&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> it % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Iter: &#123;&#125;'</span>.format(it))</span><br><span class="line">            print(<span class="string">'D loss: &#123;:.4&#125;'</span>.format(D_loss_curr))</span><br><span class="line">            print(<span class="string">'G_loss: &#123;:.4&#125;'</span>.format(G_loss_curr))</span><br><span class="line">            print()</span><br></pre></td></tr></table></figure><h1 id="GPU版本的其他事项"><a href="#GPU版本的其他事项" class="headerlink" title="GPU版本的其他事项"></a>GPU版本的其他事项</h1><p>更换了台式机后，安装cuda9.0的时候会提示硬件问题云云，必须要安装9.2。结果安装好9.2之后又说和tensorflow的版本不兼容，emmm，真是配环境配死人。还好，针对windows+CUDA9.2+python3.6的环境是存在的，详见<a href="https://blog.csdn.net/wwtor/article/details/80603296" target="_blank" rel="noopener">博文</a>。</p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《编译原理》实验6-简易编译器前端</title>
      <link href="/2018/06/22/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C6-%E7%AE%80%E6%98%93%E7%BC%96%E8%AF%91%E5%99%A8%E5%89%8D%E7%AB%AF/"/>
      <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        本次实验中，我用python3.5实现了一个简单的类C语言代码块文法的编译器前端，具有以下功能：</p><ol><li><p>根据输入文法，自动生成终结符号集、非终结符号集、first集、follow集、项目集、状态集和分析表，对无法分析的语法报错</p></li><li><p>从txt文件中读取赋值语句，通过词法分析生成对应的二元式文件，对不符合文法的词法报错</p></li><li><p>根据词法分析的二元式序列，对其进行语法分析</p></li><li><p>根据设定log级别将分析过程与结果输出在前端上</p></li><li><p>良好的扩展性，可以很方便地加入新的词法与语法</p></li></ol><h1 id="文法描述"><a href="#文法描述" class="headerlink" title="文法描述"></a>文法描述</h1><p>​        为了分析更为复杂的输入串，设计了以下文法，基本包括了变量类型、变量定义、数组定义、变量赋值、逻辑运算、算术运算、条件语句、循环语句、循环控制等常见的高级语言输入串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># P -&gt; &#123; &#125; | &#123; AA &#125;</span><br><span class="line"># AA-&gt; A | A AA</span><br><span class="line"># A -&gt; DD | SS</span><br><span class="line"># DD-&gt; D DD | D</span><br><span class="line"># D -&gt; T ID FH</span><br><span class="line"># ID-&gt; id | id = id | id = num | ID , ID</span><br><span class="line"># T -&gt; T [ num ] | TY</span><br><span class="line"># TY-&gt;int | float | char | bool</span><br><span class="line"># SS-&gt; S | S SS</span><br><span class="line"># S -&gt; L = E FH | if ( B ) S | if ( B ) S else S | while ( B ) S | do S while ( B ) FH | break FH | continue FH | P</span><br><span class="line"># B -&gt; B or B | B and B | ! B | ( B ) | E &lt; E | E &gt; E | E &lt;= E | E &gt;= E | E == E | E != E | true | false</span><br><span class="line"># E -&gt; E + E | E - E | E * E | E / E | L | ( E ) | num | id</span><br><span class="line"># L -&gt; id [ E ] | id</span><br><span class="line"># FH-&gt; ; | FH ;</span><br></pre></td></tr></table></figure><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><h2 id="SLRAnalyzer"><a href="#SLRAnalyzer" class="headerlink" title="SLRAnalyzer"></a>SLRAnalyzer</h2><p>​        实验中实现的SLR语法分析类名为SLRAnalyzer，具体描述信息如下：<br><img src="/2018/06/22/《编译原理》实验6-简易编译器前端/1.png" alt=""><br><img src="/2018/06/22/《编译原理》实验6-简易编译器前端/2.png" alt=""><br><img src="/2018/06/22/《编译原理》实验6-简易编译器前端/3.png" alt=""></p><h2 id="FrontEnd"><a href="#FrontEnd" class="headerlink" title="FrontEnd"></a>FrontEnd</h2><p>​        实验中主要使用python的标准GUI库tkinter编写前端类FrontEnd，具体描述如下。</p><p><img src="/2018/06/22/《编译原理》实验6-简易编译器前端/4.png" alt=""></p><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><h2 id="测试样例1"><a href="#测试样例1" class="headerlink" title="测试样例1"></a>测试样例1</h2><p>​        使用了如下的默认样例进行测试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span>[<span class="number">10</span>] i;</span><br><span class="line">   <span class="keyword">int</span> j = <span class="number">1</span>, k = <span class="number">10</span>, m = mm;</span><br><span class="line">   <span class="keyword">int</span> k;</span><br><span class="line">   <span class="keyword">if</span> (<span class="literal">false</span>)&#123;</span><br><span class="line">       i = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span>[<span class="number">10</span>] ii;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> ( a &lt;= b)</span><br><span class="line">       j = <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">if</span> (i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在log_level=0的情况下查看分析结果，输入串符合文法，与预期相匹配。 </p><p><img src="/2018/06/22/《编译原理》实验6-简易编译器前端/image2.png" alt="image2"></p><p>在log_level=1的情况如下，输出了二元式序列与状态栈、符号栈的详细变化过程 </p><p><img src="/2018/06/22/《编译原理》实验6-简易编译器前端/image3.png" alt="image3"></p><p><img src="/2018/06/22/《编译原理》实验6-简易编译器前端/image4.png" alt="image4"></p><h2 id="测试样例2"><a href="#测试样例2" class="headerlink" title="测试样例2"></a>测试样例2</h2><p>​        使用了如下样例进行测试，和默认样例相比增加了一处不符合语法的输入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">int[10] i;</span><br><span class="line">int j = 1, k = 10, m = mm;</span><br><span class="line">int k;</span><br><span class="line">if (false)&#123;</span><br><span class="line">    i = 1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">    a = 1;</span><br><span class="line"></span><br><span class="line">int[10] ii;;</span><br><span class="line"></span><br><span class="line">while ( a &lt;&gt; b)</span><br><span class="line">    j = 2;</span><br><span class="line">    if (i &lt; 1) &#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出了输入串分析失败的的信息，包括当前符号、符号在二元式序列中的索引、状态栈栈顶元素，符合预期。</p><p><img src="/2018/06/22/《编译原理》实验6-简易编译器前端/image5.png" alt="image5"></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        由于有此前词法分析器的积累，同时对人工生成分析表的过程有较好的掌握，本次实验在相关领域比较顺利。遇到的困难及解决方法主要包括：分析表数据结构的设计，通过一步一步改造结构，从而实现与其他变量的；closure函数的实现，通过使用递归实现。</p><p>​        本程序的优点包括：很好地实现了实验要求的基本功能，在分析失败的时候输出对应的出错信息，根据日志等级输出日志信息，并再次基础上又一定的扩充；良好的用户接口，只需要输入起始符号、产生式就可以自动生成必需的终结符号集、非终结符号集、follow集、项目集、状态集和分析表，并判断文法类型，分析文法时只需要输入存储输入串的文件名即可。</p><p>​        本程序还存在可以优化的地方，主要包括：进一步设计扩充文法，通过生成语法树对输入串进行语义分析生成四元式乃至计算结果，从而实现更强大的编译器。</p><p>本次实验中，通过实现简易编译器前端，学习了python标准GUI编程方法，提高了对问题的抽象与分析能力。</p><h1 id="附录：程序源码"><a href="#附录：程序源码" class="headerlink" title="附录：程序源码"></a>附录：程序源码</h1><p>​        本实验项目共包括3个文件，其中compiler.py实现了Compiler类，front_end.py实现了分析程序的前端，set_productions.py用来在后台修改文法。</p><h2 id="compiler-py"><a href="#compiler-py" class="headerlink" title="compiler.py"></a>compiler.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_productions_to_file</span><span class="params">(start, productions, path=<span class="string">'productions.txt'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(start) + <span class="string">'\n'</span>)</span><br><span class="line">        f.write(json.dumps(productions) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span>:</span></span><br><span class="line">    overs = set()</span><br><span class="line">    reserved = set()</span><br><span class="line">    one_op_set = set()</span><br><span class="line">    two_next = dict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, log_level=<span class="number">0</span>, sharp=<span class="string">'#'</span>, point=<span class="string">'.'</span>, acc=<span class="string">'acc'</span>, productions_file=<span class="string">'productions.txt'</span>)</span>:</span></span><br><span class="line">        self.log_level = log_level</span><br><span class="line">        <span class="keyword">with</span> open(productions_file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.readlines()</span><br><span class="line">            self.start = json.loads(lines[<span class="number">0</span>])</span><br><span class="line">            self.productions = json.loads(lines[<span class="number">1</span>])</span><br><span class="line">        self.nonterminals = self.productions.keys()</span><br><span class="line">        self.get_overs_reserved()</span><br><span class="line"></span><br><span class="line">        self.sharp = sharp</span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法项目</span></span><br><span class="line">        self.new_start = self.start + <span class="string">"'"</span></span><br><span class="line">        self.point = point</span><br><span class="line">        self.items = &#123;key: list() <span class="keyword">for</span> key <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.get_items()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法的状态和分析表</span></span><br><span class="line">        self.status_list = [</span><br><span class="line">            self.closure([(self.new_start, [self.point, self.start])]), ]</span><br><span class="line">        self.analyse_table = dict()</span><br><span class="line">        self.acc = acc</span><br><span class="line">        self.get_analyse_table()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_overs_reserved</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                    <span class="keyword">if</span> sign <span class="keyword">not</span> <span class="keyword">in</span> self.nonterminals <span class="keyword">and</span> len(sign) &gt; <span class="number">0</span>:</span><br><span class="line">                        self.overs.add(sign)</span><br><span class="line">                        <span class="keyword">if</span> len(sign) &gt;= <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">not</span> sign[<span class="number">0</span>].isalpha():</span><br><span class="line">                            <span class="keyword">if</span> sign[<span class="number">0</span>] <span class="keyword">in</span> self.two_next.keys():</span><br><span class="line">                                self.two_next[sign[<span class="number">0</span>]].add(sign[<span class="number">1</span>:])</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                self.two_next[sign[<span class="number">0</span>]] = &#123;sign[<span class="number">1</span>:], &#125;</span><br><span class="line">                        <span class="keyword">elif</span> sign[<span class="number">0</span>].isalpha():</span><br><span class="line">                            self.reserved.add(sign)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            self.one_op_set.add(sign)</span><br><span class="line">        remove_set = set()</span><br><span class="line">        <span class="keyword">for</span> sign <span class="keyword">in</span> self.one_op_set:</span><br><span class="line">            <span class="keyword">if</span> sign[<span class="number">0</span>] <span class="keyword">in</span> self.two_next.keys():</span><br><span class="line">                self.two_next[sign[<span class="number">0</span>]].add(<span class="string">''</span>)</span><br><span class="line">                remove_set.add(sign)</span><br><span class="line">        <span class="keyword">for</span> sign <span class="keyword">in</span> remove_set:</span><br><span class="line">            self.one_op_set.remove(sign)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'over sign set:'</span>)</span><br><span class="line">            pprint(self.overs)</span><br><span class="line">            print(<span class="string">'reserved word set:'</span>)</span><br><span class="line">            pprint(self.reserved)</span><br><span class="line">            print(<span class="string">'one_op_set:'</span>)</span><br><span class="line">            pprint(self.one_op_set)</span><br><span class="line">            print(<span class="string">'two_next dict:'</span>)</span><br><span class="line">            pprint(self.two_next)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮，产生式右部首字符为终结符号</span></span><br><span class="line">        self.first_first = list()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.append((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_first = deepcopy(self.first)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                new_dict = &#123;&#125;</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                        new_dict = self.first[nontermainal]</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> right[<span class="number">0</span>] != <span class="string">''</span>:</span><br><span class="line">                        <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            new_dict.update(&#123;right[<span class="number">0</span>]: right&#125;)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                                <span class="keyword">if</span> sign <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                                    first_ = self.first[sign]</span><br><span class="line">                                    new_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                                    <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        new_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">                self.first[nontermainal].update(new_dict)</span><br><span class="line">            <span class="keyword">if</span> old_first == self.first:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[self.start].add(self.sharp)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = deepcopy(self.follow)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="keyword">if</span> right[<span class="number">0</span>] == <span class="string">''</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.overs:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_set = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_set_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_set_without_null</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_set:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'follow:'</span>)</span><br><span class="line">            pprint(self.follow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_items</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items[self.new_start] = [[self.point, self.start], [self.start, self.point]]</span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">0</span>] == <span class="string">''</span>:</span><br><span class="line">                    self.items[nonterminal].append([self.point, ])</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    self.items[nonterminal].append(</span><br><span class="line">                        right[:i] + [self.point, ] + right[i:]</span><br><span class="line">                    )</span><br><span class="line">                self.items[nonterminal].append(right + [self.point, ])</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'items:'</span>)</span><br><span class="line">            pprint(self.items)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归求解输入项目集合的闭包</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closure</span><span class="params">(self, production_list)</span>:</span></span><br><span class="line">        ret = production_list.copy()</span><br><span class="line">        <span class="comment"># 对于每一个项目，找到分隔符，如果后面有非终结符号，执行闭包操作</span></span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_list:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> self.items[right[i + <span class="number">1</span>]]:</span><br><span class="line">                    <span class="keyword">if</span> self.point == item[<span class="number">0</span>] <span class="keyword">and</span> (right[i + <span class="number">1</span>], item) <span class="keyword">not</span> <span class="keyword">in</span> ret:</span><br><span class="line">                        ret.append((right[i + <span class="number">1</span>], item))</span><br><span class="line">        <span class="keyword">if</span> ret == production_list:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.closure(ret)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现go函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self, production_list, sign)</span>:</span></span><br><span class="line">        new_production_list = list()</span><br><span class="line">        <span class="comment"># 找到接受sign的项目，将分隔符后移一位</span></span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_list:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] == sign:</span><br><span class="line">                new_right = list(right)</span><br><span class="line">                temp = new_right[i]</span><br><span class="line">                new_right[i] = new_right[i + <span class="number">1</span>]</span><br><span class="line">                new_right[i + <span class="number">1</span>] = temp</span><br><span class="line">                <span class="keyword">if</span> (production[<span class="number">0</span>], new_right) <span class="keyword">not</span> <span class="keyword">in</span> new_production_list:</span><br><span class="line">                    new_production_list.append((production[<span class="number">0</span>], new_right))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 返回新的状态的闭包</span></span><br><span class="line">        <span class="keyword">return</span> self.closure(new_production_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求解项目集与分析表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analyse_table</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># last_index指示现有状态集个数</span></span><br><span class="line">        <span class="comment"># index是正在分析的状态的索引</span></span><br><span class="line">        last_index = <span class="number">0</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 首先得到该状态接受的符号及其对应项目</span></span><br><span class="line">            receive_sign_dict = &#123;&#125;</span><br><span class="line">            <span class="comment"># 遍历状态集中的每一个项目</span></span><br><span class="line">            <span class="keyword">for</span> (left, right) <span class="keyword">in</span> self.status_list[index]:</span><br><span class="line">                <span class="comment"># 找到分隔符</span></span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 如果分隔符不在末尾，将则其后的符号为接受符号</span></span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right):</span><br><span class="line">                    <span class="keyword">if</span> right[i + <span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> receive_sign_dict.keys():</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]] = [(left, right)]</span><br><span class="line">                    <span class="keyword">elif</span> (left, right) <span class="keyword">not</span> <span class="keyword">in</span> receive_sign_dict[right[i + <span class="number">1</span>]]:</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]].append((left, right))</span><br><span class="line">                <span class="comment"># 如果分隔符在末尾</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果左部为拓广文法起始符号，则记录acc</span></span><br><span class="line">                    <span class="keyword">if</span> left == self.new_start:</span><br><span class="line">                        self.analyse_table[index] = &#123;self.sharp: [self.acc, ]&#125;</span><br><span class="line">                    <span class="comment"># 否则找到对应的产生式</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        production_index = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">for</span> left_ <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                            <span class="keyword">for</span> right_ <span class="keyword">in</span> self.productions[left_]:</span><br><span class="line">                                new_right = deepcopy(right)</span><br><span class="line">                                new_right.remove(self.point)</span><br><span class="line">                                <span class="keyword">if</span> (left, new_right) == (left_, right_):</span><br><span class="line">                                    <span class="comment"># 根据左部的follow集将r填入分析表</span></span><br><span class="line">                                    self.analyse_table[index] = &#123;</span><br><span class="line">                                        over: [production_index, <span class="string">'r'</span>, (left_, right_)]</span><br><span class="line">                                        <span class="keyword">for</span> over <span class="keyword">in</span> (self.follow[left_])</span><br><span class="line">                                    &#125;</span><br><span class="line">                                production_index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 遍历接受符号</span></span><br><span class="line">            <span class="keyword">for</span> sign, production_set <span class="keyword">in</span> receive_sign_dict.items():</span><br><span class="line">                <span class="comment"># 用函数go求出新的状态</span></span><br><span class="line">                new_status = self.go(production_set, sign)</span><br><span class="line">                new_action = []</span><br><span class="line">                <span class="comment"># 如果新状态没有和已有的状态重复，讲起加入状态列表</span></span><br><span class="line">                <span class="keyword">if</span> new_status <span class="keyword">not</span> <span class="keyword">in</span> self.status_list:</span><br><span class="line">                    self.status_list.append(new_status)</span><br><span class="line">                    last_index += <span class="number">1</span></span><br><span class="line">                    new_action.append(last_index)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    new_action.append(self.status_list.index(new_status))</span><br><span class="line">                <span class="comment"># 更新分析表</span></span><br><span class="line">                <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">                    new_action.append(production)</span><br><span class="line">                <span class="keyword">if</span> index <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table.keys():</span><br><span class="line">                    self.analyse_table[index] = &#123;sign: new_action&#125;</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.analyse_table[index].update(&#123;sign: new_action&#125;)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果没有状态可以分析，结束循环</span></span><br><span class="line">            <span class="keyword">if</span> index &gt; last_index:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'stauts list:'</span>)</span><br><span class="line">            pprint(self.status_list)</span><br><span class="line">            print(<span class="string">'analyse table:'</span>)</span><br><span class="line">            pprint(self.analyse_table)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 词法分析函数</span></span><br><span class="line">    <span class="comment"># 检查是否为保留字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.token <span class="keyword">in</span> self.reserved <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录tag与string，清空token</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(self, c=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.tag_list.append(self.token <span class="keyword">if</span> c == <span class="string">''</span> <span class="keyword">else</span> c)</span><br><span class="line">        self.string_list.append(self.token)</span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取下一个输出符号，没有返回False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_char</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index == len(self.raw_string):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        self.ch = self.raw_string[self.index]</span><br><span class="line">        self.token += self.ch</span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.ch</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 回退一个符号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retract</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.index = max(self.index - <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.ch = self.raw_string[max(self.index - <span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line">        self.token = self.token[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是字母，循环调用get_char，最后调用out</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alpha</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.index &lt; len(self.raw_string) <span class="keyword">and</span> self.raw_string[self.index].isalnum() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.out(<span class="string">''</span> <span class="keyword">if</span> self.lookup() <span class="keyword">else</span> <span class="string">'id'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是数字，循环调用get_char，最后调用out</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">digit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.index &lt; len(self.raw_string) <span class="keyword">and</span> self.raw_string[self.index].isdigit() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.out(<span class="string">'num'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是单符号终结符，直接调用out</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">one_op</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果可能是多符号终结符，先判断后一个是不是，不是回退</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two_op</span><span class="params">(self)</span>:</span></span><br><span class="line">        now_ch = self.ch</span><br><span class="line">        <span class="keyword">if</span> self.get_char() <span class="keyword">not</span> <span class="keyword">in</span> self.two_next[now_ch]:</span><br><span class="line">            self.retract()</span><br><span class="line">        self.out()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是空格，清空token</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blank</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    switch = &#123;</span><br><span class="line">        <span class="string">'alpha'</span>: alpha,</span><br><span class="line">        <span class="string">'digit'</span>: digit,</span><br><span class="line">        <span class="string">'one_op'</span>: one_op,</span><br><span class="line">        <span class="string">'two_op'</span>: two_op,</span><br><span class="line">        <span class="string">'blank'</span>: blank</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_cifa</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.ch = <span class="string">''</span></span><br><span class="line">        self.tag_list = []</span><br><span class="line">        self.string_list = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> self.get_char():</span><br><span class="line">            <span class="keyword">if</span> self.ch == <span class="string">' '</span>:</span><br><span class="line">                case = <span class="string">'blank'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch.isalpha():</span><br><span class="line">                case = <span class="string">'alpha'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch.isdigit():</span><br><span class="line">                case = <span class="string">'digit'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.one_op_set:</span><br><span class="line">                case = <span class="string">'one_op'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.two_next.keys():</span><br><span class="line">                case = <span class="string">'two_op'</span></span><br><span class="line">            <span class="comment"># 不合法字符，报错退出循环</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'error index %s: unkown character "%s"'</span> % (self.index, self.ch), end=<span class="string">'\n\n'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 词法分析出错，报错退出循环</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.switch[case](self):</span><br><span class="line">                print(<span class="string">'error index %s: unkown character "%s"'</span> % (self.index, self.token), end=<span class="string">'\n\n'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file_name + <span class="string">'.two'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">'lexical analyse:'</span>)</span><br><span class="line">            <span class="keyword">for</span> s, t <span class="keyword">in</span> zip(self.string_list, self.tag_list):</span><br><span class="line">                f.write(<span class="string">'%s %s\n'</span> % (s, t))</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(s, t)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_yufa</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'grammar analyse:'</span>)</span><br><span class="line">        <span class="comment"># 初始化输入串列表、状态栈、符号栈</span></span><br><span class="line">        self.tag_list += self.sharp</span><br><span class="line">        string_index = <span class="number">0</span></span><br><span class="line">        status_stack = [<span class="number">0</span>, ]</span><br><span class="line">        sign_stack = [self.sharp, ]</span><br><span class="line">        <span class="comment"># 初始化语义分析的四元式列表、分析栈</span></span><br><span class="line">        siyuanshi_list = []</span><br><span class="line">        <span class="comment"># 不停分析直到接受</span></span><br><span class="line">        <span class="keyword">while</span> self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">0</span>] != self.acc:</span><br><span class="line">            <span class="comment"># 如果不是r，则为s</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'r'</span> != self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">1</span>]:</span><br><span class="line">                <span class="comment"># push</span></span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(self.tag_list[string_index])</span><br><span class="line">                <span class="comment"># advance</span></span><br><span class="line">                string_index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 为r，取出对应产生式的左部与右部</span></span><br><span class="line">                left = self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                right = self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">                <span class="comment"># 语义分析，四元式</span></span><br><span class="line">                <span class="comment"># TO-DO</span></span><br><span class="line">                <span class="comment"># 语义分析结束</span></span><br><span class="line">                <span class="comment"># pop(第i个产生式右部文法符号的个数)</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    sign_stack.pop()</span><br><span class="line">                    status_stack.pop()</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack)</span><br><span class="line">                <span class="comment"># push(GOTO[新的栈顶状态][第i个产生式的左部])</span></span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][left][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(left)</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack)</span><br><span class="line">            <span class="comment"># error，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> self.tag_list[string_index] <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table[status_stack[<span class="number">-1</span>]].keys():</span><br><span class="line">                print(<span class="string">'fail1'</span>, string_index, self.tag_list[string_index], status_stack[<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            pprint(siyuanshi_list)</span><br><span class="line">        <span class="keyword">with</span> open(self.file_name + <span class="string">'.four'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> siyuanshi <span class="keyword">in</span> siyuanshi_list:</span><br><span class="line">                f.write(<span class="string">'%s %s %s %s\n'</span> % (siyuanshi[<span class="number">0</span>], siyuanshi[<span class="number">1</span>], siyuanshi[<span class="number">2</span>], siyuanshi[<span class="number">3</span>],))</span><br><span class="line">        print(<span class="string">'ok'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, file)</span>:</span></span><br><span class="line">        raw_string = open(file, <span class="string">'r'</span>).read()</span><br><span class="line">        self.raw_string = raw_string.replace(<span class="string">'\t'</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        self.file_name = file[ :file.rindex(<span class="string">'.'</span>)]</span><br><span class="line">        print(<span class="string">'analysing: '</span> + file, end=<span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            print(raw_string, end=<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line">        self.analyse_cifa() <span class="keyword">and</span> self.analyse_yufa()</span><br></pre></td></tr></table></figure><h2 id="front-end-py"><a href="#front-end-py" class="headerlink" title="front_end.py"></a>front_end.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compiler</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tkinter.filedialog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrontEnd</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.temp_file = <span class="string">'temp.txt'</span></span><br><span class="line">        self.log_level = <span class="number">0</span></span><br><span class="line">        self.in_file = <span class="string">'input.txt'</span></span><br><span class="line"></span><br><span class="line">        self.root = Tk()</span><br><span class="line">        self.root.title(<span class="string">'a simple compiler'</span>)</span><br><span class="line">        <span class="comment"># self.root.state("zoomed")</span></span><br><span class="line"></span><br><span class="line">        self.label = Label(self.root, text=self.in_file, wraplength=<span class="number">300</span>, justify=<span class="string">'left'</span>)</span><br><span class="line">        self.label.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, columnspan=<span class="number">3</span>)</span><br><span class="line">        self.botton_file = Button(self.root, text=<span class="string">"选择文件"</span>, command=self.select_file)</span><br><span class="line">        self.botton_file.grid(row=<span class="number">0</span>, column=<span class="number">3</span>, sticky=W + E + N + S)</span><br><span class="line"></span><br><span class="line">        self.boxlist_value = tkinter.StringVar()  <span class="comment"># 窗体自带的文本，新建一个值</span></span><br><span class="line">        self.boxlist = ttk.Combobox(self.root, textvariable=self.boxlist_value)  <span class="comment"># 初始化</span></span><br><span class="line">        self.boxlist[<span class="string">"values"</span>] = (<span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>)</span><br><span class="line">        self.boxlist.current(<span class="number">0</span>)  <span class="comment"># 选择第一个</span></span><br><span class="line">        self.boxlist.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, columnspan=<span class="number">3</span>, sticky=W + E + N + S)</span><br><span class="line">        self.botton_log = Button(self.root, text=<span class="string">"设置log等级"</span>, command=self.set_log_level)</span><br><span class="line">        self.botton_log.grid(row=<span class="number">1</span>, column=<span class="number">3</span>, sticky=W + E + N + S)</span><br><span class="line"></span><br><span class="line">        self.out_text = Text(self.root)</span><br><span class="line">        self.out_text.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, sticky=W + E + N + S, columnspan=<span class="number">4</span>)</span><br><span class="line">        self.scrol = Scrollbar(self.out_text)</span><br><span class="line">        self.scrol.config(command=self.out_text.yview)</span><br><span class="line">        self.out_text.config(yscrollcommand=self.scrol.set)</span><br><span class="line"></span><br><span class="line">        self.button_analyse = Button(self.root, text=<span class="string">'分析'</span>, command=self.analyse)</span><br><span class="line">        self.button_analyse.grid(row=<span class="number">3</span>, column=<span class="number">0</span>, sticky=W + E + N + S, columnspan=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        self.root.mainloop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self)</span>:</span></span><br><span class="line">        console = sys.stdout</span><br><span class="line">        <span class="keyword">with</span> open(self.temp_file, <span class="string">'w'</span>) <span class="keyword">as</span> temp_file:</span><br><span class="line">            sys.stdout = temp_file</span><br><span class="line">            self.compiler = compiler.Compiler(log_level=self.log_level)</span><br><span class="line">            self.compiler.analyse(self.in_file)</span><br><span class="line">        sys.__stdout__ = console</span><br><span class="line">        <span class="keyword">with</span> open(self.temp_file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.out_text.insert(END, f.read())</span><br><span class="line">            self.out_text.see(END)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.in_file = tkinter.filedialog.askopenfilename()</span><br><span class="line">        <span class="keyword">if</span> self.in_file != <span class="string">''</span>:</span><br><span class="line">            self.label.config(text=self.in_file)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.label.config(text=<span class="string">"您没有选择任何文件"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_log_level</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.log_level = int(self.boxlist.get())</span><br><span class="line"></span><br><span class="line">front_end = FrontEnd()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set_productions.py</span><br><span class="line"><span class="keyword">import</span> compiler</span><br><span class="line"></span><br><span class="line"><span class="comment"># P -&gt; &#123; &#125; | &#123; AA &#125;</span></span><br><span class="line"><span class="comment"># AA-&gt; A | A AA</span></span><br><span class="line"><span class="comment"># A -&gt; DD | SS</span></span><br><span class="line"><span class="comment"># DD-&gt; D DD | D</span></span><br><span class="line"><span class="comment"># D -&gt; T ID FH</span></span><br><span class="line"><span class="comment"># ID-&gt; id | id = id | id = num | ID , ID</span></span><br><span class="line"><span class="comment"># T -&gt; T [ num ] | TY</span></span><br><span class="line"><span class="comment"># TY-&gt;int | float | char | bool</span></span><br><span class="line"><span class="comment"># SS-&gt; S | S SS</span></span><br><span class="line"><span class="comment"># S -&gt; L = E FH | if ( B ) S | if ( B ) S else S | while ( B ) S | do S while ( B ) FH | break FH | continue FH | P</span></span><br><span class="line"><span class="comment"># B -&gt; B or B | B and B | ! B | ( B ) | E &lt; E | E &gt; E | E &lt;= E | E &gt;= E | E == E | E != E | true | false</span></span><br><span class="line"><span class="comment"># E -&gt; E + E | E - E | E * E | E / E | L | ( E ) | num | id</span></span><br><span class="line"><span class="comment"># L -&gt; id [ E ] | id</span></span><br><span class="line"><span class="comment"># FH-&gt; ; | FH ;</span></span><br><span class="line"></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'P'</span>: [</span><br><span class="line">        [<span class="string">'&#123;'</span>, <span class="string">'AA'</span>, <span class="string">'&#125;'</span>],</span><br><span class="line">        [<span class="string">'&#123;'</span>, <span class="string">'&#125;'</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'AA'</span>: [</span><br><span class="line">        [<span class="string">'A'</span>, ],</span><br><span class="line">        [<span class="string">'A'</span>, <span class="string">'AA'</span>]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'A'</span>: [</span><br><span class="line">        [<span class="string">'DD'</span>, ],</span><br><span class="line">        [<span class="string">'SS'</span>, ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'DD'</span>: [</span><br><span class="line">        [<span class="string">'D'</span>, <span class="string">'DD'</span>],</span><br><span class="line">        [<span class="string">'D'</span>, ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'D'</span>: [</span><br><span class="line">        [<span class="string">'T'</span>, <span class="string">'ID'</span>, <span class="string">'FH'</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'ID'</span>: [</span><br><span class="line">        [<span class="string">'id'</span>, ],</span><br><span class="line">        [<span class="string">'id'</span>, <span class="string">'='</span>, <span class="string">'id'</span>],</span><br><span class="line">        [<span class="string">'id'</span>, <span class="string">'='</span>, <span class="string">'num'</span>],</span><br><span class="line">        [<span class="string">'ID'</span>, <span class="string">','</span>, <span class="string">'ID'</span>],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'T'</span>: [</span><br><span class="line">        [<span class="string">'T'</span>, <span class="string">'['</span>, <span class="string">'num'</span>, <span class="string">']'</span>],</span><br><span class="line">        [<span class="string">'TY'</span>, ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'TY'</span>: [</span><br><span class="line">        [<span class="string">'int'</span>, ],</span><br><span class="line">        [<span class="string">'float'</span>, ],</span><br><span class="line">        [<span class="string">'char'</span>, ],</span><br><span class="line">        [<span class="string">'bool'</span>, ],</span><br><span class="line">        [<span class="string">'double'</span>, ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'SS'</span>: [</span><br><span class="line">        [<span class="string">'S'</span>, <span class="string">'SS'</span>],</span><br><span class="line">        [<span class="string">'S'</span>, ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'S'</span>: [</span><br><span class="line">        [<span class="string">'L'</span>, <span class="string">'='</span>, <span class="string">'E'</span>, <span class="string">'FH'</span>],</span><br><span class="line">        [<span class="string">'if'</span>, <span class="string">'('</span>, <span class="string">'B'</span>, <span class="string">')'</span>, <span class="string">'S'</span>],</span><br><span class="line">        [<span class="string">'if'</span>, <span class="string">'('</span>, <span class="string">'B'</span>, <span class="string">')'</span>, <span class="string">'S'</span>, <span class="string">'else'</span>, <span class="string">'S'</span>],</span><br><span class="line">        [<span class="string">'while'</span>, <span class="string">'('</span>, <span class="string">'B'</span>, <span class="string">')'</span>, <span class="string">'S'</span>],</span><br><span class="line">        [<span class="string">'while'</span>, <span class="string">'('</span>, <span class="string">'B'</span>, <span class="string">')'</span>, <span class="string">'FH'</span>],</span><br><span class="line">        [<span class="string">'do'</span>, <span class="string">'S'</span>, <span class="string">'while'</span>, <span class="string">'('</span>, <span class="string">'B'</span>, <span class="string">')'</span>, <span class="string">'FH'</span>],</span><br><span class="line">        [<span class="string">'break'</span>, <span class="string">'FH'</span>],</span><br><span class="line">        [<span class="string">'continue'</span>, <span class="string">'FH'</span>],</span><br><span class="line">        [<span class="string">'P'</span>, ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'B'</span>: [</span><br><span class="line">        [<span class="string">'B'</span>, <span class="string">'or'</span>, <span class="string">'B'</span>],</span><br><span class="line">        [<span class="string">'B'</span>, <span class="string">'and'</span>, <span class="string">'B'</span>],</span><br><span class="line">        [<span class="string">'!'</span>, <span class="string">'B'</span>],</span><br><span class="line">        [<span class="string">'('</span>, <span class="string">'B'</span>, <span class="string">')'</span>],</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'&lt;'</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'&gt;'</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'&lt;='</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'&gt;='</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'=='</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'!='</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'true'</span>, ],</span><br><span class="line">        [<span class="string">'false'</span>, ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'E'</span>: [</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'+'</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'-'</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'*'</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'E'</span>, <span class="string">'/'</span>, <span class="string">'E'</span>],</span><br><span class="line">        [<span class="string">'L'</span>, ],</span><br><span class="line">        [<span class="string">'('</span>, <span class="string">'B'</span>, <span class="string">')'</span>],</span><br><span class="line">        [<span class="string">'num'</span>, ],</span><br><span class="line">        [<span class="string">'id'</span>, ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'L'</span>: [</span><br><span class="line">        [<span class="string">'L'</span>, <span class="string">'['</span>, <span class="string">'E'</span>, <span class="string">']'</span>, ],</span><br><span class="line">        [<span class="string">'id'</span>, ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'FH'</span>: [</span><br><span class="line">        [<span class="string">';'</span>, ],</span><br><span class="line">        [<span class="string">';'</span>, <span class="string">'FH'</span>, ],</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">start = <span class="string">'P'</span></span><br><span class="line">compiler.write_productions_to_file(start, productions)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《操作系统》课程设计-基于Linux0.11的多级队列进程调度算法</title>
      <link href="/2018/06/21/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E4%BA%8ELinux0-11%E7%9A%84%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​        只有真正的研读linux源代码，才能对操作系统有直观具体的认识；只有真正的修改linux源代码，才能对操作系统的某些方面有深刻的理解与掌握。因此，我选择linux内核中进程调度相关代码，在仔细研究之后对其做出合理正确修改，从而达到实验的目的。</p><h1 id="使用bochs修改、编译、运行linux-0-11"><a href="#使用bochs修改、编译、运行linux-0-11" class="headerlink" title="使用bochs修改、编译、运行linux-0.11"></a>使用bochs修改、编译、运行linux-0.11</h1><p>由于此前没有对linux内核进行系统地学习，所以本部分完全按照文献[1]中步骤进行，旨在熟悉linux内核的结构。唯一需要补充的是，为了完美修改文件bootsect.s中在系统引导中的输出，46和msg1是需要被同步修改的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">! Print some inane message  </span><br><span class="line">mov    ah,#0x03        ! read cursor pos  </span><br><span class="line">xor    bh,bh  </span><br><span class="line">int    0x10  </span><br><span class="line">mov    cx,#46  </span><br><span class="line">mov    bx,#0x0007        ! page 0, attribute 7 (normal)  </span><br><span class="line">mov    bp,#msg1  </span><br><span class="line">mov    ax,#0x1301        ! write string, move cursor  </span><br><span class="line">int    0x10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg1:  </span><br><span class="line">.byte 13,10  </span><br><span class="line">.ascii &quot;Loading system ...this is from wang22ti&quot;  </span><br><span class="line">.byte 13,10,13,10  </span><br><span class="line">.org 508</span><br></pre></td></tr></table></figure><p>输出如下，符合预期。</p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image1.png" alt="image1"></p><h1 id="Hack-linux0-11"><a href="#Hack-linux0-11" class="headerlink" title="Hack linux0.11"></a>Hack linux0.11</h1><p>​    使用bochs进行内核的学习，一方面编辑体验较差，另一方面操作繁琐，需要反复备份，因此很多时间浪费在与操作系统无关的操作上。所幸有资料[2]中作者有效的工作，使得在linux环境下，内核的修改、编译、运行变得极为容易方便，从而让学习者能够真正把精力放在操作系统中。<br>    将下载的压缩包提取到linux虚拟机（比如Ubuntu）的任意位置，并使用目录linux-0.11-master下通过make命令对内核完成编译如下图所示：</p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image2.png" alt="image2"></p><p>如果是第一次运行，可能会提示缺少软件，只需要通过命令sudo apt-get install qemu安装即可。之后通过make start命令，linux0.11就跑起来啦：</p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image3.png" alt="image3"></p><p>实际上该程序的作者将制作软盘镜像、配置虚拟机的过程全部写在Makefile中，本质是在linux(ubuntu)虚拟机里面跑了一台linux0.11的虚拟机。所以直接使用gedit或者vs code等等编辑器修改源代码后再重复上述操作即可，所以以下均使用该版本的linux0.11进行学习。</p><h1 id="linux内核进程调度算法的阅读"><a href="#linux内核进程调度算法的阅读" class="headerlink" title="linux内核进程调度算法的阅读"></a>linux内核进程调度算法的阅读</h1><p>​    linux进程调度算法是在/kernel/sched.c中实现的，另外比较重要的声明在/include/linux/sched.h和/include/signal.h两个头文件中，其中最需要的关注的是sched.c中的task数组和schedule函数、sched.h中对task_struct的声明、signal.h中对signal常量的宏定义。</p><h2 id="task与sched-h"><a href="#task与sched-h" class="headerlink" title="task与sched.h"></a>task与sched.h</h2><p>​    该数组存放了所有进程的指针，定义语句为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">task</span>[<span class="title">NR_TASKS</span>] = &#123;</span>&amp;(init_task.task), &#125;;</span><br></pre></td></tr></table></figure><p>其中NR_TASKS为number of tasks=64在sched.h中的宏定义，而init_task定义在sched.c中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">union</span> task_union init_task = &#123;INIT_TASK,&#125;;</span><br></pre></td></tr></table></figure><p>其中INIT_TASK是一个超大的数组，宏定义在Sched.h中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT_TASK \</span></span><br><span class="line"><span class="comment">/* state etc */</span>&#123; <span class="number">0</span>,<span class="number">15</span>,<span class="number">15</span>, \</span><br><span class="line"><span class="comment">/* signals */</span><span class="number">0</span>,&#123;&#123;&#125;,&#125;,<span class="number">0</span>, \</span><br><span class="line"><span class="comment">/* ec,brk... */</span><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, \</span><br><span class="line"><span class="comment">/* pid etc.. */</span><span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, \</span><br><span class="line"><span class="comment">/* uid etc */</span><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, \</span><br><span class="line"><span class="comment">/* alarm */</span><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, \</span><br><span class="line"><span class="comment">/* math */</span><span class="number">0</span>, \</span><br><span class="line"><span class="comment">/* fs info */</span><span class="number">-1</span>,<span class="number">0022</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">0</span>, \</span><br><span class="line"><span class="comment">/* filp */</span>&#123;<span class="literal">NULL</span>,&#125;, \</span><br><span class="line">&#123; \</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>&#125;, \</span><br><span class="line"><span class="comment">/* ldt */</span>&#123;<span class="number">0x9f</span>,<span class="number">0xc0fa00</span>&#125;, \</span><br><span class="line">&#123;<span class="number">0x9f</span>,<span class="number">0xc0f200</span>&#125;, \</span><br><span class="line">&#125;, \</span><br><span class="line"><span class="comment">/*tss*/</span>&#123;<span class="number">0</span>,PAGE_SIZE+(<span class="keyword">long</span>)&amp;init_task,<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,(<span class="keyword">long</span>)&amp;pg_dir,\</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, \</span><br><span class="line"> <span class="number">0</span>,<span class="number">0</span>,<span class="number">0x17</span>,<span class="number">0x17</span>,<span class="number">0x17</span>,<span class="number">0x17</span>,<span class="number">0x17</span>,<span class="number">0x17</span>, \</span><br><span class="line"> _LDT(<span class="number">0</span>),<span class="number">0x80000000</span>, \</span><br><span class="line">&#123;&#125; \</span><br><span class="line">&#125;, \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，就可以明白linux中进程task有哪些属性、它是如何被初始化的。struct task_struct中state表示task的状态；counter可以理解为剩余的时间片；priority当然是优先级；signal需要参考signal.h中的宏定义，简而言之是每一位都有特定含义的“位图（bitmap）”；alarm是根据时间片设定的可以执行的最后时间；pid是进程的进程号。其他的可以参考文献4，在此不做赘述。</p><h2 id="schedule"><a href="#schedule" class="headerlink" title="schedule()"></a>schedule()</h2><p>​    所有linux进程都是依靠这个函数调度，但是实际上却不长：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,next,c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> ** <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check alarm, wake up any interruptible tasks that have got a signal */</span></span><br><span class="line"><span class="comment">// 遍历所有非空task指针</span></span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class="line"><span class="keyword">if</span> (*p) &#123;</span><br><span class="line"><span class="comment">// 如果alarm超过了jiffies（系统从开机到现在的时间，单位为10ms）</span></span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;alarm &amp;&amp; (*p)-&gt;alarm &lt; jiffies) &#123;</span><br><span class="line">(*p)-&gt;signal |= (<span class="number">1</span>&lt;&lt;(SIGALRM<span class="number">-1</span>));</span><br><span class="line">(*p)-&gt;alarm = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是可以就绪的task，设置状态为TASK_RUNNING</span></span><br><span class="line"><span class="keyword">if</span> (((*p)-&gt;signal &amp; ~(_BLOCKABLE &amp; (*p)-&gt;blocked)) &amp;&amp;</span><br><span class="line">(*p)-&gt;state==TASK_INTERRUPTIBLE)</span><br><span class="line">(*p)-&gt;state=TASK_RUNNING;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* this is the scheduler proper: */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">c = <span class="number">-1</span>;</span><br><span class="line">next = <span class="number">0</span>;</span><br><span class="line">i = NR_TASKS;</span><br><span class="line">p = &amp;task[NR_TASKS];</span><br><span class="line"><span class="comment">// 保证next是counter最大的那一个</span></span><br><span class="line"><span class="keyword">while</span> (--i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!*--p)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)</span><br><span class="line">c = (*p)-&gt;counter, next = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// counter与优先级正线性相关</span></span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class="line"><span class="keyword">if</span> (*p)</span><br><span class="line">(*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; <span class="number">1</span>) +</span><br><span class="line">(*p)-&gt;priority;</span><br><span class="line">&#125;</span><br><span class="line">switch_to(next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中除了变量声明，第一部分就是确定在本次正式调度之前，有哪些task是可以被调度的；第三部分switch_to(next);就是开始执行数组task中序号为next的进程；而第二部分要做的就是在可以被调度的task中选一个，将它的序号赋给next。linux0.11本质上选的是优先权最高的，所以其调度算法被称为基于时间片的优先级调度算法。 </p><h1 id="linux0-11进程调度算法的修改"><a href="#linux0-11进程调度算法的修改" class="headerlink" title="linux0.11进程调度算法的修改"></a>linux0.11进程调度算法的修改</h1><h2 id="随机调度算法"><a href="#随机调度算法" class="headerlink" title="随机调度算法"></a>随机调度算法</h2><p>​    为了验证hack linux的有效性，为正式修改进行实践经验的积累，先参照文献[4]将内核调度算法修改为基于时间片的随机调度算法。与原算法不同之处均已标注如下，其核心思想在于将jiffies作为随机数，在可调度的task中随机选择一个作为next。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//random*****************************************************************</span></span><br><span class="line"><span class="keyword">int</span> sum, rand, n;</span><br><span class="line"><span class="keyword">int</span> no[NR_TASKS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line">next = <span class="number">0</span>;</span><br><span class="line">i = NR_TASKS;</span><br><span class="line">p = &amp;task[NR_TASKS];</span><br><span class="line"><span class="keyword">while</span> (--i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!*--p) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">sum++;</span><br><span class="line">no[n++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class="line"><span class="keyword">if</span> (*p)</span><br><span class="line">(*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; <span class="number">1</span>) +</span><br><span class="line">(*p)-&gt;priority;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rand = jiffies % sum;</span><br><span class="line">next = no[rand];</span><br></pre></td></tr></table></figure><p>经测试，在随机调度算法系统运行正常如下。 </p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image4.png" alt="image4"></p><h2 id="FIFO算法"><a href="#FIFO算法" class="headerlink" title="FIFO算法"></a>FIFO算法</h2><p>​    由于linux0.11中没有给出队列的数据结构（也有可能是我不知道），所以在sched.c中实现顺序队列结构queue_t以及对应的函数int init_queue(queue_t <em>queue)、void destroy_queue(queue_t </em>queue)、int is_empty_queue(queue_t <em>queue)、int is_full_queue(queue_t </em>queue)、void clear_queue(queue_t <em>queue)、int in_queue(queue_t </em>queue, data_t x)、void print_queue(queue_t <em>queue)、int enter_queue(queue_t </em>queue, data_t x)、int leave_queue(queue_t <em>queue)、data_t get_queue_front(queue_t </em>queue)、data_t get_queue_rear(queue_t *queue)。之所以没有新建头文件queue.h一方面是由于需要修改Makefile文件增加了无关工作量，另一方面更重要的是不方便在实验报告中描述。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="keyword">data_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">data_t</span> data[NR_TASKS]; <span class="comment">//用数组作为队列的储存空间</span></span><br><span class="line">    <span class="keyword">int</span> front,rear; <span class="comment">//指示队头位置和队尾位置的指针</span></span><br><span class="line">&#125;<span class="keyword">queue_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span> = (<span class="keyword">queue_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">queue_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> != <span class="literal">NULL</span>) <span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">queue</span>-&gt;front == <span class="built_in">queue</span>-&gt;rear ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_full_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> ( ((<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % NR_TASKS) == <span class="built_in">queue</span>-&gt;front ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">in_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>, <span class="keyword">data_t</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % NR_TASKS; i &lt; (<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % NR_TASKS; i = (i + <span class="number">1</span>) % NR_TASKS) &#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="built_in">queue</span>-&gt;data[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % NR_TASKS; i &lt; (<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % NR_TASKS; i = (i + <span class="number">1</span>) % NR_TASKS) &#123;</span><br><span class="line">printk(<span class="string">"%d "</span>, <span class="built_in">queue</span>-&gt;data[i]);</span><br><span class="line">&#125;</span><br><span class="line">printk(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">enter_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>, <span class="keyword">data_t</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span> || is_full_queue(<span class="built_in">queue</span>)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = (<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % NR_TASKS;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leave_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span> || is_empty_queue(<span class="built_in">queue</span>)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">queue</span>-&gt;front = (<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % NR_TASKS;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data_t</span> get_queue_front(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span> || is_empty_queue(<span class="built_in">queue</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">queue</span>-&gt;data[(<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % NR_TASKS];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data_t</span> get_queue_rear(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span> || is_empty_queue(<span class="built_in">queue</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了验证我写的顺序队列是有效的，同时为了多级队列积累实践经验，所以先实现基于时间片的FIFO调度算法。</p><p>在修改sched.c之前，要学会初始化一个全局的队列。由于linux在运行完boot相关的程序后运行/init/main.c完成内核的初始化，同时如下图注意到进程调度的初始化是由main函数中的sched_init();语句完成的：</p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image5.png" alt="image5"></p><p>所以除了在sched.c中声明队列外，还需要在函数void sched_init(void)中调用函数int init_queue(queue_t *queue)完成对队列的初始化如下图，其中queue用在FIFO算法中，queue1和queue2用在多级队列中，以下不再赘述。</p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image6.png" alt="image6"></p><p>接下来，同在随机调度部分相似，修改调度算法如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FIFO***********************************************************************</span></span><br><span class="line"><span class="keyword">int</span> front_index = get_queue_front(&amp;task_queue);</span><br><span class="line">p = &amp;task[front_index];</span><br><span class="line">leave_queue(&amp;task_queue);</span><br><span class="line"></span><br><span class="line">i = NR_TASKS;</span><br><span class="line">p = &amp;task[NR_TASKS];</span><br><span class="line"><span class="keyword">while</span> (--i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!*--p) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (((*p)-&gt;state == TASK_RUNNING) &amp;&amp;</span><br><span class="line">(*p)-&gt;counter &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">!in_queue(&amp;task_queue, i) &amp;&amp;</span><br><span class="line">!is_full_queue(&amp;task_queue)) &#123;</span><br><span class="line">enter_queue(&amp;task_queue, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if (!is_empty_queue(&amp;task_queue)) &#123;print_queue(&amp;task_queue);&#125;</span></span><br><span class="line">next = get_queue_front(&amp;task_queue);</span><br></pre></td></tr></table></figure><p>由于只有在时间片结束或者进程结束才会调用函数schedule，所以直接让队首task出队，然后让所有就绪进程入队，最后调度队首task即可。经测试，在随机调度算法系统运行正常如下，其中会在队列非空时打印队列的进程号pid和时间片counter。进程号为1、2的进程应该是完成对系统的初始化。 </p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image7.png" alt="image7"></p><p>进一步运行ls命令，发现进程号为4的进程多次被调度，可以推测其作用为接受标准输入；而进程号为5、6、7的进程可能是bash处理输入命令的进程；进程号为3的进程应该是一个定时的检测函数，每个一段时间会被调度一次。 </p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image8.png" alt="image8"></p><h2 id="多级反馈队列算法"><a href="#多级反馈队列算法" class="headerlink" title="多级反馈队列算法"></a>多级反馈队列算法</h2><p>​        在上述积累的基础上，可以比较容易地实现基于时间片的两级队列调度算法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// multi-queue****************************************************************</span></span><br><span class="line"><span class="comment">// 队首进程出队，task_queue1的优先级要高于task_queue2</span></span><br><span class="line"><span class="keyword">int</span> front_index1 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> front_index2 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(&amp;task_queue1)) &#123;</span><br><span class="line">front_index1 = get_queue_front(&amp;task_queue1);</span><br><span class="line">p = &amp;task[front_index1];</span><br><span class="line">leave_queue(&amp;task_queue1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!is_empty_queue(&amp;task_queue2)) &#123;</span><br><span class="line">front_index2 = get_queue_front(&amp;task_queue2);</span><br><span class="line">p = &amp;task[front_index2];</span><br><span class="line">leave_queue(&amp;task_queue2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在所有就绪的task中，如果非此前的队首task，入task_queue1并置时间片为优先级；否则入task_queue2并置时间片为优先级5倍</span></span><br><span class="line">i = NR_TASKS;</span><br><span class="line">p = &amp;task[NR_TASKS];</span><br><span class="line"><span class="keyword">while</span> (--i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!*--p) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (((*p)-&gt;state == TASK_RUNNING) &amp;&amp;</span><br><span class="line">(*p)-&gt;counter &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">!in_queue(&amp;task_queue1, i) &amp;&amp;</span><br><span class="line">!in_queue(&amp;task_queue2, i) &amp;&amp;</span><br><span class="line">!is_full_queue(&amp;task_queue1)</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (front_index2 == i ||front_index1 == i) &#123;</span><br><span class="line">enter_queue(&amp;task_queue2, i);</span><br><span class="line">(*p)-&gt;counter = <span class="comment">//((*p)-&gt;counter &gt;&gt; 1) +</span></span><br><span class="line">(*p)-&gt;priority * <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">enter_queue(&amp;task_queue1, i);</span><br><span class="line">(*p)-&gt;counter = <span class="comment">//((*p)-&gt;counter &gt;&gt; 1) +</span></span><br><span class="line">(*p)-&gt;priority;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调度下一个task，task_queue1的优先级要高于task_queue2，如果两个队列均空就调度默认task</span></span><br><span class="line">next = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(&amp;task_queue1)) &#123;</span><br><span class="line">next = get_queue_front(&amp;task_queue1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!is_empty_queue(&amp;task_queue2)) &#123;</span><br><span class="line">next = get_queue_front(&amp;task_queue2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(&amp;task_queue1)) &#123;printk(<span class="string">"1:\t"</span>); print_queue(&amp;task_queue1);&#125;</span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(&amp;task_queue2)) &#123;printk(<span class="string">"2:\t"</span>); print_queue(&amp;task_queue2);&#125;</span><br></pre></td></tr></table></figure><p>和FIFO部分相同，对多级队列调度算法进行测试如下。</p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image9.png" alt="image9"></p><p><img src="/2018/06/21/《操作系统》课程设计-基于Linux0-11的多级队列进程调度算法/image10.png" alt="image10"></p><p>可见很好的完成了多级队列的调度，队列1具有高优先级，其中的任务在时间片结束时若没有执行完则进入队列2且具有5倍的时间片。 </p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>​        本次实验中，通过对于linux0.11内核的阅读与修改，让我对操作系统的运行方法有了较为直观鲜明的认识，同时进一步熟悉了随机、FIFO和多级队列三种算法。这一方面提高了我的编程能力，另一方面更重要的是激发了探索的热情，这必将为我今后的学习带来取之不尽的财富。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] Windows下用Bochs编译运行Linux-0.11</p><p><a href="https://blog.csdn.net/u014688145/article/details/50575588" target="_blank" rel="noopener">https://blog.csdn.net/u014688145/article/details/50575588</a></p><p>[2] hack linux </p><p><a href="https://github.com/yuanxinyu/Linux-0.11" target="_blank" rel="noopener">https://github.com/yuanxinyu/Linux-0.11</a></p><p>[3] linux0.11相关进程数据结构</p><p><a href="http://www.cppblog.com/jake1036/archive/2010/11/13/133530.html" target="_blank" rel="noopener">http://www.cppblog.com/jake1036/archive/2010/11/13/133530.html</a></p><p>[4] 俞露. 基于Linux随机进程调度算法的实现[J]. 福建电脑,2013,29(02):108-109.</p><h1 id="附录：实验源码"><a href="#附录：实验源码" class="headerlink" title="附录：实验源码"></a>附录：实验源码</h1><p>​        本次实验中修改过的文件包括/kernel/sched.c和/init/main.c，为保证完整性将两者全部复制如下。</p><h2 id="sched-c"><a href="#sched-c" class="headerlink" title="sched.c"></a>sched.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  linux/kernel/sched.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  (C) 1991  Linus Torvalds</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 'sched.c' is the main kernel file. It contains scheduling primitives</span></span><br><span class="line"><span class="comment"> * (sleep_on, wakeup, schedule etc) as well as a number of simple system</span></span><br><span class="line"><span class="comment"> * call functions (type getpid(), which just extracts a field from</span></span><br><span class="line"><span class="comment"> * current-task</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sys.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fdreg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/system.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/segment.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _S(nr) (1&lt;&lt;((nr)-1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _BLOCKABLE (~(_S(SIGKILL) | _S(SIGSTOP)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_task</span><span class="params">(<span class="keyword">int</span> nr,struct task_struct * p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j = <span class="number">4096</span>-<span class="keyword">sizeof</span>(struct task_struct);</span><br><span class="line"></span><br><span class="line">printk(<span class="string">"%d: pid=%d, state=%d, "</span>,nr,p-&gt;pid,p-&gt;state);</span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;j &amp;&amp; !((<span class="keyword">char</span> *)(p+<span class="number">1</span>))[i])</span><br><span class="line">i++;</span><br><span class="line">printk(<span class="string">"%d (of %d) chars free in kernel stack\n\r"</span>,i,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_stat</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NR_TASKS;i++)</span><br><span class="line"><span class="keyword">if</span> (task[i])</span><br><span class="line">show_task(i,task[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LATCH (1193180/HZ)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">mem_use</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">timer_interrupt</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">system_call</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> task_union &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> <span class="title">task</span>;</span></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">stack</span>[PAGE_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">union</span> task_union init_task = &#123;INIT_TASK,&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">volatile</span> jiffies=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> startup_time=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">current</span> = &amp;(<span class="title">init_task</span>.<span class="title">task</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">last_task_used_math</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">task</span>[<span class="title">NR_TASKS</span>] = &#123;</span>&amp;(init_task.task), &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> user_stack [ PAGE_SIZE&gt;&gt;<span class="number">2</span> ] ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> * a;</span><br><span class="line"><span class="keyword">short</span> b;</span><br><span class="line">&#125; stack_start = &#123; &amp; user_stack [PAGE_SIZE&gt;&gt;<span class="number">2</span>] , <span class="number">0x10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// queue</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="keyword">data_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">data_t</span> data[NR_TASKS]; <span class="comment">//用数组作为队列的储存空间</span></span><br><span class="line">    <span class="keyword">int</span> front,rear; <span class="comment">//指示队头位置和队尾位置的指针</span></span><br><span class="line">&#125;<span class="keyword">queue_t</span>;</span><br><span class="line"><span class="keyword">queue_t</span> task_queue;</span><br><span class="line"><span class="keyword">queue_t</span> task_queue1;</span><br><span class="line"><span class="keyword">queue_t</span> task_queue2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span> = (<span class="keyword">queue_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">queue_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> != <span class="literal">NULL</span>) <span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">queue</span>-&gt;front == <span class="built_in">queue</span>-&gt;rear ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_full_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> ( ((<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % NR_TASKS) == <span class="built_in">queue</span>-&gt;front ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">in_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>, <span class="keyword">data_t</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % NR_TASKS; i &lt; (<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % NR_TASKS; i = (i + <span class="number">1</span>) % NR_TASKS) &#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="built_in">queue</span>-&gt;data[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % NR_TASKS; i &lt; (<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % NR_TASKS; i = (i + <span class="number">1</span>) % NR_TASKS) &#123;</span><br><span class="line"><span class="comment">// printk("%d ", queue-&gt;data[i]);</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="built_in">queue</span>-&gt;data[i];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> ** <span class="title">p</span> = &amp;<span class="title">task</span>[<span class="title">index</span>];</span></span><br><span class="line">printk(<span class="string">"%d - %d\t"</span>, (*p)-&gt;pid, (*p)-&gt;counter);</span><br><span class="line">&#125;</span><br><span class="line">printk(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">enter_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>, <span class="keyword">data_t</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span> || is_full_queue(<span class="built_in">queue</span>)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = (<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % NR_TASKS;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leave_queue</span><span class="params">(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span> || is_empty_queue(<span class="built_in">queue</span>)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">queue</span>-&gt;front = (<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % NR_TASKS;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data_t</span> get_queue_front(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span> || is_empty_queue(<span class="built_in">queue</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">queue</span>-&gt;data[(<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % NR_TASKS];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data_t</span> get_queue_rear(<span class="keyword">queue_t</span> *<span class="built_in">queue</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span> || is_empty_queue(<span class="built_in">queue</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  'math_state_restore()' saves the current math information in the</span></span><br><span class="line"><span class="comment"> * old math state array, and gets the new ones from the current task</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">math_state_restore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (last_task_used_math == current)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">__asm__(<span class="string">"fwait"</span>);</span><br><span class="line"><span class="keyword">if</span> (last_task_used_math) &#123;</span><br><span class="line">__asm__(<span class="string">"fnsave %0"</span>::<span class="string">"m"</span> (last_task_used_math-&gt;tss.i387));</span><br><span class="line">&#125;</span><br><span class="line">last_task_used_math=current;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;used_math) &#123;</span><br><span class="line">__asm__(<span class="string">"frstor %0"</span>::<span class="string">"m"</span> (current-&gt;tss.i387));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">__asm__(<span class="string">"fninit"</span>::);</span><br><span class="line">current-&gt;used_math=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  'schedule()' is the scheduler function. This is GOOD CODE! There</span></span><br><span class="line"><span class="comment"> * probably won't be any reason to change this, as it should work well</span></span><br><span class="line"><span class="comment"> * in all circumstances (ie gives IO-bound processes good response etc).</span></span><br><span class="line"><span class="comment"> * The one thing you might take a look at is the signal-handler code here.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   NOTE!!  Task 0 is the 'idle' task, which gets called when no other</span></span><br><span class="line"><span class="comment"> * tasks can run. It can not be killed, and it cannot sleep. The 'state'</span></span><br><span class="line"><span class="comment"> * information in task[0] is never used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,next,c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> ** <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check alarm, wake up any interruptible tasks that have got a signal */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class="line"><span class="keyword">if</span> (*p) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;alarm &amp;&amp; (*p)-&gt;alarm &lt; jiffies) &#123;</span><br><span class="line">(*p)-&gt;signal |= (<span class="number">1</span>&lt;&lt;(SIGALRM<span class="number">-1</span>));</span><br><span class="line">(*p)-&gt;alarm = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (((*p)-&gt;signal &amp; ~(_BLOCKABLE &amp; (*p)-&gt;blocked)) &amp;&amp;</span><br><span class="line">(*p)-&gt;state==TASK_INTERRUPTIBLE)</span><br><span class="line">(*p)-&gt;state=TASK_RUNNING;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* this is the scheduler proper: */</span></span><br><span class="line"><span class="comment">// default*************************************************************************</span></span><br><span class="line"><span class="comment">/*while (1) &#123;</span></span><br><span class="line"><span class="comment">c = -1;</span></span><br><span class="line"><span class="comment">next = 0;</span></span><br><span class="line"><span class="comment">i = NR_TASKS;</span></span><br><span class="line"><span class="comment">p = &amp;task[NR_TASKS];</span></span><br><span class="line"><span class="comment">while (--i) &#123;</span></span><br><span class="line"><span class="comment">if (!*--p)</span></span><br><span class="line"><span class="comment">continue;</span></span><br><span class="line"><span class="comment">if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)</span></span><br><span class="line"><span class="comment">c = (*p)-&gt;counter, next = i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (c) break;</span></span><br><span class="line"><span class="comment">for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span></span><br><span class="line"><span class="comment">if (*p)</span></span><br><span class="line"><span class="comment">(*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; 1) +</span></span><br><span class="line"><span class="comment">(*p)-&gt;priority;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//random*************************************************************************</span></span><br><span class="line"><span class="comment">/*int sum, rand, n;</span></span><br><span class="line"><span class="comment">int no[NR_TASKS];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while (1) &#123;</span></span><br><span class="line"><span class="comment">sum = 0;</span></span><br><span class="line"><span class="comment">n = 0;</span></span><br><span class="line"><span class="comment">next = 0;</span></span><br><span class="line"><span class="comment">i = NR_TASKS;</span></span><br><span class="line"><span class="comment">p = &amp;task[NR_TASKS];</span></span><br><span class="line"><span class="comment">while (--i) &#123;</span></span><br><span class="line"><span class="comment">if (!*--p) &#123;</span></span><br><span class="line"><span class="comment">continue;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">sum++;</span></span><br><span class="line"><span class="comment">no[n++] = i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (sum) break;</span></span><br><span class="line"><span class="comment">for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span></span><br><span class="line"><span class="comment">if (*p)</span></span><br><span class="line"><span class="comment">(*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; 1) +</span></span><br><span class="line"><span class="comment">(*p)-&gt;priority;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rand = jiffies % sum;</span></span><br><span class="line"><span class="comment">next = no[rand];*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//FIFO*************************************************************************</span></span><br><span class="line"><span class="comment">/*int front_index = get_queue_front(&amp;task_queue);</span></span><br><span class="line"><span class="comment">p = &amp;task[front_index];</span></span><br><span class="line"><span class="comment">leave_queue(&amp;task_queue);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">i = NR_TASKS;</span></span><br><span class="line"><span class="comment">p = &amp;task[NR_TASKS];</span></span><br><span class="line"><span class="comment">while (--i) &#123;</span></span><br><span class="line"><span class="comment">if (!*--p) &#123;</span></span><br><span class="line"><span class="comment">continue;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (((*p)-&gt;state == TASK_RUNNING) &amp;&amp;</span></span><br><span class="line"><span class="comment">(*p)-&gt;counter &gt; 0 &amp;&amp;</span></span><br><span class="line"><span class="comment">!in_queue(&amp;task_queue, i) &amp;&amp;</span></span><br><span class="line"><span class="comment">!is_full_queue(&amp;task_queue)) &#123;</span></span><br><span class="line"><span class="comment">enter_queue(&amp;task_queue, i);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (!is_empty_queue(&amp;task_queue)) &#123;print_queue(&amp;task_queue);&#125;</span></span><br><span class="line"><span class="comment">next = get_queue_front(&amp;task_queue);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// multi-queue*************************************************************************</span></span><br><span class="line"><span class="keyword">int</span> front_index1 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> front_index2 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(&amp;task_queue1)) &#123;</span><br><span class="line">front_index1 = get_queue_front(&amp;task_queue1);</span><br><span class="line">p = &amp;task[front_index1];</span><br><span class="line">leave_queue(&amp;task_queue1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!is_empty_queue(&amp;task_queue2)) &#123;</span><br><span class="line">front_index2 = get_queue_front(&amp;task_queue2);</span><br><span class="line">p = &amp;task[front_index2];</span><br><span class="line">leave_queue(&amp;task_queue2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i = NR_TASKS;</span><br><span class="line">p = &amp;task[NR_TASKS];</span><br><span class="line"><span class="keyword">while</span> (--i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!*--p) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (((*p)-&gt;state == TASK_RUNNING) &amp;&amp;</span><br><span class="line">(*p)-&gt;counter &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">!in_queue(&amp;task_queue1, i) &amp;&amp;</span><br><span class="line">!in_queue(&amp;task_queue2, i) &amp;&amp;</span><br><span class="line">!is_full_queue(&amp;task_queue1)</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (front_index2 == i ||front_index1 == i) &#123;</span><br><span class="line">enter_queue(&amp;task_queue2, i);</span><br><span class="line">(*p)-&gt;counter = <span class="comment">//((*p)-&gt;counter &gt;&gt; 1) +</span></span><br><span class="line">(*p)-&gt;priority * <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">enter_queue(&amp;task_queue1, i);</span><br><span class="line">(*p)-&gt;counter = <span class="comment">//((*p)-&gt;counter &gt;&gt; 1) +</span></span><br><span class="line">(*p)-&gt;priority;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">next = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(&amp;task_queue1)) &#123;</span><br><span class="line">next = get_queue_front(&amp;task_queue1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!is_empty_queue(&amp;task_queue2)) &#123;</span><br><span class="line">next = get_queue_front(&amp;task_queue2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(&amp;task_queue1)) &#123;printk(<span class="string">"1:\t"</span>); print_queue(&amp;task_queue1);&#125;</span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(&amp;task_queue2)) &#123;printk(<span class="string">"2:\t"</span>); print_queue(&amp;task_queue2);&#125;</span><br><span class="line">switch_to(next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_pause</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">current-&gt;state = TASK_INTERRUPTIBLE;</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep_on</span><span class="params">(struct task_struct **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (current == &amp;(init_task.task))</span><br><span class="line">panic(<span class="string">"task[0] trying to sleep"</span>);</span><br><span class="line">tmp = *p;</span><br><span class="line">*p = current;</span><br><span class="line">current-&gt;state = TASK_UNINTERRUPTIBLE;</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line">tmp-&gt;state=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interruptible_sleep_on</span><span class="params">(struct task_struct **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (current == &amp;(init_task.task))</span><br><span class="line">panic(<span class="string">"task[0] trying to sleep"</span>);</span><br><span class="line">tmp=*p;</span><br><span class="line">*p=current;</span><br><span class="line">repeat:current-&gt;state = TASK_INTERRUPTIBLE;</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">if</span> (*p &amp;&amp; *p != current) &#123;</span><br><span class="line">(**p).state=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> repeat;</span><br><span class="line">&#125;</span><br><span class="line">*p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line">tmp-&gt;state=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wake_up</span><span class="params">(struct task_struct **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p &amp;&amp; *p) &#123;</span><br><span class="line">(**p).state=<span class="number">0</span>;</span><br><span class="line">*p=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * OK, here are some floppy things that shouldn't be in the kernel</span></span><br><span class="line"><span class="comment"> * proper. They are here because the floppy needs a timer, and this</span></span><br><span class="line"><span class="comment"> * was the easiest way of doing it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">wait_motor</span>[4] = &#123;</span><span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>  mon_timer[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> moff_timer[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> current_DOR = <span class="number">0x0C</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ticks_to_floppy_on</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> selected;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> mask = <span class="number">0x10</span> &lt;&lt; nr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nr&gt;<span class="number">3</span>)</span><br><span class="line">panic(<span class="string">"floppy_on: nr&gt;3"</span>);</span><br><span class="line">moff_timer[nr]=<span class="number">10000</span>;<span class="comment">/* 100 s = very big :-) */</span></span><br><span class="line">cli();<span class="comment">/* use floppy_off to turn it off */</span></span><br><span class="line">mask |= current_DOR;</span><br><span class="line"><span class="keyword">if</span> (!selected) &#123;</span><br><span class="line">mask &amp;= <span class="number">0xFC</span>;</span><br><span class="line">mask |= nr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mask != current_DOR) &#123;</span><br><span class="line">outb(mask,FD_DOR);</span><br><span class="line"><span class="keyword">if</span> ((mask ^ current_DOR) &amp; <span class="number">0xf0</span>)</span><br><span class="line">mon_timer[nr] = HZ/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mon_timer[nr] &lt; <span class="number">2</span>)</span><br><span class="line">mon_timer[nr] = <span class="number">2</span>;</span><br><span class="line">current_DOR = mask;</span><br><span class="line">&#125;</span><br><span class="line">sti();</span><br><span class="line"><span class="keyword">return</span> mon_timer[nr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floppy_on</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cli();</span><br><span class="line"><span class="keyword">while</span> (ticks_to_floppy_on(nr))</span><br><span class="line">sleep_on(nr+wait_motor);</span><br><span class="line">sti();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floppy_off</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">moff_timer[nr]=<span class="number">3</span>*HZ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_floppy_timer</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> mask = <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span> ; i&lt;<span class="number">4</span> ; i++,mask &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(mask &amp; current_DOR))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (mon_timer[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (!--mon_timer[i])</span><br><span class="line">wake_up(i+wait_motor);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!moff_timer[i]) &#123;</span><br><span class="line">current_DOR &amp;= ~mask;</span><br><span class="line">outb(current_DOR,FD_DOR);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">moff_timer[i]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME_REQUESTS 64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">timer_list</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> jiffies;</span><br><span class="line"><span class="keyword">void</span> (*fn)();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timer_list</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125; timer_list[TIME_REQUESTS], * next_timer = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">void add_timer(long jiffies, void (*fn)(void))</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timer_list</span> * <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!fn)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cli();</span><br><span class="line"><span class="keyword">if</span> (jiffies &lt;= <span class="number">0</span>)</span><br><span class="line">(fn)();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (p = timer_list ; p &lt; timer_list + TIME_REQUESTS ; p++)</span><br><span class="line"><span class="keyword">if</span> (!p-&gt;fn)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (p &gt;= timer_list + TIME_REQUESTS)</span><br><span class="line">panic(<span class="string">"No more time requests free"</span>);</span><br><span class="line">p-&gt;fn = fn;</span><br><span class="line">p-&gt;jiffies = jiffies;</span><br><span class="line">p-&gt;next = next_timer;</span><br><span class="line">next_timer = p;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next &amp;&amp; p-&gt;next-&gt;jiffies &lt; p-&gt;jiffies) &#123;</span><br><span class="line">p-&gt;jiffies -= p-&gt;next-&gt;jiffies;</span><br><span class="line">fn = p-&gt;fn;</span><br><span class="line">p-&gt;fn = p-&gt;next-&gt;fn;</span><br><span class="line">p-&gt;next-&gt;fn = fn;</span><br><span class="line">jiffies = p-&gt;jiffies;</span><br><span class="line">p-&gt;jiffies = p-&gt;next-&gt;jiffies;</span><br><span class="line">p-&gt;next-&gt;jiffies = jiffies;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sti();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_timer</span><span class="params">(<span class="keyword">long</span> cpl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> beepcount;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">sysbeepstop</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (beepcount)</span><br><span class="line"><span class="keyword">if</span> (!--beepcount)</span><br><span class="line">sysbeepstop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cpl)</span><br><span class="line">current-&gt;utime++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">current-&gt;stime++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (next_timer) &#123;</span><br><span class="line">next_timer-&gt;jiffies--;</span><br><span class="line"><span class="keyword">while</span> (next_timer &amp;&amp; next_timer-&gt;jiffies &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">void</span> (*fn)(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line">fn = next_timer-&gt;fn;</span><br><span class="line">next_timer-&gt;fn = <span class="literal">NULL</span>;</span><br><span class="line">next_timer = next_timer-&gt;next;</span><br><span class="line">(fn)();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current_DOR &amp; <span class="number">0xf0</span>)</span><br><span class="line">do_floppy_timer();</span><br><span class="line"><span class="keyword">if</span> ((--current-&gt;counter)&gt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">current-&gt;counter=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!cpl) <span class="keyword">return</span>;</span><br><span class="line">schedule();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_alarm</span><span class="params">(<span class="keyword">long</span> seconds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> old = current-&gt;alarm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (old)</span><br><span class="line">old = (old - jiffies) / HZ;</span><br><span class="line">current-&gt;alarm = (seconds&gt;<span class="number">0</span>)?(jiffies+HZ*seconds):<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (old);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_getpid</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> current-&gt;pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_getppid</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> current-&gt;father;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_getuid</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> current-&gt;uid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_geteuid</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> current-&gt;euid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_getgid</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> current-&gt;gid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_getegid</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> current-&gt;egid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_nice</span><span class="params">(<span class="keyword">long</span> increment)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;priority-increment&gt;<span class="number">0</span>)</span><br><span class="line">current-&gt;priority -= increment;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sched_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">desc_struct</span> * <span class="title">p</span>;</span></span><br><span class="line">init_queue(&amp;task_queue);</span><br><span class="line">init_queue(&amp;task_queue1);</span><br><span class="line">init_queue(&amp;task_queue2);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">sizeof</span>(struct sigaction) != <span class="number">16</span>)</span><br><span class="line">panic(<span class="string">"Struct sigaction MUST be 16 bytes"</span>);</span><br><span class="line">set_tss_desc(gdt+FIRST_TSS_ENTRY,&amp;(init_task.task.tss));</span><br><span class="line">set_ldt_desc(gdt+FIRST_LDT_ENTRY,&amp;(init_task.task.ldt));</span><br><span class="line">p = gdt+<span class="number">2</span>+FIRST_TSS_ENTRY;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;NR_TASKS;i++) &#123;</span><br><span class="line">task[i] = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;a=p-&gt;b=<span class="number">0</span>;</span><br><span class="line">p++;</span><br><span class="line">p-&gt;a=p-&gt;b=<span class="number">0</span>;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Clear NT, so that we won't have troubles with that later on */</span></span><br><span class="line">__asm__(<span class="string">"pushfl ; andl $0xffffbfff,(%esp) ; popfl"</span>);</span><br><span class="line">ltr(<span class="number">0</span>);</span><br><span class="line">lldt(<span class="number">0</span>);</span><br><span class="line">outb_p(<span class="number">0x36</span>,<span class="number">0x43</span>);<span class="comment">/* binary, mode 3, LSB/MSB, ch 0 */</span></span><br><span class="line">outb_p(LATCH &amp; <span class="number">0xff</span> , <span class="number">0x40</span>);<span class="comment">/* LSB */</span></span><br><span class="line">outb(LATCH &gt;&gt; <span class="number">8</span> , <span class="number">0x40</span>);<span class="comment">/* MSB */</span></span><br><span class="line">set_intr_gate(<span class="number">0x20</span>,&amp;timer_interrupt);</span><br><span class="line">outb(inb_p(<span class="number">0x21</span>)&amp;~<span class="number">0x01</span>,<span class="number">0x21</span>);</span><br><span class="line">set_system_gate(<span class="number">0x80</span>,&amp;system_call);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  linux/init/main.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  (C) 1991  Linus Torvalds</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LIBRARY__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * we need this inline - forking from kernel space will result</span></span><br><span class="line"><span class="comment"> * in NO COPY ON WRITE (!!!), until an execve is executed. This</span></span><br><span class="line"><span class="comment"> * is no problem, but for the stack. This is handled by not letting</span></span><br><span class="line"><span class="comment"> * main() use the stack at all after fork(). Thus, no function</span></span><br><span class="line"><span class="comment"> * calls - which means inline code for fork too, as otherwise we</span></span><br><span class="line"><span class="comment"> * would use the stack upon exit from 'fork()'.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Actually only pause and fork are needed inline, so that there</span></span><br><span class="line"><span class="comment"> * won't be any messing with the stack from main(), but we define</span></span><br><span class="line"><span class="comment"> * some others too.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">static inline fork(void) __attribute__((always_inline));</span><br><span class="line">static inline pause(void) __attribute__((always_inline));</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> _syscall0(<span class="keyword">int</span>,fork)</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> _syscall0(<span class="keyword">int</span>,pause)</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> _syscall1(<span class="keyword">int</span>,setup,<span class="keyword">void</span> *,BIOS)</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> _syscall0(<span class="keyword">int</span>,sync)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/tty.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/head.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/system.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> printbuf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">vsprintf</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">blk_dev_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">chr_dev_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">hd_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">floppy_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">mem_init</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">long</span> <span class="title">rd_init</span><span class="params">(<span class="keyword">long</span> mem_start, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">long</span> <span class="title">kernel_mktime</span><span class="params">(struct tm * tm)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">long</span> startup_time;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is set up by the setup-routine at boot-time</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXT_MEM_K (*(unsigned short *)0x90002)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVE_INFO (*(struct drive_info *)0x90080)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ORIG_ROOT_DEV (*(unsigned short *)0x901FC)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Yeah, yeah, it's ugly, but I cannot find how to do this correctly</span></span><br><span class="line"><span class="comment"> * and this seems to work. I anybody has more info on the real-time</span></span><br><span class="line"><span class="comment"> * clock I'd be interested. Most of this was trial and error, and some</span></span><br><span class="line"><span class="comment"> * bios-listing reading. Urghh.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMOS_READ(addr) (&#123; \</span></span><br><span class="line">outb_p(<span class="number">0x80</span>|addr,<span class="number">0x70</span>); \</span><br><span class="line">inb_p(<span class="number">0x71</span>); \</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BCD_TO_BIN(val) ((val)=((val)&amp;15) + ((val)&gt;&gt;4)*10)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">time_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">time</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">time.tm_sec = CMOS_READ(<span class="number">0</span>);</span><br><span class="line">time.tm_min = CMOS_READ(<span class="number">2</span>);</span><br><span class="line">time.tm_hour = CMOS_READ(<span class="number">4</span>);</span><br><span class="line">time.tm_mday = CMOS_READ(<span class="number">7</span>);</span><br><span class="line">time.tm_mon = CMOS_READ(<span class="number">8</span>);</span><br><span class="line">time.tm_year = CMOS_READ(<span class="number">9</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (time.tm_sec != CMOS_READ(<span class="number">0</span>));</span><br><span class="line">BCD_TO_BIN(time.tm_sec);</span><br><span class="line">BCD_TO_BIN(time.tm_min);</span><br><span class="line">BCD_TO_BIN(time.tm_hour);</span><br><span class="line">BCD_TO_BIN(time.tm_mday);</span><br><span class="line">BCD_TO_BIN(time.tm_mon);</span><br><span class="line">BCD_TO_BIN(time.tm_year);</span><br><span class="line">time.tm_mon--;</span><br><span class="line">startup_time = kernel_mktime(&amp;time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> memory_end = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> buffer_memory_end = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> main_memory_start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">drive_info</span> &#123;</span> <span class="keyword">char</span> dummy[<span class="number">32</span>]; &#125; drive_info;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">/* This really IS void, no error here. */</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">/* The startup routine assumes (well, ...) this */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Interrupts are still disabled. Do necessary setups, then</span></span><br><span class="line"><span class="comment"> * enable them</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> ROOT_DEV = ORIG_ROOT_DEV;</span><br><span class="line"> drive_info = DRIVE_INFO;</span><br><span class="line">memory_end = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>) + (EXT_MEM_K&lt;&lt;<span class="number">10</span>);</span><br><span class="line">memory_end &amp;= <span class="number">0xfffff000</span>;</span><br><span class="line"><span class="keyword">if</span> (memory_end &gt; <span class="number">16</span>*<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">memory_end = <span class="number">16</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="keyword">if</span> (memory_end &gt; <span class="number">12</span>*<span class="number">1024</span>*<span class="number">1024</span>) </span><br><span class="line">buffer_memory_end = <span class="number">4</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (memory_end &gt; <span class="number">6</span>*<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">buffer_memory_end = <span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">buffer_memory_end = <span class="number">1</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line">main_memory_start = buffer_memory_end;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RAMDISK</span></span><br><span class="line">main_memory_start += rd_init(main_memory_start, RAMDISK*<span class="number">1024</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">mem_init(main_memory_start,memory_end);</span><br><span class="line">trap_init();</span><br><span class="line">blk_dev_init();</span><br><span class="line">chr_dev_init();</span><br><span class="line">tty_init();</span><br><span class="line">time_init();</span><br><span class="line">sched_init();</span><br><span class="line">buffer_init(buffer_memory_end);</span><br><span class="line">hd_init();</span><br><span class="line">floppy_init();</span><br><span class="line">sti();</span><br><span class="line">move_to_user_mode();</span><br><span class="line"><span class="keyword">if</span> (!fork()) &#123;<span class="comment">/* we count on this going ok */</span></span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   NOTE!!   For any other task 'pause()' would mean we have to get a</span></span><br><span class="line"><span class="comment"> * signal to awaken, but task0 is the sole exception (see 'schedule()')</span></span><br><span class="line"><span class="comment"> * as task 0 gets activated at every idle moment (when no other tasks</span></span><br><span class="line"><span class="comment"> * can run). For task0 'pause()' just means we go check if some other</span></span><br><span class="line"><span class="comment"> * task can run, and if not we return here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span>(;;) pause();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">va_list args;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">va_start(args, fmt);</span><br><span class="line">write(<span class="number">1</span>,printbuf,i=<span class="built_in">vsprintf</span>(printbuf, fmt, args));</span><br><span class="line">va_end(args);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> * argv_rc[] = &#123; <span class="string">"/bin/sh"</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> * envp_rc[] = &#123; <span class="string">"HOME=/"</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> * argv[] = &#123; <span class="string">"-/bin/sh"</span>,<span class="literal">NULL</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> * envp[] = &#123; <span class="string">"HOME=/usr/root"</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pid,i;</span><br><span class="line"></span><br><span class="line">setup((<span class="keyword">void</span> *) &amp;drive_info);</span><br><span class="line">(<span class="keyword">void</span>) open(<span class="string">"/dev/tty0"</span>,O_RDWR,<span class="number">0</span>);</span><br><span class="line">(<span class="keyword">void</span>) dup(<span class="number">0</span>);</span><br><span class="line">(<span class="keyword">void</span>) dup(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello, i am wangzitai\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d buffers = %d bytes buffer space\n\r"</span>,NR_BUFFERS,</span><br><span class="line">NR_BUFFERS*BLOCK_SIZE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Free mem: %d bytes\n\r"</span>,memory_end-main_memory_start);</span><br><span class="line"><span class="keyword">if</span> (!(pid=fork())) &#123;</span><br><span class="line">close(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (open(<span class="string">"/etc/rc"</span>,O_RDONLY,<span class="number">0</span>))</span><br><span class="line">_exit(<span class="number">1</span>);</span><br><span class="line">execve(<span class="string">"/bin/sh"</span>,argv_rc,envp_rc);</span><br><span class="line">_exit(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pid&gt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> (pid != wait(&amp;i))</span><br><span class="line"><span class="comment">/* nothing */</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((pid=fork())&lt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Fork failed in init\r\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!pid) &#123;</span><br><span class="line">close(<span class="number">0</span>);close(<span class="number">1</span>);close(<span class="number">2</span>);</span><br><span class="line">setsid();</span><br><span class="line">(<span class="keyword">void</span>) open(<span class="string">"/dev/tty0"</span>,O_RDWR,<span class="number">0</span>);</span><br><span class="line">(<span class="keyword">void</span>) dup(<span class="number">0</span>);</span><br><span class="line">(<span class="keyword">void</span>) dup(<span class="number">0</span>);</span><br><span class="line">_exit(execve(<span class="string">"/bin/sh"</span>,argv,envp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (pid == wait(&amp;i))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\rchild %d died with code %04x\n\r"</span>,pid,i);</span><br><span class="line">sync();</span><br><span class="line">&#125;</span><br><span class="line">_exit(<span class="number">0</span>);<span class="comment">/* NOTE! _exit, not exit() */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《系统编程》——linux下C语言编程</title>
      <link href="/2018/06/17/%E3%80%8A%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E3%80%8B%E2%80%94%E2%80%94linux%E4%B8%8BC%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
      <content type="html"><![CDATA[<p>系统编程的大作业，实现bash中的ls命令。</p><p>很有一部分是参考学长的，</p><p>不过觉得很有意义，也贴出来吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;grp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_PATH_NUM 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_PATH_LENGTH 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_FILE_NUM 1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> paths[MAX_PATH_NUM][MAX_PATH_LENGTH];</span><br><span class="line"><span class="keyword">int</span> paths_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> now_path[MAX_PATH_LENGTH];</span><br><span class="line"><span class="keyword">int</span> tags[<span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">( <span class="keyword">const</span> <span class="keyword">void</span> *p, <span class="keyword">const</span> <span class="keyword">void</span> *q )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>( ( <span class="keyword">const</span> <span class="keyword">char</span> * )p, ( <span class="keyword">const</span> <span class="keyword">char</span> * )q );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ops_paths</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"><span class="comment">// bash will sort args, options ahead, arguments behind</span></span><br><span class="line"><span class="built_in">memset</span>(tags, <span class="number">0</span>, <span class="keyword">sizeof</span>(tags));</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>((ch = getopt(argc, argv, <span class="string">"AaCcdFfhiklnqRrSstux1"</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="comment">// printf("%c\n", ch);</span></span><br><span class="line"><span class="keyword">switch</span>( ch ) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'A'</span>: tags[<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>: tags[<span class="number">1</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'C'</span>: tags[<span class="number">2</span>] = <span class="number">1</span>; tags[<span class="number">21</span>] = tags[<span class="number">10</span>] = tags[<span class="number">11</span>] = tags[<span class="number">20</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'c'</span>: tags[<span class="number">3</span>] = <span class="number">1</span>; tags[<span class="number">18</span>] = tags[<span class="number">17</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'d'</span>: tags[<span class="number">4</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'F'</span>: tags[<span class="number">5</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'f'</span>: tags[<span class="number">6</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'h'</span>: tags[<span class="number">7</span>] = <span class="number">1</span>; tags[<span class="number">9</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'i'</span>: tags[<span class="number">8</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'k'</span>: tags[<span class="number">9</span>] = <span class="number">1</span>; tags[<span class="number">7</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'l'</span>: tags[<span class="number">10</span>] = <span class="number">1</span>; tags[<span class="number">21</span>] = tags[<span class="number">2</span>] = tags[<span class="number">11</span>] = tags[<span class="number">20</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'n'</span>: tags[<span class="number">11</span>] = <span class="number">1</span>; tags[<span class="number">21</span>] = tags[<span class="number">2</span>] = tags[<span class="number">10</span>] = tags[<span class="number">20</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'q'</span>: tags[<span class="number">12</span>] = <span class="number">1</span>; tags[<span class="number">19</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'R'</span>: tags[<span class="number">13</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'r'</span>: tags[<span class="number">14</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'S'</span>: tags[<span class="number">15</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'s'</span>: tags[<span class="number">16</span>] = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'t'</span>: tags[<span class="number">17</span>] = <span class="number">1</span>; tags[<span class="number">3</span>] = tags[<span class="number">18</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'u'</span>: tags[<span class="number">18</span>] = <span class="number">1</span>; tags[<span class="number">3</span>] = tags[<span class="number">17</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'x'</span>: tags[<span class="number">20</span>] = <span class="number">1</span>; tags[<span class="number">21</span>] = tags[<span class="number">2</span>] = tags[<span class="number">10</span>] = tags[<span class="number">11</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>: tags[<span class="number">21</span>] = <span class="number">1</span>; tags[<span class="number">2</span>] = tags[<span class="number">10</span>] = tags[<span class="number">11</span>] = tags[<span class="number">20</span>] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> : <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(paths[paths_num], <span class="string">"."</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = optind; i &lt; argc; i++) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(paths[paths_num++], argv[i]);</span><br><span class="line"><span class="comment">// printf("%s\n", paths[path_num-1]);</span></span><br><span class="line">&#125;</span><br><span class="line">qsort(paths, paths_num, <span class="keyword">sizeof</span>( <span class="keyword">char</span> ) * MAX_PATH_NUM, cmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp_dirent</span><span class="params">( <span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> path_a[MAX_PATH_LENGTH], path_b[MAX_PATH_LENGTH];</span><br><span class="line">    <span class="built_in">strcpy</span>(path_a, now_path); <span class="built_in">strcat</span>(path_a, <span class="string">"/"</span>); <span class="built_in">strcat</span>(path_a, (*( struct dirent ** )a)-&gt;d_name);</span><br><span class="line">    <span class="built_in">strcpy</span>(path_b, now_path); <span class="built_in">strcat</span>(path_b, <span class="string">"/"</span>); <span class="built_in">strcat</span>(path_b, (*( struct dirent ** )b)-&gt;d_name);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat_a</span>, <span class="title">stat_b</span>;</span></span><br><span class="line">    lstat(path_a, &amp;stat_a); </span><br><span class="line">    lstat(path_b, &amp;stat_b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (tags[<span class="number">17</span>]) <span class="keyword">return</span> stat_a.st_mtime - stat_b.st_mtime;       <span class="comment">// -t</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tags[<span class="number">3</span>]) <span class="keyword">return</span> stat_a.st_ctime - stat_b.st_ctime;   <span class="comment">// -c</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tags[<span class="number">18</span>]) <span class="keyword">return</span> stat_a.st_atime - stat_b.st_atime;  <span class="comment">// -u</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tags[<span class="number">15</span>])  <span class="keyword">return</span> stat_b.st_size - stat_a.st_size;       <span class="comment">// -S</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>( ( *( struct dirent ** )a )-&gt;d_name, ( *( struct dirent ** )b )-&gt;d_name );    <span class="comment">// default</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printname</span><span class="params">(struct dirent *dir, struct stat status)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, dir-&gt;d_name);</span><br><span class="line">    <span class="comment">// -F</span></span><br><span class="line">    <span class="keyword">if</span> (tags[<span class="number">5</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( dir-&gt;d_type &amp; DT_DIR ) <span class="built_in">putchar</span>(<span class="string">'/'</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((status.st_mode &amp; S_IXUSR) || (status.st_mode &amp; S_IXGRP) || (status.st_mode &amp; S_IXOTH)) <span class="built_in">putchar</span>(<span class="string">'*'</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dir-&gt;d_type &amp; DT_LNK) <span class="built_in">putchar</span>(<span class="string">'@'</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dir-&gt;d_type &amp; DT_WHT) <span class="built_in">putchar</span>(<span class="string">'%'</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dir-&gt;d_type &amp; DT_SOCK) <span class="built_in">putchar</span>(<span class="string">'='</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dir-&gt;d_type &amp; DT_FIFO) <span class="built_in">putchar</span>(<span class="string">'|'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_infos</span><span class="params">(struct dirent * file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> path[MAX_PATH_LENGTH], mode[<span class="number">11</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(path, now_path); <span class="built_in">strcat</span>(path, <span class="string">"/"</span>); <span class="built_in">strcat</span>(path, file-&gt;d_name);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">status</span>;</span></span><br><span class="line">    lstat(path, &amp;status);</span><br><span class="line">    <span class="comment">// -i</span></span><br><span class="line">    <span class="keyword">if</span>(tags[<span class="number">8</span>]) <span class="built_in">printf</span>(<span class="string">"%-8lu "</span>, status.st_ino);</span><br><span class="line">    <span class="comment">// -s</span></span><br><span class="line">    <span class="keyword">if</span>(tags[<span class="number">16</span>]) <span class="built_in">printf</span>(<span class="string">"%-4lu "</span>, status.st_blocks);</span><br><span class="line">    <span class="comment">// mode</span></span><br><span class="line">    <span class="built_in">strcpy</span>( mode, <span class="string">"----------"</span> );</span><br><span class="line">    <span class="keyword">if</span> (S_ISDIR(status.st_mode)) mode[<span class="number">0</span>] = <span class="string">'d'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISCHR(status.st_mode)) mode[<span class="number">0</span>] = <span class="string">'c'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISBLK(status.st_mode)) mode[<span class="number">0</span>] = <span class="string">'b'</span>;</span><br><span class="line">    <span class="keyword">if</span> (status.st_mode &amp; S_IRUSR) mode[<span class="number">1</span>] = <span class="string">'r'</span>;</span><br><span class="line">    <span class="keyword">if</span> (status.st_mode &amp; S_IWUSR) mode[<span class="number">2</span>] = <span class="string">'w'</span>;</span><br><span class="line">    <span class="keyword">if</span> (status.st_mode &amp; S_IXUSR) mode[<span class="number">3</span>] = <span class="string">'x'</span>;</span><br><span class="line">    <span class="keyword">if</span> (status.st_mode &amp; S_IRGRP) mode[<span class="number">4</span>] = <span class="string">'r'</span>;</span><br><span class="line">    <span class="keyword">if</span> (status.st_mode &amp; S_IWGRP) mode[<span class="number">5</span>] = <span class="string">'w'</span>;</span><br><span class="line">    <span class="keyword">if</span> (status.st_mode &amp; S_IXGRP) mode[<span class="number">6</span>] = <span class="string">'x'</span>;</span><br><span class="line">    <span class="keyword">if</span> (status.st_mode &amp; S_IROTH) mode[<span class="number">7</span>] = <span class="string">'r'</span>;</span><br><span class="line">    <span class="keyword">if</span> (status.st_mode &amp; S_IWOTH) mode[<span class="number">8</span>] = <span class="string">'w'</span>;</span><br><span class="line">    <span class="keyword">if</span> (status.st_mode &amp; S_IXOTH) mode[<span class="number">9</span>] = <span class="string">'x'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s "</span>, mode);</span><br><span class="line">    <span class="comment">// link</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%4lu "</span>, status.st_nlink);</span><br><span class="line">    <span class="comment">// uid</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">p_pw</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ( (p_pw = getpwuid(status.st_uid)) == <span class="literal">NULL</span> || tags[<span class="number">11</span>] ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-8d "</span>, status.st_uid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%-8s "</span>, p_pw-&gt;pw_name);</span><br><span class="line">    &#125; </span><br><span class="line">  <span class="comment">// gid</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">p_grpoup</span>;</span></span><br><span class="line">    <span class="keyword">if</span>( (p_grpoup = getgrgid(status.st_gid)) == <span class="literal">NULL</span> || tags[<span class="number">11</span>] ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-8d "</span>, status.st_gid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%-8s "</span>, p_grpoup-&gt;gr_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -h</span></span><br><span class="line">    <span class="keyword">if</span> (tags[<span class="number">7</span>]) <span class="built_in">printf</span>(<span class="string">"%.1fK "</span>, <span class="number">1.0</span> * status.st_size / <span class="number">1024</span>);</span><br><span class="line">    <span class="comment">// -k</span></span><br><span class="line">    <span class="keyword">if</span> (tags[<span class="number">9</span>]) <span class="built_in">printf</span>(<span class="string">"%.8ld "</span>, status.st_size);</span><br><span class="line">    <span class="comment">// time</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.12s "</span>, <span class="number">4</span> + ctime( &amp;status.st_mtime ));</span><br><span class="line">    <span class="comment">// name</span></span><br><span class="line">    printname(file, status);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_item</span><span class="params">( struct dirent *file )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> path[MAX_PATH_LENGTH];</span><br><span class="line">    <span class="built_in">strcpy</span>(path, now_path); <span class="built_in">strcat</span>(path, <span class="string">"/"</span>); <span class="built_in">strcat</span>(path, file-&gt;d_name);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">status</span>;</span></span><br><span class="line">    lstat(path, &amp;status);</span><br><span class="line">    <span class="comment">// -i</span></span><br><span class="line">    <span class="keyword">if</span>(tags[<span class="number">8</span>]) <span class="built_in">printf</span>(<span class="string">"%8lu "</span>, status.st_ino);</span><br><span class="line">    <span class="comment">// -s</span></span><br><span class="line">    <span class="keyword">if</span>(tags[<span class="number">16</span>]) <span class="built_in">printf</span>(<span class="string">"%4lu "</span>, status.st_blocks);</span><br><span class="line">    printname(file, status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ls_dir</span><span class="params">(<span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (paths_num &gt;= <span class="number">2</span> || tags[<span class="number">13</span>]) <span class="built_in">printf</span>(<span class="string">"%s:\n"</span>, path);</span><br><span class="line"><span class="comment">// change files according to options</span></span><br><span class="line">DIR *dir_path = opendir(path);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">files</span>[<span class="title">MAX_FILE_NUM</span>];</span></span><br><span class="line">    <span class="keyword">int</span> file_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((files[file_num] = readdir(dir_path)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">// printf("%d %s\n",file_num ,files[file_num]-&gt;d_name);</span></span><br><span class="line"><span class="comment">// -a</span></span><br><span class="line"><span class="keyword">if</span>(tags[<span class="number">1</span>]) &#123; file_num++;&#125;</span><br><span class="line"><span class="comment">// -A</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tags[<span class="number">0</span>] &amp;&amp; <span class="built_in">strcmp</span>( files[file_num]-&gt;d_name, <span class="string">"."</span> ) &amp;&amp; </span><br><span class="line">       <span class="built_in">strcmp</span>( files[file_num]-&gt;d_name, <span class="string">".."</span> ) ) </span><br><span class="line">       &#123;file_num++;&#125;</span><br><span class="line"><span class="comment">// default</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(files[file_num]-&gt;d_name[<span class="number">0</span>] != <span class="string">'.'</span>) &#123;file_num++;&#125;</span><br><span class="line">&#125;</span><br><span class="line">closedir(dir_path);</span><br><span class="line"><span class="comment">// without -f</span></span><br><span class="line"><span class="keyword">if</span> (!tags[<span class="number">6</span>]) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(now_path, path);</span><br><span class="line">qsort(files, file_num, <span class="keyword">sizeof</span>(struct dirent*), cmp_dirent);</span><br><span class="line"><span class="comment">// -r</span></span><br><span class="line"><span class="keyword">if</span>(tags[<span class="number">14</span>]) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">tmp</span>;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; file_num / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                tmp = files[i];</span><br><span class="line">                files[i] = files[file_num - i - <span class="number">1</span>];</span><br><span class="line">                files[file_num - i - <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print infos according to options</span></span><br><span class="line"><span class="comment">// -1</span></span><br><span class="line"><span class="keyword">if</span> (tags[<span class="number">21</span>]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; file_num; i++) &#123;<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, files[i]-&gt;d_name);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -l -n</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tags[<span class="number">10</span>]) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(now_path, path);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; file_num; i++) &#123;print_infos(files[i]);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// default, need to calculate num of col and row</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// cal the max col for every item</span></span><br><span class="line">        <span class="keyword">int</span> max_col_len_for_one_item = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; file_num; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp_col = <span class="built_in">strlen</span>(files[i]-&gt;d_name) + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// -i</span></span><br><span class="line">            <span class="keyword">if</span> (tags[<span class="number">8</span>]) temp_col += <span class="number">9</span>;</span><br><span class="line">            <span class="comment">// -s</span></span><br><span class="line">            <span class="keyword">if</span> (tags[<span class="number">16</span>]) temp_col += <span class="number">5</span>;</span><br><span class="line">            max_col_len_for_one_item = max(max_col_len_for_one_item, temp_col);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// get windows size</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">wsize</span>;</span></span><br><span class="line">    ioctl(STDOUT_FILENO, TIOCGWINSZ, &amp;wsize);</span><br><span class="line">    <span class="comment">// cal num of col and row</span></span><br><span class="line">        <span class="keyword">int</span> col_num = wsize.ws_col / max_col_len_for_one_item; </span><br><span class="line">        <span class="keyword">if</span> (col_num == <span class="number">0</span>) col_num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> row_num = file_num / col_num; </span><br><span class="line">        <span class="keyword">if</span> (row_num == <span class="number">0</span>) row_num = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// -x</span></span><br><span class="line">        <span class="built_in">strcpy</span>(now_path, path);</span><br><span class="line">        <span class="keyword">if</span> (tags[<span class="number">20</span>]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row_num; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col_num; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j * row_num + i &gt;= file_num) <span class="keyword">continue</span>;</span><br><span class="line">                    print_item(files[j * row_num + i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row_num; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col_num; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i * col_num + j &gt;= file_num) <span class="keyword">continue</span>;</span><br><span class="line">                    print_item(files[i * col_num + j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (paths_num &gt;= <span class="number">2</span> || tags[<span class="number">13</span>]) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ls_dir_R</span><span class="params">(<span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line">ls_dir(path);</span><br><span class="line"></span><br><span class="line">    DIR *dir_path = opendir(path);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">file</span>;</span></span><br><span class="line">    <span class="keyword">while</span> ((file = readdir(dir_path)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// find directory</span></span><br><span class="line">        <span class="keyword">if</span> (file-&gt;d_type &amp; DT_DIR) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(file-&gt;d_name, <span class="string">"."</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(file-&gt;d_name, <span class="string">".."</span>) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">char</span> new_path[MAX_PATH_LENGTH];</span><br><span class="line">            <span class="built_in">sprintf</span>(new_path, <span class="string">"%s/%s"</span>, path, file-&gt;d_name);</span><br><span class="line">            ls_dir_R(new_path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir_path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ls</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paths_num; i++) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat_buffer</span>;</span></span><br><span class="line"><span class="keyword">int</span> ret = lstat(paths[i], &amp;stat_buffer);</span><br><span class="line"><span class="keyword">if</span> (!S_ISDIR(stat_buffer.st_mode)) &#123;</span><br><span class="line"><span class="keyword">if</span> (access(paths[i], F_OK) == <span class="number">-1</span>) &#123;<span class="built_in">printf</span>(<span class="string">"[error] cannot find -- %s\n\n"</span>, paths[i]); <span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (paths_num &gt;= <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%s\n\n"</span>, paths[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (tags[<span class="number">13</span>]) &#123;ls_dir_R(paths[i]);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;ls_dir(paths[i]);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">get_ops_paths(argc, argv);</span><br><span class="line">ls();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统编程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《编译原理》实验5-语法分析器之SLR1分析法python实现</title>
      <link href="/2018/06/09/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C5-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B9%8BSLR1%E5%88%86%E6%9E%90%E6%B3%95python%E5%AE%9E%E7%8E%B0/"/>
      <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        本次实验中，我用python3.5实现了一个简单的含有四元运算的赋值语句的编译器前端类SLRAnalyzer，具有以下功能：</p><ol><li><p>根据文法类型，自动生成终结符号集、非终结符号集、first集、follow集、项目集、状态集和分析表，对无法分析的语法报错</p></li><li><p>从txt文件中读取赋值语句，通过词法分析生成对应的二元式文件，对不符合文法的词法报错</p></li><li><p>根据词法分析的二元式序列，对其进行语法与语义分析，分析成功后输出对应的四元式文件</p></li><li><p>根据设定log级别将分析过程与结果输出在终端上</p></li><li><p>良好的扩展性，可以很方便地加入新的词法与语义</p></li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>实验中实现的算符优先文法的语法分析类名为SLRAnalyzer，具体描述信息如下：</p><p><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/1.png" alt=""><br><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/2.png" alt=""><br><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/3.png" alt=""></p><h1 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h1><p>程序主要流程图如下图所示，函数实现的细节详解程序源码的注释。</p><p><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/4.png" alt=""></p><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p>为了保证程序各模块的正确和健壮性，分三个部分进行测试：单独测试语法分析程序、测试不含文件读写的简易编译器前端、测试含有文件读写的建议编译器前端。其中第一部分对应专题5的要求，第二、三部分对应专题6的要求。</p><h2 id="单独测试语法分析程序"><a href="#单独测试语法分析程序" class="headerlink" title="单独测试语法分析程序"></a>单独测试语法分析程序</h2><p>为验证SRL1分析器的健壮性，在不考虑词法与语义分析的情况下对多个文法进行多个样本的测试。</p><p>第一个是实验要求的文法，测试样本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'A'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'V=E'</span>, ],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'E-T'</span>, <span class="string">'T'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'T/F'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'V'</span>: [<span class="string">'i'</span>, ],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'i=i+i'</span>, <span class="string">'i=(i-i)*i/(i+i)'</span>, <span class="string">'i==i*i'</span>]</span><br></pre></td></tr></table></figure><p>在log_level=2的情况下，会在终端输出所有的分析信息如下，细致地输出了所有的重要变量与分析过程结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\45504\AppData\Local\Programs\Python\Python35\python.exe &quot;D:/45504/Documents/MiCloud/Coding/python/编译原理/2-7 SLR分析法_基础版.py&quot;</span><br><span class="line">over sign set:</span><br><span class="line">&#123;&apos;)&apos;, &apos;/&apos;, &apos;=&apos;, &apos;*&apos;, &apos;i&apos;, &apos;-&apos;, &apos;+&apos;, &apos;(&apos;&#125;</span><br><span class="line">follow set:</span><br><span class="line">&#123;&apos;A&apos;: &#123;&apos;#&apos;&#125;,</span><br><span class="line"> &apos;E&apos;: &#123;&apos;+&apos;, &apos;-&apos;, &apos;)&apos;, &apos;#&apos;&#125;,</span><br><span class="line"> &apos;F&apos;: &#123;&apos;/&apos;, &apos;)&apos;, &apos;*&apos;, &apos;-&apos;, &apos;+&apos;, &apos;#&apos;&#125;,</span><br><span class="line"> &apos;T&apos;: &#123;&apos;/&apos;, &apos;)&apos;, &apos;*&apos;, &apos;-&apos;, &apos;+&apos;, &apos;#&apos;&#125;,</span><br><span class="line"> &apos;V&apos;: &#123;&apos;=&apos;&#125;&#125;</span><br><span class="line">items:</span><br><span class="line">&#123;&apos;A&apos;: [&apos;.V=E&apos;, &apos;V.=E&apos;, &apos;V=.E&apos;, &apos;V=E.&apos;],</span><br><span class="line"> &apos;E&apos;: [&apos;.E+T&apos;,</span><br><span class="line">       &apos;E.+T&apos;,</span><br><span class="line">       &apos;E+.T&apos;,</span><br><span class="line">       &apos;E+T.&apos;,</span><br><span class="line">       &apos;.E-T&apos;,</span><br><span class="line">       &apos;E.-T&apos;,</span><br><span class="line">       &apos;E-.T&apos;,</span><br><span class="line">       &apos;E-T.&apos;,</span><br><span class="line">       &apos;.T&apos;,</span><br><span class="line">       &apos;T.&apos;],</span><br><span class="line"> &apos;F&apos;: [&apos;.(E)&apos;, &apos;(.E)&apos;, &apos;(E.)&apos;, &apos;(E).&apos;, &apos;.i&apos;, &apos;i.&apos;],</span><br><span class="line"> &apos;S&apos;: [&apos;.A&apos;, &apos;A.&apos;],</span><br><span class="line"> &apos;T&apos;: [&apos;.T*F&apos;,</span><br><span class="line">       &apos;T.*F&apos;,</span><br><span class="line">       &apos;T*.F&apos;,</span><br><span class="line">       &apos;T*F.&apos;,</span><br><span class="line">       &apos;.T/F&apos;,</span><br><span class="line">       &apos;T./F&apos;,</span><br><span class="line">       &apos;T/.F&apos;,</span><br><span class="line">       &apos;T/F.&apos;,</span><br><span class="line">       &apos;.F&apos;,</span><br><span class="line">       &apos;F.&apos;],</span><br><span class="line"> &apos;V&apos;: [&apos;.i&apos;, &apos;i.&apos;]&#125;</span><br><span class="line">stauts list:</span><br><span class="line">[&#123;(&apos;V&apos;, &apos;.i&apos;), (&apos;S&apos;, &apos;.A&apos;), (&apos;A&apos;, &apos;.V=E&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;S&apos;, &apos;A.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;A&apos;, &apos;V.=E&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;V&apos;, &apos;i.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;A&apos;, &apos;V=.E&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.E+T&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.E-T&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.T&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.(E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.i&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T*F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T/F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;F.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T.*F&apos;), (&apos;E&apos;, &apos;T.&apos;), (&apos;T&apos;, &apos;T./F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;E.+T&apos;), (&apos;A&apos;, &apos;V=E.&apos;), (&apos;E&apos;, &apos;E.-T&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;.E+T&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.E-T&apos;),</span><br><span class="line">  (&apos;E&apos;, &apos;.T&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;(.E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.(E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.i&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T*F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T/F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;F&apos;, &apos;i.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;F&apos;, &apos;.i&apos;), (&apos;T&apos;, &apos;T/.F&apos;), (&apos;F&apos;, &apos;.(E)&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;F&apos;, &apos;.i&apos;), (&apos;F&apos;, &apos;.(E)&apos;), (&apos;T&apos;, &apos;T*.F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;E+.T&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.(E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.i&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T*F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T/F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;E-.T&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.(E)&apos;),</span><br><span class="line">  (&apos;F&apos;, &apos;.i&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T*F&apos;),</span><br><span class="line">  (&apos;T&apos;, &apos;.T/F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;E&apos;, &apos;E.+T&apos;), (&apos;F&apos;, &apos;(E.)&apos;), (&apos;E&apos;, &apos;E.-T&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T/F.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T*F.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T.*F&apos;), (&apos;T&apos;, &apos;T./F&apos;), (&apos;E&apos;, &apos;E+T.&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;T&apos;, &apos;T.*F&apos;), (&apos;E&apos;, &apos;E-T.&apos;), (&apos;T&apos;, &apos;T./F&apos;)&#125;,</span><br><span class="line"> &#123;(&apos;F&apos;, &apos;(E).&apos;)&#125;]</span><br><span class="line">analyse table:</span><br><span class="line">&#123;0: &#123;&apos;A&apos;: [1, (&apos;S&apos;, &apos;.A&apos;)], &apos;V&apos;: [2, (&apos;A&apos;, &apos;.V=E&apos;)], &apos;i&apos;: [3, (&apos;V&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 1: &#123;&apos;#&apos;: [&apos;acc&apos;]&#125;,</span><br><span class="line"> 2: &#123;&apos;=&apos;: [4, (&apos;A&apos;, &apos;V.=E&apos;)]&#125;,</span><br><span class="line"> 3: &#123;&apos;=&apos;: [0, &apos;r&apos;, (&apos;V&apos;, &apos;i&apos;)]&#125;,</span><br><span class="line"> 4: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)],</span><br><span class="line">     &apos;E&apos;: [7, (&apos;E&apos;, &apos;.E+T&apos;), (&apos;A&apos;, &apos;V=.E&apos;), (&apos;E&apos;, &apos;.E-T&apos;)],</span><br><span class="line">     &apos;F&apos;: [5, (&apos;T&apos;, &apos;.F&apos;)],</span><br><span class="line">     &apos;T&apos;: [6, (&apos;T&apos;, &apos;.T/F&apos;), (&apos;E&apos;, &apos;.T&apos;), (&apos;T&apos;, &apos;.T*F&apos;)],</span><br><span class="line">     &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 5: &#123;&apos;#&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;)&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;*&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;+&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;-&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)],</span><br><span class="line">     &apos;/&apos;: [6, &apos;r&apos;, (&apos;T&apos;, &apos;F&apos;)]&#125;,</span><br><span class="line"> 6: &#123;&apos;#&apos;: [9, &apos;r&apos;, (&apos;E&apos;, &apos;T&apos;)],</span><br><span class="line">     &apos;)&apos;: [9, &apos;r&apos;, (&apos;E&apos;, &apos;T&apos;)],</span><br><span class="line">     &apos;*&apos;: [11, (&apos;T&apos;, &apos;T.*F&apos;)],</span><br><span class="line">     &apos;+&apos;: [9, &apos;r&apos;, (&apos;E&apos;, &apos;T&apos;)],</span><br><span class="line">     &apos;-&apos;: [9, &apos;r&apos;, (&apos;E&apos;, &apos;T&apos;)],</span><br><span class="line">     &apos;/&apos;: [10, (&apos;T&apos;, &apos;T./F&apos;)]&#125;,</span><br><span class="line"> 7: &#123;&apos;#&apos;: [3, &apos;r&apos;, (&apos;A&apos;, &apos;V=E&apos;)],</span><br><span class="line">     &apos;+&apos;: [12, (&apos;E&apos;, &apos;E.+T&apos;)],</span><br><span class="line">     &apos;-&apos;: [13, (&apos;E&apos;, &apos;E.-T&apos;)]&#125;,</span><br><span class="line"> 8: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)],</span><br><span class="line">     &apos;E&apos;: [14, (&apos;E&apos;, &apos;.E+T&apos;), (&apos;F&apos;, &apos;(.E)&apos;), (&apos;E&apos;, &apos;.E-T&apos;)],</span><br><span class="line">     &apos;F&apos;: [5, (&apos;T&apos;, &apos;.F&apos;)],</span><br><span class="line">     &apos;T&apos;: [6, (&apos;T&apos;, &apos;.T/F&apos;), (&apos;E&apos;, &apos;.T&apos;), (&apos;T&apos;, &apos;.T*F&apos;)],</span><br><span class="line">     &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 9: &#123;&apos;#&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;)&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;*&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;+&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;-&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)],</span><br><span class="line">     &apos;/&apos;: [2, &apos;r&apos;, (&apos;F&apos;, &apos;i&apos;)]&#125;,</span><br><span class="line"> 10: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)], &apos;F&apos;: [15, (&apos;T&apos;, &apos;T/.F&apos;)], &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 11: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)], &apos;F&apos;: [16, (&apos;T&apos;, &apos;T*.F&apos;)], &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 12: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)],</span><br><span class="line">      &apos;F&apos;: [5, (&apos;T&apos;, &apos;.F&apos;)],</span><br><span class="line">      &apos;T&apos;: [17, (&apos;T&apos;, &apos;.T/F&apos;), (&apos;E&apos;, &apos;E+.T&apos;), (&apos;T&apos;, &apos;.T*F&apos;)],</span><br><span class="line">      &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 13: &#123;&apos;(&apos;: [8, (&apos;F&apos;, &apos;.(E)&apos;)],</span><br><span class="line">      &apos;F&apos;: [5, (&apos;T&apos;, &apos;.F&apos;)],</span><br><span class="line">      &apos;T&apos;: [18, (&apos;T&apos;, &apos;.T/F&apos;), (&apos;E&apos;, &apos;E-.T&apos;), (&apos;T&apos;, &apos;.T*F&apos;)],</span><br><span class="line">      &apos;i&apos;: [9, (&apos;F&apos;, &apos;.i&apos;)]&#125;,</span><br><span class="line"> 14: &#123;&apos;)&apos;: [19, (&apos;F&apos;, &apos;(E.)&apos;)],</span><br><span class="line">      &apos;+&apos;: [12, (&apos;E&apos;, &apos;E.+T&apos;)],</span><br><span class="line">      &apos;-&apos;: [13, (&apos;E&apos;, &apos;E.-T&apos;)]&#125;,</span><br><span class="line"> 15: &#123;&apos;#&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;)&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;*&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;+&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;-&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)],</span><br><span class="line">      &apos;/&apos;: [5, &apos;r&apos;, (&apos;T&apos;, &apos;T/F&apos;)]&#125;,</span><br><span class="line"> 16: &#123;&apos;#&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;)&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;*&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;+&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;-&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)],</span><br><span class="line">      &apos;/&apos;: [4, &apos;r&apos;, (&apos;T&apos;, &apos;T*F&apos;)]&#125;,</span><br><span class="line"> 17: &#123;&apos;#&apos;: [7, &apos;r&apos;, (&apos;E&apos;, &apos;E+T&apos;)],</span><br><span class="line">      &apos;)&apos;: [7, &apos;r&apos;, (&apos;E&apos;, &apos;E+T&apos;)],</span><br><span class="line">      &apos;*&apos;: [11, (&apos;T&apos;, &apos;T.*F&apos;)],</span><br><span class="line">      &apos;+&apos;: [7, &apos;r&apos;, (&apos;E&apos;, &apos;E+T&apos;)],</span><br><span class="line">      &apos;-&apos;: [7, &apos;r&apos;, (&apos;E&apos;, &apos;E+T&apos;)],</span><br><span class="line">      &apos;/&apos;: [10, (&apos;T&apos;, &apos;T./F&apos;)]&#125;,</span><br><span class="line"> 18: &#123;&apos;#&apos;: [8, &apos;r&apos;, (&apos;E&apos;, &apos;E-T&apos;)],</span><br><span class="line">      &apos;)&apos;: [8, &apos;r&apos;, (&apos;E&apos;, &apos;E-T&apos;)],</span><br><span class="line">      &apos;*&apos;: [11, (&apos;T&apos;, &apos;T.*F&apos;)],</span><br><span class="line">      &apos;+&apos;: [8, &apos;r&apos;, (&apos;E&apos;, &apos;E-T&apos;)],</span><br><span class="line">      &apos;-&apos;: [8, &apos;r&apos;, (&apos;E&apos;, &apos;E-T&apos;)],</span><br><span class="line">      &apos;/&apos;: [10, (&apos;T&apos;, &apos;T./F&apos;)]&#125;,</span><br><span class="line"> 19: &#123;&apos;#&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;)&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;*&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;+&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;-&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)],</span><br><span class="line">      &apos;/&apos;: [1, &apos;r&apos;, (&apos;F&apos;, &apos;(E)&apos;)]&#125;&#125;</span><br><span class="line">slr1</span><br><span class="line">analysing: i=i+i</span><br><span class="line">[0] [&apos;#&apos;]</span><br><span class="line">[0, 3] [&apos;#&apos;, &apos;i&apos;] V i</span><br><span class="line">[0] [&apos;#&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;]</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;]</span><br><span class="line">[0, 2, 4, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] F i</span><br><span class="line">[0, 2, 4, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] T F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] E T</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] E T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] E T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 7, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;]</span><br><span class="line">[0, 2, 4, 7, 12, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 7, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;] F i</span><br><span class="line">[0, 2, 4, 7, 12, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 7, 12, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 7, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;] T F</span><br><span class="line">[0, 2, 4, 7, 12, 17] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 7, 12, 17] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;, &apos;+&apos;, &apos;T&apos;] E E+T</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] E E+T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] E E+T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] A V=E</span><br><span class="line">[0] [&apos;#&apos;] A V=E</span><br><span class="line">[0, 1] [&apos;#&apos;, &apos;A&apos;] A V=E</span><br><span class="line">ok   i=i+i</span><br><span class="line">analysing: i=(i-i)*i/(i+i)</span><br><span class="line">[0] [&apos;#&apos;]</span><br><span class="line">[0, 3] [&apos;#&apos;, &apos;i&apos;] V i</span><br><span class="line">[0] [&apos;#&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;]</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;]</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;]</span><br><span class="line">[0, 2, 4, 8, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;T&apos;] E T</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;] E T</span><br><span class="line">[0, 2, 4, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;] E T</span><br><span class="line">[0, 2, 4, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 8, 14, 13] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;]</span><br><span class="line">[0, 2, 4, 8, 14, 13, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 14, 13] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 14, 13, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 8, 14, 13, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 14, 13] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 14, 13, 18] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 8, 14, 13, 18] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;-&apos;, &apos;T&apos;] E E-T</span><br><span class="line">[0, 2, 4, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;] E E-T</span><br><span class="line">[0, 2, 4, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;] E E-T</span><br><span class="line">[0, 2, 4, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 8, 14, 19] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;(&apos;, &apos;E&apos;, &apos;)&apos;] F (E)</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] F (E)</span><br><span class="line">[0, 2, 4, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;F&apos;] F (E)</span><br><span class="line">[0, 2, 4, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] T F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;]</span><br><span class="line">[0, 2, 4, 6, 11] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;]</span><br><span class="line">[0, 2, 4, 6, 11, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 11] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 11, 16] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 11, 16] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;*&apos;, &apos;F&apos;] T T*F</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] T T*F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] T T*F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;]</span><br><span class="line">[0, 2, 4, 6, 10] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;T&apos;] E T</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;] E T</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;] E T</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 9] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;i&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;F&apos;] F i</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 5] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;F&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 17] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;T&apos;] T F</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 12, 17] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;+&apos;, &apos;T&apos;] E E+T</span><br><span class="line">[0, 2, 4, 6, 10, 8] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;] E E+T</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;] E E+T</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;]</span><br><span class="line">[0, 2, 4, 6, 10, 8, 14, 19] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;(&apos;, &apos;E&apos;, &apos;)&apos;] F (E)</span><br><span class="line">[0, 2, 4, 6, 10] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;] F (E)</span><br><span class="line">[0, 2, 4, 6, 10, 15] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;F&apos;] F (E)</span><br><span class="line">[0, 2, 4, 6, 10, 15] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;, &apos;/&apos;, &apos;F&apos;] T T/F</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] T T/F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] T T/F</span><br><span class="line">[0, 2, 4, 6] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;T&apos;] E T</span><br><span class="line">[0, 2, 4] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;] E T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] E T</span><br><span class="line">[0, 2, 4, 7] [&apos;#&apos;, &apos;V&apos;, &apos;=&apos;, &apos;E&apos;] A V=E</span><br><span class="line">[0] [&apos;#&apos;] A V=E</span><br><span class="line">[0, 1] [&apos;#&apos;, &apos;A&apos;] A V=E</span><br><span class="line">ok   i=(i-i)*i/(i+i)</span><br><span class="line">analysing: i==i*i</span><br><span class="line">[0] [&apos;#&apos;]</span><br><span class="line">[0, 3] [&apos;#&apos;, &apos;i&apos;] V i</span><br><span class="line">[0] [&apos;#&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;] V i</span><br><span class="line">[0, 2] [&apos;#&apos;, &apos;V&apos;]</span><br><span class="line">fail i==i*i</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>当然，这个结果太过冗余，下面均将给出log_level=0情况下的输出，同时过滤终端输出的程序信息： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">slr1</span><br><span class="line">analysing: i=i+i</span><br><span class="line">ok   i=i+i</span><br><span class="line">analysing: i=(i-i)*i/(i+i)</span><br><span class="line">ok   i=(i-i)*i/(i+i)</span><br><span class="line">analysing: i==i*i</span><br><span class="line">fail i==i*i</span><br></pre></td></tr></table></figure><p>可以看出，程序成功地分析出这是一个slr1文法，并对相应的输入串进行了正确的分析。需要指出的是，由于不合法终结符号的判断是在词法阶段完成，所以语法分析中并没有对非法输出，比如’@’进行处理。</p><p>第二个是非lr0或slr1文法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'E'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'Eab'</span>, <span class="string">'bR'</span>],</span><br><span class="line">    <span class="string">'R'</span>: [<span class="string">'E'</span>, <span class="string">'a'</span>],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'ba'</span>, <span class="string">'aab'</span>]</span><br></pre></td></tr></table></figure><p>程序并没有对输入串进行分析，而是直接报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unsupported language!</span><br></pre></td></tr></table></figure><p>第三个是教材示例的srl1文法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'L'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'L'</span>:[<span class="string">'E,L'</span>, <span class="string">'E'</span>],</span><br><span class="line">    <span class="string">'E'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'a,b,a'</span>, <span class="string">'aa'</span>, <span class="string">'b,a,a,b'</span>]</span><br></pre></td></tr></table></figure><p>输出和实验要求的文法一致，符合预期： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">slr1</span><br><span class="line">analysing: a,b,a</span><br><span class="line">ok   a,b,a</span><br><span class="line">analysing: aa</span><br><span class="line">fail aa</span><br><span class="line">analysing: b,a,a,b</span><br><span class="line">ok   b,a,a,b</span><br></pre></td></tr></table></figure><p>第四个是一个lr0文法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'E'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'aEb'</span>, <span class="string">'aEc'</span>, <span class="string">'ab'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'ab'</span>, <span class="string">'aab'</span>, <span class="string">'aabb'</span>, <span class="string">'aabc'</span>]</span><br></pre></td></tr></table></figure><p>当然，结果也符合预期： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lr0</span><br><span class="line">analysing: ab</span><br><span class="line">ok   ab</span><br><span class="line">analysing: aab</span><br><span class="line">fail aab</span><br><span class="line">analysing: aabb</span><br><span class="line">ok   aabb</span><br><span class="line">analysing: aabc</span><br><span class="line">ok   aabc</span><br></pre></td></tr></table></figure><p>其实我还对其他的一些文法进行了测试，均符合预期，以下仅给出通过测试的文法及对应的输入串： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'B'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'B'</span>:[<span class="string">'bD;Te'</span>,],</span><br><span class="line">    <span class="string">'D'</span>: [<span class="string">'D;d'</span>,<span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'s;T'</span>, <span class="string">'s'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'bd;se'</span>, <span class="string">'bd;s;se'</span>]</span><br><span class="line"></span><br><span class="line">start = <span class="string">'B'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'B'</span>:[<span class="string">'bD;Te'</span>,],</span><br><span class="line">    <span class="string">'D'</span>: [<span class="string">'D;d'</span>,<span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'s;T'</span>, <span class="string">'s'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'bd;se'</span>, <span class="string">'bd;s;se'</span>]start = <span class="string">'E'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'aA'</span>, <span class="string">'bB'</span>],</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'cA'</span>, <span class="string">'d'</span>],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'cB'</span>, <span class="string">'d'</span>]</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'ad'</span>, <span class="string">'bcd'</span>, <span class="string">'ab'</span>]</span><br></pre></td></tr></table></figure><h2 id="测试不含文件读写的简易编译器前端"><a href="#测试不含文件读写的简易编译器前端" class="headerlink" title="测试不含文件读写的简易编译器前端"></a>测试不含文件读写的简易编译器前端</h2><p>因为需要加入词法与语义分析，尤其是语义分析因各文法而异，所以仅仅测试实验中要求的文法——含有四则运算和括号的赋值语句的测试。先在不含文件读写的情况下测试如下输入串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">start = <span class="string">'A'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'V=E'</span>, ],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'E-T'</span>, <span class="string">'T'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'T/F'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'V'</span>: [<span class="string">'i'</span>, ],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'i1 = (i2+(i32-n)*m)/mm'</span>, <span class="string">'w:=w+1'</span>, <span class="string">'w::ww'</span>, <span class="string">'w@'</span>, <span class="string">'ww==www+11'</span>, ]</span><br></pre></td></tr></table></figure><p>其中，’i1 = (i2+(i32-n)*m)/mm’是对所有产生式的测试，’w:=w+1’和’w::ww’针对的是词法分析中的二字符终结符，’w@’针对的是非法输入符号，’ww==www+11’针对的是非法语法。同样由于冗余的问题，以下给出log_level=0情况下的输出： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">slr1</span><br><span class="line">analysing: i1 = (i2+(i32-n)*m)/mm</span><br><span class="line">[(&apos;-&apos;, &apos;i32&apos;, &apos;n&apos;, &apos;temp0&apos;),</span><br><span class="line"> (&apos;*&apos;, &apos;temp0&apos;, &apos;m&apos;, &apos;temp1&apos;),</span><br><span class="line"> (&apos;+&apos;, &apos;i2&apos;, &apos;temp1&apos;, &apos;temp2&apos;),</span><br><span class="line"> (&apos;/&apos;, &apos;temp2&apos;, &apos;mm&apos;, &apos;temp3&apos;),</span><br><span class="line"> (&apos;=&apos;, &apos;temp3&apos;, &apos;&apos;, &apos;i1&apos;)]</span><br><span class="line">ok    i1 = (i2+(i32-n)*m)/mm</span><br><span class="line"></span><br><span class="line">analysing: w:=w+1</span><br><span class="line">[(&apos;+&apos;, &apos;w&apos;, &apos;1&apos;, &apos;temp0&apos;), (&apos;=&apos;, &apos;temp0&apos;, &apos;&apos;, &apos;w&apos;)]</span><br><span class="line">ok    w:=w+1</span><br><span class="line"></span><br><span class="line">analysing: w::ww</span><br><span class="line">error index 2: unkown character &quot;:&quot;</span><br><span class="line"></span><br><span class="line">analysing: w@</span><br><span class="line">error index 2: unkown character &quot;@&quot;</span><br><span class="line"></span><br><span class="line">analysing: ww==www+11</span><br><span class="line">fail  ww==www+11</span><br></pre></td></tr></table></figure><p>可见，程序成功分析出这个一个slr1文法，并对输入串进行了正确的分析。对于前两个合法测试，正确地输出了四元式序列与分析结果；对于非法词法，正确地输出了其索引；对于非法语法，正确地输出了分析结果。</p><h2 id="测试含有文件读写的简易编译器前端"><a href="#测试含有文件读写的简易编译器前端" class="headerlink" title="测试含有文件读写的简易编译器前端"></a>测试含有文件读写的简易编译器前端</h2><p>​        在上述程序的基础上，进一步加入文件读写，输入串存储在文件中，分析得到的二元式序列和四元式序列会输出到格式为two和four的文件中。测试结果为如下图所示，完全符合预期。</p><p><img src="/2018/06/09/《编译原理》实验5-语法分析器之SLR1分析法python实现/5.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        由于有此前词法分析器的积累，同时对人工生成分析表的过程有较好的掌握，本次实验在相关领域比较顺利。遇到的困难及解决方法主要包括：分析表数据结构的设计，通过一步一步改造结构，从而实现与其他变量的；closure函数的实现，通过使用递归实现；语义分析即四元式序列的生成，通过使用栈来解决。</p><p>​        本程序的优点包括：很好地实现了实验要求的基本功能，在分析失败的时候输出对应的出错信息，根据日志等级输出日志信息，并再次基础上又一定的扩充；良好的用户接口，只需要输入起始符号、产生式就可以自动生成必需的终结符号集、非终结符号集、follow集、项目集、状态集和分析表，并判断文法类型，分析文法时只需要输入存储输入串的文件名即可。</p><p>​        本程序还存在可以优化的地方，主要包括：进一步扩充词法分析、文法分析、语义分析的内容，从而实现更强大的编译器。</p><p>​        本次实验中，通过实现简易编译器前端，加深了我对于lr0、slr1文法以及四元式的理解，提高了对问题的抽象与分析能力，为实现更强大编译器打下了良好的基础。</p><h1 id="附录：程序源码"><a href="#附录：程序源码" class="headerlink" title="附录：程序源码"></a>附录：程序源码</h1><p>​        一下给出含有文件读写的简易编译器前端和不含词法语义分析的SRL语法分析程序。其中简易编译器前端有一定的代码优化和较为详细的注释，SRL语法分析器仅供测试使用。</p><h2 id="专题6-简易编译器前端"><a href="#专题6-简易编译器前端" class="headerlink" title="专题6 简易编译器前端"></a>专题6 简易编译器前端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SLRAnalyzer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, productions, new_start=<span class="string">'S'</span>, point=<span class="string">'.'</span>, sharp=<span class="string">'#'</span>,acc=<span class="string">'acc'</span>,log_level=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 接受参数</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.new_start = new_start</span><br><span class="line">        self.productions = productions</span><br><span class="line">        self.nonterminals = productions.keys()</span><br><span class="line">        self.log_level = log_level</span><br><span class="line">        self.point = point</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法终结符号</span></span><br><span class="line">        self.overs = set()</span><br><span class="line">        self.get_overs()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法follow集</span></span><br><span class="line">        self.sharp = sharp</span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法项目</span></span><br><span class="line">        self.items = &#123;key: list() <span class="keyword">for</span> key <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.get_items()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文法的状态和分析表</span></span><br><span class="line">        self.status_list = [self.closure(&#123;(self.new_start, self.point + self.start)&#125;), ]</span><br><span class="line">        self.analyse_table = dict()</span><br><span class="line">        self.acc = acc</span><br><span class="line">        self.get_analyse_table()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断文法类型</span></span><br><span class="line">        self.language_type = self.get_language_type()</span><br><span class="line">        <span class="keyword">if</span> self.language_type <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">            exit(<span class="string">'unsupported language!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求解文法的非终结符号集，即产生式右部不是非终结符号的符号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_overs</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                    <span class="keyword">if</span> sign <span class="keyword">not</span> <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                        self.overs.add(sign)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'over sign set:'</span>)</span><br><span class="line">            pprint(self.overs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first集和follow集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮，产生式右部首字符为终结符号</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_first = deepcopy(self.first)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                new_dict = &#123;&#125;</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                        new_dict = self.first[nontermainal]</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                        <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            new_dict.update(&#123;right[<span class="number">0</span>]: right&#125;)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                                <span class="keyword">if</span> sign <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                                    first_ = self.first[sign]</span><br><span class="line">                                    new_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                                    <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        new_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">                self.first[nontermainal].update(new_dict)</span><br><span class="line">            <span class="keyword">if</span> old_first == self.first:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[self.start].add(self.sharp)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = deepcopy(self.follow)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.overs:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_set = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_set_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_set_without_null</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_set:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'follow set:'</span>)</span><br><span class="line">            pprint(self.follow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_items</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items[self.new_start] = [self.point + self.start, self.start + self.point]</span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    self.items[nonterminal].append(right[:i] + self.point + right[i:])</span><br><span class="line">                self.items[nonterminal].append(right + self.point)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'items:'</span>)</span><br><span class="line">            pprint(self.items)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归求解输入项目集合的闭包</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closure</span><span class="params">(self, production_set)</span>:</span></span><br><span class="line">        ret = production_set.copy()</span><br><span class="line">        <span class="comment"># 对于每一个项目，找到分隔符，如果后面有非终结符号，执行闭包操作</span></span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> self.items[right[i + <span class="number">1</span>]]:</span><br><span class="line">                    <span class="keyword">if</span> self.point == item[<span class="number">0</span>]:</span><br><span class="line">                        ret.add((right[i + <span class="number">1</span>], item))</span><br><span class="line">        <span class="keyword">if</span> ret == production_set:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.closure(ret)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现go函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self, production_set, sign)</span>:</span></span><br><span class="line">        new_production_set = set()</span><br><span class="line">        <span class="comment"># 找到接受sign的项目，将分隔符后移一位</span></span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] == sign:</span><br><span class="line">                new_right = list(right)</span><br><span class="line">                temp = new_right[i]</span><br><span class="line">                new_right[i] = new_right[i + <span class="number">1</span>]</span><br><span class="line">                new_right[i + <span class="number">1</span>] = temp</span><br><span class="line">                new_production_set.add((production[<span class="number">0</span>], <span class="string">''</span>.join(new_right)))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 返回新的状态的闭包</span></span><br><span class="line">        <span class="keyword">return</span> self.closure(new_production_set)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟人求解状态集的过程，求解项目集与分析表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analyse_table</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># last_index指示现有状态集个数</span></span><br><span class="line">        <span class="comment"># index是正在分析的状态的索引</span></span><br><span class="line">        last_index = <span class="number">0</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 首先得到该状态接受的符号及其对应项目</span></span><br><span class="line">            receive_sign_dict = &#123;&#125;</span><br><span class="line">            <span class="comment"># 遍历状态集中的每一个项目</span></span><br><span class="line">            <span class="keyword">for</span> (left, right) <span class="keyword">in</span> self.status_list[index]:</span><br><span class="line">                <span class="comment"># 找到分隔符</span></span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 如果分隔符不在末尾，将则其后的符号为接受符号</span></span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right):</span><br><span class="line">                    <span class="keyword">if</span> right[i + <span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> receive_sign_dict.keys():</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]] = &#123;(left, right)&#125;</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]].add((left, right))</span><br><span class="line">                <span class="comment"># 如果分隔符在末尾</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果左部为拓广文法起始符号，则记录acc</span></span><br><span class="line">                    <span class="keyword">if</span> left == self.new_start:</span><br><span class="line">                        self.analyse_table[index] = &#123;self.sharp: [self.acc, ]&#125;</span><br><span class="line">                    <span class="comment"># 否则找到对应的产生式</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        production_index = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">for</span> left_ <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                            <span class="keyword">for</span> right_ <span class="keyword">in</span> self.productions[left_]:</span><br><span class="line">                                <span class="keyword">if</span> (left, right.replace(self.point, <span class="string">''</span>)) == (left_, right_):</span><br><span class="line">                                    <span class="comment"># 根据左部的follow集将r填入分析表</span></span><br><span class="line">                                    self.analyse_table[index] = &#123;</span><br><span class="line">                                        over: [production_index, <span class="string">'r'</span>, (left_, right_)]</span><br><span class="line">                                        <span class="keyword">for</span> over <span class="keyword">in</span> (self.follow[left_])</span><br><span class="line">                                    &#125;</span><br><span class="line">                                production_index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 遍历接受符号</span></span><br><span class="line">            <span class="keyword">for</span> sign, production_set <span class="keyword">in</span> receive_sign_dict.items():</span><br><span class="line">                <span class="comment"># 用函数go求出新的状态</span></span><br><span class="line">                new_status = self.go(production_set, sign)</span><br><span class="line">                new_action = []</span><br><span class="line">                <span class="comment"># 如果新状态没有和已有的状态重复，讲起加入状态列表</span></span><br><span class="line">                <span class="keyword">if</span> new_status <span class="keyword">not</span> <span class="keyword">in</span> self.status_list:</span><br><span class="line">                    self.status_list.append(new_status)</span><br><span class="line">                    last_index += <span class="number">1</span></span><br><span class="line">                    new_action.append(last_index)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    new_action.append(self.status_list.index(new_status))</span><br><span class="line">                <span class="comment"># 更新分析表</span></span><br><span class="line">                <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">                    new_action.append(production)</span><br><span class="line">                <span class="keyword">if</span> index <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table.keys():</span><br><span class="line">                    self.analyse_table[index] = &#123;sign: new_action&#125;</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.analyse_table[index].update(&#123;sign: new_action&#125;)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果没有状态可以分析，结束循环</span></span><br><span class="line">            <span class="keyword">if</span> index &gt; last_index:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'stauts list:'</span>)</span><br><span class="line">            pprint(self.status_list)</span><br><span class="line">            print(<span class="string">'analyse table:'</span>)</span><br><span class="line">            pprint(self.analyse_table)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过项目集分析文法类型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_language_type</span><span class="params">(self)</span>:</span></span><br><span class="line">        ret = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> status <span class="keyword">in</span> self.status_list:</span><br><span class="line">            guiyue_items = list()</span><br><span class="line">            yijin_items = list()</span><br><span class="line">            <span class="comment"># 遍历一个状态中的所有项目</span></span><br><span class="line">            <span class="keyword">for</span> left, right <span class="keyword">in</span> status:</span><br><span class="line">                <span class="comment"># 找到分隔符号，记录归约项目的follow集和移进项目的终结符号</span></span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> == len(right):</span><br><span class="line">                    <span class="keyword">if</span> right[i - <span class="number">1</span>] != self.new_start <span class="keyword">and</span> left != self.new_start:</span><br><span class="line">                        guiyue_items.append(self.follow[left])</span><br><span class="line">                <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    yijin_items.append(right[i + <span class="number">1</span>])</span><br><span class="line">            <span class="comment"># 如果有归约归约冲突或移进归约冲突</span></span><br><span class="line">            <span class="keyword">if</span> len(guiyue_items) &gt;= <span class="number">2</span> <span class="keyword">or</span> len(guiyue_items) &gt; <span class="number">0</span> <span class="keyword">and</span> len(yijin_items) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 至少为slr1文法，置ret=0</span></span><br><span class="line">                ret = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 判断能否用follow集解决冲突</span></span><br><span class="line">                <span class="comment"># 不能解决，返回-1</span></span><br><span class="line">                jihe = set()</span><br><span class="line">                <span class="keyword">for</span> nonterminal <span class="keyword">in</span> guiyue_items:</span><br><span class="line">                    <span class="keyword">if</span> nonterminal <span class="keyword">in</span> jihe:</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        jihe |= nonterminal</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> yijin_items:</span><br><span class="line">                    <span class="keyword">if</span> sign <span class="keyword">in</span> jihe:</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        jihe.add(sign)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 词法分析</span></span><br><span class="line">    <span class="comment"># 检查是否为保留字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.token <span class="keyword">in</span> self.reserved <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录tag与string，清空token</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(self, c=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.tag_list.append(self.token <span class="keyword">if</span> c == <span class="string">''</span> <span class="keyword">else</span> c)</span><br><span class="line">        self.string_list.append(self.token)</span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取下一个输出符号，没有返回False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_char</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index == len(self.string):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        self.ch = self.string[self.index]</span><br><span class="line">        self.token += self.ch</span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.ch</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 回退一个符号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retract</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.index = max(self.index - <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.ch = self.string[max(self.index - <span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line">        self.token = self.token[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是字母，循环调用get_char，最后调用out</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alpha</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.index &lt; len(self.string) <span class="keyword">and</span> self.string[self.index].isalnum() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.out(<span class="string">''</span> <span class="keyword">if</span> self.lookup() <span class="keyword">else</span> <span class="string">'i'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是数字，循环调用get_char，最后调用out</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">digit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.index &lt; len(self.string) <span class="keyword">and</span> self.string[self.index].isdigit() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.out(<span class="string">'i'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是单符号终结符，直接调用out</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果是双符号终结符，调用get_char后决定是否回退</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(self)</span>:</span></span><br><span class="line">        now_ch = self.ch</span><br><span class="line">        <span class="keyword">if</span> self.get_char() <span class="keyword">not</span> <span class="keyword">in</span> self.two_next[now_ch]:</span><br><span class="line">            self.retract()</span><br><span class="line">        <span class="keyword">if</span> self.token <span class="keyword">in</span> self.token_to_category:</span><br><span class="line">            self.out(self.token_to_category[self.token])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    switch = &#123;</span><br><span class="line">        <span class="string">'alpha'</span>: alpha,</span><br><span class="line">        <span class="string">'digit'</span>: digit,</span><br><span class="line">        <span class="string">'one'</span>: one,</span><br><span class="line">        <span class="string">'two'</span>: two,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># lr语法分析器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_lr</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化输入串列表、状态栈、符号栈</span></span><br><span class="line">        self.tag_list += self.sharp</span><br><span class="line">        string_index = <span class="number">0</span></span><br><span class="line">        status_stack = [<span class="number">0</span>, ]</span><br><span class="line">        sign_stack = [self.sharp, ]</span><br><span class="line">        <span class="comment"># 初始化语义分析的四元式列表、分析栈</span></span><br><span class="line">        siyuanshi_list = []</span><br><span class="line">        temp_stack = []</span><br><span class="line">        temp_index = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 不停分析直到接受</span></span><br><span class="line">        <span class="keyword">while</span> self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">0</span>] != self.acc:</span><br><span class="line">            <span class="comment"># 如果不是r，则为s</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'r'</span> != self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack)</span><br><span class="line">                <span class="comment"># push()</span></span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(self.tag_list[string_index])</span><br><span class="line">                <span class="comment"># advance()</span></span><br><span class="line">                string_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 为r，取出对应产生式的左部与右部</span></span><br><span class="line">                left = self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                right = self.analyse_table[status_stack[<span class="number">-1</span>]][self.tag_list[string_index]][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">                <span class="comment"># 语义分析，四元式</span></span><br><span class="line">                <span class="keyword">if</span> any([i <span class="keyword">in</span> right <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>]]):</span><br><span class="line">                    op = right[<span class="number">1</span>]</span><br><span class="line">                    one = temp_stack[<span class="number">-2</span>] <span class="keyword">if</span> type(temp_stack[<span class="number">-2</span>]) == str <span class="keyword">else</span> <span class="string">'temp%d'</span> % temp_stack[<span class="number">-2</span>]</span><br><span class="line">                    two = temp_stack[<span class="number">-1</span>] <span class="keyword">if</span> type(temp_stack[<span class="number">-1</span>]) == str <span class="keyword">else</span> <span class="string">'temp%d'</span> % temp_stack[<span class="number">-1</span>]</span><br><span class="line">                    result = <span class="string">'temp%d'</span> % temp_index</span><br><span class="line">                    siyuanshi_list.append((op, one, two, result))</span><br><span class="line">                    temp_stack.pop()</span><br><span class="line">                    temp_stack.pop()</span><br><span class="line">                    temp_stack.append(temp_index)</span><br><span class="line">                    temp_index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">'='</span> <span class="keyword">in</span> right:</span><br><span class="line">                    op = right[<span class="number">1</span>]</span><br><span class="line">                    one = temp_stack[<span class="number">-1</span>] <span class="keyword">if</span> type(temp_stack[<span class="number">-1</span>]) == str <span class="keyword">else</span> <span class="string">'temp%d'</span> % temp_stack[<span class="number">-1</span>]</span><br><span class="line">                    two = <span class="string">'_'</span></span><br><span class="line">                    result = temp_stack[<span class="number">-2</span>] <span class="keyword">if</span> type(temp_stack[<span class="number">-2</span>]) == str <span class="keyword">else</span> <span class="string">'temp%d'</span> % temp_stack[<span class="number">-2</span>]</span><br><span class="line">                    siyuanshi_list.append((op, one, two, result))</span><br><span class="line">                    temp_stack.pop()</span><br><span class="line">                    temp_stack.append(temp_index)</span><br><span class="line">                    temp_index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> right == <span class="string">'i'</span>:</span><br><span class="line">                    temp_stack.append(self.string_list[string_index - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 语义分析结束，pop(第i个产生式右部文法符号的个数)</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    sign_stack.pop()</span><br><span class="line">                    status_stack.pop()</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">                <span class="comment"># push(GOTO[新的栈顶状态][第i个产生式的左部])</span></span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][left][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(left)</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">            <span class="comment"># error，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> self.tag_list[string_index] <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table[status_stack[<span class="number">-1</span>]].keys():</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            pprint(siyuanshi_list)</span><br><span class="line">        <span class="keyword">with</span> open(self.file_name + <span class="string">'.four'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> siyuanshi <span class="keyword">in</span> siyuanshi_list:</span><br><span class="line">                f.write(<span class="string">'%s %s %s %s\n'</span> % (siyuanshi[<span class="number">0</span>], siyuanshi[<span class="number">1</span>],siyuanshi[<span class="number">2</span>],siyuanshi[<span class="number">3</span>],))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, file)</span>:</span></span><br><span class="line">        <span class="comment"># 从文件中读取输入串</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file_name = os.path.basename(file)</span><br><span class="line">            self.file_name = file_name[:file_name.index(<span class="string">'.'</span>)]</span><br><span class="line">            <span class="keyword">with</span> open(file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                raw_string = f.read()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="comment"># 先对输入串进行词法分析</span></span><br><span class="line">        self.string = raw_string.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.ch = <span class="string">''</span></span><br><span class="line">        self.one_op = [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'='</span>, <span class="string">'/'</span>]</span><br><span class="line">        self.reserved = []</span><br><span class="line">        self.tag_list = []</span><br><span class="line">        self.string_list = []</span><br><span class="line">        self.two_next = &#123;</span><br><span class="line">            <span class="string">':'</span>: &#123;<span class="string">'='</span>, &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        self.token_to_category = &#123;<span class="string">':='</span>: <span class="string">'='</span>&#125;</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'analysing: '</span> + raw_string)</span><br><span class="line">        <span class="keyword">while</span> self.get_char():</span><br><span class="line">            <span class="keyword">if</span> self.ch.isalpha():</span><br><span class="line">                case = <span class="string">'alpha'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch.isdigit():</span><br><span class="line">                case = <span class="string">'digit'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.one_op:</span><br><span class="line">                case = <span class="string">'one'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.two_next.keys():</span><br><span class="line">                case = <span class="string">'two'</span></span><br><span class="line">            <span class="comment"># 不合法字符，报错退出循环</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'error index %s: unkown character "%s"'</span> % (self.index, self.ch), end=<span class="string">'\n\n'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 词法分析出错，报错退出循环</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.switch[case](self):</span><br><span class="line">                print(<span class="string">'error index %s: unkown character "%s"'</span> % (self.index, self.token), end=<span class="string">'\n\n'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'string'</span>, self.string_list)</span><br><span class="line">            print(<span class="string">'tag   '</span>, self.tag_list)</span><br><span class="line">        <span class="comment"># 将二元式写入文件</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file_name + <span class="string">'.two'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> string_, tag_ <span class="keyword">in</span> zip(self.string_list, self.tag_list):</span><br><span class="line">                f.write(<span class="string">'%s %s\n'</span> % (string_, tag_))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 语法分析</span></span><br><span class="line">        <span class="keyword">if</span> self.analyse_lr() == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'ok   '</span>, raw_string, end=<span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'fail '</span>, raw_string, end=<span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = <span class="string">'A'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'V=E'</span>, ],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'E-T'</span>, <span class="string">'T'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'T/F'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'V'</span>: [<span class="string">'i'</span>, ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">analyzer = SLRAnalyzer(start, productions, log_level=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    file = input(<span class="string">'请输入文件路径：\n'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> analyzer.analyse(file):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="专题5-SRL语法分析程序"><a href="#专题5-SRL语法分析程序" class="headerlink" title="专题5 SRL语法分析程序"></a>专题5 SRL语法分析程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SLRAnalyzer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, productions, new_start=<span class="string">'S'</span>, point=<span class="string">'.'</span>, log_level=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.new_start = new_start</span><br><span class="line">        self.productions = productions</span><br><span class="line">        self.nonterminals = productions.keys()</span><br><span class="line">        self.log_level = log_level</span><br><span class="line"></span><br><span class="line">        self.overs = set()</span><br><span class="line">        self.get_overs()</span><br><span class="line"></span><br><span class="line">        self.jinghao = <span class="string">'#'</span></span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line"></span><br><span class="line">        self.items = &#123;key: list() <span class="keyword">for</span> key <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        self.point = point</span><br><span class="line">        self.get_items()</span><br><span class="line"></span><br><span class="line">        self.status_list = [self.closure(&#123;(self.new_start, self.point + self.start)&#125;), ]</span><br><span class="line">        self.analyse_table = dict()</span><br><span class="line">        self.last_index = <span class="number">0</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.acc = <span class="string">'acc'</span></span><br><span class="line">        self.get_analyse_table()</span><br><span class="line"></span><br><span class="line">        self.language_type = self.is_lr0()</span><br><span class="line">        <span class="keyword">if</span> self.language_type <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">            exit(<span class="string">'unsupported language!'</span>)</span><br><span class="line">        <span class="keyword">if</span> self.language_type == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'lr0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'slr1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        ret_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">            <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                ret_dict = self.first[nontermainal]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    ret_dict.update(&#123;right[<span class="number">0</span>]: right&#125;)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                            first_ = self.first[sign]</span><br><span class="line">                            ret_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret_dict</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first集和follow集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮，产生式右部首字符为终结符号</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_first = deepcopy(self.first)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                self.first[nontermainal].update(self.get_first(nontermainal))</span><br><span class="line">            <span class="keyword">if</span> old_first == self.first:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[self.start].add(self.jinghao)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = deepcopy(self.follow)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.overs:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_set = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_set_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_set_without_null</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_set:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'follow set:'</span>)</span><br><span class="line">            pprint(self.follow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_overs</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                    <span class="keyword">if</span> sign <span class="keyword">not</span> <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                        self.overs.add(sign)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'over sign set:'</span>)</span><br><span class="line">            pprint(self.overs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_items</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items[self.new_start] = [self.point + self.start, self.start + self.point]</span><br><span class="line">        <span class="keyword">for</span> nonterminal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nonterminal]:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    self.items[nonterminal].append(right[:i] + self.point + right[i:])</span><br><span class="line">                self.items[nonterminal].append(right + self.point)</span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'items:'</span>)</span><br><span class="line">            pprint(self.items)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closure</span><span class="params">(self, production_set)</span>:</span></span><br><span class="line">        ret = production_set.copy()</span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> self.items[right[i + <span class="number">1</span>]]:</span><br><span class="line">                    <span class="keyword">if</span> self.point == item[<span class="number">0</span>]:</span><br><span class="line">                        ret.add((right[i + <span class="number">1</span>], item))</span><br><span class="line">        <span class="keyword">if</span> ret == production_set:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.closure(ret)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self, production_set, sign)</span>:</span></span><br><span class="line">        new_production_set = set()</span><br><span class="line">        <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">            right = production[<span class="number">1</span>]</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">1</span>] == sign:</span><br><span class="line">                new_right = list(right)</span><br><span class="line">                temp = new_right[i]</span><br><span class="line">                new_right[i] = new_right[i + <span class="number">1</span>]</span><br><span class="line">                new_right[i + <span class="number">1</span>] = temp</span><br><span class="line">                new_production_set.add((production[<span class="number">0</span>], <span class="string">''</span>.join(new_right)))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.closure(new_production_set)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analyse_table</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            receive_sign_dict = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> (left, right) <span class="keyword">in</span> self.status_list[self.index]:</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(right):</span><br><span class="line">                    <span class="keyword">if</span> right[i + <span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> receive_sign_dict.keys():</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]] = &#123;(left, right)&#125;</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        receive_sign_dict[right[i + <span class="number">1</span>]].add((left, right))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> left == self.new_start:</span><br><span class="line">                        self.analyse_table[self.index] = &#123;self.jinghao: [self.acc, ]&#125;</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        production_index = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">for</span> left_ <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                            <span class="keyword">for</span> right_ <span class="keyword">in</span> self.productions[left_]:</span><br><span class="line">                                <span class="keyword">if</span> (left, right.replace(self.point, <span class="string">''</span>)) == (left_, right_):</span><br><span class="line">                                    self.analyse_table[self.index] = &#123;</span><br><span class="line">                                        over: [production_index, <span class="string">'r'</span>, (left_, right_)]</span><br><span class="line">                                        <span class="keyword">for</span> over <span class="keyword">in</span> (self.follow[left_])</span><br><span class="line">                                    &#125;</span><br><span class="line">                                production_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> sign, production_set <span class="keyword">in</span> receive_sign_dict.items():</span><br><span class="line">                new_status = self.go(production_set, sign)</span><br><span class="line">                new_dfa = []</span><br><span class="line">                <span class="keyword">if</span> new_status <span class="keyword">not</span> <span class="keyword">in</span> self.status_list:</span><br><span class="line">                    self.status_list.append(new_status)</span><br><span class="line">                    self.last_index += <span class="number">1</span></span><br><span class="line">                    new_dfa.append(self.last_index)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    new_dfa.append(self.status_list.index(new_status))</span><br><span class="line">                <span class="keyword">for</span> production <span class="keyword">in</span> production_set:</span><br><span class="line">                    new_dfa.append(production)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> self.index <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table.keys():</span><br><span class="line">                    self.analyse_table[self.index] = &#123;sign: new_dfa&#125;</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.analyse_table[self.index].update(&#123;sign: new_dfa&#125;)</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self.index &gt; self.last_index:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'stauts list:'</span>)</span><br><span class="line">            pprint(self.status_list)</span><br><span class="line">            print(<span class="string">'analyse table:'</span>)</span><br><span class="line">            pprint(self.analyse_table)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_lr0</span><span class="params">(self)</span>:</span></span><br><span class="line">        ret = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> status <span class="keyword">in</span> self.status_list:</span><br><span class="line">            guiyue_items = list()</span><br><span class="line">            yijin_items = list()</span><br><span class="line">            <span class="keyword">for</span> left, right <span class="keyword">in</span> status:</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(right) <span class="keyword">and</span> right[i] != self.point:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i + <span class="number">1</span> == len(right):</span><br><span class="line">                    <span class="keyword">if</span> right[i - <span class="number">1</span>] != self.new_start <span class="keyword">and</span> left != self.new_start:</span><br><span class="line">                        guiyue_items.append(self.follow[left])</span><br><span class="line">                <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    yijin_items.append(right[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> len(guiyue_items) &gt;= <span class="number">2</span> <span class="keyword">or</span> len(guiyue_items) &gt; <span class="number">0</span> <span class="keyword">and</span> len(yijin_items) &gt; <span class="number">0</span>:</span><br><span class="line">                ret = <span class="number">0</span></span><br><span class="line">                jihe = set()</span><br><span class="line">                <span class="keyword">for</span> nonterminal <span class="keyword">in</span> guiyue_items:</span><br><span class="line">                    <span class="keyword">if</span> nonterminal <span class="keyword">in</span> jihe:</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        jihe |= nonterminal</span><br><span class="line">                <span class="keyword">for</span> sign <span class="keyword">in</span> yijin_items:</span><br><span class="line">                    <span class="keyword">if</span> sign <span class="keyword">in</span> jihe:</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        jihe.add(sign)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_lr</span><span class="params">(self, string)</span>:</span></span><br><span class="line">        string += self.jinghao</span><br><span class="line">        status_stack = [<span class="number">0</span>, ]</span><br><span class="line">        sign_stack = [self.jinghao, ]</span><br><span class="line">        string_index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">0</span>] != self.acc:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'r'</span> != self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack)</span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(string[string_index])</span><br><span class="line">                string_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># act</span></span><br><span class="line">                left = self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                right = self.analyse_table[status_stack[<span class="number">-1</span>]][string[string_index]][<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(right)):</span><br><span class="line">                    sign_stack.pop()</span><br><span class="line">                    status_stack.pop()</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">                status_stack.append(self.analyse_table[status_stack[<span class="number">-1</span>]][left][<span class="number">0</span>])</span><br><span class="line">                sign_stack.append(left)</span><br><span class="line">                <span class="keyword">if</span> self.log_level &gt;= <span class="number">1</span>:</span><br><span class="line">                    print(status_stack, sign_stack, left, right)</span><br><span class="line">            <span class="keyword">if</span> string[string_index] <span class="keyword">not</span> <span class="keyword">in</span> self.analyse_table[status_stack[<span class="number">-1</span>]].keys():</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string)</span>:</span></span><br><span class="line">        print(<span class="string">'analysing: '</span> + string)</span><br><span class="line">        <span class="keyword">if</span> self.analyse_lr(string) == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'ok  '</span>, string)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'fail'</span>, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lr0</span></span><br><span class="line"><span class="comment"># start = 'E'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'E': ['aEb', 'aEc', 'ab']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['ab', 'aab', 'aabb', 'aabc']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 书上slr1</span></span><br><span class="line"><span class="comment"># start = 'L'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'L':['E,L', 'E'],</span></span><br><span class="line"><span class="comment">#     'E':['a','b']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['a,b,a', 'aa', 'b,a,a,b']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 书上slr1</span></span><br><span class="line"><span class="comment"># start = 'B'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'B':['bD;Te',],</span></span><br><span class="line"><span class="comment">#     'D': ['D;d','d'],</span></span><br><span class="line"><span class="comment">#     'T': ['s;T', 's']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['bd;se', 'bd;s;se']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非srl1或lr0</span></span><br><span class="line"><span class="comment"># start = 'E'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'E': ['Eab', 'bR'],</span></span><br><span class="line"><span class="comment">#     'R': ['E', 'a'],</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['ba', 'aab']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lr0</span></span><br><span class="line"><span class="comment"># start = 'E'</span></span><br><span class="line"><span class="comment"># productions = &#123;</span></span><br><span class="line"><span class="comment">#     'E': ['aA', 'bB'],</span></span><br><span class="line"><span class="comment">#     'A': ['cA', 'd'],</span></span><br><span class="line"><span class="comment">#     'B': ['cB', 'd']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['ad', 'bcd', 'ab']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实验slr1</span></span><br><span class="line">start = <span class="string">'A'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'V=E'</span>, ],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'E-T'</span>, <span class="string">'T'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'T/F'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'V'</span>: [<span class="string">'i'</span>, ],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [<span class="string">'i=i+i'</span>, <span class="string">'i=(i-i)*i/(i+i)'</span>, <span class="string">'i==i*i'</span>]</span><br><span class="line">analyzer = SLRAnalyzer(start, productions, log_level=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    analyzer.analyse(string)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《计算机体系结构》实验6-cache模拟</title>
      <link href="/2018/06/07/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C6-cache%E6%A8%A1%E6%8B%9F/"/>
      <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ol><li>阅读分析附件模拟器代码</li><li>通过读懂代码加深了解cache的实现技术</li><li>结合书后习题1进行测试</li><li>通过实验设计了解参数（cache和block size等）和算法（LRU，FIFO等）选择的优化配置与组合，需要定性和定量分析，可以用数字或图表等多种描述手段配合说明。输入project.txt 样例0 524 0 524 0 524，结合自己的设计自行产生和输入project.</li></ol><h1 id="模拟器代码的阅读、修改与注释"><a href="#模拟器代码的阅读、修改与注释" class="headerlink" title="模拟器代码的阅读、修改与注释"></a>模拟器代码的阅读、修改与注释</h1><p> 实事求是讲，给出的模拟器代码存在很多问题，主要包括：</p><ol><li>没有提示输入数据的单位</li><li>变量名称过于随意，代码可读性很差</li><li>部分参数冗余，部分逻辑控制不符合常规</li><li>代码注释不完整，且可读性较差</li></ol><p>综上，我对实验源码修改并重新注释如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简称CPU向内存请求的数据的地址为“请求地址”</span></span><br><span class="line"><span class="comment">// 存储了请求地址对应的块地址</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> blockaddress[<span class="number">500</span>];</span><br><span class="line"><span class="comment">// cache中存在过的块的tag位，用于判断失效类型</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> before[<span class="number">500</span>];</span><br><span class="line"><span class="comment">// before中有效数据的个数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">misstype</span><span class="params">(<span class="keyword">int</span> ba,<span class="keyword">int</span> nb, <span class="keyword">int</span> l)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 存储请求地址，单位分别为字节与4字节</span></span><br><span class="line"><span class="keyword">int</span> bytearray[<span class="number">500</span>],wordaddress[<span class="number">500</span>];</span><br><span class="line"><span class="comment">// 存储请求地址的文件指针</span></span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="comment">// cache的大小，单位为字节</span></span><br><span class="line"><span class="keyword">int</span> cachesize;</span><br><span class="line"><span class="comment">// block的大小，单位为4字节</span></span><br><span class="line"><span class="keyword">int</span> blocksize;</span><br><span class="line"><span class="comment">// block的大小，单位为字节</span></span><br><span class="line"><span class="keyword">int</span> blockinbyte;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组相联路数，即每组block的数量</span></span><br><span class="line"><span class="keyword">int</span> assoc;</span><br><span class="line"><span class="comment">// 最大块号</span></span><br><span class="line"><span class="keyword">int</span> NOofblock;</span><br><span class="line"><span class="comment">// 最大组号</span></span><br><span class="line"><span class="keyword">int</span> NOofset;</span><br><span class="line"><span class="comment">// 映射模式：直接映射、组相联映射、全相联映射</span></span><br><span class="line"><span class="keyword">int</span> choice;</span><br><span class="line"><span class="comment">// 命中数、命中数、请求地址总数</span></span><br><span class="line"><span class="keyword">float</span> misscount,accesscount,hitcount;</span><br><span class="line"><span class="keyword">int</span> index,byte,tag,ii;</span><br><span class="line"><span class="comment">// z控制循环逻辑，c统计未命中的的类型</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j,x,y,z,c,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// newarray中存储cache中各块的valid位与tag位，默认都是无效的，即cache一开始没有数据</span></span><br><span class="line"><span class="comment">// lru中存储最近使用情况，用来实现LRU替换策略（对应位数越大，代表越久未被使用），默认刚刚被访问</span></span><br><span class="line"><span class="comment">// 第一个索引是组号</span></span><br><span class="line"><span class="keyword">int</span> newarray[<span class="number">300</span>][<span class="number">300</span>]=&#123;<span class="number">0</span>&#125;,lru[<span class="number">300</span>][<span class="number">300</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ans=<span class="string">'y'</span>;</span><br><span class="line"><span class="comment">// 统计三种未命中情况的数量</span></span><br><span class="line"><span class="keyword">int</span> c1c=<span class="number">0</span>,c2c=<span class="number">0</span>,c3c=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// 命中率与未命中率</span></span><br><span class="line"><span class="keyword">float</span> missrate=<span class="number">0</span>, hitrate=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择映射模式：直接映射、组相联映射、全相联映射</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Cache Simulation Project:"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n1. Direct_mapped\n2. Set_associate\n3. Fully_associate\n\n: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">1</span>||choice==<span class="number">2</span>||choice==<span class="number">3</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Incorrect input."</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择cache大小：16、64、128、256（字节）</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\nCache Size from range[64/128/256](byte): "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cachesize);</span><br><span class="line"><span class="keyword">if</span>(cachesize==<span class="number">64</span>||cachesize==<span class="number">128</span>||cachesize==<span class="number">256</span> || cachesize==<span class="number">16</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Incorrect input."</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择块大小：1、2、4（4字节）</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\nBlock Size from range[1/2/4](word,4byte): "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;blocksize);</span><br><span class="line"><span class="keyword">if</span>(blocksize==<span class="number">1</span>||blocksize==<span class="number">2</span>||blocksize==<span class="number">4</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Incorrect input."</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择组相连路数，即一个组中块的数量</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\nEnter the value for n-way Set value from[1/2/4/8/16]: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;assoc);</span><br><span class="line"><span class="keyword">if</span>(assoc==<span class="number">1</span>||assoc==<span class="number">2</span>||assoc==<span class="number">4</span>||assoc==<span class="number">8</span>||assoc==<span class="number">16</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Incorrect input.\n"</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(ii = <span class="number">0</span>; ii &lt; <span class="number">500</span>; ii++)</span><br><span class="line">before[ii]=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开文件，读取请求数据的字节地址</span></span><br><span class="line">fp= fopen(<span class="string">"project.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;byte)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">bytearray[i++]=byte;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算块大小（字节为单位）</span></span><br><span class="line">blockinbyte=blocksize*<span class="number">4</span>;</span><br><span class="line"><span class="comment">// 计算cache中块的总数</span></span><br><span class="line">NOofblock=cachesize/blockinbyte;</span><br><span class="line"><span class="comment">// 计算组的总数</span></span><br><span class="line">NOofset=NOofblock/assoc;</span><br><span class="line"><span class="comment">// 初始化未命中数、命中数、访问数</span></span><br><span class="line">misscount=<span class="number">0</span>;</span><br><span class="line">hitcount=<span class="number">0</span>;</span><br><span class="line">accesscount=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个一个处理请求数据的地址</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 无论是否命中，请求地址数+1</span></span><br><span class="line">accesscount++;</span><br><span class="line"><span class="comment">// 将请求地址用4字节为单位表示</span></span><br><span class="line">        wordaddress[j]=bytearray[j]/<span class="number">4</span>;</span><br><span class="line">        <span class="comment">// 由于blocksize也以4字节为单位，相除得到块号</span></span><br><span class="line">blockaddress[j]=wordaddress[j]/blocksize;</span><br><span class="line"><span class="comment">// 计算块号对应的组号</span></span><br><span class="line">index=blockaddress[j]%NOofset;</span><br><span class="line"><span class="comment">// 计算第tag个对应到该组的块号</span></span><br><span class="line">tag=blockaddress[j]/NOofset;</span><br><span class="line"><span class="comment">// 当映射模式为直接映射或组相联映射</span></span><br><span class="line">x=y=z=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">1</span>||choice==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 遍历该组每个块存储在newarray的valid和tag</span></span><br><span class="line"><span class="keyword">while</span> (z&lt;(assoc*<span class="number">2</span>))</span><br><span class="line">&#123;</span><br><span class="line">c=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// 当cache中valid无效，由于多路组相联中数据是顺序存放的，所以表明数据不在cache中，未命中</span></span><br><span class="line"><span class="comment">// 同时还表明该组还有空位，不需要置换</span></span><br><span class="line"><span class="keyword">if</span>(newarray[index][z]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 填写tag位</span></span><br><span class="line">newarray[index][z+<span class="number">1</span>]=tag;</span><br><span class="line"><span class="comment">// 填写valid位</span></span><br><span class="line">newarray[index][z]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 统计未命中数量</span></span><br><span class="line">misscount++;</span><br><span class="line"><span class="comment">//判断未命中的类型类型</span></span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将该组所有lru加1，表示这一轮循环没有被用到，</span></span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;(assoc*<span class="number">2</span>);m=m+<span class="number">2</span>)</span><br><span class="line">lru[index][m]++;</span><br><span class="line"><span class="comment">// 将刚刚填写的块对应的lru置为0</span></span><br><span class="line">lru[index][z]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变循环变量，退出循环（很奇怪的操作，为何不用break？）</span></span><br><span class="line">z=(assoc*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当tag不为0，表示还有数据可以匹配</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// tag位一致，则数据在cache中，命中</span></span><br><span class="line"><span class="keyword">if</span>(newarray[index][z+<span class="number">1</span>]==tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 增加命中数量</span></span><br><span class="line">hitcount++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上，为了实现LRU的替换策略，更新lru，退出循环</span></span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;(assoc*<span class="number">2</span>);m=m+<span class="number">2</span>)</span><br><span class="line">lru[index][m]++;</span><br><span class="line">lru[index][z]=<span class="number">0</span>;</span><br><span class="line">z=(assoc*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果tag位不一致，则数据不在该块中</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 直接映射时，则肯定是未命中</span></span><br><span class="line"><span class="keyword">if</span>(assoc&lt;<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 直接替换掉，统计未命中数，判断未命中类型，退出循环</span></span><br><span class="line">newarray[index][z+<span class="number">1</span>]=tag;</span><br><span class="line">misscount++;</span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line">z=(assoc*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组相联映射时，则请求的地址可能在同一组的别的块中</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 更新y，确保对应的块是最久没有被访问的</span></span><br><span class="line"><span class="comment">// 因为在置换之前一定会遍历所有的块，而未命中的情况下他们的相对大小不会变（？）</span></span><br><span class="line"><span class="keyword">if</span>(x&lt;lru[index][z])</span><br><span class="line"><span class="comment">// if (lru[index][y] &lt; lru[index][z])</span></span><br><span class="line">&#123;</span><br><span class="line">x=lru[index][z];</span><br><span class="line">y=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果刚刚判断未命中的是该组的最后一个块，那么必须替换</span></span><br><span class="line"><span class="comment">// 否则直接检测下一个块</span></span><br><span class="line"><span class="keyword">if</span>(z==((assoc*<span class="number">2</span>)<span class="number">-2</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// y其对应的块的lru最大，所以被置换的是它</span></span><br><span class="line">newarray[index][y+<span class="number">1</span>]=tag;</span><br><span class="line">misscount++;</span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新lru</span></span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;(assoc*<span class="number">2</span>);m=m+<span class="number">2</span>)</span><br><span class="line">lru[index][m]++;</span><br><span class="line">lru[index][y]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继续循环，去检测该组号为index的组的下一个块</span></span><br><span class="line">z=z+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 统计未命中类型</span></span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)</span><br><span class="line">c1c++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">2</span>)</span><br><span class="line">c2c++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">3</span>)</span><br><span class="line">c3c++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当为全相联映射时</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//全相联映射中cache所有的块均可存该数据</span></span><br><span class="line"><span class="keyword">while</span>(z&lt;=NOofblock)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 同上，valid=0表示未命中且还有空的cache块</span></span><br><span class="line"><span class="keyword">if</span>(newarray[z][<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将该数据块更新到cache中</span></span><br><span class="line">newarray[z][<span class="number">1</span>]=blockaddress[j];</span><br><span class="line">newarray[z][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 统计未命中次数，判断未命中类型，更新lru值，退出循环</span></span><br><span class="line">misscount++;</span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;=NOofblock;m++)</span><br><span class="line">lru[m][<span class="number">1</span>]++;</span><br><span class="line">lru[z][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">z=(NOofblock+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// valid=1表示有数据</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果tag位也一样，则命中</span></span><br><span class="line"><span class="keyword">if</span>(newarray[z][<span class="number">1</span>]==blockaddress[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 统计命中次数，更新lru，退出循环</span></span><br><span class="line">hitcount++;</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;=NOofblock;m++)</span><br><span class="line">lru[m][<span class="number">1</span>]++;</span><br><span class="line">lru[z][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">z=NOofblock+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果tag不一样，表示没有和该块匹配上</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 同上，更新y，确保对应的块是最久没有被访问的</span></span><br><span class="line"><span class="keyword">if</span> (x&lt;lru[z][<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">x=lru[z][<span class="number">1</span>];</span><br><span class="line">y=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果刚刚未匹配的是最后一块，表明未命中</span></span><br><span class="line"><span class="keyword">if</span>(z==NOofblock)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 执行lru替换</span></span><br><span class="line">newarray[y][<span class="number">1</span>]=blockaddress[j];</span><br><span class="line"><span class="comment">// 统计未命中次数，判断未命中类型，更新lru值，自动退出循环</span></span><br><span class="line">misscount++;</span><br><span class="line">c=misstype(blockaddress[j],NOofblock,j);</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;=NOofblock;m++)</span><br><span class="line">lru[m][<span class="number">1</span>]++;</span><br><span class="line">lru[y][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 和下一个块匹配</span></span><br><span class="line">z++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>) c1c++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">2</span>) c2c++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">3</span>) c3c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算并打印统计信息</span></span><br><span class="line">    missrate = (misscount/accesscount);</span><br><span class="line">hitrate = (hitcount/accesscount);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n        Miss Rate = %3f \n"</span>,missrate);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n         Hit Rate = %3f \n"</span>,hitrate);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n  Compulsory Miss = %3d \n"</span>,c1c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n    Capacity Miss = %3d \n"</span>,c3c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n    Conflict Miss = %3d \n"</span>,c2c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n       hit Number = %3f \n"</span>,hitcount);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n      miss Number = %3f \n"</span>,misscount);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n    Access Number = %3f \n"</span>,accesscount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入请求地址块号、最大块号、请求地址编号索引，返回未命中的类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">misstype</span><span class="params">(<span class="keyword">int</span> ba, <span class="keyword">int</span> nb, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u,k=<span class="number">0</span>,b=<span class="number">0</span>,m,ii;</span><br><span class="line"><span class="keyword">int</span> blarray[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"><span class="comment">// 初始化blarray</span></span><br><span class="line"><span class="keyword">for</span> (ii=<span class="number">0</span>;ii&lt;<span class="number">500</span>;ii++)</span><br><span class="line">blarray[ii]=<span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查输入块号是否曾被装入cache，曾被装入置k=0，否则k=1</span></span><br><span class="line"><span class="keyword">for</span>(u=<span class="number">0</span>;u&lt;=t;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(before[u]==ba)</span><br><span class="line">&#123;</span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">k=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有被装入，是首次缺失、冷缺失（Compulsory Miss）</span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">type=<span class="number">1</span>;</span><br><span class="line">before[t]=ba;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 曾经被装入，判断是容量缺失（capacity）还是冲突缺失（conflict）</span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 遍历已经请求过地址</span></span><br><span class="line"><span class="comment">// 统计到上次请求该地址后，去了重的请求地址数量</span></span><br><span class="line"><span class="keyword">for</span>(u=(l<span class="number">-1</span>); u&gt;=<span class="number">0</span>; u--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 遇到和本次请求地址相同的块号就结束</span></span><br><span class="line"><span class="keyword">if</span>(blockaddress[u]==ba)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 找到blarray中与该请求地址相同的索引</span></span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;=b;m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(blarray[m]==blockaddress[u])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果blarray中没有该请求地址，将该地址存在blarray中</span></span><br><span class="line"><span class="comment">// 即blarray会对已经访问过的地址去重</span></span><br><span class="line"><span class="keyword">if</span>(m==(b+<span class="number">1</span>))</span><br><span class="line">blarray[b++]=blockaddress[u];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 去重后的数量小于cache中块的总数，即cache还没有满，是conflict miss</span></span><br><span class="line"><span class="comment">// 如果cache已经满了，是capacity miss</span></span><br><span class="line"><span class="keyword">if</span>((b)&lt;nb)</span><br><span class="line">type=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">type=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回未命中的种类</span></span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结合习题1的测试"><a href="#结合习题1的测试" class="headerlink" title="结合习题1的测试"></a>结合习题1的测试</h1><p>根据习题1中的要求，cache一共256个byte，一个block大小为4个字，进行两组测试。由于一个int类型的变量占4个byte，而输入的单位是byte，首先用一小段python代码生成测试样例，即100个交错0和132，之所以不是习题1中10000个是因为代码中存放请求地址的数量最大为500。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        n = <span class="number">132</span> * <span class="number">4</span></span><br><span class="line">        f.write(<span class="string">'0 %d '</span> % n)</span><br></pre></td></tr></table></figure><p>然后测试直接相联： </p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image1.png" alt="image1"></p><p>由于一个int类型的变量占4个byte，所以array[0]和array[132]在cache中的块号为： </p><script type="math/tex; mode=display">\lfloor \frac{0}{16/4} \rfloor mod{\frac{256}{16}} =0 \\ \lfloor \frac{132}{16/4} \rfloor mod{\frac{256}{16}} =1</script><p>所以两者不会相互替换，于是除了最初的2次compulsory miss外，全都命中，实验结果符合预期。而array[131]在cache中的块号为：</p><script type="math/tex; mode=display"> \lfloor \frac{131}{16/4} \rfloor mod{\frac{256}{16}} =0</script><p>和array[0]会不停地冲突！所以实验结果为</p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image2.png" alt="image1"></p><p>同理，测试0和132的两路组相联如下：</p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image3.png" alt="image1"></p><p>测试0和131的两路组相联如下，此时不可能冲突：</p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image4.png" alt="image1"></p><h1 id="参数定量分析"><a href="#参数定量分析" class="headerlink" title="参数定量分析"></a>参数定量分析</h1><p>用以下代码生成样本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        n1 = <span class="number">131</span> * <span class="number">4</span></span><br><span class="line">        n2 = <span class="number">132</span> * <span class="number">4</span></span><br><span class="line">        n3 = <span class="number">130</span> * <span class="number">4</span></span><br><span class="line">        f.write(<span class="string">'0 %d %d %d '</span> % (n1, n2, n3))</span><br></pre></td></tr></table></figure><p>假设cache的大小为256byte，反复执行代码有如下命中率： </p><p><img src="/2018/06/07/《计算机体系结构》实验6-cache模拟/image5.png" alt="image1"></p><p>可见，在该组测试样本下，为了尽量提高命中率，同时降低电路复杂度，应该使用直接相联，块大小为2个word。不过考虑到样本比较简单，可以适当提高路数，不过应该用更复杂的样本测试。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在本次实验，通过代码的阅读、修改与测试，增强了对cache映射方式的理解，加强了对LRU算法的理解，对于之后的学习必然带来积极影响。</p>]]></content>
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-吴恩达老师在斯坦福大学的机器学习公开课2——学习理论</title>
      <link href="/2018/06/05/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE2%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/"/>
      <content type="html"><![CDATA[<p>前置课程请移步<a href="http://wang22ti.com/2018/05/25/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE1%E2%80%94%E2%80%94%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/">第一部分：监督学习</a></p><p>从这里开始的3个lecture，是整个课程的第二部分：学习理论！就是如何熟练地、有效地使用在第一部分学习过的算法。</p><h1 id="Lecture-9"><a href="#Lecture-9" class="headerlink" title="Lecture 9"></a>Lecture 9</h1><h2 id="偏差方差权衡（bias-variance-trade-off）"><a href="#偏差方差权衡（bias-variance-trade-off）" class="headerlink" title="偏差方差权衡（bias variance trade-off）"></a>偏差方差权衡（bias variance trade-off）</h2><p>回到此前关于欠拟合和过拟合的描述，有如下直观的描述：</p><p><img src="/2018/06/05/mooc-吴恩达老师在斯坦福大学的机器学习公开课2——学习理论/1.png" alt="1"></p><p>无论是左图还是右图，都存在巨大的<code>泛化误差（generalization error）</code>，这个会在之后有形式化的定义，指的是模型针对新的样本而非测试集的误差。不过误差带来的原因却截然不同，因此针对欠拟合定义<code>偏差（bias）</code>，指的是即便训练了非常大（甚至是无限大）的数据之后仍然存在的泛化误差；针对过拟合定义<code>方差（variance）</code>，指的是由于训练集不够大，部分特例（比如特别贵或特别便宜的房子）导致模型存在的泛化误差。</p><p>显然，欠拟合是偏差过大的表现，过拟合是方差过大的表现。往往在减小偏差还是减小方差之间，是需要做出适当的权衡的。为了学习在不同情况下如何使用学习算法，即如何权衡偏差与方差，我们要解决以下问题：</p><ol><li>如何对偏差方差权衡进行形式化的定义？（进一步可以讨论模型选择的方法，比如如何选择多项式的次数）</li><li>机器学习中除了关注泛化误差，最关注的是算法是否有效地利用了训练样本，即如何将训练样本中的误差同泛化误差联系起来。</li><li>学习算法可以在怎样的条件下被<strong>证明</strong>是有效的？（比如有什么条件就可以证明一个分类算法的准确率高达（99%）</li></ol><h2 id="经验风险最小化问题（Empirical-risk-minimization，ERM）（一）"><a href="#经验风险最小化问题（Empirical-risk-minimization，ERM）（一）" class="headerlink" title="经验风险最小化问题（Empirical risk minimization，ERM）（一）"></a>经验风险最小化问题（Empirical risk minimization，ERM）（一）</h2><p>我们为什么可以使用之前的模型？实际上，之前的分类模型，比如逻辑回归、支持向量机等等，都是<code>经验风险最小化问题（Empirical risk minimization，ERM）</code>的特例或近似，我们将通过证明经验风险最小化问题的合理性，从而说明第一部分中的分类模型是可靠的、有效的。</p><h3 id="联合界（Union-bound）和Hoeﬀding不等式（Hoeﬀding-inequality）"><a href="#联合界（Union-bound）和Hoeﬀding不等式（Hoeﬀding-inequality）" class="headerlink" title="联合界（Union bound）和Hoeﬀding不等式（Hoeﬀding inequality）"></a>联合界（Union bound）和Hoeﬀding不等式（Hoeﬀding inequality）</h3><p>在此之前，需要介绍两个<code>引理（Lemma）</code>，一个是<code>联合界（Union bound）</code>：</p><script type="math/tex; mode=display">P(A_1\cup\dots\cup A_k) \leq P(A_1)+\dots+P(A_k)</script><p>其中$P$表示事件发生的概率，用文氏图就很容易理解。</p><p>另一个是<code>Hoeﬀding不等式（Hoeﬀding inequality）</code>：</p><p>如果$Z_1,\dots,Z_m$是独立同分布的（IID）且均服从伯努利分布，令</p><script type="math/tex; mode=display">P(Z_i=1)=\phi \\ \hat{\phi}=\frac{1}{m}\sum_{i=1}^m{Z_i}</script><p>则对于任意$\gamma&gt;0$有</p><script type="math/tex; mode=display">P(|\phi-\hat{\phi}|>\gamma) \leq 2\exp(-2\gamma^2m)</script><p>当增加$m$的时候，等式右边的高斯分布会收窄，使得$\phi$偏离$\hat{\phi}$的概率呈指数变小。虽然很像中心极限定理，但是这个不等式在$m$很小的情况下也是成立的。</p><h3 id="符号说明（Notation-explanation）"><a href="#符号说明（Notation-explanation）" class="headerlink" title="符号说明（Notation explanation）"></a>符号说明（Notation explanation）</h3><p>将使用一下符号：</p><script type="math/tex; mode=display">h_\theta(x)=g(\theta^Tx) \\ g(z)=1\{z\geq0\} \\ y\in\{0,1\} \\ S=\{(x^{(i)}, y^{(i)})\}_{i=1}^m, \ (x^{(i)}, y^{(i)})\sim_{IID}D</script><p>显然先假设了这是一个线性模型，其中可以认为$g$是逻辑回归的一个加强版本，而样本集$S$中的样本是独立同分布的。定义假设$h_\theta$的<code>训练误差（training error）</code>：</p><script type="math/tex; mode=display">\hat{\epsilon}(h_\theta)=\hat{\epsilon}_S(h_\theta)=\frac{1}{m}\sum_{i=1}^m{1\{h_\theta(x^{(i)})\neq y^{(i)}\}}</script><p>由于训练误差又被称为<code>风险（risk）</code>，所以经验风险最小化问题就可以被定义为</p><script type="math/tex; mode=display">\hat{\theta}=arg \min_\theta{\hat{\epsilon}(h_\theta)}=arg \min_\theta{\frac{1}{m}\sum_{i=1}^m{1\{h_\theta(x^{(i)})\neq y^{(i)}\}}}</script><p>可以认为，由于这个原始的学习算法是一个<code>NP困难问题</code>，所以提出逻辑回归和支持向量机等凸优化问题，都是对这个非凸问题进行近似处理。为了进一步的证明，可以认为我们选择的是一个函数，而不是参数$\theta$。先定义假设的集合</p><script type="math/tex; mode=display">H=\{h_\theta,\theta\in\R^{n+1},h_\theta:X\mapsto\{0,1\}\}</script><p>其中，$h$是通用的模型，包括神经网络或多分类等等，并不局限于线性与二分类。于是，可以将经验风险最小化模型修改为</p><script type="math/tex; mode=display">\hat{h}=arg \min_{h\in H}{\hat{\epsilon}_S(h)}</script><p>进一步可以定义模型优化的终极目标——泛化误差：</p><script type="math/tex; mode=display">\epsilon(h)=P_{(x,y)\sim D}(h(x)\neq y)</script><p>大多数情况下，$\hat{}$表示我们认为一个量是另外一个量的<code>估计（estimate）</code>，比如用$\hat{\epsilon}$估计（近似表示）$\epsilon$。</p><p>我们要证明的结论是——为什么经验风险最小化模型是合理的？即为什么$\hat{\epsilon}$可以用来估计（近似表示）$\epsilon$，或者能否由$\hat{\epsilon}$得到$\epsilon$的一个上界？注意这个问题的回答此前都是在感性的认知下默认成立的，通过对这个结论的证明还可以得到偏差方差权衡的形式化表达。</p><h3 id="有限集合-H-（finite-H-）"><a href="#有限集合-H-（finite-H-）" class="headerlink" title="有限集合$H$（finite $H$）"></a>有限集合$H$（finite $H$）</h3><p>先讨论假设数量有限的情况，即假设集合$H=\{h_1,h_2,\dots,h_k\},k=|H|$，其中每一个假设$h$都是不带参数的。</p><h4 id="一致性收敛（Uniform-convergence）"><a href="#一致性收敛（Uniform-convergence）" class="headerlink" title="一致性收敛（Uniform convergence）"></a>一致性收敛（Uniform convergence）</h4><p>对于给定的假设$j$，定义对于样本$i$的伯努利变量为</p><script type="math/tex; mode=display">Z_i=1\{ h_j(x^{(i)})\neq y^{(i)} \}</script><p>易知对于单个样本$i$假设$j$的泛化误差为</p><script type="math/tex; mode=display">\epsilon(h_j)=P(Z_i=1)</script><p>由于所有样本都是独立同分布的，所以</p><script type="math/tex; mode=display">\hat{\epsilon}=\frac{1}{m}\sum_{i=1}^m{Z_i}</script><p>利用Hoeﬀding不等式有</p><script type="math/tex; mode=display">P(|\epsilon(h_i)-\hat{\epsilon}(h_i)|>\gamma) \leq 2\exp(-2\gamma^2m)</script><p>即对于任意一个给定的假设，当样本足够大的时候，训练误差可以很好地表示泛化误差。</p><p>那对于整个假设集合呢？设事件$A_j$为$|\epsilon(h_j)-\hat{\epsilon}(h_j)|&gt;\gamma$，于是有</p><script type="math/tex; mode=display">P(\exist h_j\in H,A_j)=P(A_1\cup A_2\cup\dots\cup A_k) \\ \leq \sum_{j=1}^k{}P(A_j) \leq 2k\exp(-2\gamma^2m)=\delta</script><p>两边同时取非，于是有</p><script type="math/tex; mode=display">P(\forall h_j\in H,|\epsilon(h_j)-\hat{\epsilon}(h_j)|\leq\gamma) \geq 1- \delta</script><p>其中$\forall h_j\in H,|\epsilon(h_j)-\hat{\epsilon}(h_j)|\leq\gamma$被称为<code>一致性收敛（Uniform convergence）</code>，表示对于$H$中任意的假设，其训练误差与泛化误差的差值均小于$\gamma$，其概率是大于$1- \delta$的。</p><p>以上固定了样本集合大小$m$和误差阈值$\gamma$，求出了一致性收敛的概率$1-\delta$，于是很容易得到另外两种形式的一致性收敛原则。</p><h4 id="样本复杂度（sample-complexity）"><a href="#样本复杂度（sample-complexity）" class="headerlink" title="样本复杂度（sample complexity）"></a>样本复杂度（sample complexity）</h4><p>给定误差阈值$\gamma$，如果希望一致性概率收敛的概率大于给定的$1-\delta$，即有$P(\forall h_j\in H,|\epsilon(h_j)-\hat{\epsilon}(h_j)|\leq\gamma) \geq 1-\delta$，则要求训练集合的大小$m$大于等于<code>样本复杂度（sample complexity）</code>：</p><script type="math/tex; mode=display">m\geq \frac{1}{2\gamma^2}\log{\frac{2k}{\delta}}</script><p>这是最好理解的一个形式，可以指导我们选择样本的数量，同时也告诉我们可以放心地增加假设的数量$k$。</p><h4 id="误差界（error-bound）"><a href="#误差界（error-bound）" class="headerlink" title="误差界（error bound）"></a>误差界（error bound）</h4><p>给定训练集合大小$m$和概率界$\delta$，有$1-\delta$的概率使得对于任意$h\in H$泛化误差与训练误差的差$\gamma$均小于<code>误差界（error bound）</code>：</p><script type="math/tex; mode=display">|\hat{\epsilon}(h)-\epsilon(h)|\leq\sqrt{\frac{1}{2m}\log{\frac{2k}{\delta}}}</script><h4 id="偏差方差权衡的形式化表达"><a href="#偏差方差权衡的形式化表达" class="headerlink" title="偏差方差权衡的形式化表达"></a>偏差方差权衡的形式化表达</h4><p>一致性收敛往往成立，现在假设已经成立了，即有$\forall h_j\in H,|\epsilon(h_j)-\hat{\epsilon}(h_j)|\leq\gamma$。经验风险最小化模型要做的就是从这$k$个假设中选出使得训练误差最小的那一个，即</p><script type="math/tex; mode=display">\hat{h}=arg \min_{h\in H}{\hat{\epsilon}_S(h)}</script><p>定义理论上的最优假设</p><script type="math/tex; mode=display">h^*=arg \min_{h\in H}\epsilon(h)</script><p>由误差界有</p><script type="math/tex; mode=display">\begin{array}{} \epsilon(\hat{h})&\leq &\hat{\epsilon}(\hat{h}) + \gamma  \\ &\leq & \hat{\epsilon}(h^*) + \gamma \\ &\leq &\epsilon(h^*)+2\gamma \end{array}</script><p>于是，给定样本大小$m$和概率界$\delta$，有$1-\delta$的概率有</p><script type="math/tex; mode=display">\epsilon(\hat{h})\leq \epsilon(h^*)+2\sqrt{\frac{1}{2m}\log{\frac{2k}{\delta}}}</script><p>假设现在用的是线性模型$H$，我们对训练得到的最优假设的泛化误差$\epsilon(\hat{h})$的上界并不满意，我们考虑使用更复杂的模型，比如二次模型$H^{‘}\supseteq H$，那么理论上的最优假设的泛化误差$\epsilon(h^<em>)$一定会减小，然而由于假设数量$k$的增加，最优假设的泛化误差$\epsilon(\hat{h})$的上界并不一定会减小，这就是偏差方差权衡的形式化表达。十分不严谨的、直观的，可以认为$\epsilon(h^</em>)$是分类问题偏差，$2\sqrt{\frac{1}{2m}\log{\frac{2k}{\delta}}}$是分类问题的方差。</p><h1 id="Lecture-10"><a href="#Lecture-10" class="headerlink" title="Lecture 10"></a>Lecture 10</h1><h2 id="经验风险最小化问题（Empirical-risk-minimization，ERM）（二）"><a href="#经验风险最小化问题（Empirical-risk-minimization，ERM）（二）" class="headerlink" title="经验风险最小化问题（Empirical risk minimization，ERM）（二）"></a>经验风险最小化问题（Empirical risk minimization，ERM）（二）</h2><h3 id="无限集合-H-（infinite-H-）与VC维"><a href="#无限集合-H-（infinite-H-）与VC维" class="headerlink" title="无限集合$H$（infinite $H$）与VC维"></a>无限集合$H$（infinite $H$）与VC维</h3><p>下面要利用样本复杂度将样本复杂度推广到无限维的形式，先说一个直观的结论：</p><p>$H$是以$d$个实数组成的，每个实数在计算机中都有64个bit表示，于是最多有$2^{64d}$个假设，即有$k=2^{64d}$。由样本复杂度有</p><script type="math/tex; mode=display">m \geq O(\frac{1}{\gamma^2}\log{\frac{k}{\delta}}) = O(\frac{d}{\gamma^2}\log{\frac{1}{\delta}})</script><p>所以训练集的规模大致和参数的数量正相关。之所以说这只是一个直观的结论，是因为依赖于对浮点数是64位的假设，之后会提出更加正式的表达方式。在此之前需要介绍另外两个概念</p><p>对于一个给定的集合$S={x^{i},\dots,x^{(d)}}$我们将<code>H打散（Shatter）S</code>定义为$H$能够实现任意在$S$上的标记，也就是对于任意的标记集合$\{y^{(1)},\dots,y^{(d)}\}$，都存在一个假设$h\in H$使得$\forall i=1,\dots,d, h(x^{(i)})=y^{(i)}$。对于一个假设集合$H$，定义<code>VC维</code>维可以被$H$打散的最大集合的大小，写作$VC(H)$。如果$H$可以打散任意大小的集合，那么$VC(H)=\infin$。比如对于下面的集合：</p><p><img src="/2018/06/05/mooc-吴恩达老师在斯坦福大学的机器学习公开课2——学习理论/2.png" alt=""></p><p>无论是哪一种标记，都可以可以找到一个线性的假设完成标记：</p><p><img src="/2018/06/05/mooc-吴恩达老师在斯坦福大学的机器学习公开课2——学习理论/3.png" alt=""></p><p>而对于任意一个大小为4的集合，线性假设都无法将之打散，所以对于线性假设集合，其在二维空间中的VC维为3。实际上$n$维线性假设集合的VC维等于$n+1$。</p><p>注意到，对于下面的大小为3的集合，线性假设集合并不能加之打散，但是这并不影响VC维的值，最大集合只要有一个即可。</p><p><img src="/2018/06/05/mooc-吴恩达老师在斯坦福大学的机器学习公开课2——学习理论/4.png" alt=""></p><p>有了VC维的概念，就可以有上述结论的严谨的表达方式，几乎是学习理论中最重要的结论：</p><p>对于给定的假设集合$H$，令$d=VC(H)$，令事件$A$为</p><script type="math/tex; mode=display">|\epsilon(h)-\hat{\epsilon}(h)\leq O(\sqrt{\frac{d}{m}\log{\frac{m}{d}}+\frac{1}{m}\log{\frac{1}{\delta}}})|,h\in H</script><p>则有</p><script type="math/tex; mode=display">P(A) \geq 1-\delta</script><p>因此，令事件$B$为</p><script type="math/tex; mode=display">\hat{\epsilon}(h)\leq \epsilon(h^*) +O(\sqrt{\frac{d}{m}\log{\frac{m}{d}}+\frac{1}{m}\log{\frac{1}{\delta}}})|,h\in H</script><p>则有</p><script type="math/tex; mode=display">P(B) \geq 1-\delta</script><p>由于无限大小的假设集合往往也只有有限大小的VC维，因此将经验风险最小化模型的合理推广到无限维度。实际上大多数合理的假设类，VC维和模型参数的数量是成正比的（当然有一些非主流的，有着很少的参数却有着很大的VC维）上述结论的证明十分复杂（吴老师看了一周）,所以关于VC维的详细内容先占一个坑，</p><p>!@#$%^&amp;*()_+具体参见<a href="http://open.163.com/special/opencourse/learningfromdata.html" target="_blank" rel="noopener">加州理工学院公开课：机器学习与数据挖掘</a></p><p>这是可能会好奇为啥SVM不会过拟合，因为VC为是$n+1$而$n$看起来应该是无穷大的。实际上SVM是具有比较小的VC维度的，是以距离空间零点最远的点的距离的某个常数为上界。</p><p>在经验上逻辑回归需要的样本约是参数数量的10倍。</p><h2 id="模型选择（model-selection）"><a href="#模型选择（model-selection）" class="headerlink" title="模型选择（model selection）"></a>模型选择（model selection）</h2><p>了解的方差-偏差权衡，我们知道不应该选择过于复杂或者或与简单的模型，所以往往要对参数进行合适的选择。一个例子是在进行逻辑回归的时候$h_\theta(x)=g(\theta_0+\theta_1x+,\dots,+\theta_kx^k)$中的$k$的取值，另一个是在进行局部加权线性回归的时候参数$\tau$，还有在软间隔SVM中的参数$C$的选取。模型选择可以自动地在方差和偏差之间完成权衡。</p><h3 id="简单交叉验证（Simple-Cross-validation）"><a href="#简单交叉验证（Simple-Cross-validation）" class="headerlink" title="简单交叉验证（Simple Cross validation）"></a>简单交叉验证（Simple Cross validation）</h3><p>将可以选择的模型的集合记为$M=\{M_1, \dots,M_d\}$。有很多种模型选择的标准方法，其中一个是简单<code>交叉验证（Simple Cross validation）</code>。</p><p>对于一个给定的样本集合$S$，将其随机划分为两个子集，一个是训练子集$S_{train}$（一般是70%），另一个是保留交叉验证子集$S_{cv}$（剩下的30%）。仅仅使用$S_{train}$训练模型得到假设$h_i$，用保留交叉验证子集进行测试，找到具有最小误差的$h_i$。最后可以使用100%的样本即集合$S$对选定的模型进行训练。</p><h3 id="k-折交叉验证（-k-fold-cross-validation）"><a href="#k-折交叉验证（-k-fold-cross-validation）" class="headerlink" title="$k$折交叉验证（$k$-fold cross validation）"></a>$k$折交叉验证（$k$-fold cross validation）</h3><p>有时候在机器学习中样本是十分难得的，比如医学的每一项数据都代表一个不愉快的经历，使用30%的数据仅仅作为模型选择是很浪费的。所以往往使用交叉验证的变种<code>k折交叉验证（k-fold cross validation）</code>。</p><p>将样本集合$S$平均划分为$k$份，每次将$k-1$份作为训练集，将剩下的一份作为测试集，如此得到的$k$个误差的平均就是当前模型的泛化误差的估计。</p><p>$k$最常见的是取5、10，当$k=m$即和样本数目相同的时候，变为<code>留1交叉验证（leave-one-out cv）</code>，只用数据数据很少的时候才采用这种方法（比如15个）。</p><p>虽然提高了数据的利用率，但是该方法也带来到了大量的计算。</p><h2 id="特征选择（Feature-Selection）"><a href="#特征选择（Feature-Selection）" class="headerlink" title="特征选择（Feature Selection）"></a>特征选择（Feature Selection）</h2><p>特征选择是一类特殊的模型选择。以垃圾邮件分类为例，其中类似于like，a，is等词语并不能说明这是否是垃圾邮件，因此认为所有特征的集合中存在一个对于特定学习问题最为相关的子集。特征选择的目的就是找到这样的一个子集，从而减小假设类的规模，降低过拟合的风险。</p><p>对于一个大小为$n$的特征集合，它有$2^n$个子集。这是一个巨大的空间，所以我们往往使用不同的启发式规则进行搜索。</p><h3 id="前向搜索算法（forward-search-algorithm）"><a href="#前向搜索算法（forward-search-algorithm）" class="headerlink" title="前向搜索算法（forward search algorithm）"></a>前向搜索算法（forward search algorithm）</h3><p>前向搜索算法（forward search algorithm），又称前向选择算法（forward selection algorithm），其过程为：</p><ol><li>初始化特征集合$F=\empty$</li><li>重复<ol><li>对于不在$F$中的特征$i$，使用交叉验证评估$F_i=F\cup\{i\}$，即只是用$F_i$训练学习模型并得到泛化误差</li><li>令$F$为上述$F_i$中泛化误差最小的那一个</li></ol></li><li>得到最好的特征子集</li></ol><p>如果没有任何启发式算法，那么最后$F$就是所有的特征。如果根据经验需要$k$个特征就可以，那么久完成了特征选择。</p><p>这个算法是<code>封装特征选择算法（wrapper model feature selection）</code>的特例，因为它在学习算法的外面又使用了一层算法，每一轮都反复执行学习算法并根据学习算法的结果进行特征选择。其一个变种是<code>后向搜索算法（backward search）</code>，即从所有特征中一个一个删除。</p><h3 id="过滤特征选择算法（Filter-feature-selection）"><a href="#过滤特征选择算法（Filter-feature-selection）" class="headerlink" title="过滤特征选择算法（Filter feature selection）"></a>过滤特征选择算法（Filter feature selection）</h3><p>实际上封装特征选择算法往往表现得很好，唯一的缺点就是需要大量的计算，对于文本分类这样的问题可能就搞不定了。本质上需要计算的是某一个特征$x_i$对于$y$的影响有多大，所以使用<code>过滤特征选择算法（Filter feature selection）</code>，它使用<code>相互信息（mutual information）</code>来计算关联性：</p><script type="math/tex; mode=display">MI(x_i,y)=\sum_{x_i\in\{0,1\}}{ \sum_{y\in\{0,1\}}{p(x_i,y)\log{\frac{p(x_i,y)}{p(x_i)p(y)}}} }</script><p>实际上这是一个标准的信息论概念</p><script type="math/tex; mode=display">MI(x_i,y)=KL(p(x_i,y)||p(x_i)p(y))</script><p>其中KL用来衡量两个概率分布的差异。如果$x_i$和$y$是独立的，那么连个的联合分布与分布的乘积的KL距离为0。</p><p>有了衡量相似度的标准之后，只要选择相关度最高的$k$个特征即可。其中$k$可以通过交叉验证决定，即每选择一个特征之后就使用交叉验证计算一下泛化误差。</p><h1 id="Lecture-11"><a href="#Lecture-11" class="headerlink" title="Lecture 11"></a>Lecture 11</h1><h2 id="贝叶斯统计与正则化（Bayesian-statistics-and-regularization）"><a href="#贝叶斯统计与正则化（Bayesian-statistics-and-regularization）" class="headerlink" title="贝叶斯统计与正则化（Bayesian statistics and regularization）"></a>贝叶斯统计与正则化（Bayesian statistics and regularization）</h2><p>特征选择是一个简化模型、避免过拟合的一个方向，正则化是另外一个，它将保留所有的特征。在线性回归中，我们会最大化似然函数，有</p><script type="math/tex; mode=display">\max_\theta{\prod_i{p(y^{(i)}|x^{(i)};\theta)}}</script><p>即认为$\theta$是一个确定的值，我们通过学习算法对其估计——这是<code>频率学派（frequentist）</code>的观点。</p><p>然而<code>贝叶斯学派（Bayesian）</code>认为$\theta$也是一个变量，我们要给他一个<code>先验分布（prior distribution）</code>$P(\theta)$，比如假设$\theta\sim N(0,\tau^2I)$。对于给定的训练集合$S=\{x^{(i)},y^{(i)}\}_{i=1}^m$，我们会计算<code>后验分布（posterior distribution）</code>：</p><script type="math/tex; mode=display">p(\theta|S)=\frac{p(S|\theta)p(\theta)}{p(S)}=\frac{(\prod_{i=1}^m{p(y^{(i)}|x^{(i)},\theta)})p(\theta)}{\int_\theta{(\prod_{i=1}^m{p(y^{(i)}|x^{(i)},\theta)}p(\theta))d\theta}}</script><p>其中$p(y^{(i)}|x^{(i)},\theta)$来自于使用的模型。比如使用贝叶斯逻辑回归的时候，$p(y^{(i)}|x^{(i)},\theta)=h_\theta(x^{(i)})^{y^{(i)}}(1-h_\theta(x^{(i)}))^{1-y^{(i)}}$，其中$h_\theta(x^{(i)})=1/(1+\exp(-\theta^Tx^{(i)}))^3$。</p><p>当对测试样本进行估计的时候，</p><script type="math/tex; mode=display">p(y|x,S)=\int_\theta{p(y|x,\theta)p(\theta|S)d\theta}</script><p>即有</p><script type="math/tex; mode=display">E[y|x,S]=\int_yyp(y|x,S)dy</script><p>这些公式比较抽象而且非常难以求解，在大多数情况下都没有解析解，所以我们一般不会直接求解完整的后验分布，而是进行MAP估计</p><script type="math/tex; mode=display">\theta_{MAP}=\max_\theta{P(\theta|S)}=\max_\theta{\prod_{i=1}^m{p(y^{(i)}|x^{(i)},\theta)p(\theta)}}</script><p>当我们假设$\theta\sim N(0,\tau^2I)$的时候，即假设大多数特征的参数接近0——等同于消除了这些特征。于是最优化目标变为：</p><script type="math/tex; mode=display">\min_\theta{\sum_{i}{||y^{(i)}-\theta^Tx^{(i)}||^2}+\lambda||\theta||^2}</script><p>其中$\lambda=\frac{1}{\tau^2}$，即和之前相比加上了最后的正则化项，它能够使得拟合的结果更加平滑，降低了过拟合的风险。</p><h2 id="在线学习（online-learning）"><a href="#在线学习（online-learning）" class="headerlink" title="在线学习（online learning）"></a>在线学习（online learning）</h2><p>下面简单介绍属于“安排课程时不知道放哪里的那一部分”。</p><p>之前学习的算法都是<code>批学习算法（batch learning algorithm）</code>，即给定一个训练集合，在上面跑一个学习算法，之后在测试集合上测试。此外还有一类学习算法称为<code>在线学习（online learning）</code>，即使在学习的过程中也要进行预测。</p><p>在这个过程中我们关注的是<code>总的在线误差（total online error）</code>，即</p><script type="math/tex; mode=display">\sum_i{1\{\hat{y}^{(i)}\neq y^{(i)}\}}</script><p>之前的大多数算法都可以应用于这个形式，随机梯度下降可能就更好，比如应用在感知机中。可以证明的是，即使$x^{(i)}\in \R^\infin$，只要正负样本是可以完全被分开的，感知机在有限个样本之后是一定可以收敛的。这个结论比较复杂且不是重点，因此只是先占一个坑：</p><p>!@#$%^&amp;*()_+</p><h2 id="机器学习应用的一些建议"><a href="#机器学习应用的一些建议" class="headerlink" title="机器学习应用的一些建议"></a>机器学习应用的一些建议</h2><h3 id="调试诊断法（diagnostics-for-debugging-learning-algorithm）"><a href="#调试诊断法（diagnostics-for-debugging-learning-algorithm）" class="headerlink" title="调试诊断法（diagnostics for debugging learning algorithm）"></a>调试诊断法（diagnostics for debugging learning algorithm）</h3><p>当我们使用一个学习算法但是没有取得预期的效果的时候，需要改进的地方在哪里呢？我们一定要避免<code>过早统计优化（premature statistical optimization）</code>，即将大量时间放在某一不重要的地方。这时候我们首先需要设定一些指标，找出一下两个问题的答案，针对性地解决。指标因问题而异，一旦找到问题的所在，一方面可以节约时间，另一方面可以对问题的本质认识更加深入，方便进一步的研究和阐述研究成果。</p><h4 id="方差过大还是偏差过大？"><a href="#方差过大还是偏差过大？" class="headerlink" title="方差过大还是偏差过大？"></a>方差过大还是偏差过大？</h4><p>如果随着样本数量的增加测试误差仍然在减小，而训练误差在缓慢增长，他们之间有较大的差距，说明具有较大的方差，需要进一步增加样本数量或者减小特征的数量；反之如果测试误差不变了，同时训练误差和测试误差相近，说明具有较大的偏差，需要增加特征的数量或者使用更好的特征。</p><h4 id="是优化算法不好还是优化目标不好？"><a href="#是优化算法不好还是优化目标不好？" class="headerlink" title="是优化算法不好还是优化目标不好？"></a>是优化算法不好还是优化目标不好？</h4><p>比如在进行垃圾邮箱分类的时候，使用贝叶斯逻辑回归对垃圾和正常邮件均有2%的错误率，而SVM对垃圾邮件有10%和对正常邮件有0.01%的错误率，显然贝叶斯逻辑回归是不能忍受的。此刻我们可以对测试结果定义个加权评估函数$\alpha$，如果$\alpha_{SVM}&gt;\alpha_{BLR},J_{SVM}&gt;J_{BLR}$，那么说明优化目标和预期结果是一致的，逻辑回归使用的优化方法还没有收敛，可以优化更多代数或者使用别的优化方法比如牛顿下降等等；反之说明优化目标的设置不合理，优化目标的最值并不是预期的分类结果，所以要修正优化目标比如改用不同的正则化参数$\lambda$或者采用SVM。</p><h3 id="误差分析和销蚀分析（error-analyses-and-ablative-analysis）"><a href="#误差分析和销蚀分析（error-analyses-and-ablative-analysis）" class="headerlink" title="误差分析和销蚀分析（error analyses and ablative analysis）"></a>误差分析和销蚀分析（error analyses and ablative analysis）</h3><p>很多机器学习系统是一个很长的流水线，如果能够分析出误差来自于哪些组件，将是十分有意义的。误差分析的过程是逐渐用<code>基准值（ground-true value）</code>代替每一个组件并观察<code>准确率（accuracy）</code>的变化，这类似于软件工程中的一些方法。</p><p>误差分析是将现有的系统和完美的系统进行对比，而销蚀分析则用来解释当前系统和一些性能很差的系统<code>底线系统baseline system</code>之间的差距来自哪里。则将现有系统的组件逐个替换为底线系统的，并观察准确率的变化。</p><p>当然，无论是误差分析还是销蚀分析，组件替换的顺序会导致不同的结果，往往是将所有顺序都尝试一下，有一些看起来很自然的顺序并不OK。</p><h3 id="解决一个机器学习问题如何起步"><a href="#解决一个机器学习问题如何起步" class="headerlink" title="解决一个机器学习问题如何起步"></a>解决一个机器学习问题如何起步</h3><p>解决问题有两种路径，一个是仔细设计系统，提取正确的特征，收集正确的数据，设计正确的算法结构，之后实现它；好处是可以得到新的优雅、<code>伸缩性（scalable）</code>更好的算法，对问题进行深入的思考并机器学习的基础研究做出贡献，这也是解决问题的正确方式。</p><p>另一种方法是“创建-修改”方法，先建立一个简陋的模型，之后使用调试诊断或者误差分析这一类方法看看哪里有问题并修改。好处是可以快速地建立系统，比如在公司中获胜的往往并不是最好的产品而是最早占有市场的产品。这类似于软件工程中的快速原型模式。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>开发应用的时候倾向于使用确信和应用存在关联的理论，而不是道听途说。如果不能确定，可以回去钻研理论，但不要轻易相信钻研的理论和应用之间存在关联。</li><li>花在诊断方法上的时间是有价值的，通常要发出才智才能发明优秀的诊断方法（吴老师是1/3到一半）。</li></ol>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习</title>
      <link href="/2018/05/25/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE1%E2%80%94%E2%80%94%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p>据说这是入门机器学习必不可少的经典教程啦，还可以顺便练一下英语听力。</p><p>虽然之前在各个渠道，包括<code>TensorFlow与深度学习</code>、MOOC《<a href="https://www.icourse163.org/learn/BIT-1001872001" target="_blank" rel="noopener">python机器学习应用</a>》以及<code>知行论坛</code>里或多或少地学过机器学习与神经网络的相关知识，但是觉得还是有必要再认真学习一下经典教程。不过会跳过关于matlab的内容。</p><h1 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h1><p>介绍了课程的一些情况，该课程分为四个部分</p><ol><li><code>监督学习（supervised learning）</code>，用经典的房价预测引出<code>回归（regression）</code>，同样经典的恶性肿瘤预测引出<code>分类（classification）</code></li><li><code>学习理论（learning theory）</code>，不仅要学会理论，还要知道怎么把它用好，比如用数学证明一个手写体识别算法可以达到99.9%的精度</li><li><code>无监督学习（unsupervised learning）</code>，还是恶性肿瘤，还有基因检测的<code>聚类（cluster）</code>、图像3D建模、大规模计算机组织集群、社会关系分析、市场分类、天文数据分析，以及经典的鸡尾酒舞会问题、文本处理、理解机械数据。实验推荐使用<code>MATLAB</code></li><li><code>强化学习（Reinforcement learning）</code>，直升机飞行的自动控制程序、机器人行走控制程序。最基础的概念是<code>回报函数（reward function）</code>，奖励好狗。重要在于定于什么是好的行为，什么是坏的行为。</li></ol><h1 id="Lecture-2"><a href="#Lecture-2" class="headerlink" title="Lecture 2"></a>Lecture 2</h1><h2 id="线性回归（Linear-regression）"><a href="#线性回归（Linear-regression）" class="headerlink" title="线性回归（Linear regression）"></a>线性回归（Linear regression）</h2><p>自动驾驶的案例，司机的行为作为监督学习的样本。</p><p>第一个监督学习的算法，线性回归，回到房价预测问题，首先要引入一些变量：</p><p>​    $x$——训练样本的个数，即数据的行数</p><p>​    $x$——输入变量，<code>特征（feature）</code></p><p>​    $y$——输出变量，<code>目标变量（target）</code></p><p>​    $(x, y)$——训练样本，即数据的一行</p><p>​    $i^{th}$——第$i$个训练样本，即$(x^{(n)}, y^{(n)})$</p><p>由于监督学习有如下框架</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/1.png" alt=""></p><p>所以当设计学习算法的第一步是决定使用怎样的<code>假设h</code>，<strong>第一个</strong>假设是线性的，即假设h为</p><script type="math/tex; mode=display">h(x)=\theta_0 + \theta_1 x</script><p>其中$\theta$被称为<code>参数parameter</code>。</p><p>当然如果引入房屋的其他因素例如卧室的数量，那么假设就变成了</p><script type="math/tex; mode=display">h(x)=h_\theta(x)=\theta_0 + \theta_1 x_1 + \theta_2 x_2</script><p>为了将公式写得更简洁，令$x_0=1$，$n$为特征的数量，则有</p><script type="math/tex; mode=display">h(x)=\sum_{i=0}^n{\theta_i x_i}=\theta^Tx</script><p>为了使得预测与训练数据尽量接近，我要做的是</p><script type="math/tex; mode=display">\min \limits_{\theta} \ J(\theta)=\frac{1}{2} \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2</script><h2 id="梯度下降（Gradient-descent）"><a href="#梯度下降（Gradient-descent）" class="headerlink" title="梯度下降（Gradient descent）"></a>梯度下降（Gradient descent）</h2><p>怎么最小化呢？第一个是一个搜索算法——梯度下降，其基本思想是</p><p>先初始化令</p><script type="math/tex; mode=display">\theta=\vec{0}</script><p>并不停改变$\theta$以减小$J(\theta)$直到我们觉得已经是最小了，其过程如下图所示。</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/2.jpg" alt=""></p><p>我们从山顶一步一步往下走，重要的是我们会在哪里停下。由于出发点的不同，会导致选择完全不同的路径，到达了完全不同的局部最小解。为了每一步都向着最陡峭的方向前进，令</p><script type="math/tex; mode=display">\theta_{i}=\theta_{i}-\alpha \frac{\partial J(\theta)}{\partial \theta_i}</script><p>直到<code>收敛（converge）</code>，其中$\alpha$表示<code>学习速度（learning rate）</code>，决定了每次迈的步子的长度，不宜过小也不宜过大，太小收敛速度慢，太大无法收敛。</p><p>在线性回归中，先假设只有1个训练样本</p><script type="math/tex; mode=display">\frac{\partial J(\theta)}{\partial \theta_i}=\frac{\partial}{\partial \theta_i}\frac{1}{2}(h_{\theta}(x)-y)^2 = (h_{\theta}(x)-y) * \frac{\partial}{\partial \theta_i} (h_{\theta}(x)-y)=\\(h_{\theta}(x)-y) * \frac{\partial}{\partial \theta_i}(\theta_0x_0+\dots+\theta_nx_n-y) =(h_{\theta}(x)-y)* x_i</script><p>那么就有</p><script type="math/tex; mode=display">\theta_{i}=\theta_{i}-\alpha (h_{\theta}(x)-y)x_i</script><h3 id="批量梯度下降（batch-gradient-descent）"><a href="#批量梯度下降（batch-gradient-descent）" class="headerlink" title="批量梯度下降（batch gradient descent）"></a>批量梯度下降（batch gradient descent）</h3><p>如果有$m$个样本，每次都用所有的样本更新$\theta$，则有如下算法</p><hr><p>while not converge: </p><p>​    for i in [0, n]:</p><p>​            $\theta_{i}=\theta_{i}- \alpha \sum_{j=1}^{m}{ (h_{\theta}(x^{(j)})-y^{(j)})x_i^{(j)}}$</p><hr><p>之所以叫“批量”，是因为每次更新$\theta$用的是所有的样本，这类似于操作系统的“批处理”。</p><p>你可能担心收敛的并不是全局最小解，实际上在线性回归的批量梯度下降的时候，其过程如下图所示，</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/3.jpg" alt=""></p><p>所以总会收敛到全局最小解，最小解处梯度为0，当然收敛的检测有很多种，其中一种是比较两次迭代之间值的大小。</p><h3 id="随机梯度下降（Stochastic-gradient-descent-）"><a href="#随机梯度下降（Stochastic-gradient-descent-）" class="headerlink" title="随机梯度下降（Stochastic gradient descent ）"></a>随机梯度下降（Stochastic gradient descent ）</h3><p>如果样本数量$m$很大（例如国家数据），可能即便是一次迭代也需要花费很长时间，所以提出如下算法，其基本思想是每个样本都更新一次$\theta$，从而提高收敛的速度。</p><hr><p>while not converge:</p><p>​    for j in [1, m]:</p><p>​        for i in [0, n]:</p><p>​                    $\theta_{i}=\theta_{i}- \alpha  (h_{\theta}(x^{(j)})-y^{(j)})x_i^{(j)}$</p><hr><p>由于单个样本是毫无回归性的，所以每次更新的方向是随机的，$j(\theta)$的值可能变大也可能变小，但是总体趋势是往下走的，同时最终并不会有稳定的收敛。</p><h2 id="正规方程（Normal-equations）"><a href="#正规方程（Normal-equations）" class="headerlink" title="正规方程（Normal equations）"></a>正规方程（Normal equations）</h2><h3 id="矩阵梯度概念的引入"><a href="#矩阵梯度概念的引入" class="headerlink" title="矩阵梯度概念的引入"></a>矩阵梯度概念的引入</h3><p>实际上最小二乘法求最小值的问题，有解析解，是不需要迭代的。为了推导方便，需要引入一些符号：</p><script type="math/tex; mode=display">\nabla_\theta J= \begin{bmatrix}      \dfrac{\partial J}{\partial \theta_0} \\     \vdots \\     \dfrac{\partial J}{\partial \theta_n} \end{bmatrix} \in  \R ^{n+1}</script><p>所以梯度下降可以写为</p><script type="math/tex; mode=display">\theta = \theta - \alpha \nabla_{\theta}J</script><p>更通用的，</p><script type="math/tex; mode=display">f:\R^{m \times n} \rightarrow \R ,\ \nabla_Af(A)= \begin{bmatrix} \dfrac{\partial f}{\partial A_{11}} &  \cdots &  \dfrac{\partial f}{\partial A_{1n}} \\ \vdots & \ddots & \vdots \\ \dfrac{\partial f}{\partial A_{m1}} & \cdots & \dfrac{\partial f}{\partial A_{mn}}      \end{bmatrix}</script><h3 id="方阵迹的概念与定理"><a href="#方阵迹的概念与定理" class="headerlink" title="方阵迹的概念与定理"></a>方阵迹的概念与定理</h3><p>方阵$A$的迹，即方阵对角线元素之和，记为$tr\ A$</p><script type="math/tex; mode=display">A=\R^{n \times n} ,\  tr\ A= \sum_{i=1}^{n}{A_{ii}}</script><p>定理 1</p><script type="math/tex; mode=display">tr\ AB = tr\ BA \\ tr\ ABC = tr\ CAB =tr\ BCA</script><p>定理 2</p><script type="math/tex; mode=display">f(A)=tr\ AB, \ \nabla_Atr\ AB = B^T</script><p>定理 3</p><script type="math/tex; mode=display">tr\ A = tr\ A^T</script><p>定理 4</p><script type="math/tex; mode=display">a\in \R, \ tr\ a = a</script><p>定理 5</p><script type="math/tex; mode=display">\nabla_A tr\ ABA^TC = CAB + C^TAB^T</script><h3 id="最小二乘法解析解的推导"><a href="#最小二乘法解析解的推导" class="headerlink" title="最小二乘法解析解的推导"></a>最小二乘法解析解的推导</h3><p>预测值矩阵为：</p><script type="math/tex; mode=display">X\theta = \begin{bmatrix} —— (x^{(1)})^T——  \\ —— (x^{(2)})^T—— \\ \vdots \\ —— (x^{(m)})^T——  \end{bmatrix}\theta = \begin{bmatrix} x^{(1)T}\theta \\ x^{(2)T}\theta \\ \vdots \\  x^{(m)T}\theta \end{bmatrix}= \begin{bmatrix} h_\theta (x^{(1)}) \\ h_\theta (x^{(2)}) \\ \vdots \\h_\theta (x^{(m)})\end{bmatrix}</script><p>输出值矩阵为：</p><script type="math/tex; mode=display">y=\begin{bmatrix} y^{(1)} \\ \vdots \\ y^{(m)} \end{bmatrix}</script><p>所以</p><script type="math/tex; mode=display">J(\theta) = \dfrac{1}{2} (X\theta -y)^T(X\theta -y)</script><p>为了求$J(\theta)$的最小值，就要求其梯度为0的$\theta$</p><script type="math/tex; mode=display">0=\nabla_\theta J(\theta) = \nabla_\theta \dfrac{1}{2} (X\theta -y)^T(X\theta -y) \\ =  \dfrac{1}{2} \nabla_\theta (\theta^TX^TX\theta - \theta^TX^Ty - y^TX\theta + y^Ty) \\= \dfrac{1}{2} \nabla_\theta tr (\theta^TX^TX\theta - \theta^TX^Ty - y^TX\theta + y^Ty) \\ = \dfrac{1}{2} [ \nabla_\theta tr(\theta\ I\ \theta^T\ X^TX) -   \nabla_\theta tr(y^TX\theta) -  \nabla_\theta tr(y^TX\theta)] \\= X^TX \theta - X^Ty</script><p>所以令$J(\theta)$最小的$\theta$满足</p><script type="math/tex; mode=display">X^TX \theta = X^Ty</script><p>即正规方程</p><script type="math/tex; mode=display">\theta = (X^TX )^{-1}X^Ty</script><p>十分的漂亮！当然使用的条件是不能有完全相同的两个样本，不然就没有逆矩阵了。</p><h1 id="Lecture-3"><a href="#Lecture-3" class="headerlink" title="Lecture 3"></a>Lecture 3</h1><h2 id="局部加权回归（locally-weighted-regression）"><a href="#局部加权回归（locally-weighted-regression）" class="headerlink" title="局部加权回归（locally weighted regression）"></a>局部加权回归（locally weighted regression）</h2><p>先介绍了<code>欠拟合（underfitting）</code>和<code>过拟合（overfitting）</code>。</p><p>线性回归是一种典型的<code>参数学习算法（parametric learning algorithm）</code>，有固定数目的参数来拟合数据。</p><p>接下来讨论的是<code>非参数学习算法（non-parametric learning algorithm）</code>，算法参数的数量会醉着样本数量$m$线性增长，叫做<code>局部加权回归（locally weighted regression）</code>，可以让我们不必担心特征的选择（尤其是特征的最高次数）。</p><p>线性回归会均匀使用所有样本拟合：</p><hr><p>LR: fit $\theta$ to minimize </p><script type="math/tex; mode=display">\sum_i{(y^{(i)} - x^{(i)})^2}</script><p>return $\theta^Tx$</p><hr><p>而局部加权回归关注输入$x$附近的点:</p><hr><p>LWR: fit $\theta$ to minimize </p><script type="math/tex; mode=display">\sum_i{w^{(i)}(y^{(i)} - x^{(i)})^2}, where \ w^{(i)}=e^{-\dfrac{(x^{(i)} - x)^2}{2}}</script><p>return $\theta^Tx$</p><hr><p>如果$x^{(i)}$离$x$比较近，那么$w^{(i)}$会接近1，反之接近0。</p><p>实际上权重$w$的形式可以有很多，这种形式上和<code>高斯分布（Gaussian distribution，正态分布 Normal distribution）</code>一样的权重只是其中的一种（实际和高斯分布没有任何联系，只是形式一样，而这种形式又很好用）。</p><p>由于算法依赖于输入样本$x$，所以每次预测都需要重新计算假设$h$。</p><p>进一步的，为了控制算法“局部”的范围，引入<code>波长参数（bandwidth parameter）</code>$\tau$，其越小越重视“局部”。</p><hr><p>LWR: fit $\theta$ to minimize </p><script type="math/tex; mode=display">\sum_i{w^{(i)}(y^{(i)} - x^{(i)})^2}, where \ w^{(i)}=e^{-\dfrac{(x^{(i)} - x)^2}{2\tau}}</script><p>return $\theta^Tx$</p><hr><p>当然，如果控制不好$\tau$的大小，也会陷入过拟合或欠拟合。</p><h2 id="线性回归的概率解释（Probabilistic-interpretation）"><a href="#线性回归的概率解释（Probabilistic-interpretation）" class="headerlink" title="线性回归的概率解释（Probabilistic interpretation）"></a>线性回归的概率解释（Probabilistic interpretation）</h2><p>讨论模型的概率含义时，使用的是<strong>线性回归</strong>而非局部加权回归。</p><p>这部分旨在说明一个问题：可以优化的假设$h$非常多，为什么我们要使用最小二乘？这个结论是建立在一系列<code>假设（assumption，符合汉语正常含义的“假设”）</code>上的。</p><p><strong>假设1</strong></p><script type="math/tex; mode=display">y^{(i)} = \theta^Tx^{(i)} + \epsilon^{(i)}</script><p>其中$\epsilon^{(i)}$是<code>误差项（error term）</code>，表示没有选择到的特征给预测值带来的偏差，或者随机变量带来的噪声，比如心情。</p><p><strong>假设2</strong></p><script type="math/tex; mode=display">\epsilon^{(i)} \sim N(0, \sigma^2)</script><p>即$\epsilon^{(i)}$服从期望为0，方差为$\sigma^2$的<a href="https://baike.baidu.com/item/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83/829892?fr=aladdin" target="_blank" rel="noopener">正态分布</a>（如此假设是基于<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/829451?fr=aladdin" target="_blank" rel="noopener">中心极限定理</a>以及数学上的方便，虽然貌似假设期望为0已经默认了我们的假设是正确的，但是要意识到机器学习中的假设都不可能绝对正确，但只要足够精确即可），则有$\epsilon^{(i)}$的<code>概率密度函数（density）</code></p><script type="math/tex; mode=display">P(\epsilon^{(i)}) = \frac{1}{\sqrt{2\pi}\sigma} e^{-\dfrac{(\epsilon^{(i)})^2}{2\sigma^2}}</script><p>因此将假设1代入概率密度函数，$y^{(i)}$也将符合正态分布</p><script type="math/tex; mode=display">P(y^{(i)} | x^{(i)};\theta) = \frac{1}{\sqrt{2\pi}\sigma} e^{-\dfrac{(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}}</script><p>注意，$x^{(i)}$和$\theta$之间用的是分号$;$而非逗号$,$，这表示这里采用的是频率学派（frequentist）的观点，即假设$\theta$是某个确定的值，只是我们暂时不知道，而确定值是不能作为条件概率的条件的，所以只能用分号。（<code>贝叶斯学派（Bayesian）</code>认为$\theta$也是随机变量，服从某个分布）。</p><p><strong>假设3</strong></p><script type="math/tex; mode=display">\epsilon^{(i)}s  \ are \ IID</script><p>即影响$\epsilon^{(i)},i \in [1, m]$是<code>独立同分布（independently and identically distributed ）</code>的。</p><p>因为我们的目标是求$\theta$使得$y$为$y^{(i)}$的概率最大，即有</p><script type="math/tex; mode=display">\max_\limits{\theta} L(\theta)=P(\vec{y} | x;\theta)</script><p>即将$y$的概率密度函数看作是$\theta$的<code>极大似然估计（Maximum Likelihood Estimate，MLE ）</code>函数，就有</p><script type="math/tex; mode=display">L(\theta)=P(\vec{y} | x;\theta) = \prod_{i=1}^m{P(y^{(i)} | x^{(i)};\theta) }\\ =\prod_{i=1}^m{\frac{1}{\sqrt{2\pi}\sigma} e^{-\dfrac{(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}}}</script><p>为了方便运算，令</p><script type="math/tex; mode=display">l(\theta) = \log{L(\theta)} = \sum_{i=1}^m{\log{(\frac{1}{\sqrt{2\pi}\sigma})} - \dfrac{(y^{(i)}-\theta^Tx^{(i)})^2}{2\sigma^2}} \\=m \log{\frac{1}{\sqrt{2\pi}\sigma}} - \dfrac{1}{2\sigma^2} \sum_{i=1}^m{ (y^{(i)}-\theta^Tx^{(i)})^2}</script><p>所以我们的目标就等价于</p><script type="math/tex; mode=display">\min_\limits{\theta}  \dfrac{1}{2} \sum_{i=1}^m{ (y^{(i)}-\theta^Tx^{(i)})^2}</script><p>这就从概率的角度解释了为什么采用最小二乘法，这是在以上假设的基础上可以推导出来的。</p><p>这种解释也是为了引出第一个分类算法——逻辑回归。</p><h2 id="逻辑回归（Logistic-regression）"><a href="#逻辑回归（Logistic-regression）" class="headerlink" title="逻辑回归（Logistic regression）"></a>逻辑回归（Logistic regression）</h2><p>在逻辑回归中，</p><script type="math/tex; mode=display">y \in \{ 0, 1\}</script><p>有些人有线性回归解决分类问题，即预测值大于0.5分类为0，反之分类为1，实际上这往往是很糟糕的。</p><p>为了使得</p><script type="math/tex; mode=display">h_{\theta}(x) \in [0,1]</script><p>我们采用这样形式的假设（原因之后讨论）：</p><script type="math/tex; mode=display">h_{\theta}(x)=g(\theta^Tx) = \frac{1}{1+e^{-\theta^Tx}}</script><p>其中</p><script type="math/tex; mode=display">g(z)= \frac{1}{1+e^{-z}}</script><p>被称为<code>Signoid function</code>或<code>Logistic function</code>，它可以将实数集正相关地映射到$[0,1]$。</p><p>进一步地，和上面一样对逻辑回归进行概率上的解释，易知由于$y$服从<code>伯努利分布Bernoulli distribution</code> 即有如下两个式子</p><script type="math/tex; mode=display">P(y=1|x;\theta) = h_\theta(x) \\ P(y=0|x;\theta) = 1- h_\theta(x)</script><p>为了表达的简洁，写为</p><script type="math/tex; mode=display">L(\theta)=P(y|x;\theta) =\prod_{i=1}^{m}h_\theta(x^{(i)})^{y^{(i)}}(1- h_\theta(x^{(i)}))^{1-y^{(i)}}</script><p>同样就有</p><script type="math/tex; mode=display">l(\theta)=\sum_{i=1}^m{y^{(i)}\log{h_\theta(x^{(i)})} + (1-y^{(i)})\log{(1-h_\theta(x^{(i)})}) }</script><p>为了让$l(\theta)$最大，同样使用梯度下降，有</p><script type="math/tex; mode=display">\frac{\partial}{\partial \theta_j}l(\theta) = \sum_{i=1}^m{(y^{(i)}-h_\theta(x^{(i)}))x_j^{(i)}}</script><p>即</p><script type="math/tex; mode=display">θ_j=θ_j + \alpha \sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_j^{(i)}</script><p>这和线性回归中梯度下降的形式几乎完全一样，之后会学习更通用的模型，这种相似不是偶然。但是要注意假设$h$是不一样的，可以称之为梯度上升。</p><h2 id="感知机算法（Perceptron-algorithm）"><a href="#感知机算法（Perceptron-algorithm）" class="headerlink" title="感知机算法（Perceptron algorithm）"></a>感知机算法（Perceptron algorithm）</h2><p>这里只是简单介绍，在第二部分学习理论learning theory中会重新说。</p><p>逻辑回归没有将预测值强制变为0或1，在感知机中：</p><script type="math/tex; mode=display">g(z) = \left \{ \begin{array}{lr} 1, & z>0 \\ 0, &z\leq0  \end{array} \right.</script><p>同样有</p><script type="math/tex; mode=display">h_{\theta}(x)=g(\theta^Tx)</script><p>以及批量梯度上升公式</p><script type="math/tex; mode=display">θ_j=θ_j + \alpha \sum_{i=1}^m(h_θ(x^{(i)})−y^{(i)})x_j^{(i)}</script><h1 id="Lecture-4"><a href="#Lecture-4" class="headerlink" title="Lecture 4"></a>Lecture 4</h1><h2 id="牛顿方法（Newton’s-method）"><a href="#牛顿方法（Newton’s-method）" class="headerlink" title="牛顿方法（Newton’s method）"></a>牛顿方法（Newton’s method）</h2><p>之前一直通过梯度下降拟合并得到$\theta$，牛顿方法是另外的一种。</p><p>为了找到函数的零点，即</p><script type="math/tex; mode=display">find \ \theta  \ s.t \ f(\theta) = 0</script><p>牛顿法从初始点$(\theta_0, f(\theta_0))$不停做切线，令切线与$x$轴交点为新的$\theta$，其过程如下图所示</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/4.png" alt=""></p><p>可以用公式表达为</p><script type="math/tex; mode=display">\theta^{(i+1)} = \theta^{(i)} - \frac{f(\theta^{(i)})}{f^{'}(\theta^{(i)})}</script><p>其中为了方便理解，令</p><script type="math/tex; mode=display">\Delta=\frac{f(\theta^{(i)})}{f^{'}(\theta^{(i)})} \ or \ f^{'}(\theta^{(i)})=\frac{f(\theta^{(i)})}{\Delta}</script><p>应用到逻辑回归的拟合中，就是</p><script type="math/tex; mode=display">\theta^{(t+1)} = \theta^{(t)} - \frac{l^{'}(\theta^{(t)})}{l^{''}(\theta^{(t)})}</script><p>这个方法具有很高的收敛速度，一般在逻辑回归中只需要十几轮迭代，用术语讲是<a href="https://blog.csdn.net/robert_chen1988/article/details/53137997" target="_blank" rel="noopener">二阶收敛（quadratic conversions）</a>，当然我们想知道这个方法适用范围，但是这比算法本身复杂得多。</p><p>将它推广到$n$个特征有</p><script type="math/tex; mode=display">\theta^{(t+1)} = \theta^{(t)} - H^{-1} \nabla_\theta l</script><p>其中</p><script type="math/tex; mode=display">H_{ij}=\frac{\partial ^2l}{\partial\theta_i \partial\theta_j}</script><p>被称为<code>Hessian矩阵（黑塞矩阵，巨难听的翻译）</code>。由于每次迭代都要求矩阵梯度与Hessian矩阵，所以比较特征数量适中的样本（比如几十到上百个）。</p><h2 id="指数分布族（Exponential-family-distribution）"><a href="#指数分布族（Exponential-family-distribution）" class="headerlink" title="指数分布族（Exponential family distribution）"></a>指数分布族（Exponential family distribution）</h2><p>牛顿方法和梯度下降都是拟合的方法，下面不谈拟合的方法，而是说明线性回归和逻辑回归都是一个更广泛模型的特例。在此之前需要介绍<code>指数分布族（Exponential family distribution）</code>，因为高斯分布和伯努利分布实际都是他们的一个特例，它有这样的形式：</p><script type="math/tex; mode=display">P(y;\eta) = b(y) \exp^{\eta^TT(y) -a(\eta)}</script><p>其中$T(y)$被称为<a href="https://baike.baidu.com/item/%E5%85%85%E5%88%86%E7%BB%9F%E8%AE%A1%E9%87%8F/12715941?fr=aladdin" target="_blank" rel="noopener">充分统计量（sufficient statistic）</a>，很多情况下$T(y)=y$。</p><p>一旦$a$、$b$、$T$被固定了，那么指数分布族就“退化”变为某一类概率分布的集合，比如不同均值组成的高斯分布的集合、不同参数的伯努利分布的集合，它们都以$\eta$作为参数。</p><h3 id="伯努利分布是指数分布族的特例"><a href="#伯努利分布是指数分布族的特例" class="headerlink" title="伯努利分布是指数分布族的特例"></a>伯努利分布是指数分布族的特例</h3><p>对于伯努利分布，有</p><script type="math/tex; mode=display">P(j;\phi)=\phi^y(1-\phi)^{1-y} \\ =\exp{(y\log{\phi}+(1-y)\log{(1-\phi)}) }\\ =\exp{(\log{\dfrac{\phi}{1-\phi}y} +\log{(1-\phi)} )}</script><p>所以</p><script type="math/tex; mode=display">b(y)=1 \\ \eta=\log{\dfrac{\phi}{1-\phi}} \\ T(y)=y \\ a(\eta) = -\log{(1-\phi)}</script><p>这已经说明了伯努利分布是指数分布族的一个特例，并且进一步可以得到</p><script type="math/tex; mode=display">\phi = \frac{1}{1+e^{-\eta}} \\ a(\eta)=-\log(1- \frac{1}{1+e^{-\eta}}) = \log(1+e^\eta)</script><p>非常神奇地就得到了Logistic函数。</p><h3 id="高斯分布是指数分布族的特例"><a href="#高斯分布是指数分布族的特例" class="headerlink" title="高斯分布是指数分布族的特例"></a>高斯分布是指数分布族的特例</h3><p>在线性回归的概率解释中，我们注意到高斯分布的方差$\sigma^2$对于结果并不产生影响，所以为了方便推导这里假设高斯分布的方差为1。</p><script type="math/tex; mode=display">\frac{1}{\sqrt{2\pi}} e^{-\dfrac{(y-\mu)^2}{2}}=\frac{1}{\sqrt{2\pi}}e^{-\frac{y^2}{2}}e^{\mu y-\frac{\mu^2}{2}}</script><p>所以很容易得到</p><script type="math/tex; mode=display">b(y)=\frac{1}{\sqrt{2\pi}}e^{-\frac{y^2}{2}} \\ \eta=\mu \\ T(y)=y \\ a(\eta)=\frac{\mu^2}{2}=\frac{\eta^2}{2}</script><p>同样说明了高斯分布是指数分布族的特例。</p><h3 id="哪些分布是指数分布族的特例？"><a href="#哪些分布是指数分布族的特例？" class="headerlink" title="哪些分布是指数分布族的特例？"></a>哪些分布是指数分布族的特例？</h3><p>我们遇到的大多数都是，包括</p><p>多元正态分布（multivariate normal distribution）（高斯分布推广）</p><p>多项式分布（multinomial distribution）（伯努利分布推广）</p><p>泊松分布（poisson distribution）（计数）</p><p>伽马分布（gamma distribution）</p><p>指数分布（exponential distribution）（间隔）</p><p>还有beta distribution、Dirichlet distribution（小数，概率分布建模）、Wishart distribution（协方差矩阵分布）等等。</p><h2 id="广义线性模型（Generalized-linear-models）"><a href="#广义线性模型（Generalized-linear-models）" class="headerlink" title="广义线性模型（Generalized linear models）"></a>广义线性模型（Generalized linear models）</h2><p><strong>假设1</strong> $y$服从指数分布族，即</p><script type="math/tex; mode=display">y|x;\theta \sim ExpFamily(\eta)</script><p><strong>假设2</strong> 我们的目标是对于给定的$x$，输出$T(y)$的数学期望，即</p><script type="math/tex; mode=display">h(x)= E[T(y)|x]</script><p><strong>假设3</strong> 这是一个线性模型，即</p><script type="math/tex; mode=display">\eta=\theta^Tx</script><h3 id="逻辑回归是广义线性模型的特例"><a href="#逻辑回归是广义线性模型的特例" class="headerlink" title="逻辑回归是广义线性模型的特例"></a>逻辑回归是广义线性模型的特例</h3><p>由伯努利分布的结论和假设</p><script type="math/tex; mode=display">h_\theta(x)=E[T(y)|x]=E[y|x]=P(y=1|x;\theta)=\phi= \frac{1}{1+e^{-\eta}}= \frac{1}{1+e^{-\theta^tx}}</script><p>这已经完成了在给定伯努利分布的情况下，由广义线性模型到逻辑回归的推导，其中</p><script type="math/tex; mode=display">g(\eta)=E[y;\eta]=\frac{1}{1+e^{-\eta}}</script><p>$g$被称为<code>正则响应函数（canonical response function）</code>，$g^{-1}$被称为<code>正则关联函数（canonical link function）</code>。这只是两个名字，记住就行。</p><h3 id="Softmax回归是广义线性模型的特例"><a href="#Softmax回归是广义线性模型的特例" class="headerlink" title="Softmax回归是广义线性模型的特例"></a>Softmax回归是广义线性模型的特例</h3><p>由于高斯分布太过简单，我们看一个复杂的，假设$y$服从多项式分布，我们就可以得到Softmax回归的假设$h$。</p><p>在多项式分布中，</p><script type="math/tex; mode=display">y\in \{ 1, 2, \dots, k \}</script><p>有参数</p><script type="math/tex; mode=display">P(y=i)=\phi_i,i=1,2,\dots,k</script><p>由于他们之和一定为1，所以把$\phi_k$仅仅看做简记。</p><p>在多项式分布中，$T(i)$是第$i$位为$1$的$k-1$维的<code>one hot vector</code>，而$T(0)$是全0的$k-1$维列向量。</p><p>定义<code>指示函数（indicator function）</code></p><script type="math/tex; mode=display">1\{True\}=1\\ 1\{False\}=0</script><p>所以</p><script type="math/tex; mode=display">T(y)_i=1\{y=i\}</script><p>于是有</p><script type="math/tex; mode=display">P(y)=\prod_{i=1}^k{\phi_i^{1\{y=i\}}}=\prod_{i=1}^k{\phi_i^{T(y)_i}}</script><p>经过类似的推导后有</p><script type="math/tex; mode=display">\eta=\begin{bmatrix} \log(\phi_1/\phi_k) \\  \log(\phi_2/\phi_k) \\ \vdots\\ \log(\phi_{k-1}/\phi_k) \end{bmatrix} \\ a(\eta)=-\log(\phi_k) \\ b(y)=1</script><p>于是</p><script type="math/tex; mode=display">\phi_i=\frac{e^{\eta_i}}{1+\sum_{j=1}^{k-1}e^{\eta_j}} = \frac{e^{\theta_i^Tx}}{1+\sum_{j=1}^{k-1}e^{\theta_i^Tx}}</script><p>最后</p><script type="math/tex; mode=display">h_\theta(x)=E[T(y)|x;\theta]=\begin{bmatrix}1\{y=1\}\\ 1\{y=2\}\\ \vdots \\ 1\{y=k-1\} \end{bmatrix}=\begin{bmatrix}\phi_1\\ \phi_2\\ \vdots \\ \phi_{k-1} \end{bmatrix}</script><p>对应最小二乘，有</p><script type="math/tex; mode=display">\max\limits_{\theta}L(\theta)=P(\vec{y} | x;\theta) = \prod_{i=1}^m{P(y^{(i)} | x^{(i)};\theta) } =\prod_{i=1}^m{\prod_{i=1}^k{\phi_i^{1\{y=i\}}}}</script><p>所以只要确定了$y$的分布，假设$h$以及需要优化的式子就都确定了。至于拟合的方法，在softmax回归中梯度上升或牛顿方法都是不行的。</p><h1 id="Lecture-5"><a href="#Lecture-5" class="headerlink" title="Lecture 5"></a>Lecture 5</h1><h2 id="生成学习算法（Generative-learning-algorithm）"><a href="#生成学习算法（Generative-learning-algorithm）" class="headerlink" title="生成学习算法（Generative learning algorithm）"></a>生成学习算法（Generative learning algorithm）</h2><p>上述的分类算法，都可以属于<code>判别学习算法（discriminative learning algorithm）</code>，即使用全部样本进行学习后直接给出分类假设$h$。下面要介绍的算法，称为<code>生成学习算法（Generative learning algorithm）</code>，分别学习不同类别的样本，得到不同的假设，然后将输入$x$分别代入不同的假设，比较与哪一个吻合得更好，从而得到分类。利用<code>贝叶斯公式（Bayes Rule ）</code>，对于二分类的生成学习算法，有形式化的语言描述：</p><script type="math/tex; mode=display">Given \ P(x|y) \ and \ P(y) ,\\ P(y=1|x)=\frac{P(x|y=1) P(y=1)}{P(x)}=\frac{P(x|y=1) P(y=1)}{P(x|y=0)+P(x|y=1)} \\ P(y=0|x)=\frac{P(x|y=0) P(y=0)}{P(x)}=\frac{P(x|y=0) P(y=0)}{P(x|y=0)+P(x|y=1)}</script><p>所以重点就在于如何选择$P(x|y)$的形式。</p><h2 id="高斯判别分析（Gaussian-discriminant-Analysis）"><a href="#高斯判别分析（Gaussian-discriminant-Analysis）" class="headerlink" title="高斯判别分析（Gaussian discriminant Analysis）"></a>高斯判别分析（Gaussian discriminant Analysis）</h2><p>假设输入有$n$个特征即$n \in \R^n$，<code>高斯判别分析（Gaussian discriminant Analysis）</code>认为</p><script type="math/tex; mode=display">P(x|y) \sim N(\vec{\mu},\Sigma)</script><p>即服从<code>多元高斯分布</code>，具有如下概率密度公式</p><script type="math/tex; mode=display">P(x;\mu,\Sigma)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{1/2}}\exp{-\frac{1}{2}(x-\mu)^T\Sigma(x-\mu)}</script><p>为了理解高斯判别分析的原理，先以二元为例说明参数对于概率分布的影响。</p><p>协方差矩阵$\Sigma$主对角线影响高度，左图标准二元高斯分布（$\Sigma=I$），中图$\Sigma=0.6I$，右图$\Sigma=2I$。</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/5.png" alt=""></p><p>协方差矩阵$\Sigma$其他元素会使得图形以最高点为中心沿着某个方向变旋转边被挤压：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/6.png" alt=""></p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/7.png" alt=""></p><p>其中</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/8.png" alt=""></p><p>而$\mu$决定了图形的位置：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/9.png" alt=""></p><p>其中$\Sigma=I$,</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/10.png" alt=""></p><p>所以通过学习，得到的两个不同的高斯判别模型，它们有着不同的$\mu$和$\Sigma$，比较理想的是有下图：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/11.png" alt=""></p><p>有了对高斯判别方法的直观理解，下面给出其形式化描述：</p><script type="math/tex; mode=display">P(y)=\phi^y(1-\phi)^{(1-y)} \\ P(x|y=0)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{1/2}}\exp{-\frac{1}{2}(x-\mu_0)^T\Sigma(x-\mu_0)} \\ P(x|y=1)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{1/2}}\exp{-\frac{1}{2}(x-\mu_1)^T\Sigma(x-\mu_1)}</script><p>所以有四个参数$\phi$、$\mu_0$、$\mu_1$和$\Sigma$，有对数极大似然函数：</p><script type="math/tex; mode=display">l(\phi,\mu_0,\mu_1,\Sigma)=\log\prod_{i=1}^m{P(x^{(i)}, y^{(i)})} \\ =\log\prod_{i=1}^m{P(x^{(i)}| y^{(i)})}P(y^{(i)})</script><p>求解之后有：</p><script type="math/tex; mode=display">\phi=\sum_i{y^{(i)}}/m \\ \mu_0=\frac{\sum_{i=1}^{m}{ (1-y^{(i)})x^{(i)} }}{\sum_{i=1}^{m}{(1-y^{(i)})}} \\ \mu_1=\frac{\sum_{i=1}^m{y^{(i)}x^{(i)}}}{\sum_{i=1}^m{y^{(i)}}} \\ \Sigma=\frac{1}{m}\sum_{i=1}^m{(x^{(i)}-\mu_{y^{(i)}})(x^{(i)}-\mu_{y^{(i)}})^T}</script><p>所以对于测试样本，任务是：</p><script type="math/tex; mode=display">\max\limits_{y}P(y|x)=\max\limits_{y}P(y|x)=\max\limits_{y}P(x|y)P(y)/P(x)=\max\limits_{y}P(x|y)P(y)</script><p>当然当$y$满足均匀分布时，有</p><script type="math/tex; mode=display">P(y)\sim Uniform, \ \max\limits_{y}P(x|y)</script><p>虽然并不是很常见。</p><h2 id="高斯判别分析和逻辑回归的关系"><a href="#高斯判别分析和逻辑回归的关系" class="headerlink" title="高斯判别分析和逻辑回归的关系"></a>高斯判别分析和逻辑回归的关系</h2><p>高斯判别分析和逻辑回归都假设了变量服从高斯分布，他们有没有联系呢？实际上，</p><script type="math/tex; mode=display">P(y=1|x;\phi;\Sigma;\mu_0;\mu_1)=\frac{1}{1+e^{-\theta^Tx}}</script><p>其中$\theta$是参数$\phi$、$\mu_0$、$\mu_1$和$\Sigma$的函数，即$x|y\sim Gaussian$是$P(y=1|x)$为Logistic函数的充分条件。那是不是必要条件呢？并不是，因为当$x|y=1$和$x|y=0$均服从泊松分布的时候，更广泛的，均服从指数分布族中的某一分布的时候，$P(y=1|x)$也为Logistic函数。</p><p>这说明$x|y\sim Gaussian$是一个比逻辑回归更强的假设，因此它的好处是需要的样本更少（更强的假设让更多事情变为已知），同时逻辑回归的结果具有更强的健壮性。</p><h2 id="朴素贝叶斯算法（Naive-Bayes-algorithm）"><a href="#朴素贝叶斯算法（Naive-Bayes-algorithm）" class="headerlink" title="朴素贝叶斯算法（Naive Bayes algorithm）"></a>朴素贝叶斯算法（Naive Bayes algorithm）</h2><p>先不管生成学习算法，在垃圾邮件的分类问题中，将所有学习样本（即已有的邮件）中出现的单词视为一个大小为$n$的字典，每一个邮件的特征就是一个$n$维0-1变量，指示对应的单词是否在该邮件中出现过。如果我们假设$x|y$服从多项式分布，从理论上行得通，当时由于$n$往往很大比如50000，那么该模型的参数就有$2^{50000}$个，这是不切实际的。</p><p>所以在<code>朴素贝叶斯算法（Naive Bayes algorithm）</code>算法中，我们做一个非常强的假设</p><script type="math/tex; mode=display">x_i,i=1,2,\dots,n \ conditionally \ independent</script><p>即在一封邮件中单词与单词之间是否出现时相对独立的。虽然这个假设看起来往往不正确，但是可以再大大简化问题的情况下取得良好的分类效果。于是就有</p><script type="math/tex; mode=display">P(y|x)=\prod_{i=1}^n{P(y|x_i)}</script><p>由于$x_i$和$y$均遵循伯努利分布，所以这个模型的参数有</p><script type="math/tex; mode=display">\phi_{i|y=1} =P(x_i=1|y=1) \\ \phi_{i|y=0} =P(x_i=1|y=0) \\ \phi_{y} =P(y=1)</script><p>通过似然函数</p><script type="math/tex; mode=display">L(\phi_{y}, \phi_{i|y=1}, \phi_{i|y=1})=\prod_{i=1}^{m}{P(x^{(i)}, y^{(i)})}</script><p>就很直观的有</p><script type="math/tex; mode=display">\phi_{j|y=1} =\frac{\sum_{i=1}^m{ 1\{  x_j^{(i)}=1,y^{(i)}=1 \} }}{\sum_{i=1}^m{ 1\{  y^{(i)}=1 \} }} \\ \phi_{j|y=0} =\frac{\sum_{i=1}^m{ 1\{  x_j^{(i)}=1,y^{(i)}=0 \} }}{\sum_{i=1}^m{ 1\{  y^{(i)}=0 \} }} \\ \phi_y=\frac{\sum_{i=1}^m{ 1\{  y^{(i)}=1 \} }}{m}</script><p>因此对于一封新的邮件，它是垃圾邮件的概率为</p><script type="math/tex; mode=display">P(y=1|x)=\frac{P(x|y=1)P(y=1)}{P(x)}=\frac{(\prod_{i=1}^nP(x_i|y=1))P(y=1)}{(\prod_{i=1}^nP(x_i|y=1))P(y=1)+(\prod_{i=1}^nP(x_i|y=0))P(y=0)}</script><h2 id="Laplace平滑（Laplace-smoothing）"><a href="#Laplace平滑（Laplace-smoothing）" class="headerlink" title="Laplace平滑（Laplace smoothing）"></a>Laplace平滑（Laplace smoothing）</h2><p>以垃圾邮箱为例，在朴素贝叶斯算法中，如果测试样本中出现了一个新的单词，那么会导致预测值为$\frac{0}{0+0}$的尴尬情况发生。类似的，一个球队连输5场，不能说下一场它一定会输。</p><p>若$y$服从多项式分布并有$k$个取值，有参数</p><script type="math/tex; mode=display">\phi_j=\frac{\sum_{i=1}^m{1\{ y^{(i)}=j \}}}{m}</script><p>用<code>Laplace平滑（Laplace smoothing）</code>解决上述的问题，令</p><script type="math/tex; mode=display">\phi_j=\frac{(\sum_{i=1}^m{1\{ y^{(i)}=j \}})+1}{m+k}</script><p>回到朴素贝叶斯问题，这是$y$服从伯努利分布，只有两个取值，上式自动退化，同时有</p><script type="math/tex; mode=display">\phi_{j|y=1} =\frac{（\sum_{i=1}^m{ 1\{  x_j^{(i)}=1,y^{(i)}=1 \} }）+1}{(\sum_{i=1}^m{ 1\{  y^{(i)}=1 \} })+2} \\ \phi_{j|y=0} =\frac{(\sum_{i=1}^m{ 1\{  x_j^{(i)}=1,y^{(i)}=0 \} })+1}{(\sum_{i=1}^m{ 1\{  y^{(i)}=0 \} })+2}</script><p>之后用贝叶斯公式+全概率公式就可以对新的样本进行预测啦！</p><h1 id="Lecture-6"><a href="#Lecture-6" class="headerlink" title="Lecture 6"></a>Lecture 6</h1><p>在上述的文本分类问题中，朴素贝叶斯以<code>多元伯努利事件模型（Multivariate Bernoulli Event Model）</code>的形式出现。考虑到它忽略了一个单词出现的次数，朴素贝叶斯还有一种常见的形式，称为<code>多项式事件模型（Multinomial Event Model）</code>，即假设$x_i\in\{1,2,\dots,k\}$（$x$服从多项式分布）。这种形式也适用于将连续量进行分段处理。</p><h2 id="多项式事件模型（Multinomial-Event-Model）"><a href="#多项式事件模型（Multinomial-Event-Model）" class="headerlink" title="多项式事件模型（Multinomial Event Model）"></a>多项式事件模型（Multinomial Event Model）</h2><p>假设第$i$封邮件被表示为</p><script type="math/tex; mode=display">(x_1^{(i)},x_2^{(i)},\dots,x_{n_i}^{(i)})</script><p>其中$n_i$表示第$i$封邮件中单词的数目，$x$表示该单词在单词字典中的序号或索引，比如所有样本中有$|V|$个单词，则$x_j\in\{1, 2, \dots, |V|\}$。此时生成学习的式子应该为：</p><script type="math/tex; mode=display">P(x, y)=(\prod_{i=1}^n{P(x_i|y)})P(y)</script><p>模型的参数包括</p><script type="math/tex; mode=display">\phi_{k|y=1}=P(x_j=k|y=1)\\ \phi_{k|y=0}=P(x_j=k|y=0) \\ \phi_y=P(y=1)</script><p>通过极大似然函数</p><script type="math/tex; mode=display">L(\phi,\phi_{i|y=0},\phi_{i|y=1})=\prod_{i=1}^{m}P(x^{(i)}, y^{(i)})=\prod_{i=1}^{m}{(\prod_{j=1}^{n_1}{P(x_j^{(i)}|y;\phi_{i|y=0},\phi_{i|y=1})})P(y^{(i)};\phi_y)}</script><p>可以求得</p><script type="math/tex; mode=display">\phi_{k|y=1}=\frac{ \sum_{i=1}^{m}{\sum_{j=1}^{n_i}1\{ x_j^{(i)}=k ,y^{(i)}=1 \}} }{ \sum_{i=1}^m{1\{y^{(i)}=1\} n_i} } \\ \phi_{k|y=0}=\frac{ \sum_{i=1}^{m}{\sum_{j=1}^{n_i}1\{ x_j^{(i)}=k , y^{(i)}=0 \}} }{ \sum_{i=1}^m{1\{y^{(i)}=0\} n_i} } \\ \phi_y=\frac{\sum_{i=1}^m{ 1\{ y^{(i)}=1 \} }}{m}</script><p>当然还可以加上Laplace平滑：</p><script type="math/tex; mode=display">\phi_{k|y=1}=\frac{ \sum_{i=1}^{m}{\sum_{j=1}^{n_i}1\{ x_j^{(i)}=k,y^{(i)}=1 \}} +1}{ \sum_{i=1}^m{1\{y^{(i)}=1\} n_i}+|V| } \\ \phi_{k|y=0}=\frac{ \sum_{i=1}^{m}{\sum_{j=1}^{n_i}1\{ x_j^{(i)}=k , y^{(i)}=0 \}} +1}{ \sum_{i=1}^m{1\{y^{(i)}=0\} n_i} +|V|}</script><p>在多项式事件模型中，我们实际并不关注词的顺序，即便把一封邮件中的词语打乱，最后也会获得完全相同的结果。自然语言处理中，它有另外一个名字叫<code>一元模型（Unigram Model）</code>。实际上另外的一些模型，例如<code>马尔可夫模型（Markov Model）</code>会考虑词的顺序。实际上，<code>二元模型（Bigram Model）</code>或<code>三元模型（Trigram Model）</code>在文本分类问题上也只会有轻微的改进。</p><h2 id="神经网络（Neural-network）"><a href="#神经网络（Neural-network）" class="headerlink" title="神经网络（Neural network）"></a>神经网络（Neural network）</h2><p>由于此前在高斯判别分析和逻辑回归的关系中的结论，此前的分类算法从本质上来说都可以归结到逻辑回国，都是线性分类算法，下面我们将讨论<code>非线性（non-linear）的分类算法</code>，首先一个代表为<code>神经网络（Neural network）</code>，它使用类似于逻辑回归的简单分类算法构造复杂的非线性分类器。比如可以使用下图表示逻辑回归</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/12.png" alt=""></p><p>用多个不同的逻辑回归就用如下的神经网络，有输入层、隐藏层和输出层三层。</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/13.png" alt=""></p><p>往往用最小二乘法和梯度下降优化神经网络，专业的术语称之为<code>反向传播（Back propagation）</code></p><script type="math/tex; mode=display">\min \limits_{\theta} \ J(\theta)=\frac{1}{2} \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2</script><p>由于是吴老师很多年前的课，所以关于神经网络，并没有深入展开。</p><h2 id="支持向量机（Support-vector-machine）（一）"><a href="#支持向量机（Support-vector-machine）（一）" class="headerlink" title="支持向量机（Support vector machine）（一）"></a>支持向量机（Support vector machine）（一）</h2><h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><p><code>支持向量机（support vector machine）</code>是一类非线性分析器，很多情况下十分好用，我们从线性的情况讲起。为了更好的说明支持向量机，不得不稍微改变之前符号的形式。</p><script type="math/tex; mode=display">y\in \{-1, +1\} \\ h\in \{-1, +1\}\\ g(z) = \left \{ \begin{array}{lr} 1, & z>0 \\ -1, &z\leq0  \end{array} \right. \\ h_{w,b}=g(w^Tx+b)</script><p>其中$w$是一个$n$维向量，对应$\theta_1$到$\theta_n$，$b$对应$\theta_0$，即把截距$b$分离了出来。</p><h3 id="最大间隔分类器（Maximum-margin-classifier）"><a href="#最大间隔分类器（Maximum-margin-classifier）" class="headerlink" title="最大间隔分类器（Maximum margin classifier）"></a>最大间隔分类器（Maximum margin classifier）</h3><p>我们知道在逻辑回归中，</p><script type="math/tex; mode=display">if\ w^Tx+b>>0\Leftrightarrow confident \ that\ y=1 \\ if\ w^Tx+b<<0\Leftrightarrow confident \ that\ y=0</script><p>所以定义<code>函数间隔（functional margins）</code>，将$y^{(i)}=1$和$y^{(i)}=-1$的情况统一起来：</p><script type="math/tex; mode=display">\hat{\gamma}^{(i)}=y^{(i)}(w^Tx^{(i)}+b)</script><p>如果$y^{(i)}=1$，$w^Tx+b&gt;0$表示预测正确；，如果$y^{(i)}=-1$，$w^Tx+b<0$表示预测正确，于是$\hat{\gamma}^{(i)}>0$表示预测正确。为了让我们的预测结果十分$confident$，我们希望通过优化$w$和$b$，使得$\hat{\gamma}^{(i)}&gt;&gt;0$。然而这个定义存在局限性，即如果成倍地增加$w$和$b$，虽然$\hat{\gamma}^{(i)}$增加了，但是分类器却没有本质的变化，所以对其做归一化处理，引出分类器的<code>几何间隔（geometric margin）</code>如下</0$表示预测正确，于是$\hat{\gamma}^{(i)}></p><script type="math/tex; mode=display">\gamma^{(i)}=y^{(i)}(\frac{w^T}{||w||}x^{(i)}+\frac{b}{||w||})</script><p>直观地感觉如下图所示，之所以叫“几何”间隔，可以理解为实际上它表示样本$(x^{(i)},y^{(i)})$到分类超平面$y=w^Tx+b$的距离，在下图的二维情况中，就表示点到直线的距离。</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/14.png" alt=""></p><p>注意到此时等比放大缩小$w$和$b$对于超平面并不会产生任何影响，<strong>先假设所有的样本是线性可分的，即可以用一个超平面完全区分正样本和负样本</strong>。于是同样直观的，我们假设优化目标为<strong>距离分类超平面最近的点到分类超平面越远越好</strong>，即有<code>最大间隔分类器（Maximum margin classifier）</code>：</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\gamma, w,b} &{\gamma} \\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq\gamma \\ & ||w||=1 \end{array} \right.</script><p>其结果会和逻辑回归差不多好，而且可以扩展到无限维空间，构造非常有效的非线性分类器。这也是构造支持向量机的第一步。</p><h1 id="Lecture-7"><a href="#Lecture-7" class="headerlink" title="Lecture 7"></a>Lecture 7</h1><h2 id="支持向量机（Support-vector-machine）（二）"><a href="#支持向量机（Support-vector-machine）（二）" class="headerlink" title="支持向量机（Support vector machine）（二）"></a>支持向量机（Support vector machine）（二）</h2><h3 id="最优间隔分类器（Optimal-margin-classifier）"><a href="#最优间隔分类器（Optimal-margin-classifier）" class="headerlink" title="最优间隔分类器（Optimal margin classifier）"></a>最优间隔分类器（Optimal margin classifier）</h3><p>最大间隔分类器很直观，但是我们注意到约束$||w||=1$使得模型并不是一个凸优化问题，这就导致很容易陷入局部最小解，因此基于“等比放大缩小$w$和$b$对于超平面并不会产生任何影响”的观点，可以将其改进为以下的模型：</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\gamma, w,b} &{\dfrac{\hat\gamma}{||w||}} \\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq\hat\gamma  \end{array} \right.</script><p>更进一步的，我们可以再等比缩放的时候不对$||w||$做出限制，而令$\hat\gamma = 1$，于是就有<code>最优间隔分类器（Optimal margin classifier）</code></p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{\gamma, w,b} &\dfrac{1}{2}||w||^2 \\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq 1 \end{array} \right.</script><p>这是一个很好的凸优化模型，虽然貌似已经和几何间隔可以没有关系了，但是却可以很好的帮助我们理解它。</p><h3 id="原始优化问题（primal-optimization-problem）与KKT条件"><a href="#原始优化问题（primal-optimization-problem）与KKT条件" class="headerlink" title="原始优化问题（primal optimization problem）与KKT条件"></a>原始优化问题（primal optimization problem）与KKT条件</h3><p>目前来看，问题的形式化描述是非常成功的，现在需要偏离一下主题讲一下<code>原始优化问题（primal optimization problem）</code>、<code>KKT条件（KKT conditions）</code>和<code>对偶优化问题（dual optimization problem）</code>，从而导出一个和当前模型非常不同、但十分高效的模型，而且可以使得最优间隔分类器应用在维数很高、甚至无线维的特征空间中。</p><p>首先，回忆一下拉格朗日乘子法，对于问题</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{w} &f(w) \\ s.t. & h_i(w)=0,i=1,2,\dots,l \end{array} \right.</script><p>有<code>拉格朗日乘子（Lagrangian）</code></p><script type="math/tex; mode=display">L(w,\beta)=f(w)+\sum_{i=1}^l{\beta_ih_i(w)}</script><p>其中$\beta_i$被称为<code>拉格朗日乘数（Lagrange multipliers）</code>。为了求解问题，我们要做的是求解</p><script type="math/tex; mode=display">\frac{\partial L}{\partial w_i}=0,  \frac{\partial L}{\partial \beta_i}=0</script><p>更广泛的，对于原始优化问题</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{w} &f(w) \\ s.t. & g_i(w)\leq0,i=1,2,\dots,k \\ & h_i(w)=0,i=1,2,\dots,l \end{array} \right.</script><p>有<code>一般化的拉格朗日乘子 （generalized Lagrangian）</code></p><script type="math/tex; mode=display">L(w,\alpha,\beta)=f(w)+\sum_{i=1}^k{\alpha_ig_i(w)}+\sum_{i=1}^l{\beta_ih_i(w)}</script><p>我们要求解的是KKT条件：</p><script type="math/tex; mode=display">\begin{array}{rcl} \frac{\partial L}{\partial w_i}&= &0,i=1,\dots,n & (1) \\ \frac{\partial L}{\partial \beta_i}& = & 0,i=1,\dots,l & (2) \\ \alpha_ig_i(w)&= &0,i=1,\dots,k & (3)  \\ g_i(w)&\leq &0,i=1,\dots,k & (4) \\ \alpha_i&\geq &0,i=1,\dots,k & (5) \end {array}</script><p>其中条件$(3)$被称为<code>KKT对偶松弛条件（KKT dual complement condition）</code>。当$ \alpha_i=0$时，表示$f(w)$的极值点在空间$g(w)\leq0$中；当$ \alpha_i&gt;0$时，$g_i(w)=0$，表示$f(w)$的极值点在空间$g(w)\leq0$的边界上。</p><p>定义</p><script type="math/tex; mode=display">\theta_p(w)=\max_{\alpha,\beta:\alpha_i\geq0}{L(w,\alpha, \beta)}</script><p>其中$p$是primal的缩写，且可知</p><script type="math/tex; mode=display">\theta_p(w)=\left \{ \begin{array}{l} \infin, & w不满足原始问题约束 \\ f(w), & otherwise \end{array} \right.</script><p>所以，如下的优化问题</p><script type="math/tex; mode=display">p^*=\min_{w}{\theta_p(w)}=\min_{w}{ \max_{\alpha,\beta:\alpha_i\geq0}{L(w,\alpha, \beta)}}</script><p>是等价于原始问题的！</p><h3 id="对偶优化问题（dual-optimization-problem）与Slater条件"><a href="#对偶优化问题（dual-optimization-problem）与Slater条件" class="headerlink" title="对偶优化问题（dual optimization problem）与Slater条件"></a>对偶优化问题（dual optimization problem）与Slater条件</h3><p>和原始问题很相似，定义</p><script type="math/tex; mode=display">\theta_D(\alpha,\beta)=\min_{w}{L(w,\alpha, \beta)}</script><p>则对偶优化问题为</p><script type="math/tex; mode=display">d^*=\max_{\alpha,\beta:\alpha_i\geq0}{\theta_D(\alpha,\beta)}=\max_{\alpha,\beta:\alpha_i\geq0}{ \min_{w}{L(w,\alpha, \beta)}}</script><p>实际上只是交换了$\max$和$\min$的位置，而且容易证明<code>弱对偶性质（weak duality）</code></p><script type="math/tex; mode=display">d^*\leq p^*</script><p>由于对偶优化问题更加简单且具有很多很好的性质，我们很希望了解：什么条件下对偶最优化问题和原始最优化问题是同解的（即满足<code>强对偶性质(strong duality)</code>）呢？答案是原始问题是一个凸优化问题，即满足<code>Slater条件（Slater&#39;s condition）</code>：</p><ol><li>$f,g$均为凸函数（黑塞矩阵大于0）</li><li>$h$是仿射函数，即有$h_i(w)=a_i^Tw+b_i$。</li><li>$g_i$是严格<code>可执行的（strictly feasible）</code>，即$\exist w$使得$\forall i,g_i(w)&lt;0$</li></ol><p>由于Laster条件是一个充分不必要条件，还可以稍微弱化为<code>Refined Slater条件</code>：</p><ol><li>$f,g$均为凸函数（黑塞矩阵大于0）</li><li>$h$是仿射函数，即有$h_i(w)=a_i^Tw+b_i$</li><li>$g_i(x)\leq0,g_i(x)=a_i^Tw+b_i$</li><li>$g_i(x)&lt;0,g_i(x)\neq a_i^Tw+b_i$</li></ol><p>在上述条件下，存在$w^{<em>}$为原始问题的解，存在$\alpha^{</em>},\beta^{*}$为对偶问题的解，等价于</p><script type="math/tex; mode=display">p^*=d^*=L(w^*,\alpha^*,\beta^*)</script><h3 id="支持向量机的推导"><a href="#支持向量机的推导" class="headerlink" title="支持向量机的推导"></a>支持向量机的推导</h3><p>在导出支持向量机之前，需要说明一下符号的变化。和一般化的拉格朗日乘子有两组变量$\alpha,\beta$不同，在处理支持向量机时将只有$\alpha$；和KKT中一组变量$w$不同，在支持向量机时将有两组$w,b$。</p><p>对于最优间隔分类器</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{\gamma, w,b} &\dfrac{1}{2}||w||^2 \\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq 1 \end{array} \right.</script><p>令</p><script type="math/tex; mode=display">g_i(w,b)=-y^{(i)}(w^Tx^{(i)}+b) +1\leq 0</script><p>有拉格朗日乘子：</p><script type="math/tex; mode=display">L(w,b,\alpha)=\frac{1}{2}||w||^2+\sum_{i=1}^{m}\alpha_ig_i(w,b)=\frac{1}{2}||w||^2-\sum_{i=1}^{m}\alpha_i[y^{(i)}(w^Tx^{(i)}+b) -1]</script><p>在KKT条件中，当$\alpha_i&gt;0$时$g_i(w)=0$，即有几何间隔$\gamma=1$，如下图</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/15.png" alt=""></p><p>落在虚线上的就是$g_i(w)=0$的样本，它们被称为<code>支持向量（support vector）</code>。实际上支持向量一定是很少的，所以在大多数情况下，$g_i(w)&lt;0$且有$\alpha_i=0$。</p><p>显然，最优间隔分类器是满足Refined Slater条件的，所以可求解对偶问题，有</p><script type="math/tex; mode=display">\theta_D(\alpha)=\min_{w,b}{L(w,b,\alpha)}=\min_{w,b}{\frac{1}{2}||w||^2-\sum_{i=1}^{m}\alpha_i[y^{(i)}(w^Tx^{(i)}+b) -1]}</script><p>令</p><script type="math/tex; mode=display">\nabla_wL(w,b,\alpha)=w-\sum_{i=1}^{m}{\alpha_iy^{(i)}x^{(i)}}=0</script><p>则有</p><script type="math/tex; mode=display">w=\sum_{i=1}^{m}{\alpha_iy^{(i)}x^{(i)}}</script><p>同样令</p><script type="math/tex; mode=display">\frac{\partial L}{\partial b}=\sum_{i=1}^{m}{\alpha_iy^{(i)}}=0</script><p>将两个式子代入，有</p><script type="math/tex; mode=display">\theta_D(\alpha)=\sum_{i=1}^m{\alpha_i}-\frac{1}{2}\sum_{i=1}^m{ \sum_{j=1}^m{ y^{(i)}y^{(j)}\alpha_i\alpha_j(x^{(i)})^Tx^{(i)} } }</script><p>于是得到对偶问题，即支持向量机：</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\alpha} &W(\alpha)= \sum_{i=1}^m{\alpha_i}-\frac{1}{2}\sum_{i,j=1}^m{ y^{(i)}y^{(j)}\alpha_i\alpha_j\langle x^{(i)},x^{(j)}\rangle }  \\ s.t. & \alpha_i\geq0,i=1,2,\dots,m \\ & \sum_{i=1}^m{\alpha_iy^{(i)}}=0 \end{array} \right.</script><p>由最优解$\alpha^*$可以得到</p><script type="math/tex; mode=display">w^*=\sum_{i=1}^{m}{\alpha_i^*y^{(i)}x^{(i)}}</script><p>再将其代入原始模型，有</p><script type="math/tex; mode=display">b^*=-\frac{ \max_\limits{i:y^{(i)}=-1}{w^{*T}x^{(i)} } + \min_\limits{i:y^{(i)}=1}{w^{*T}x^{(i)} } }{2}</script><p>直观的理解就是在给定超直线簇中找到距离支持向量距离相同的那一条。</p><p>于是对于预测样本</p><script type="math/tex; mode=display">h_{w,b}(x)=g(w^{*T}x+b^*)=g((\sum_{i=1}^{m}{\alpha_i^*y^{(i)}x^{(i)}})^Tx+b^*)=g(\sum_{i=1}^{m}{\alpha_i^*y^{(i)}\langle x^{(i)},x\rangle }+b^*)</script><p>通过对支持向量机要求解的问题和对预测样本计算的观察，可以发现由于样本中支持向量很少，$\alpha_i=0$是非常常见的，所以对于维度很高的样本，只需要很少的数量的样本就可以求解问题。而且对于输入特征$x^{(i)}$也仅有内积计算$\langle x^{(i)},x\rangle $，对于它的处理，接下来介绍<code>核（kernel）</code>的概念。</p><h1 id="Lecture-8"><a href="#Lecture-8" class="headerlink" title="Lecture 8"></a>Lecture 8</h1><h2 id="支持向量机（Support-vector-machine）（三）"><a href="#支持向量机（Support-vector-machine）（三）" class="headerlink" title="支持向量机（Support vector machine）（三）"></a>支持向量机（Support vector machine）（三）</h2><h3 id="核（Kernel）"><a href="#核（Kernel）" class="headerlink" title="核（Kernel）"></a>核（Kernel）</h3><p>目前版本的支持向量机还只能处理低维可分问题，因此有<code>属性映射（feature mapping）</code>，即将属性映射到高维空间，在足够高的维度中一定是线性可分的，比如</p><script type="math/tex; mode=display">\phi(x)=\begin{bmatrix} x \\ x^2\\\vdots\\ x^n  \end{bmatrix}</script><p>然后将$\phi(x)$代入到之前版本的支持向量机中，于是就有大量计算$\langle \phi(x^{(i))},\phi(x^{(j)})\rangle$。有时候，$\phi(x)$的维数会非常地高，甚至是无线维的，此时无法快速地计算时间复杂度为$O(n^2)$的$\langle\phi(x^{(i)}),\phi(x^{(j)})\rangle$，但是在很多特例情况下，可以转换为可以快速地计算<code>核（kernel）</code>：</p><script type="math/tex; mode=display">K(x^{(i)},x^{(j)})=\langle\phi(x^{(i)}),\phi(x^{(j)})\rangle</script><p>就比如</p><script type="math/tex; mode=display">x,z\in\R,\\ K(x,z)=(x^Tz)^2=(\sum_{i=1}^nx_iz_i)(\sum_{j=1}^nx_jz_j)=\sum_{i=1}^n{\sum_{j=1}^n{(x_ix_j)(z_iz_j)}}=\phi(x)^T\phi(z)</script><p>所以可以用时间复杂度为$O(n)$的核函数</p><script type="math/tex; mode=display">K(x,z)=(x^Tz)^2</script><p>代替函数映射</p><script type="math/tex; mode=display">\phi(x)^T\phi(z),\phi(x)=[x_ix_j\ for\ i\ in\ [1,n] \ for\ j\ in\ [1,n]]</script><p>的计算！</p><p>当然还可以扩展一下，用核函数</p><script type="math/tex; mode=display">K(x,z)=(x^Tz+c)^2=\sum_{i,j=1}^n(x_ix_j)(z_iz_j)+\sum_{i=1}^n{\sqrt{2c}x_i\sqrt{2c}z_i}+c^2</script><p>代替函数映射</p><script type="math/tex; mode=display">\phi(x)=[x_ix_j\ for\ i\ in\ [1,n] \ for\ j\ in\ [1,n]] + [\sqrt{2c}x_i\ for\ i\ in\ [1,n] ] + c</script><p>更一步可以用核函数$K(x,z)=(x^Tz+c)^d$代替d次多项式。</p><p>直观地看（并不完全正确），核函数就是用来表现$\phi(x)$和$\phi(z)$的相似程度，由于这种相似程度只有相对意义，所以在满足核函数要求之后，只要能够表述相似性的函数都可以，不论具有什么形式！比如一个比较好的核函数为</p><script type="math/tex; mode=display">K(x,z)=\exp(-\dfrac{||x-z||^2}{2\sigma^2})</script><p>它被称为<code>高斯核（Gaussian Kernel）</code>，在某些情况下用在支持向量机中是非常有效的。</p><p>既然这样的函数都可以作为核，我们不禁发问——对于一个新函数，我们如何判断它可不可以作为核呢？首先要定义<code>核矩阵（Kernel matrix）</code>：</p><script type="math/tex; mode=display">K,K_{ij}=K(x^{(i)},x^{(j)})=\langle\phi(x^{(i)}),\phi(x^{(j)})\rangle=\langle\phi(x^{(j)}),\phi(x^{(i)})\rangle=K(x^{(j)},x^{(i)})=K_{ji}</script><p>首先核矩阵一定是<code>对称矩阵（symmetric matrix）</code>，其次对于一个核函数即</p><script type="math/tex; mode=display">\exists\phi,L(x,z)=\phi(x)^T\phi(z)</script><p>有</p><script type="math/tex; mode=display">z^TKz=\sum_i{\sum_j{z_iK_{ij}z_j}}=\sum_i{ \sum_j{ z_i\phi(x^{(i)})^T\phi(x^{(j)})z_j } }\\ =\sum_i{ \sum_j{ z_i\sum_k{ \phi_k(x^{(i)}) \phi_k(x^{(j)}) }z_j } } \\ =\sum_k{ \sum_i{ \sum_j{ z_i\phi_k(x^{(i)}) \phi_k(x^{(j)})z_j } } }\\=\sum_k{(\sum_i{z_i\phi(x^{(i)})})^2} \geq 0</script><p>即核矩阵$K$是一个<code>半正定矩阵（semi-definite matrix）</code>！实际上有Mercer定理：</p><blockquote><p>核矩阵$K$是半正定矩阵是函数$K$为合法的核函数的充要条件。</p></blockquote><p>这样就可以根据特征映射$\phi(x)$愉快地选择核函数了，然后就可以在支持向量机中将所有$\langle\phi(x^{(i)}),\phi(x^{(j)})\rangle$替换为$K(x^{(i)},x^{(j)})$，并不需要将$\phi(x)$显示地表达出来就可以高效地将数据映射到线性可分的高维空间中。</p><p>虽然是从支持向量机中引出了核的概念，并使得支持向量机十分强大，但是核的应用要远远比支持向量机广。包括之前的算法，比如线性回归、逻辑回归、感知机模型，只要可以写为内积的形式，就可以引入核的概念加快计算速度。</p><h3 id="L1-norm软边界（soft-margin）支持向量机"><a href="#L1-norm软边界（soft-margin）支持向量机" class="headerlink" title="L1 norm软边界（soft margin）支持向量机"></a>L1 norm软边界（soft margin）支持向量机</h3><p>现在的支持向量机仍然只能处理线性可分问题。一方面，有些问题正负样本是交错分布的，所以要么低维线性不可分，要么是高维过拟合；另一方面，会出现如下的情况：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/16.png" alt=""></p><p>即极少数<code>异常点（outlier）</code>导致整个超平面出现剧烈的变化，实际分类效果也不好。所以，为了减少噪音的影响，稍微调整一下最优间隔分类器（可能已经记不得这个概念了，实际上之前讲对偶优化、核都是为了高效地求解这个问题，也是最原始的支持向量机）为<code>L1 norm软边界（soft margin）支持向量机</code>：</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \min_\limits{\gamma, w,b} &\dfrac{1}{2}||w||^2 +C\sum_{i=1}^m{\xi_i}\\ s.t. & y^{(i)}(w^Tx^{(i)}+b) \geq 1-\xi_i \\ & \xi_i\geq0,i=1,\dots,m \end{array} \right.</script><p>这个名字可能很让人困惑，实际上就是允许$y^{(i)}(w^Tx^{(i)}+b) $小于$0$即允许部分样本是错误的；同时这样的错误必然是少数，所以加上一个惩罚函数$C\sum_{i=1}^m{\xi_i}$。</p><p>和之前一样，有拉格朗日乘子：</p><script type="math/tex; mode=display">L(w,b,\xi,\alpha,r)=\frac{1}{2}w^Tw+C\sum_{i=1}^m{\xi_i}-\sum_{i=1}^M{\alpha_i[y^{(i)}(w^Tw+b)-1+\xi_i]}-\sum_{i=1}^m{r_i\xi_i}</script><p>同样，可以推导出对偶问题</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\alpha} &W(\alpha)= \sum_{i=1}^m{\alpha_i}-\frac{1}{2}\sum_{i,j=1}^m{ y^{(i)}y^{(j)}\alpha_i\alpha_j\langle x^{(i)},x^{(j)}\rangle }  \\ s.t. & 0 \leq \alpha_i\leq C,i=1,2,\dots,m \\ & \sum_{i=1}^m{\alpha_iy^{(i)}}=0 \end{array} \right.</script><p>其实和之前相比仅仅加了一个小于等于$C$的条件，同时由KKT松弛条件有</p><script type="math/tex; mode=display">\alpha_i=0 \Rightarrow y^{i}(w^Tx^{(i)}+b)\geq1 \\ \alpha_i=C \Rightarrow y^{i}(w^Tx^{(i)}+b)\leq1 \\ 0<\alpha_i<C \Rightarrow y^{i}(w^Tx^{(i)}+b)=1</script><p>这会用在<code>SMO算法</code>的收敛判定中。</p><h3 id="坐标上升法（Coordinate-ascent）"><a href="#坐标上升法（Coordinate-ascent）" class="headerlink" title="坐标上升法（Coordinate ascent）"></a>坐标上升法（Coordinate ascent）</h3><p>下面介绍的是求解L1正则化软边界支持向量机模型的SMO算法，在此之前需要介绍<code>坐标上升法（Coordinate ascent）</code>，其针对的是没有约束的优化问题</p><script type="math/tex; mode=display">\max_\alpha{W(\alpha_1,\alpha_2,\dots,\alpha_m)}</script><p>实际上就是每次只将一个$\alpha$视为变量，其他的作为常量求最大值：</p><hr><p>Loop until convergence:</p><p>​    for $i=1,\dots,m$:</p><p>​         $\alpha_i= arg \max_{\hat{\alpha}_i}{W(\alpha_1,\dots,\alpha_{i-1},\hat{\alpha}_i,\dots,\alpha_m)}$</p><hr><p>直观地理解有下图：</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/17.png" alt=""></p><p>和牛顿方法比起来，虽然可能迭代的次数比较多，但是每轮迭代是非常简单高效的。</p><h3 id="顺序最小优化算法（Sequence-minimal-optimization，SMO）"><a href="#顺序最小优化算法（Sequence-minimal-optimization，SMO）" class="headerlink" title="顺序最小优化算法（Sequence minimal optimization，SMO）"></a>顺序最小优化算法（Sequence minimal optimization，SMO）</h3><p>由于在问题</p><script type="math/tex; mode=display">\left \{ \begin{array}{l} \max_\limits{\alpha} &W(\alpha)= \sum_{i=1}^m{\alpha_i}-\frac{1}{2}\sum_{i,j=1}^m{ y^{(i)}y^{(j)}\alpha_i\alpha_j\langle x^{(i)},x^{(j)}\rangle }  \\ s.t. & 0 \leq \alpha_i\leq C,i=1,2,\dots,m \\ & \sum_{i=1}^m{\alpha_iy^{(i)}}=0 \end{array} \right.</script><p>存在约束$\sum_{i=1}^m{\alpha_iy^{(i)}}=0$，所以不可能直接用坐标上升法。顺序最小优化算法是对其的改进，每轮迭代中更新两个参数，将其他参数作为固定值，比如固定$\alpha_1,\alpha_2$有</p><script type="math/tex; mode=display">\alpha_1y^{(1)}+\alpha_2y^{(2)}=\zeta</script><p>于是约束就可以被表示为下图</p><p><img src="/2018/05/25/mooc-吴恩达老师在斯坦福大学的机器学习公开课1——监督学习/18.png" alt=""></p><p>即红色线段的是满足约束的$\alpha_1,\alpha_2$。</p><p>由于$y\in\{-1,1\}$，所以有</p><script type="math/tex; mode=display">\alpha_1=(\zeta-\alpha_2y^{(2)})y^{(1)}</script><p>所以</p><script type="math/tex; mode=display">W(\alpha_1,\alpha_2,\dots,\alpha_m)=W((\zeta-\alpha_2y^{(2)})y^{(1)},\alpha_2,\dots,\alpha_m) \propto\alpha_2^2</script><p>即$W$是关于$\alpha_2$的一个二次函数，用$\alpha_2^{new,unclipped}$来表示极值点，于是有</p><script type="math/tex; mode=display">\alpha_2^{new}=\left \{ \begin{array}{l} H, & \alpha_2^{new,unclipped}>H \\ \alpha_2^{new,unclipped}, &L\leq\alpha_2^{new,unclipped}\leq H \\ L, & \alpha_2^{new,unclipped}<L \end{array}  \right.</script><p>这样就可以得到$\alpha_1^{new}$，进行下一轮循环直到收敛（满足KKT条件）。</p><p>而具体如何选择每一轮固定的两个参数，需要一个启发式算法，需要参考John C. Platt（算法发明者）的论文，在这里占一个坑。</p><blockquote><p>！@#￥%……&amp;*（）</p></blockquote><h3 id="支持向量机的两个应用"><a href="#支持向量机的两个应用" class="headerlink" title="支持向量机的两个应用"></a>支持向量机的两个应用</h3><p>一个手写体识别，将$n\times n$的图片变为$x\in \R^{n\times n}$的特征，之后可以用高斯核直接上，效果在20年前是等价于最好的神经网络的。</p><p>另一个是蛋白质分类，由于蛋白质长度不一样，所以将氨基酸的四元排列出现的次数作为特征，比如AABB，BCAD，这是一个$4^{20}$的高维向量，因为有20种氨基酸。处理那么大的数据，需要使用一种<code>动态规划算法（Dynamic Programming）</code>和新的核，在此不做展开，占一个坑。</p><blockquote><p>！@#￥%……&amp;*（）</p></blockquote><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此，学完了第一部分——监督学习，其中包括很多学习算法，基本知识已经合格</p><p>不过，课程刚刚完成了1/4，下面要讲的是如何真正理解学习算法，什么时候它是有效的，什么时候是糟糕的，怎么样才能将现有的算法用好。</p><p>详情移步<a href="http://wang22ti.com/2018/06/05/mooc-%E5%90%B4%E6%81%A9%E8%BE%BE%E8%80%81%E5%B8%88%E5%9C%A8%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE2%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/">第二部分：学习理论</a>（这个文档已经很冗长了，大量的公式的渲染已经拖累了编辑体验）</p><p>​    </p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《编译原理》实验4-语法分析器（算符优先分析法）python实现</title>
      <link href="/2018/05/24/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C4-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B9%8B%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90%E6%B3%95python%E5%AE%9E%E7%8E%B0/"/>
      <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        本次实验中，我用python3.5实现了一个算符优先文法的语法分析类，具有以下功能：</p><ol><li><p>根据文法的起始符号、非终结符号、产生式自动生成文法终结符号的Firstvt集和Lastvt集，并进一步生成文法的优先矩阵。</p></li><li><p>根据优先矩阵实现输入串的分析程序，在分析失败的时候输出对应出错位置与错误信息。</p></li><li><p>扩充实验指导书给定的文法，并设计针对的测试样例，以验证分析程序健壮性。</p></li><li><p>根据设置的日志等级，输出对应的日志信息。</p></li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>​        实验中实现的算符优先文法的语法分析类名为OPGAnalyzer，具体描述信息如下：</p><p><img src="/2018/05/24/《编译原理》实验4-语法分析器之算符优先分析法python实现/1.png" alt=""></p><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p>​        为了测试程序的健壮性，在实验指导书指定的文法的基础上加入产生式’E→E—‘初始化分析器，循环调用analyse函数分析符号串’i+i<em>i’, ‘i</em>i/(i+i)-i’, ‘=’, ‘i=i<em>i’, ‘(i+i)</em>i/i’, ‘/i+’, ‘<em>i’, ‘((i</em>i-i)+(i))’, ‘i++’, ‘(i—+i)<em>i’, ‘i-+i’, ‘’, ‘)+i’, ‘(‘是否满足文法，其中’=’和’i=i</em>i’针对的是输入非法终结符号的情况，’i++’和’(i—+i)*i’针对的是文法’E→E—‘，’)+i’针对的是在寻找最左素短语时找不到&lt;关系的情况，’(‘针对的是在寻找最左素短语时找不到&gt;关系的情况。输出结果如下图所示，程序可以再分析不成功的情况下输出对应的错误信息，完全符合预期。</p><p><img src="/2018/05/24/《编译原理》实验4-语法分析器之算符优先分析法python实现/2.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：课件中优先矩阵存在问题，通过比对网上相同文法分析得到的优先矩阵和本程序求得的优先矩阵确认无误；课件中对于分析失败的情况没有深入的说明，通过再次阅读书本深入理解算法与素短语的概念，结合课件中的示例完成分析算法。</p><p>​        本程序的优点包括：比较完整地实现了OPG分析算法，在分析失败的时候输出对应出错位置与错误信息，根据日志等级输出日志信息；分析器只需要输入起始符号、产生式、终结符号就可以初始化，自动生成Firstvt集、Lastvt集和优先矩阵；文法可以进一步扩充，程序具有较好的健壮性。</p><p>​        本程序还存在可以优化的地方，主要包括：将输入符号串改为由词法分析器生成的二元式从文件中读取，为完整编译器的实现打下良好的基础；</p><p>​        本实验中，通过实现OPG文法分析算法，加深了我对算法的理解，提高了我对问题分析、抽象的能力，为实现完整编译器打下了良好的基础。</p><h1 id="附录：程序源码"><a href="#附录：程序源码" class="headerlink" title="附录：程序源码"></a>附录：程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPGAnalyzer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, overs, productions, log_level=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.productions = productions</span><br><span class="line">        self.productions[<span class="string">'S'</span>] = [<span class="string">'#'</span> + start + <span class="string">'#'</span>, ]</span><br><span class="line">        self.nonterminals = self.productions.keys()</span><br><span class="line">        self.overs = overs</span><br><span class="line">        self.overs.append(<span class="string">'#'</span>)</span><br><span class="line">        self.log_level = log_level</span><br><span class="line">        self.get_firstvt()</span><br><span class="line">        self.get_lastvt()</span><br><span class="line">        self.get_relation_matrix()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成firstvt集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_firstvt</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.firstvt = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="comment"># 根据规则1，遍历产生式</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="comment"># 若有规则U→b…或规则U→Vb…，将b加入U的firstvt集中，同时将元组(U, b)入栈</span></span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.firstvt[nontermainal].add(right[<span class="number">0</span>])</span><br><span class="line">                    stack.append((nontermainal, right[<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">if</span> len(right) &gt; <span class="number">1</span> <span class="keyword">and</span> right[<span class="number">1</span>] <span class="keyword">in</span> self.overs <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                    self.firstvt[nontermainal].add(right[<span class="number">1</span>])</span><br><span class="line">                    stack.append((nontermainal, right[<span class="number">1</span>]))</span><br><span class="line">        <span class="comment"># 根据规则2，反复遍历产生式直到栈为空</span></span><br><span class="line">        <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">            V, b = stack.pop()</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="comment"># 对每一个形如U→V…的规则</span></span><br><span class="line">                    <span class="keyword">if</span> V == right[<span class="number">0</span>]:</span><br><span class="line">                        <span class="comment"># 如果b不在U的firstvt集中，将b加入U的firstvt集中，同时将元组(U, b)入栈</span></span><br><span class="line">                        <span class="keyword">if</span> b <span class="keyword">not</span> <span class="keyword">in</span> self.firstvt[nontermainal]:</span><br><span class="line">                            self.firstvt[nontermainal].add(b)</span><br><span class="line">                            stack.append((nontermainal, b))</span><br><span class="line">        <span class="keyword">if</span> self.log_level:</span><br><span class="line">            print(self.firstvt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成lastvt集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_lastvt</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.lastvt = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals&#125;</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="comment"># 根据规则1，遍历产生式</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="comment"># 若有规则U→…a或规则U→…aV，将a加入U的lastvt集中，同时将元组(U, a)入栈</span></span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">-1</span>] <span class="keyword">in</span> overs:</span><br><span class="line">                    self.lastvt[nontermainal].add(right[<span class="number">-1</span>])</span><br><span class="line">                    stack.append((nontermainal, right[<span class="number">-1</span>]))</span><br><span class="line">                <span class="keyword">if</span> len(right) &gt; <span class="number">1</span> <span class="keyword">and</span> right[<span class="number">-2</span>] <span class="keyword">in</span> self.overs <span class="keyword">and</span> right[<span class="number">-1</span>] <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                    self.lastvt[nontermainal].add(right[<span class="number">-2</span>])</span><br><span class="line">                    stack.append((nontermainal, right[<span class="number">-2</span>]))</span><br><span class="line">        <span class="comment"># 根据规则2，反复遍历产生式直到栈为空</span></span><br><span class="line">        <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">            V, a = stack.pop()</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                    <span class="comment"># 对每一个形如U→…V的规则</span></span><br><span class="line">                    <span class="keyword">if</span> V == right[<span class="number">-1</span>]:</span><br><span class="line">                        <span class="comment"># 如果a不在U的lastvt集中，将a加入U的firstvt集中，同时将元组(U, a)入栈</span></span><br><span class="line">                        <span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> self.lastvt[nontermainal]:</span><br><span class="line">                            self.lastvt[nontermainal].add(a)</span><br><span class="line">                            stack.append((nontermainal, a))</span><br><span class="line">        <span class="keyword">if</span> self.log_level:</span><br><span class="line">            print(self.lastvt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成优先矩阵</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_relation_matrix</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 1为大于，0为等于，-1为小于</span></span><br><span class="line">        self.relation_matrix = pd.DataFrame(index=overs, columns=overs)</span><br><span class="line">        <span class="comment"># 对于每一条规则</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                <span class="comment"># 对于产生式右部的每一个非末尾符号</span></span><br><span class="line">                <span class="keyword">for</span> i, a <span class="keyword">in</span> enumerate(right[:<span class="number">-1</span>]):</span><br><span class="line">                    <span class="comment"># 如果是终结符</span></span><br><span class="line">                    <span class="keyword">if</span> a <span class="keyword">in</span> self.overs:</span><br><span class="line">                        <span class="comment"># 如果是形如…ab…的产生式右部，置a=b</span></span><br><span class="line">                        <span class="keyword">if</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            b = right[i + <span class="number">1</span>]</span><br><span class="line">                            self.relation_matrix[a][b] = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="comment"># 如果是形如…aU…的产生式右部，对于U的firstvt集中的每一个非终结符b，置a&lt;b</span></span><br><span class="line">                            <span class="keyword">for</span> b <span class="keyword">in</span> self.firstvt[right[i + <span class="number">1</span>]]:</span><br><span class="line">                                self.relation_matrix[a][b] = <span class="number">-1</span></span><br><span class="line">                            <span class="comment"># 如果是形如…aVb…的产生式右部，置a=b</span></span><br><span class="line">                            <span class="keyword">if</span> i + <span class="number">2</span> &lt; len(right) <span class="keyword">and</span> right[i + <span class="number">2</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                                b = right[i + <span class="number">2</span>]</span><br><span class="line">                                self.relation_matrix[a][b] = <span class="number">0</span></span><br><span class="line">                    <span class="comment"># 如果是形如…Ub…的产生式右部，对于U的firstvt集中的每一个非终结符a_，置a_&gt;b</span></span><br><span class="line">                    <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                        U, b = a, right[i + <span class="number">1</span>]</span><br><span class="line">                        <span class="keyword">for</span> a_ <span class="keyword">in</span> self.lastvt[U]:</span><br><span class="line">                            self.relation_matrix[a_][b] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level:</span><br><span class="line">            <span class="comment"># 行列违反直觉，故转置输出</span></span><br><span class="line">            print(self.relation_matrix.T)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断string是否不是任何一个产生式的右部</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_not_right</span><span class="params">(self, string)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nonterminals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.productions[nontermainal]:</span><br><span class="line">                tag = <span class="keyword">True</span></span><br><span class="line">                <span class="comment"># 如果string长度和right不相同，当然不是，下一个产生式</span></span><br><span class="line">                <span class="keyword">if</span> len(right) != len(string):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 逐个比对right和string的符号</span></span><br><span class="line">                <span class="keyword">for</span> ch1, ch2 <span class="keyword">in</span> zip(right, string):</span><br><span class="line">                    <span class="comment"># 如果终结符号与非终结符号类别不相同，不是，下一个产生式</span></span><br><span class="line">                    <span class="keyword">if</span> (ch1 <span class="keyword">in</span> self.overs <span class="keyword">and</span> ch2 <span class="keyword">not</span> <span class="keyword">in</span> self.overs) <span class="keyword">or</span> (ch1 <span class="keyword">not</span> <span class="keyword">in</span> self.overs <span class="keyword">and</span> ch2 <span class="keyword">in</span> self.overs):</span><br><span class="line">                        tag = <span class="keyword">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="comment"># 如果是均为终结符号，如果不相同，不是，下一个产生式</span></span><br><span class="line">                    <span class="keyword">if</span> ch1 <span class="keyword">in</span> self.overs <span class="keyword">and</span> ch1 != ch2:</span><br><span class="line">                        tag = <span class="keyword">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 匹配到某一产生式右部，返回False</span></span><br><span class="line">                <span class="keyword">if</span> tag:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="comment"># 没有匹配到任何一个产生式右部，返回True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_fail_info</span><span class="params">(self, info=<span class="string">''</span>)</span>:</span></span><br><span class="line">        print(<span class="string">'fail'</span>, self.raw_string, <span class="string">'[%d, %s] %s.'</span> % (self.index, self.a, info))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析算法的主体程序</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OPG</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化分析栈stack和待分析输入符号a</span></span><br><span class="line">        stack = [<span class="string">'#'</span>, ]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从本质上说，每轮循环都是在找最左素短语，即最靠近栈顶拥有&lt;…&gt;形式的短语</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 由于只有终结符号有偏序关系，先找到最接近栈顶的终结符号</span></span><br><span class="line">            j = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> stack[j] <span class="keyword">not</span> <span class="keyword">in</span> self.overs:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果该终结符号 &gt; 待分析输入符号a，这是可能被规约的情况</span></span><br><span class="line">            <span class="keyword">if</span> self.relation_matrix[stack[j]][self.a] == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 查找&lt;关系</span></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                    <span class="comment"># temp记录较为靠近栈顶的终结符号</span></span><br><span class="line">                    temp = stack[j]</span><br><span class="line">                    <span class="comment"># 找下一个终结符号</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                        j -= <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> j &gt;= -len(stack) <span class="keyword">and</span> stack[j] <span class="keyword">in</span> self.overs <span class="keyword">or</span> j &lt; -len(stack):</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="comment"># 无论找到&lt;关系还是找不到，结束查找</span></span><br><span class="line">                    <span class="keyword">if</span> j &lt; -len(stack) <span class="keyword">or</span> self.relation_matrix[stack[j]][temp] == <span class="number">-1</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 大多数情况下，由于#的优先级总是比较低的，可以找到&lt;关系，&lt;与&gt;之间的就是待归约串</span></span><br><span class="line">                <span class="comment"># 如果待归约串并匹配任何一个产生式右部，那么归约失败，输出失败信息并return</span></span><br><span class="line">                <span class="comment"># 少数情况下，找不到&lt;关系，同样归约失败，输出失败信息并return</span></span><br><span class="line">                <span class="keyword">if</span> j &lt; -len(stack):</span><br><span class="line">                    self.print_fail_info(<span class="string">'cannot find "&lt;" relation'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> self.is_not_right(stack[j + <span class="number">1</span>:]):</span><br><span class="line">                    self.print_fail_info(<span class="string">'cannot fit any right of productions'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="comment"># 找到了最左素短语，归约</span></span><br><span class="line">                stack = stack[:j + <span class="number">1</span>] + [<span class="string">'N'</span>, ]</span><br><span class="line">                <span class="keyword">if</span> self.log_level:</span><br><span class="line">                    print(stack, j, self.a)</span><br><span class="line">                <span class="comment"># 归约后检查是否满足成功条件，满足则输出成功信息并return</span></span><br><span class="line">                <span class="comment"># 不满足则继续查找素短语</span></span><br><span class="line">                <span class="keyword">if</span> stack == [<span class="string">'#'</span>, <span class="string">'N'</span>] <span class="keyword">and</span> self.a == <span class="string">'#'</span>:</span><br><span class="line">                    print(<span class="string">'ok  '</span>, self.raw_string)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 如果该终结符号 &lt;或= 待分析输入符号a，那么不是最左素短语（重点在“左”）</span></span><br><span class="line">            <span class="comment"># 那么将a入栈，并分析下一个输入符号，即向右寻找最左素短语</span></span><br><span class="line">            <span class="comment"># 当然如果已经没有下一个输入符号，归约失败，输出失败信息并return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> self.index == len(self.string) - <span class="number">1</span>:</span><br><span class="line">                    self.print_fail_info(<span class="string">'cannot find "&gt;" relation'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                stack.append(self.a)</span><br><span class="line">                self.index += <span class="number">1</span></span><br><span class="line">                self.a = self.string[self.index]</span><br><span class="line">                <span class="keyword">if</span> self.a <span class="keyword">not</span> <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.print_fail_info(<span class="string">'unfined terminal char'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> self.log_level:</span><br><span class="line">                    print(stack, j, self.a)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析程序的入口程序，过滤导致死循环的空串，并初始化string</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.raw_string = string</span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.string = string + <span class="string">'#'</span></span><br><span class="line">        self.a = self.string[self.index]</span><br><span class="line">        <span class="keyword">if</span> string == <span class="string">''</span>:</span><br><span class="line">            self.print_fail_info(<span class="string">'the input string cannot be null'</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.a <span class="keyword">not</span> <span class="keyword">in</span> self.overs:</span><br><span class="line">            self.print_fail_info(<span class="string">'unfined terminal char'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.OPG()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># S和N不可以作为非终结符，为测试算法健壮性，加入文法'E→E--'</span></span><br><span class="line">productions = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'E+T'</span>, <span class="string">'T'</span>, <span class="string">'E-T'</span>, <span class="string">'E--'</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'T*F'</span>, <span class="string">'F'</span>, <span class="string">'T/F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">&#125;</span><br><span class="line">start = <span class="string">'E'</span></span><br><span class="line">nonterminals = productions.keys()</span><br><span class="line"><span class="comment"># '#'不可以作为终结符号</span></span><br><span class="line">overs = [<span class="string">'+'</span>, <span class="string">'*'</span>, <span class="string">'i'</span>, <span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'/'</span>, <span class="string">'-'</span>]</span><br><span class="line"></span><br><span class="line">opg_analyzer = OPGAnalyzer(start=start, productions=productions, overs=overs, log_level=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 以下测试样例中，</span></span><br><span class="line"><span class="comment"># '='和'i=i*i'针对的是输入非法终结符号的情况</span></span><br><span class="line"><span class="comment"># 'i++'和'(i--+i)*i'针对的是文法'E→E--'</span></span><br><span class="line"><span class="comment"># ')+i'针对的是在寻找最左素短语时找不到 &lt;关系 的情况</span></span><br><span class="line"><span class="comment"># '('针对的是在寻找最左素短语时找不到 &gt;关系 的情况</span></span><br><span class="line">string_list = [<span class="string">'i+i*i'</span>, <span class="string">'i*i/(i+i)-i'</span>, <span class="string">'='</span>, <span class="string">'i=i*i'</span>, <span class="string">'(i+i)*i/i'</span>, <span class="string">'/i+'</span>, <span class="string">'*i'</span>, <span class="string">'((i*i-i)+(i))'</span>, <span class="string">'i++'</span>, <span class="string">'(i--+i)*i'</span>, <span class="string">'i-+i'</span>, <span class="string">''</span>, <span class="string">')+i'</span>, <span class="string">'('</span>]</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    opg_analyzer.analyse(string)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mooc-牛津大学xDeepMind自然语言处理</title>
      <link href="/2018/05/22/mooc-%E7%89%9B%E6%B4%A5%E5%A4%A7%E5%AD%A6xDeepMind%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《计算机体系结构》实验5-tomasuluo算法</title>
      <link href="/2018/05/16/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C5-tomasuluo%E7%AE%97%E6%B3%95/"/>
      <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>(1) 加深对指令级并行性及开发的理解。 </p><p>(2) 加深对Tomasulo算法的理解。  </p><p>(3) 掌握Tomasulo算法在指令流出、执行、写结果各阶段对浮点操作指令以及load和store 指令进行什么处理。  </p><p>(4) 掌握采用了Tomasulo算法的浮点处理部件的结构。 </p><p>(5) 掌握保留站的结构。  </p><p>(6) 给定被执行代码片段，对于具体某个时钟周期，能够写出保留站、指令状态表以及浮点 寄存器状态表内容的变化情况。</p><h1 id="执行实验指导书中的程序"><a href="#执行实验指导书中的程序" class="headerlink" title="执行实验指导书中的程序"></a>执行实验指导书中的程序</h1><p>假设浮点功能部件的延迟时间为加减法2个时钟周期，乘法10个时钟周期，除法40 个时钟周期，Load部件2个时钟周期。对于下面的代码段，给出当指令MUL.D写结果时，保留站、load缓冲器以及寄存器状态表中的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L.D     F6，24(R2)</span><br><span class="line">L.D     F2，12(R3)</span><br><span class="line">MUL.D  F0，F2，F4</span><br><span class="line">SUB.D   F8，F6，F2</span><br><span class="line">DIV.D    F10，F0，F6</span><br><span class="line">ADD.D   F6，F8，F2</span><br></pre></td></tr></table></figure><p>按步进方式执行上述代码，观察每一个时钟周期前后各信息表中内容的变化情况。</p><p>给出在第3个时钟周期时，保留站、load缓冲器以及寄存器状态表中的内容；再步进10个时钟周期，给出这时保留站、load缓冲器以及寄存器状态表中的内容。</p><h2 id="执行到MUL-D写结果"><a href="#执行到MUL-D写结果" class="headerlink" title="执行到MUL.D写结果"></a>执行到MUL.D写结果</h2><p>​        按照实验要求，代码执行到MUL.D写结果如下图所示，可见此时L.D、MUL.D、SUB.D、ADD.D均已经执行完，且执行的周期与题目要求的延迟时间相同；由于指令DIV.D和指令MUL.D之间存在RAW依赖，所以还没有执行；虽然ADD.D与DIV.D之间存在WAR依赖，但是由于tomasuluo算法已经将之消除，所以ADD.D已经执行完毕。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image1.png" alt="">                             </p><p>观察保留站，发现由于SUB.D和ADD.D分别于第8、第11个周期写回，所以Add保留站均为空；由于刚好执行到Mul.D写回，Mult1的busy刚刚变为No；由于Div.D还在等待Mul.D写入F0的数据，Mult2仍然处于busy状态，其中Vj=M5即Mul.D刚刚写入F0的值，而Vk=M1即此前L.D写入F6的值（不过现在F6中的值已经被ADD.D覆盖）。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image2.png" alt=""> </p><p>观察Load部件，由于两个L.D指令分别于第4、第5个周期写回，所以Load部件均为No Busy。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image3.png" alt=""> </p><p>观察寄存器，发现F0的值刚刚被修改为M5，而F10的值仍然为空。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image4.png" alt="">  </p><h2 id="执行到第3个周期"><a href="#执行到第3个周期" class="headerlink" title="执行到第3个周期"></a>执行到第3个周期</h2><p>按照实验要求执行到第3个周期，可以观察到由于L.D的延迟时间为2个周期，所以第1条L.D指令刚好执行完，还没有写回；第2条L.D指令还在执行；MUL.D指令被流出。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image5.png" alt="">    </p><p>观察保留站可以发现此时Mult1已经处于Busy的状态，OP字段指明操作，Vk由于不存依赖已经被读取，而由于存在RAW依赖Vj并没有值而Qj为Load2表示等待Load2的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image6.png" alt=""> </p><p>观察Load部件，由于Load1已经写回，所以取得了值即将R2的值加上24作为地址对应的内存单元的值，而Load2刚刚计算出地址，还没有取得对应内存单元的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image7.png" alt=""> </p><p>观察寄存器，可以发现F0、F2、F6只是记录了对应的Qi，还没有取得对应的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image8.png" alt="">    </p><h2 id="执行到第13个周期"><a href="#执行到第13个周期" class="headerlink" title="执行到第13个周期"></a>执行到第13个周期</h2><p> 按照实验要求再执行10个周期到第13个周期，可以发现两个L.D指令已经写回；ADD.D指令由于和SUB.D指令存在RAW依赖所以从第9个开始执行并于第11个周期写回；MUL.D指令在第二个L.D指令写回后开始执行，由于延时为10个周期所以还没有执行完；DIV.D指令由于和MUL.D指令存在RAW依赖，所以还在等待。从中我们可以看出tomasuluo算法对于WAW、WAR依赖的消除，从而提高了程序的并发度与执行效率。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image9.png" alt=""> </p><p>观察保留站，由于Mult1的Vk不存在依赖，所以已经获得寄存器F4的值，而Vj为M2即Load2放到寄存器F2的值；由于Mult2依赖Mult1的输出，所以其Vj是空缺的，Qj记录了它正在等待Mult1。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image10.png" alt=""> </p><p>观察Load部件，由于两个L.D指令分别于第4、第5个周期写回，所以Load部件均为No Busy。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image11.png" alt=""> </p><p>和执行到第3个周期不同，此时F2、F6、F8已经有了计算写入的值M2、M4、M3，而F0和F10仍然在等待来自Mult1和Mult2的信号以取得对应的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image12.png" alt=""> </p><h1 id="执行自己编写的程序"><a href="#执行自己编写的程序" class="headerlink" title="执行自己编写的程序"></a>执行自己编写的程序</h1><p>假设浮点功能部件的延迟时间为加减法3个时钟周期，乘法8个时钟周期，除法40个时钟周期。自己编写一段程序，重复上述的工作。</p><p>我编写的程序为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L.D      F2, 24(R0)</span><br><span class="line">L.D      F4, 12(R1)</span><br><span class="line">ADD.D  F2, F4, F6</span><br><span class="line">MUL.D   F0, F4, F6</span><br><span class="line">SUB.D    F8, F0, F2</span><br><span class="line">DIV.D      F10, F8, F0</span><br></pre></td></tr></table></figure><h2 id="执行到第3个周期-1"><a href="#执行到第3个周期-1" class="headerlink" title="执行到第3个周期"></a>执行到第3个周期</h2><p>按照实验要求执行到第3个周期，可以观察到由于L.D的延迟时间为2个周期，所以第1条L.D指令刚好执行完，还没有写回；第2条L.D指令还在执行；ADD.D指令被流出。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image13.png" alt=""> </p><p>观察保留站可以发现此时Add1已经处于Busy的状态，OP字段指明操作，Vk由于不存依赖已经被读取，而由于存在RAW依赖Vj并没有值而Qj为Load2表示等待Load2的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image14.png" alt=""> </p><p>观察Load部件，由于Load1已经写回，所以取得了值即将R0的值加上24作为地址对应的内存单元的值，而Load2刚刚计算出地址，还没有取得对应内存单元的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image15.png" alt=""> </p><p>观察寄存器，可以发现F2、F4只是记录了对应的Qi，还没有取得对应的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image16.png" alt=""> </p><h2 id="执行到第13个周期-1"><a href="#执行到第13个周期-1" class="headerlink" title="执行到第13个周期"></a>执行到第13个周期</h2><p>按照实验要求再执行10个周期到第13个周期，可以发现两个L.D指令已经写回；<br>指令ADD.D和指令MUL.D均均和第2条L.D存在RAW依赖所以均在第6个周期开始执行。由于ADD的延迟为3个周期，所以它在第8个周期结束时执行完并于第9个周期被写回；而MUL.D的延迟为8个周期所以恰好执行完，还没有写回。由于指令SUB.D和指令DIV.D和MUL.D均存在RAW依赖，所以均还没有执行。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image17.png" alt=""> </p><p>​        观察保留站可以发现，由于ADD.D已经写回，所以Add1的Busy变为No，而指令SUB.D即Add2在本周期周到了来自F2即Add1的写回值，所以Vk变为了M2，Qj为Mult1表示在等待Mult1即指令MULT.D的值。而Mult2中的指令DIV.D与指令SUB.D和指令MUL.D均存在RAW依赖，所以其Vj和Vk均为空，Qj为Add2而Qk为Mult1。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image18.png" alt=""> </p><p>观察Load部件，由于两个L.D指令分别于第4、第5个周期写回，所以Load部件均为No Busy。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image19.png" alt=""> </p><p>和执行到第3个周期不同，此时F2、F4已经有了计算写入的值M2、M1，而F0、F8和F10仍然在等待来自Mult1、Add2和Mult2的信号以取得对应的值。</p><p><img src="/2018/05/16/《计算机体系结构》实验5-tomasuluo算法/image20.png" alt=""> </p><h1 id="心得体会​"><a href="#心得体会​" class="headerlink" title="心得体会​"></a>心得体会​</h1><p>​        解决WAW和WAR冒险主要依靠寄存器重命名实现，因为这两种冒险本质上并没有数据的依赖，仅仅是因为选择了同一个寄存器。而tomasuluo算法将同一名字的寄存器映射到不同的保留站当中，当保留站满的时候就不流出指令，于是从根本上杜绝了冒险的可能。</p><p>解决RAW冒险主要通过广播总线实现的，即一方面在广播信号中加入信号的来源（比如Add1、Add2、Add3、Mult1、Mult2等等），另一方面需要读的组件不停地接受总线的广播信息直到来源地址与期待的相同，由于广播信息由写回操作产生，得不到信息就不执行，由此避免了RAW冒险。</p>]]></content>
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-tex中的数学公式</title>
      <link href="/2018/05/13/%E7%AC%94%E8%AE%B0-tex%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>因为要写markdown和论文，就初步学了一点，重点是参考资料：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C_&#123;2m&#125;^n \times \frac&#123;a&#125;&#123;b&#125; \cdot</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">C_{2m}^n \times \frac{a}{b} \cdot m</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\sqrt&#123;2&#125; \neq \sqrt[3]&#123;2&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\sqrt{2} \neq \sqrt[3]{2}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\sum_&#123;n=1&#125;^&#123;4&#125;&#123;a_n&#125; \bmod n \not\in N \</span><br><span class="line">\prod_&#123;i=1&#125;^&#123;4&#125;&#123;b_i&#125; \</span><br><span class="line">\int_&#123;0&#125;^&#123;1&#125;&#123;sin(x)&#125; dx \</span><br><span class="line">\lim_&#123;x \rightarrow \infty&#125;&#123;f(x)&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\sum_{n=1}^{4}{a_n} \bmod n \not\in N \\ \prod_{i=1}^{4}{b_i} \\\int_{0}^{1}{sin(x)} dx \\\lim_{x \rightarrow \infty}{f(x)}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% 加\begin&#123;equation&#125; \end&#123;equation&#125;会自动编号</span><br><span class="line">\left  &#123;  \</span><br><span class="line">    \begin&#123;array&#125; &#123;lr&#125; </span><br><span class="line">    x=\cos( \dfrac&#123;3&#125;&#123;2&#125; t),                 \\  </span><br><span class="line">    y=s,                                     &amp; 0\leq s\leq L,|t|\leq1.  \\ </span><br><span class="line">    z=t \sin(3\pi t),</span><br><span class="line">   \end&#123;array&#125;  </span><br><span class="line">\right.</span><br><span class="line">% emmm这是一个大括号公式，但是markdown显示有问题</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125; </span><br><span class="line">0 &amp; \cdots  &amp; 1 \\</span><br><span class="line">\vdots &amp;   \ddots  &amp; 1       \\</span><br><span class="line">1 &amp; 0 &amp; 1</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">% emmmm这是一个矩阵</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\vec&#123;ab&#125; \   \overrightarrow&#123;AB&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\vec{ab} \   \overrightarrow{AB}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\because \space \therefore \space \exists \space \forall</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\because \space \therefore \space \exists \space \forall</script><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]  tex数学公式和字符表示方法 <code>最基础</code></p><p><a href="https://blog.csdn.net/u014595019/article/details/51319344" target="_blank" rel="noopener">https://blog.csdn.net/u014595019/article/details/51319344</a></p><p>[2] 怎样用LaTeX优雅地打印数学的一切</p><p><a href="https://www.jianshu.com/p/f5d475d6904e" target="_blank" rel="noopener">https://www.jianshu.com/p/f5d475d6904e</a></p><p>[3] Latex大括号及多行公式</p><p><a href="https://blog.csdn.net/lemolemac/article/details/9057471" target="_blank" rel="noopener">https://blog.csdn.net/lemolemac/article/details/9057471</a></p><p>[4] LaTex排版技巧：[5]如何输入矩阵</p><p><a href="https://jingyan.baidu.com/article/f3e34a128c53aef5ea653542.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/f3e34a128c53aef5ea653542.html</a></p><p>[5] LaTeX：公式及编号</p><p><a href="https://blog.csdn.net/garfielder007/article/details/51584396" target="_blank" rel="noopener">https://blog.csdn.net/garfielder007/article/details/51584396</a></p><p>[6] 常用数学符号的 LaTeX 表示方法 <code>附符号表</code></p><p><a href="http://www.mohu.org/info/symbols/symbols.htm" target="_blank" rel="noopener">http://www.mohu.org/info/symbols/symbols.htm</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>朝花夕拾——遗传算法入门</title>
      <link href="/2018/05/12/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>遗传算法（Genetic  Algorithm）是受生物净化学说和遗传学说的启发发展起来的，生物在进化的过程中不断繁殖、生存竞争、适者生存、遗传和变异。可以如下类比：</p><p>生物的遗传类比为算法中的分离规律、自由规律</p><p>生物的变异类比为算法中的基因重组、基因突变、染色体变异 </p><h2 id="研究对象"><a href="#研究对象" class="headerlink" title="研究对象"></a>研究对象</h2><p>各种功能非线性、多变量、多目标、复杂的自适应体用问题</p><h2 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h2><ul><li>智能式搜索：依据适应度（目标函数）进行智能搜索</li><li>渐进式优化：利用复制、交换、突变等操作，使得下一代结果有优于上一代的趋势</li><li>全局最优解：采用交换和突变操作产生新个体，使得搜索得到的优化结果逼近全局最优解</li><li>黑箱式结构：根据问题的特征进行编码（输入）和确定适应度（输出），只考虑输入输出关系，并不深究该关系的原因</li><li>通用性强：不要求明确的数学表达式，只需要一些简单的原则要求，可以应用于解决离散问题、函数关系不明确的复杂问题。</li><li>并行式运算：每次迭代计算都是对群体中的所有个体同时进行运算，搜索速度快</li></ul><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><ul><li><p>求解Michalewicz Function </p><script type="math/tex; mode=display">f(x,y) = 21.5 + xsin{4\pi x} + ysin{20\pi y}</script></li><li><p>建筑学桁架结构优化问题</p></li></ul><h2 id="发展简史"><a href="#发展简史" class="headerlink" title="发展简史"></a>发展简史</h2><ul><li>萌芽期：50年代后期到70年代中期</li><li>成长期：70年代中期到80年代末期</li><li>发展期：90年代</li></ul><h2 id="遗传算法和遗传规划特别有效的领域"><a href="#遗传算法和遗传规划特别有效的领域" class="headerlink" title="遗传算法和遗传规划特别有效的领域"></a>遗传算法和遗传规划特别有效的领域</h2><ul><li>结构优化设计</li><li>人工智能</li><li>复杂问题优化</li><li>复杂系统分析</li><li>综合应用</li></ul><h2 id="遗传算法和遗传规划自身需要完善的环节"><a href="#遗传算法和遗传规划自身需要完善的环节" class="headerlink" title="遗传算法和遗传规划自身需要完善的环节"></a>遗传算法和遗传规划自身需要完善的环节</h2><ul><li>编码技术和程序表达技术的改进</li><li>复制、交换、突变等遗传操作的改进</li><li>适应度的表达和计算的改进</li><li>寻求其他有效遗传算子，防止近源杂交、过早收敛</li><li>进一步讨论遗传算法和遗传规划的机理</li><li>开发遗传算法和遗传规划的商业软件</li></ul><h1 id="基本运算过程"><a href="#基本运算过程" class="headerlink" title="基本运算过程"></a>基本运算过程</h1><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol><li>编码，随机产生初始群体</li><li>个体评价（适应度验算）、选择、确定是否输出</li><li>随机交叉运算</li><li>随机变异运算</li><li>选择、复制、按照适应度大小排序</li><li>转向个体评价，开始新循环</li></ol><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>遗传算法的工作对象是字符串，对字符串的编码要求：</p><ul><li>字符串要反映所研究问题的性质</li><li>字符串的表达要便于计算机处理</li></ul><h2 id="适应度"><a href="#适应度" class="headerlink" title="适应度"></a>适应度</h2><p>在遗传算法中衡量个体优劣的尺度就是适应度，根据适应度的大小决定个体繁殖的数量或者决定其是否消亡，适应度是驱动遗传算法的动力。</p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>复制算子将优良个体在下一代予以繁殖，体现了“适者生存”的自然选择原则，个体被复制的数量是按照适应度的大小决定的，适应度大的复制得多，适应度小的复制的少，群体中个体总数保持不变。复制方式有：</p><ul><li>等差方式：收敛较快，常用于初选</li><li>轮盘方式：选择复制对象，直到满足所需要的个体数目，以防止过早的收敛，常用于精选，示意如下</li></ul><div class="table-container"><table><thead><tr><th>个体序号i</th><th>1 2 3 4  5 6 7 8 9 10</th></tr></thead><tbody><tr><td>适应度xi</td><td>8 2 17  7 2 12 11 7 3 7</td></tr><tr><td>适应度累计值Si</td><td>8 10 27  34 36 48 59 66 69 76</td></tr><tr><td>随机数R[0,Sn]</td><td>23 49  76 13 1 27 57</td></tr><tr><td>被选中的个体号i</td><td>3 7 10  3 1 3 7</td></tr></tbody></table></div><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>交换是遗传算法中产生新个体的主要手段，将两个个体的部分字符互相交换。</p><ul><li>执行交换的个体是随机选择的</li><li>交换的概率一般为50%到80%（通用值，可以根据需求改变）</li><li>通过某种方式，先选择交换个体，再选择被交换个体，同时判断不要自交、多交</li></ul><h2 id="变异"><a href="#变异" class="headerlink" title="变异"></a>变异</h2><p>变异是遗传算法中产生新个体的另一种方法，借鉴了生物学中的突变现象，将被选择的个体的部分字符进行补运算。</p><ul><li>变异对象的选择是随机的</li><li>变异的位数是随机的</li><li>变异起始位数是随机的</li><li>变异的概率可以根据需求改变</li></ul><h2 id="终止条件"><a href="#终止条件" class="headerlink" title="终止条件"></a>终止条件</h2><p>遗传算法是一种反复迭代的搜索算法，他通过多次进化逐渐逼近最优解。</p><ul><li>最常见的终止条件是迭代次数</li><li>当目标函数有最优目标值时，可采用控制偏差的方式实现终止</li><li>第三种终止方式是检查适应度的变化程度</li></ul><h2 id="模式理论"><a href="#模式理论" class="headerlink" title="模式理论"></a>模式理论</h2><p>详情参考<a href="http://wenku.baidu.com/link?url=0qGrc-t4903O4VtCCO93D853treODmX1fmsG1CndGYA7U44K0n-vD4srVptqjVgnGbG_85Cev79UG1_QwYrve7XjSfUwh71xeQkLtBNyuoC" target="_blank" rel="noopener">百度文库</a></p><h1 id="算子及参数技术"><a href="#算子及参数技术" class="headerlink" title="算子及参数技术"></a>算子及参数技术</h1><h2 id="遗传算子（GeneticOperators）"><a href="#遗传算子（GeneticOperators）" class="headerlink" title="遗传算子（GeneticOperators）"></a>遗传算子（GeneticOperators）</h2><ul><li>选择算子（Selection     Operator）</li><li>交叉算子（Crossover     Operator）</li><li>复制算子（reproduction     Operator）</li><li>变异算子（Mutation     Operator）</li><li>重排序算子（Reordering     Operator）</li><li>倒序算子（Inversion     Operator）</li><li>生态算子（Niche     Operator）</li><li>显性算子（Dominance     Operator）</li></ul><h2 id="参数技术"><a href="#参数技术" class="headerlink" title="参数技术"></a>参数技术</h2><ul><li>编码（Coding）&amp;解码（Decoding）</li><li>适应度函数（Fitness     Function）&amp;评估（Evaluation）</li><li>选择（Selection）&amp;复制（Reproduction）</li><li>交换（Crossover）</li><li>变异（Mutation）</li><li>其他算子（操作）</li></ul><h2 id="编码-amp-解码"><a href="#编码-amp-解码" class="headerlink" title="编码&amp;解码"></a>编码&amp;解码</h2><h3 id="编码原则"><a href="#编码原则" class="headerlink" title="编码原则"></a>编码原则</h3><p>原则一：有意义积木块编码原则</p><p>   应使用能易于产生与所求问题相关的、且具有低阶、短定义长度模式的编码方案。</p><p>原则二：最小字符集编码原则</p><p>   应使用能使问题得到自然表示或描述的具有最小编码字符集的编码方案。</p><h3 id="编码方法"><a href="#编码方法" class="headerlink" title="编码方法"></a>编码方法</h3><p>编码在各个阶段也是可以变的。</p><p><strong>【十进制码（Decimal Code）】</strong></p><ul><li>直接用十进制数编码，使用较少。</li><li>优点：无需解码</li><li>缺点：突变的可能性太多，有9种（变异是9种补运算，即1可以变成2—9和0；个体选择是随机的，个体的起始位是随机的，个体变异的位数是随机的，变异成什么东西，补运算后是什么东西是随机的等四种随机性，而二进制编码只有三种随机性）；交换较粗略（交换变化很大，初选时可以用，但是交换很多次后就不可以用），在多次循环后收敛太慢。【适用于变量多，数字大，初选阶段】</li></ul><p><strong>【二进制码（Binary Code）】</strong></p><ul><li>缺点：需要解码，增大了运算量。</li><li>优点：突变时取反即可，唯一确定；交换时可精确变化，在多代循环后收敛速度较快。｛在突变的时候唯一确定（补运算），交换比十进制是最精确的，多代循环后收敛速度快。用在变量少，精选阶段，但是解码需要大量运算。｝</li></ul><ul><li>由于符号位和小数点位的存在，使用由十进制转化而来的直接二进制码，在交换和变异的环节中容易出现问题，故使用间接二进制码，每一个二进制码均为正整数。间接码的位数公式：<script type="math/tex; mode=display">2^m < (U_{max} - U_{min})/d <= x^{m+1}</script></li></ul><p>​    其中d为问题的解的精确度，定义域为[Umin, Umax]，则码的位数为m+1。</p><p>​    间接码的解码公式：</p><script type="math/tex; mode=display">x=U_{min} + (U_{max}-U_{min}) / (2^m-1) * \sum_{i=1}^{m}{b_i * 2 ^i-1}</script><p><strong>【格雷码（Gray Code）】</strong></p><ul><li>增强遗传算法的局部搜索能力，便于对连续函数进行局部空间搜索。使用非常广泛。解码时，先将格雷码转化成二进制码，再将二进制码转化为十进制真实数；或直接将格雷码转化为十进制真实数。</li></ul><ul><li>二进制码转换为格雷码</li></ul><script type="math/tex; mode=display">g_1 = b_1</script><script type="math/tex; mode=display">g_i = b_i -1 \oplus b_i</script><ul><li><p>格雷码转换为二进制码</p><script type="math/tex; mode=display">b_1 = g_1</script><script type="math/tex; mode=display">b_i = b_i -1 \oplus g_i</script></li></ul><p><strong>【浮点数编码（Floating-point Code）】</strong></p><p><strong>【符号编码（CharacterCode）】</strong></p><p>个体染色体编码串中的基因值取自一个无数值含义、而只有代码含义的符号集。常用于桥梁、机器人等的设计。</p><p><strong>【多参数级联编码（United Multiparameter Encoding）】</strong></p><p>将各个参数分别编码，然后将它们按照一定的顺序连接在一起的编码方法。</p><p><strong>【多参数交叉编码（Multiparameter Crossover Code）】</strong></p><p>将各个参量分别编码，然后将它们起主要作用的码集中在一起，并按一定的顺序连接的编码方法，防止操作的时候集中于某一个变量。【比如相同的位数放到一起】</p><h1 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h1><p>一下实现了利用遗传算法求解函数</p><script type="math/tex; mode=display">f(x) = x(4-x)</script><p>的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Getmaximum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> codingBit;</span><br><span class="line"><span class="keyword">private</span> String[] sample;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfSample;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfReproduction;<span class="comment">//每轮交换中交换对数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfLocation;<span class="comment">//每对交换中交换的位数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberofMutation;<span class="comment">//每轮变异种变异个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfDelete;<span class="comment">//每轮评估中淘汰的个数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> HashMap&lt;Integer, String&gt; CodingDictionary1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> HashMap&lt;String, Integer&gt; CodingDictionary2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*(<span class="number">4</span>-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBinaryString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String string = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; codingBit; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">string = <span class="string">'1'</span> + string;</span><br><span class="line">i /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">string = <span class="string">'0'</span> + string;</span><br><span class="line">i /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateDictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.pow(<span class="number">2</span>, codingBit); i++) &#123;</span><br><span class="line">CodingDictionary1.put(i, getBinaryString(i));</span><br><span class="line">CodingDictionary2.put(getBinaryString(i), i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateFirstGeneration</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">sample = <span class="keyword">new</span> String[numberOfSample];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length; i++) &#123;</span><br><span class="line">sample[i] = CodingDictionary1.get( (<span class="keyword">int</span>) (Math.random()*CodingDictionary1.size()) );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reproduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfReproduction; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>) (Math.random() * sample.length);</span><br><span class="line"><span class="keyword">int</span> n = (<span class="keyword">int</span>) (Math.random() * sample.length);</span><br><span class="line"><span class="keyword">char</span>[] m_s = sample[m].toCharArray();</span><br><span class="line"><span class="keyword">char</span>[] n_s = sample[n].toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfLocation; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> location = (<span class="keyword">int</span>) (Math.random() * codingBit);</span><br><span class="line"><span class="keyword">char</span> temp = n_s[location];</span><br><span class="line">n_s[location] = m_s[location];</span><br><span class="line">m_s[location] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sample[m] = <span class="keyword">new</span> String(m_s);</span><br><span class="line">sample[n] = <span class="keyword">new</span> String(n_s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mutation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberofMutation; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>) (Math.random() * sample.length);</span><br><span class="line"><span class="keyword">char</span>[] m_s = sample[m].toCharArray();</span><br><span class="line"><span class="keyword">int</span> location = (<span class="keyword">int</span>)(Math.random() * codingBit);</span><br><span class="line"><span class="keyword">if</span> (m_s[location] == <span class="number">0</span>) &#123;</span><br><span class="line">m_s[location] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m_s[location] == <span class="number">1</span>) &#123;</span><br><span class="line">m_s[location] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sample[m] = <span class="keyword">new</span> String(m_s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Selection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; sample.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> ( f(CodingDictionary2.get(sample[i]).intValue()) &lt; f(CodingDictionary2.get(sample[j]).intValue() )) &#123;</span><br><span class="line">String temp = sample[i];</span><br><span class="line">sample[i] = sample[j];</span><br><span class="line">sample[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfDelete; i++) &#123;</span><br><span class="line">sample[sample.length - i - <span class="number">1</span>] = sample[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sample.length; i++) &#123;</span><br><span class="line">System.out.println(CodingDictionary2.get(sample[i]));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Getmaximum</span><span class="params">(<span class="keyword">int</span> codingBit, <span class="keyword">int</span> numberOfRandomNumbers, <span class="keyword">int</span> numberOfReproduction, <span class="keyword">int</span> numberOfLocation,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> numberofMutation, <span class="keyword">int</span> numberOfDelete)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.codingBit = codingBit;</span><br><span class="line"><span class="keyword">this</span>.numberOfSample = numberOfRandomNumbers;</span><br><span class="line"><span class="keyword">this</span>.numberOfReproduction = numberOfReproduction;</span><br><span class="line"><span class="keyword">this</span>.numberOfLocation = numberOfLocation;</span><br><span class="line"><span class="keyword">this</span>.numberofMutation = numberofMutation;</span><br><span class="line"><span class="keyword">this</span>.numberOfDelete = numberOfDelete;</span><br><span class="line">CodingDictionary1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">CodingDictionary2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Getmaximum getmaximum = <span class="keyword">new</span> Getmaximum(<span class="number">5</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">getmaximum.generateDictionary();</span><br><span class="line"><span class="comment">//System.out.println(getmaximum.CodingDictionary1);</span></span><br><span class="line"><span class="comment">//System.out.println(getmaximum.CodingDictionary2);</span></span><br><span class="line">getmaximum.generateFirstGeneration(<span class="number">0</span>, (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, getmaximum.codingBit));</span><br><span class="line">getmaximum.print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( i &lt; <span class="number">60</span>) &#123;</span><br><span class="line">getmaximum.reproduction();</span><br><span class="line"><span class="comment">//getmaximum.print();</span></span><br><span class="line">getmaximum.Mutation();</span><br><span class="line"><span class="comment">//getmaximum.print();</span></span><br><span class="line">getmaximum.Selection();</span><br><span class="line">getmaximum.print();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="python实现代码"><a href="#python实现代码" class="headerlink" title="python实现代码"></a>python实现代码</h1><h2 id="单变量"><a href="#单变量" class="headerlink" title="单变量"></a>单变量</h2><p>求一个比较复杂的函数</p><script type="math/tex; mode=display">f(x)=(x - 30)  (x - 20)  (x - 15) (x - 10)</script><p>的最小值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    len_of_code = <span class="number">10</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">20</span></span><br><span class="line">    num_of_select = <span class="number">3</span></span><br><span class="line">    num_of_selected = <span class="number">2</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">2</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.5</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">3</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (x - <span class="number">30</span>) * (x - <span class="number">20</span>) * (x - <span class="number">15</span>) * (x - <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].rjust(self.len_of_code, <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].rjust(self.len_of_code - <span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="comment"># random.seed(1)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            self.sample_list.append(int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code))</span><br><span class="line">        print(<span class="number">0</span>, self.sample_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.f(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.f(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.f(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        <span class="comment"># print(dict_value_to_int)</span></span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) == self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line">        <span class="comment"># print(self.sample_list)</span></span><br><span class="line">        print(len(self.sample_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="comment"># random.seed(1)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="comment"># print(self.sample_list[i], code, bit)</span></span><br><span class="line">                    <span class="keyword">if</span> code[bit] == <span class="string">'1'</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line">        <span class="comment"># print(self.sample_list)</span></span><br><span class="line">        print(len(self.sample_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="comment"># random.seed(1)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                <span class="comment"># print(code_a, code_b, bit)</span></span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line">        <span class="comment"># print(self.sample_list)</span></span><br><span class="line">        <span class="comment"># print(len(self.sample_list))</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">300</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            print(self.num_of_iteration, self.sample_list)</span><br><span class="line">            <span class="comment"># if len(set(self.sample_list)) == 1:</span></span><br><span class="line">            <span class="comment">#     break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">x = np.linspace(<span class="number">5</span>, <span class="number">35</span>, <span class="number">1000</span>)</span><br><span class="line">y = g.f(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">point_x = g.sample_list[<span class="number">0</span>]</span><br><span class="line">plt.scatter(point_x, g.f(point_x))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/1.png" alt=""></p><h2 id="双变量"><a href="#双变量" class="headerlink" title="双变量"></a>双变量</h2><p>在单变量的基础上改进，求函数</p><script type="math/tex; mode=display">f(x,y)=x sin(y) + ysin(x)</script><p>的最值，并与枚举结果比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入双变量</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    len_of_code = <span class="number">22</span></span><br><span class="line">    num_of_var = <span class="number">2</span></span><br><span class="line">    len_of_code_for_per_var = int(len_of_code / num_of_var)</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">20</span></span><br><span class="line">    num_of_select = <span class="number">3</span></span><br><span class="line">    num_of_selected = <span class="number">2</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.2</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">3</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.5</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">3</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="comment"># return (x - 1) ** 2 + (y - 2) ** 2</span></span><br><span class="line">        x = x * self.accuracy</span><br><span class="line">        y = y * self.accuracy</span><br><span class="line">        <span class="keyword">return</span> x * math.sin(y) + y * math.sin(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].rjust(self.len_of_code_for_per_var, <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].rjust(self.len_of_code_for_per_var - <span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        x, y = num</span><br><span class="line">        <span class="keyword">return</span> self.get_code_by_int_for_per_var(x) + self.get_code_by_int_for_per_var(y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_int_by_code_for_per_var(str[:self.len_of_code_for_per_var]), \</span><br><span class="line">               self.get_int_by_code_for_per_var(str[self.len_of_code_for_per_var:])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            x = int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var)</span><br><span class="line">            y = int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var)</span><br><span class="line">            self.sample_list.append((x, y))</span><br><span class="line">        print(self.num_of_iteration, <span class="string">'iteration: '</span>,</span><br><span class="line">              [(i * self.accuracy, j * self.accuracy) <span class="keyword">for</span> i, j <span class="keyword">in</span> self.sample_list])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            x, y = sample</span><br><span class="line">            <span class="keyword">if</span> self.f(x, y) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.f(x, y)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.f(x, y)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) == self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> code[bit] == <span class="string">'1'</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line">        print(len(self.sample_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">300</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            print(self.num_of_iteration, <span class="string">'iteration: '</span>,</span><br><span class="line">                  [(i * self.accuracy, j * self.accuracy) <span class="keyword">for</span> i, j <span class="keyword">in</span> self.sample_list])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">data = np.ndarray((<span class="number">1024</span> * <span class="number">2</span>, <span class="number">1024</span> * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">-1024</span>, <span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">-1024</span>, <span class="number">1024</span>):</span><br><span class="line">        data[i][j] = g.f(i, j)</span><br><span class="line"></span><br><span class="line">print(g.f(g.sample_list[<span class="number">0</span>][<span class="number">0</span>], g.sample_list[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line">print(data.min())</span><br></pre></td></tr></table></figure><p>经过300轮的循环后基本找到了最小值所在的点，和枚举得到的最小值相比几乎一致。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/2.png" alt=""></p><h2 id="任意变量"><a href="#任意变量" class="headerlink" title="任意变量"></a>任意变量</h2><p>在双变量的基础上改进，求函数</p><script type="math/tex; mode=display">f(x,y,z)=x sin(yz) + ysin(xz)+ zsin(xy)</script><p>的最值，并与枚举结果比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进一步改为任意变量</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = <span class="number">3</span></span><br><span class="line">    len_of_code_for_per_var = <span class="number">11</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">10</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">10</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以重载该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="comment"># return vars[0] * math.sin(vars[1]) + vars[1] * math.sin(vars[0])</span></span><br><span class="line">        <span class="keyword">return</span> vars[<span class="number">0</span>] * math.sin(vars[<span class="number">1</span>] * vars[<span class="number">2</span>]) + vars[<span class="number">1</span>] * math.sin(vars[<span class="number">2</span>] * vars[<span class="number">0</span>]) + vars[<span class="number">2</span>] * math.sin(</span><br><span class="line">            vars[<span class="number">1</span>] * vars[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].rjust(self.len_of_code_for_per_var, <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].rjust(self.len_of_code_for_per_var - <span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) == self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> code[bit] == <span class="string">'1'</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">1000</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">len_of_data = <span class="number">2</span> ** (g.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line">data = np.zeros((len_of_data * <span class="number">2</span>, len_of_data * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(-len_of_data, len_of_data):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">        lists = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">            lists.append(g.fit_func((i, i * j, i * k)))</span><br><span class="line">        data[i][j] = min(lists)</span><br><span class="line"></span><br><span class="line">print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br><span class="line">print(data.min())</span><br></pre></td></tr></table></figure><p>经过300轮的循环后基本找到了最小值所在的点，甚至比枚举得到的还要小。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/3.png" alt=""></p><h2 id="参数自适应"><a href="#参数自适应" class="headerlink" title="参数自适应"></a>参数自适应</h2><p>在上一个问题中遇到了不容易收敛的情况，改进如下，基本思路是加大群体稳定后的突变率以提高“天才”诞生的概率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改进参数自动优化</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = <span class="number">3</span></span><br><span class="line">    len_of_code_for_per_var = <span class="number">11</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">10</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">10</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># now_best_result = 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以重载该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="comment"># return vars[0] * math.sin(vars[1]) + vars[1] * math.sin(vars[0])</span></span><br><span class="line">        <span class="keyword">return</span> vars[<span class="number">0</span>] * math.sin(vars[<span class="number">1</span>] * vars[<span class="number">2</span>]) + vars[<span class="number">1</span>] * math.sin(vars[<span class="number">2</span>] * vars[<span class="number">0</span>]) + vars[<span class="number">2</span>] * math.sin(</span><br><span class="line">            vars[<span class="number">1</span>] * vars[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].zfill(self.len_of_code_for_per_var)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].zfill(self.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(int(str[<span class="number">1</span>:], <span class="number">2</span>) * <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># print(self.num_of_iteration)</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list[:<span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int((random.random() - <span class="number">0.5</span>) * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &gt;= self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># if code[bit] == '1':</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '0' + code[bit + 1:]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '1' + code[bit + 1:]</span></span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize_para</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.sample_list[<span class="number">0</span>] == self.sample_list[int(self.num_of_sample * <span class="number">0.95</span>)]:</span><br><span class="line">            self.probability_for_mutation = min(<span class="number">0.99</span>, self.probability_for_mutation * <span class="number">2</span>)</span><br><span class="line">            self.num_of_bit_for_mutation = max(int(random.random() * <span class="number">4</span>), int(self.num_of_bit_for_mutation * <span class="number">0.8</span>))</span><br><span class="line">            <span class="comment"># self.num_of_bit_for_mutation = max(int(self.len_of_code * 0.1), self.num_of_bit_for_mutation - 1)</span></span><br><span class="line">            <span class="comment"># self.num_of_select = max(3, self.num_of_select - 1)</span></span><br><span class="line">            <span class="comment"># self.num_of_selected = min(10, self.num_of_selected + 1)</span></span><br><span class="line">            <span class="comment"># self.probability_for_exchange = max(0.5, self.probability_for_exchange - 1)</span></span><br><span class="line">            <span class="comment"># self.num_of_bit_for_exchange = max(5, self.num_of_bit_for_exchange - 1)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># self.probability_for_mutation = max(0.01, self.probability_for_mutation / 2)</span></span><br><span class="line">            <span class="comment"># self.num_of_bit_for_mutation = min(int(self.len_of_code * 0.9), int(self.num_of_bit_for_mutation * 1.2))</span></span><br><span class="line">            self.probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">            self.num_of_bit_for_mutation = <span class="number">20</span></span><br><span class="line">            <span class="comment"># self.num_of_select = 5</span></span><br><span class="line">            <span class="comment"># self.num_of_selected = 10</span></span><br><span class="line">            <span class="comment"># self.probability_for_exchange = 0.9</span></span><br><span class="line">            <span class="comment"># self.num_of_bit_for_exchange = 15</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">500</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line">            self.optimize_para()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line"></span><br><span class="line">len_of_data = <span class="number">2</span> ** (g.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line">data = np.zeros((len_of_data * <span class="number">2</span>, len_of_data * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(-len_of_data, len_of_data):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">        lists = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">1</span>]:</span><br><span class="line">            lists.append(g.fit_func((i, i * j, i * k)))</span><br><span class="line">        data[i][j] = min(lists)</span><br><span class="line"></span><br><span class="line">print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br><span class="line">print(data.min())</span><br></pre></td></tr></table></figure><p>可以发现无论是在收敛速度还是收敛全局最优解的概率都有所提高。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/4.png" alt=""></p><h1 id="解决规划问题"><a href="#解决规划问题" class="headerlink" title="解决规划问题"></a>解决规划问题</h1><h2 id="简单线性规划问题"><a href="#简单线性规划问题" class="headerlink" title="简单线性规划问题"></a>简单线性规划问题</h2><p>初步尝试求解线性规划问题如代码中所示，并用Gurobi求解验证准确性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初步尝试求解线性规划问题</span></span><br><span class="line"><span class="comment"># max = x1 + 0.3*x2</span></span><br><span class="line"><span class="comment"># s.t</span></span><br><span class="line"><span class="comment">#   x1 + x2 = 35</span></span><br><span class="line"><span class="comment">#   5*x1 + x2 &gt;= 70</span></span><br><span class="line"><span class="comment">#   5*x1 + 4*x2 &gt;= 140</span></span><br><span class="line"><span class="comment">#   x2 &lt;= 25</span></span><br><span class="line"><span class="comment">#   x1, x2 &gt;= 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = <span class="number">2</span></span><br><span class="line">    len_of_code_for_per_var = <span class="number">6</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">1</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = <span class="number">10</span></span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = <span class="number">10</span></span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constrs</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> vars[<span class="number">0</span>] + vars[<span class="number">1</span>] != <span class="number">35</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * vars[<span class="number">0</span>] + vars[<span class="number">1</span>] &lt; <span class="number">70</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * vars[<span class="number">0</span>] + <span class="number">4</span> * vars[<span class="number">1</span>] &lt; <span class="number">140</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> vars[<span class="number">1</span>] &gt; <span class="number">25</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以重载该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objective_func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.constrs(vars):</span><br><span class="line">            <span class="keyword">return</span> vars[<span class="number">0</span>] + <span class="number">0.3</span> * vars[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> self.is_get_max:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> int(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.objective_func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].zfill(self.len_of_code_for_per_var)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].zfill(self.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># if str[0] == '0':</span></span><br><span class="line">        <span class="comment">#     return int(str, 2)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     return int(int(str[1:], 2) * -1)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list[:<span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int(random.random() * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &gt;= self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># if code[bit] == '1':</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '0' + code[bit + 1:]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '1' + code[bit + 1:]</span></span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize_para</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.sample_list[<span class="number">0</span>] == self.sample_list[int(self.num_of_sample * <span class="number">0.95</span>)]:</span><br><span class="line">            self.probability_for_mutation = min(<span class="number">0.99</span>, self.probability_for_mutation * <span class="number">2</span>)</span><br><span class="line">            self.num_of_bit_for_mutation = max(int(random.random() * <span class="number">4</span>), int(self.num_of_bit_for_mutation * <span class="number">0.8</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">            self.num_of_bit_for_mutation = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">300</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line">            self.optimize_para()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br><span class="line">print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gurobipy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># max = x1 + 0.3*x2</span></span><br><span class="line"><span class="comment"># s.t</span></span><br><span class="line"><span class="comment">#   x1 + x2 = 35</span></span><br><span class="line"><span class="comment">#   5*x1 + x2 &gt;= 70</span></span><br><span class="line"><span class="comment">#   5*x1 + 4*x2 &gt;= 140</span></span><br><span class="line"><span class="comment">#   x2 &lt;= 25</span></span><br><span class="line"><span class="comment">#   x1, x2 &gt;= 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">m = Model(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line">x1 = m.addVar(name=<span class="string">'x1'</span>, lb=<span class="number">0</span>)</span><br><span class="line">x2 = m.addVar(name=<span class="string">'x2'</span>, lb=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    x1 + x2 == <span class="number">35</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    <span class="number">5</span> * x1 + x2 &gt;= <span class="number">70</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    <span class="number">5</span> * x1 + <span class="number">4</span> * x2 &gt;= <span class="number">140</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.addConstr(</span><br><span class="line">    x2 &lt;= <span class="number">25</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">m.setObjective(x1 + <span class="number">0.3</span> * x2, GRB.MAXIMIZE)</span><br><span class="line"></span><br><span class="line">m.optimize()</span><br><span class="line"><span class="keyword">if</span> m.status == GRB.Status.OPTIMAL:</span><br><span class="line">    print(x1, x2)</span><br><span class="line">    print(m.getObjective().getValue())</span><br></pre></td></tr></table></figure><p>gurobi求解的结果为：</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/5.png" alt=""></p><p>而遗传算法在300轮（往往不需要）之后也得到了相同的解。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/6.png" alt=""></p><h2 id="稍微复杂的线性规划问题"><a href="#稍微复杂的线性规划问题" class="headerlink" title="稍微复杂的线性规划问题"></a>稍微复杂的线性规划问题</h2><p>和上一个部分相似，只不过问题变复杂了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 尝试求解比较复杂的线性规划问题</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key_list</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [key <span class="keyword">for</span> key <span class="keyword">in</span> dict.keys()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">min_nutrition = &#123;</span><br><span class="line">    <span class="string">'calories'</span>: <span class="number">1800</span>,</span><br><span class="line">    <span class="string">'protein'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'fat'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'sodium'</span>: <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line">categories = get_key_list(min_nutrition)</span><br><span class="line">cost = &#123;</span><br><span class="line">    <span class="string">'hamburger'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">2.89</span>,</span><br><span class="line">    <span class="string">'hot dog'</span>: <span class="number">2.50</span>,</span><br><span class="line">    <span class="string">'fries'</span>: <span class="number">1.89</span>,</span><br><span class="line">    <span class="string">'macaroni'</span>: <span class="number">2.09</span>,</span><br><span class="line">    <span class="string">'pizza'</span>: <span class="number">1.99</span>,</span><br><span class="line">    <span class="string">'salad'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'milk'</span>: <span class="number">0.89</span>,</span><br><span class="line">    <span class="string">'ice cream'</span>: <span class="number">1.59</span></span><br><span class="line">&#125;</span><br><span class="line">foods = get_key_list(cost)</span><br><span class="line">nutritionValues = &#123;</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'calories'</span>): <span class="number">410</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'protein'</span>): <span class="number">24</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'fat'</span>): <span class="number">26</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'sodium'</span>): <span class="number">730</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'calories'</span>): <span class="number">420</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'protein'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'sodium'</span>): <span class="number">1190</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'calories'</span>): <span class="number">560</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'protein'</span>): <span class="number">20</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'fat'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'sodium'</span>): <span class="number">1800</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'calories'</span>): <span class="number">380</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'protein'</span>): <span class="number">4</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'fat'</span>): <span class="number">19</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'sodium'</span>): <span class="number">270</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'protein'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'sodium'</span>): <span class="number">930</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'protein'</span>): <span class="number">15</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'sodium'</span>): <span class="number">820</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'protein'</span>): <span class="number">31</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'sodium'</span>): <span class="number">1230</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'calories'</span>): <span class="number">100</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'fat'</span>): <span class="number">2.5</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'sodium'</span>): <span class="number">125</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'calories'</span>): <span class="number">330</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'sodium'</span>): <span class="number">180</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_vars</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list, dict(zip(list, [<span class="number">0</span>, ] * len(list)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buy_key, buy = add_vars(foods)</span><br><span class="line">print(buy_key, buy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GA</span><span class="params">()</span>:</span></span><br><span class="line">    num_of_var = len(buy_key)</span><br><span class="line">    len_of_code_for_per_var = <span class="number">13</span></span><br><span class="line">    len_of_code = num_of_var * len_of_code_for_per_var</span><br><span class="line">    accuracy = <span class="number">0.01</span></span><br><span class="line">    sample_list = []</span><br><span class="line">    num_of_sample = <span class="number">100</span></span><br><span class="line">    num_of_select = <span class="number">5</span></span><br><span class="line">    num_of_selected = <span class="number">10</span></span><br><span class="line">    probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">    num_of_bit_for_mutation = int(len_of_code * <span class="number">0.3</span>)</span><br><span class="line">    probability_for_exchange = <span class="number">0.8</span></span><br><span class="line">    num_of_bit_for_exchange = int(len_of_code * <span class="number">0.6</span>)</span><br><span class="line">    num_of_iteration = <span class="number">0</span></span><br><span class="line">    is_get_max = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constrs</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> categories:</span><br><span class="line">            <span class="keyword">if</span> sum(vars[i] * nutritionValues[food, c] <span class="keyword">for</span> i, food <span class="keyword">in</span> enumerate(foods)) &lt; min_nutrition[c]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">objective_func</span><span class="params">(self, vars)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.constrs(vars):</span><br><span class="line">            <span class="keyword">return</span> sum(vars[i] * cost[food] <span class="keyword">for</span> i, food <span class="keyword">in</span> enumerate(foods))</span><br><span class="line">        <span class="keyword">elif</span> self.is_get_max:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(self, var_list)</span>:</span></span><br><span class="line">        vars = [var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> var_list]</span><br><span class="line">        self.num_of_var = len(var_list)</span><br><span class="line">        self.len_of_code_for_per_var = int(self.len_of_code / self.num_of_var)</span><br><span class="line">        <span class="keyword">return</span> self.objective_func(vars)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int_for_per_var</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> str(bin(x))[<span class="number">2</span>:].zfill(self.len_of_code_for_per_var)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'1'</span> + str(bin(x))[<span class="number">3</span>:].zfill(self.len_of_code_for_per_var - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_by_int</span><span class="params">(self, num_list)</span>:</span></span><br><span class="line">        ret_code = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> num_list:</span><br><span class="line">            ret_code = ret_code + self.get_code_by_int_for_per_var(num)</span><br><span class="line">        <span class="keyword">return</span> ret_code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code_for_per_var</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> int(str, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># if str[0] == '0':</span></span><br><span class="line">        <span class="comment">#     return int(str, 2)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     return int(int(str[1:], 2) * -1)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_by_code</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        ret_int_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">            ret_int_list.append(self.get_int_by_code_for_per_var(</span><br><span class="line">                str[self.len_of_code_for_per_var * i:self.len_of_code_for_per_var * (i + <span class="number">1</span>)]))</span><br><span class="line">        <span class="keyword">return</span> ret_int_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_iteration_and_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.num_of_iteration, end=<span class="string">' '</span>)</span><br><span class="line">        print(g.fit_func(g.sample_list[<span class="number">0</span>]))</span><br><span class="line">        print([[var * self.accuracy <span class="keyword">for</span> var <span class="keyword">in</span> sample] <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list[:<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产生第一代样本</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_first_generation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_of_sample):</span><br><span class="line">            var_list = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_var):</span><br><span class="line">                var_list.append(int(random.random() * <span class="number">2</span> ** self.len_of_code_for_per_var))</span><br><span class="line">            self.sample_list.append(var_list)</span><br><span class="line">        self.print_iteration_and_sample()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict_value_to_int = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> self.sample_list:</span><br><span class="line">            <span class="keyword">if</span> self.fit_func(sample) <span class="keyword">not</span> <span class="keyword">in</span> dict_value_to_int.keys():</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)] = [sample, ]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict_value_to_int[self.fit_func(sample)].append(sample)</span><br><span class="line"></span><br><span class="line">        sorted_value_list = sorted(dict_value_to_int.keys(), reverse=self.is_get_max)</span><br><span class="line">        new_sample_list = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> sorted_value_list:</span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &gt;= self.num_of_sample:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(new_sample_list) &lt; self.num_of_select * self.num_of_selected:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_selected):</span><br><span class="line">                    new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_sample_list.extend(list(dict_value_to_int[value]))</span><br><span class="line">        self.sample_list = new_sample_list[:self.num_of_sample]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变异</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.sample_list)):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; self.probability_for_mutation:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_mutation):</span><br><span class="line">                    bit = int(random.random() * self.len_of_code)</span><br><span class="line">                    code = self.get_code_by_int(self.sample_list[i])</span><br><span class="line">                    <span class="keyword">if</span> random.random() &lt; <span class="number">0.5</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'0'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        code = code[:bit] + <span class="string">'1'</span> + code[bit + <span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># if code[bit] == '1':</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '0' + code[bit + 1:]</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="comment">#     code = code[:bit] + '1' + code[bit + 1:]</span></span><br><span class="line">                    self.sample_list[i] = self.get_int_by_code(code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exchange</span><span class="params">(self)</span>:</span></span><br><span class="line">        random.seed(time.time())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(int(self.num_of_sample * self.probability_for_exchange)):</span><br><span class="line">            a_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">while</span> a_index == b_index:</span><br><span class="line">                b_index = int(random.random() * self.num_of_sample)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.num_of_bit_for_exchange):</span><br><span class="line">                bit = int(random.random() * self.len_of_code)</span><br><span class="line">                code_a = self.get_code_by_int(self.sample_list[a_index])</span><br><span class="line">                code_b = self.get_code_by_int(self.sample_list[b_index])</span><br><span class="line">                temp = code_a[bit]</span><br><span class="line">                code_a = code_a[:bit] + code_b[bit] + code_a[bit + <span class="number">1</span>:]</span><br><span class="line">                code_b = code_b[:bit] + temp + code_b[bit + <span class="number">1</span>:]</span><br><span class="line">                self.sample_list[a_index] = self.get_int_by_code(code_a)</span><br><span class="line">                self.sample_list[b_index] = self.get_int_by_code(code_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimize_para</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.sample_list[<span class="number">0</span>] == self.sample_list[int(self.num_of_sample * <span class="number">0.95</span>)]:</span><br><span class="line">            self.probability_for_mutation = min(<span class="number">0.99</span>, self.probability_for_mutation * <span class="number">2</span>)</span><br><span class="line">            self.num_of_bit_for_mutation = max(int(random.random() * int(self.len_of_code * <span class="number">0.3</span>)), int(self.num_of_bit_for_mutation * <span class="number">0.8</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.probability_for_mutation = <span class="number">0.1</span></span><br><span class="line">            self.num_of_bit_for_mutation = int(self.len_of_code * <span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_interation=<span class="number">1000</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.num_of_iteration &lt; max_interation:</span><br><span class="line">            self.mutation()</span><br><span class="line">            self.exchange()</span><br><span class="line">            self.select()</span><br><span class="line">            self.num_of_iteration = self.num_of_iteration + <span class="number">1</span></span><br><span class="line">            self.print_iteration_and_sample()</span><br><span class="line">            self.optimize_para()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = GA()</span><br><span class="line">g.generate_first_generation()</span><br><span class="line">g.run()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gurobipy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">categories, minNutrition = multidict(&#123;</span><br><span class="line">    <span class="string">'calories'</span>: <span class="number">1800</span>,</span><br><span class="line">    <span class="string">'protein'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'fat'</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'sodium'</span>: <span class="number">1000</span>&#125;)</span><br><span class="line"></span><br><span class="line">foods, cost = multidict(&#123;</span><br><span class="line">    <span class="string">'hamburger'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">2.89</span>,</span><br><span class="line">    <span class="string">'hot dog'</span>: <span class="number">2.50</span>,</span><br><span class="line">    <span class="string">'fries'</span>: <span class="number">1.89</span>,</span><br><span class="line">    <span class="string">'macaroni'</span>: <span class="number">2.09</span>,</span><br><span class="line">    <span class="string">'pizza'</span>: <span class="number">1.99</span>,</span><br><span class="line">    <span class="string">'salad'</span>: <span class="number">2.49</span>,</span><br><span class="line">    <span class="string">'milk'</span>: <span class="number">0.89</span>,</span><br><span class="line">    <span class="string">'ice cream'</span>: <span class="number">1.59</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nutrition values for the foods</span></span><br><span class="line">nutritionValues = &#123;</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'calories'</span>): <span class="number">410</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'protein'</span>): <span class="number">24</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'fat'</span>): <span class="number">26</span>,</span><br><span class="line">    (<span class="string">'hamburger'</span>, <span class="string">'sodium'</span>): <span class="number">730</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'calories'</span>): <span class="number">420</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'protein'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'chicken'</span>, <span class="string">'sodium'</span>): <span class="number">1190</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'calories'</span>): <span class="number">560</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'protein'</span>): <span class="number">20</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'fat'</span>): <span class="number">32</span>,</span><br><span class="line">    (<span class="string">'hot dog'</span>, <span class="string">'sodium'</span>): <span class="number">1800</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'calories'</span>): <span class="number">380</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'protein'</span>): <span class="number">4</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'fat'</span>): <span class="number">19</span>,</span><br><span class="line">    (<span class="string">'fries'</span>, <span class="string">'sodium'</span>): <span class="number">270</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'protein'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'macaroni'</span>, <span class="string">'sodium'</span>): <span class="number">930</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'protein'</span>): <span class="number">15</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'pizza'</span>, <span class="string">'sodium'</span>): <span class="number">820</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'calories'</span>): <span class="number">320</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'protein'</span>): <span class="number">31</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'fat'</span>): <span class="number">12</span>,</span><br><span class="line">    (<span class="string">'salad'</span>, <span class="string">'sodium'</span>): <span class="number">1230</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'calories'</span>): <span class="number">100</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'fat'</span>): <span class="number">2.5</span>,</span><br><span class="line">    (<span class="string">'milk'</span>, <span class="string">'sodium'</span>): <span class="number">125</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'calories'</span>): <span class="number">330</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'protein'</span>): <span class="number">8</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'fat'</span>): <span class="number">10</span>,</span><br><span class="line">    (<span class="string">'ice cream'</span>, <span class="string">'sodium'</span>): <span class="number">180</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model</span></span><br><span class="line">m = Model(<span class="string">"diet"</span>)</span><br><span class="line"></span><br><span class="line">buy = m.addVars(foods, name=<span class="string">"buy"</span>)</span><br><span class="line"></span><br><span class="line">m.setObjective(buy.prod(cost), GRB.MINIMIZE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nutrition constraints</span></span><br><span class="line">m.addConstrs(</span><br><span class="line">    (quicksum(nutritionValues[f, c] * buy[f] <span class="keyword">for</span> f <span class="keyword">in</span> foods) &gt;= minNutrition[c]</span><br><span class="line">     <span class="keyword">for</span> c <span class="keyword">in</span> categories), <span class="string">"_"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printSolution</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> m.status == GRB.Status.OPTIMAL:</span><br><span class="line">        print(<span class="string">'\nCost: %g'</span> % m.objVal)</span><br><span class="line">        print(<span class="string">'\nBuy:'</span>)</span><br><span class="line">        buyx = m.getAttr(<span class="string">'x'</span>, buy)</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> foods:</span><br><span class="line">            <span class="keyword">if</span> buy[f].x &gt; <span class="number">0.0001</span>:</span><br><span class="line">                print(<span class="string">'%s %g'</span> % (f, buyx[f]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'No solution'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m.optimize()</span><br><span class="line">printSolution()</span><br></pre></td></tr></table></figure><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/7.png" alt=""></p><p>在遗传算法1000轮之后，总体来说结果基本符合预期，精度还有值得提高的空间，速度也有很大的提高空间。</p><p><img src="/2018/05/12/朝花夕拾——遗传算法入门/8.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 遗传算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>朝花夕拾——《数据库系统原理》课程设计</title>
      <link href="/2018/05/12/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
      <content type="html"><![CDATA[<h1 id="系统效果"><a href="#系统效果" class="headerlink" title="系统效果"></a>系统效果</h1><p>最终实现网页端的图书管理系统，采用的框架为Windows + MySQL + Django + Python的组合。其中逻辑控制以及同数据库的交互由Python和Django提供的接口实现，用户界面网页使用html + CSS+ JavaScript的组合渲染完成。</p><p>一方面，为了方便图书馆管理员对图书进行入库、借阅、归还、查询等操作，同时也方便学生对图书信息和个人借阅信息的查询，对该系统进行了细致的设计。主要体现在：自动判定管理员与其他用户进而跳转到不同界面、美化用户界面、提供即时的搜索结果反馈、对一些项目的填写采用下拉框的方式、提供部分项目的模糊搜索、自动计算例如归还截止日期等信息等等。总体来说，功能完备，具有较好的用户体验。</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>本图书借阅管理系统，允许管理员和已注册用户使用。管理员具有较高权限，可以进行查询、插入和更新等操作，如图书入库、办理借书证、图书信息查询、用户信息查询、办理图书借阅归还，处理挂失等等；其他用户权限较低，可查询图书信息和本人的历史借阅信息。</p><h2 id="系统目标"><a href="#系统目标" class="headerlink" title="系统目标"></a>系统目标</h2><h3 id="目标概述"><a href="#目标概述" class="headerlink" title="目标概述"></a>目标概述</h3><p>（1）  对系统的用户身份进行认证，根据用户类别跳转到对应界面</p><p>（2）  图书入库</p><p>（3）  办理借书证</p><p>（4）  图书借阅和归还</p><p>（5）  查询图书和读者信息</p><p>（6）  维护图书和读者信息</p><p>（7）  逾期不还的处理</p><p>（8）  处理图书遗失和证件挂失</p><h3 id="系统包含信息"><a href="#系统包含信息" class="headerlink" title="系统包含信息"></a>系统包含信息</h3><p>（1）  图书管理员和读者的密码和身份</p><p>（2）  图书的信息，包括图书编号、书名、作者、出版社、单价、类别、入库时间、入库数量、借阅数量、遗失数量等等。其中，类别包括计算机、语文、数学、小说、英语、地理、物理、化学、政治、生物、历史等等</p><p>（3）  读者的信息，包括用户登录id、登录密码、姓名、性别、出日、级别、办证日期、联系电话、手机号码、证件是否丢失、电子邮箱等等。其中，不同级别会员的最长出借天数、最多借书次数、会费、逾期收费均不同</p><p>（4）  读者的借阅、归还、逾期和挂失信息</p><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><p>（1）  图书编号和读者登录id唯一</p><p>（2）  读者借阅的图书一定是系统中提供的图书</p><p>（3）  读者不能重复借阅同一本书</p><p>（4）  读者遗失的图书一定是本人借阅的图书</p><p>（5）  图书被借阅数量不能超过入库数量减去遗失数量</p><p>（6）  遗失图书数量不能超过图书入库数量</p><p>（7）  已挂失的借书证不能登录</p><p>（8）  最长结束天数和最多借书册数由会员级别决定</p><p>（9）  各种信息具有实际意义，例如数量均为非负整数、日期合法等等</p><h3 id="系统交互"><a href="#系统交互" class="headerlink" title="系统交互"></a>系统交互</h3><p>（1）  认证</p><p>验证用户身份，输入用户id和密码，随后的交互取决于用户的身份。</p><p>（2）  读者可进行如下交互</p><div class="table-container"><table><thead><tr><th>查询图书信息</th><th>按书名、图书类别、作者、出版社进行模糊查询，结果以列表的方式呈现</th></tr></thead><tbody><tr><td>查询借阅信息</td><td>按书名、图书编号模糊查询，列出该读者的借阅历史，可按是否逾期显示不同结果，结果以列表的方式呈现</td></tr></tbody></table></div><p>（3）  管理员可进行如下交互</p><div class="table-container"><table><thead><tr><th>查询图书信息</th><th>按书名、图书类别、作者、出版社进行模糊查询，结果以列表的方式呈现</th></tr></thead><tbody><tr><td>查询读者信息</td><td>按用户登录id和姓名进行模糊查询，结果以列表的方式呈现</td></tr><tr><td>图书入库</td><td>登记入库图书的各项信息，分配一个新的编号</td></tr><tr><td>办理借阅证</td><td>登记读者各项信息，用户登录id由用户决定，但不允许重复</td></tr><tr><td>图书借阅归还</td><td>不同级别读者最长借阅时间和最多借阅数量均不同</td></tr><tr><td>查询借阅信息</td><td>按书名、图书编号、读者登录id、读者姓名模糊查询，列出满足条件的借阅历史，可按是否逾期显示不同结果，结果以列表的方式呈现</td></tr><tr><td>挂失处理</td><td>包括借书证挂失和图示遗失处理，借书证挂失在挂失数据表中处理，图书遗失在借阅表和图书表中处理</td></tr></tbody></table></div><h2 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h2><h3 id="顶层数据流图"><a href="#顶层数据流图" class="headerlink" title="顶层数据流图"></a>顶层数据流图</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image3.png" alt=""></p><h3 id="0层数据流图"><a href="#0层数据流图" class="headerlink" title="0层数据流图"></a>0层数据流图</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image4.png" alt=""></p><h3 id="1层数据流图（借书）"><a href="#1层数据流图（借书）" class="headerlink" title="1层数据流图（借书）"></a>1层数据流图（借书）</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image5.png" alt=""></p><h3 id="1层数据流图（还书）"><a href="#1层数据流图（还书）" class="headerlink" title="1层数据流图（还书）"></a>1层数据流图（还书）</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image6.png" alt=""></p><h3 id="1层数据流图（查询）"><a href="#1层数据流图（查询）" class="headerlink" title="1层数据流图（查询）"></a>1层数据流图（查询）</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image7.png" alt=""></p><h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><h3 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h3><div class="table-container"><table><thead><tr><th><strong>数据项名</strong></th><th><strong>含义</strong></th><th><strong>类型</strong></th><th><strong>最大长度</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td><strong>读者登录id</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td>决定了要借阅的图书</td></tr><tr><td><strong>读者姓名</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>读者性别</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>出生日期</strong></td><td>读者相关</td><td>日期型</td><td></td><td></td></tr><tr><td><strong>电话</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>手机</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>会员级别</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td>决定了最长借阅天数和最多借阅册书</td></tr><tr><td><strong>办证日期</strong></td><td>读者相关</td><td>日期型</td><td></td><td></td></tr><tr><td><strong>电子邮箱</strong></td><td>读者相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>图书编号</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td>决定了要借阅的图书</td></tr><tr><td><strong>书名</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>作者</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>类别编号</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td>决定了图书类别</td></tr><tr><td><strong>单价</strong></td><td>图书相关</td><td>浮点型</td><td></td><td></td></tr><tr><td><strong>出版社</strong></td><td>图书相关</td><td>可变字符型</td><td>255</td><td></td></tr><tr><td><strong>入库日期</strong></td><td>图书相关</td><td>时间型</td><td></td><td></td></tr><tr><td><strong>入库数量</strong></td><td>图书相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>遗失数量</strong></td><td>图书相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>出借数量</strong></td><td>图书相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>出借日期</strong></td><td>借书相关</td><td>时间型</td><td></td><td></td></tr><tr><td><strong>是否遗失</strong></td><td>借书相关</td><td>布尔型</td><td></td><td></td></tr><tr><td><strong>归还时间</strong></td><td>借书相关</td><td>时间型</td><td></td><td>归还时间为1970年1月1日表示没有归还</td></tr><tr><td><strong>最长借书天数</strong></td><td>级别相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>最多借书册数</strong></td><td>级别相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>会费</strong></td><td>级别相关</td><td>整型</td><td></td><td></td></tr><tr><td><strong>挂失日期</strong></td><td>挂失相关</td><td>时间型</td><td></td></tr></tbody></table></div><h3 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h3><div class="table-container"><table><thead><tr><th>名 称</th><th><strong>含 义</strong></th><th><strong>组 成</strong></th></tr></thead><tbody><tr><td><strong>读者信息</strong></td><td>定义读者的基本信息</td><td>读者登录id、姓名、性别、生日、电话号、手机号、级别、办证日期、邮箱、是否丢失、余额</td></tr><tr><td><strong>图书信息</strong></td><td>定义图书的基本信息</td><td>图书编号、图书名称、作者、出版社、图书类别编号、价格、入库时间、入库数量、借出数量、丢失数量</td></tr><tr><td><strong>借阅信息</strong></td><td>定义读者的借阅信息</td><td>读者编号、图书编号、借书日期、归还日期、是否丢失</td></tr><tr><td><strong>会员级别</strong></td><td>反应读者不同的级别</td><td>级别名称、最长借书数、最多借书册数、会费</td></tr><tr><td><strong>图书类别</strong></td><td>反应图书的不同类型</td><td>类别编号、类别名称</td></tr><tr><td><strong>图书丢失</strong></td><td>反应图书丢失的状态</td><td>读者编号、图书编号、挂失时间</td></tr></tbody></table></div><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><div class="table-container"><table><thead><tr><th><strong>数据流</strong></th><th><strong>说明</strong></th><th><strong>来源</strong></th></tr></thead><tbody><tr><td><strong>图书信息查询</strong></td><td>根据条件进行组合查询</td><td>读者或管理员</td></tr><tr><td><strong>借阅信息查询</strong></td><td>进行图书借阅</td><td>管理员、书籍、查询结果</td></tr><tr><td><strong>借阅归还登记</strong></td><td>将借阅情况进行记录</td><td>借阅、归还图书信息</td></tr><tr><td><strong>读者信息查询</strong></td><td>列出读者个人信息</td><td>管理员</td></tr><tr><td><strong>借书证挂失</strong></td><td>读者挂失借书证</td><td>管理员</td></tr><tr><td><strong>借书证办理</strong></td><td>根据读者信息进行数据录入</td><td>管理员</td></tr></tbody></table></div><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><div class="table-container"><table><thead><tr><th><strong>处理过程</strong></th><th><strong>说 明</strong></th><th><strong>输 入</strong></th></tr></thead><tbody><tr><td><strong>图书借阅</strong></td><td>将读者借阅的信息进行登记</td><td>读者编号、图书编号</td></tr><tr><td><strong>图书归还</strong></td><td>读者借出的书籍进行归还操作</td><td>读者编号、图书编号</td></tr><tr><td><strong>图书遗失</strong></td><td>读者借阅图书丢失</td><td>读者编号、图书编号</td></tr><tr><td><strong>图书入库</strong></td><td>录入新书信息</td><td>图书信息</td></tr><tr><td><strong>借书证办理</strong></td><td>读者办理借书证</td><td>读者详细信息</td></tr><tr><td><strong>借书证挂失</strong></td><td>借书证丢失</td><td>读者编号</td></tr></tbody></table></div><h1 id="设计概要"><a href="#设计概要" class="headerlink" title="设计概要"></a>设计概要</h1><h2 id="系统ER图"><a href="#系统ER图" class="headerlink" title="系统ER图"></a>系统ER图</h2><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image8.png" alt=""></p><h2 id="系统功能设计"><a href="#系统功能设计" class="headerlink" title="系统功能设计"></a>系统功能设计</h2><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image9.png" alt=""></p><h1 id="程序系统结构"><a href="#程序系统结构" class="headerlink" title="程序系统结构"></a>程序系统结构</h1><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="数据库逻辑结构设计"><a href="#数据库逻辑结构设计" class="headerlink" title="数据库逻辑结构设计"></a>数据库逻辑结构设计</h3><p>由于概念设计的结果是ER图，而DBMS一般采用关系模型，因此数据库的逻辑设计过程就是将ER图转化为关系模式的过程。由于关系模型所具有的优点，逻辑设计可以充分运用关系数据库规范化理论，使设计过程形式化进行，设计结果是一组关系模式的定义。</p><div class="table-container"><table><thead><tr><th>读者</th><th>reader(reader_id,reader_name,sex,birthday,phone,mobile,  day,password,date_lastlogin,balance,is_loss,level,e_mail)</th></tr></thead><tbody><tr><td>图书</td><td>book(book_id,book_name,author,publisher,price,  date_in,num_in,num_out,numloss,category_id)</td></tr><tr><td>图书类别</td><td>boookcategory(category_id,category)</td></tr><tr><td>挂失记录</td><td>lossreport(book_id,reader_id,date_loss)</td></tr><tr><td>借阅</td><td>borrow(book_id,reader_id,  date_borrow,date_return,is_loss)</td></tr><tr><td>级别</td><td>memberlevel(level,  most_books_for_borrow,   most_days_for_borrow,  fee_for_one_year)</td></tr></tbody></table></div><h3 id="系统用表"><a href="#系统用表" class="headerlink" title="系统用表"></a>系统用表</h3><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image10.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image11.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image12.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image13.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image14.png" alt=""><br><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image15.png" alt=""></p><h2 id="数据库的连接"><a href="#数据库的连接" class="headerlink" title="数据库的连接"></a>数据库的连接</h2><p>由于Django框架对于MySQL支持很好，连接数据库只要在配置文件settings.py和模型文件model.py中加入相关信息即可，得到的结果如下图所示：</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image16.png" alt=""></p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image17.png" alt=""></p><p>命令行运行makemigrations和migrate后，其中我创建的表名称格式为client_*</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image18.png" alt=""></p><h2 id="程序文件结构"><a href="#程序文件结构" class="headerlink" title="程序文件结构"></a>程序文件结构</h2><p>最后，整个工程的目录即主要文件功能如下：</p><div class="table-container"><table><thead><tr><th>area.css, font.css, module.css, special.css</th><th>网页中用到的各种样式表</th></tr></thead><tbody><tr><td>background.jpg</td><td>背景图片</td></tr><tr><td>home.js, home_user.js</td><td>home.html和home_user.html两个文件用到的脚本文件，主要控制子网页的显示或显示以及部分动画</td></tr><tr><td>index.html</td><td>登录界面</td></tr><tr><td>home.html, home_user.html</td><td>管理员和用户的主页</td></tr><tr><td>book_loss.html, borrow_retutn.html  card_loss.html, card_build.html  not_return.html, not_return.html  table_search_book.html  table_search_reader.html</td><td>子网页，分别实现一个或多个操作</td></tr><tr><td>models.py</td><td>定义数据库结构的文件</td></tr><tr><td>views.py</td><td>完成URL响应以及对应逻辑操作的文件</td></tr><tr><td>settings.py</td><td>项目配置文件</td></tr><tr><td>urls.py</td><td>配置url与views.py中函数的对应关系</td></tr></tbody></table></div><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image19.png" alt=""></p><h1 id="系统详细设计与运行界面"><a href="#系统详细设计与运行界面" class="headerlink" title="系统详细设计与运行界面"></a>系统详细设计与运行界面</h1><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>用户输入用户名和密码，后台自动判别身份。登录失败，并不会发生跳转。</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image20.png" alt=""></p><p>登录界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image21.png" alt=""></p><p>管理员主页</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image22.png" alt=""></p><p>用户主页</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image23.png" alt=""></p><h2 id="读者登录"><a href="#读者登录" class="headerlink" title="读者登录"></a>读者登录</h2><p>读者登陆成功后，可以查询个人借阅历史或查询图书信息。信息的查询均为模糊查询，所有的查询在每次输入后都有即时的反馈，查询结果用表格展示，具体如下。</p><h3 id="查询个人借阅历史"><a href="#查询个人借阅历史" class="headerlink" title="查询个人借阅历史"></a>查询个人借阅历史</h3><p>查询界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image24.png" alt=""></p><p>查询子页面代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image25.png" alt=""></p><p>查询逻辑响应代码，注意到由于Cookie的使用，用户并不需要另外输入用户信息</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image26.png" alt=""></p><h3 id="查询图书信息"><a href="#查询图书信息" class="headerlink" title="查询图书信息"></a>查询图书信息</h3><p>查询界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image27.png" alt=""></p><p>查询子页面代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image28.png" alt=""></p><p>查询逻辑响应代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image29.png" alt=""></p><h2 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h2><p>管理员登录成功后，可以办理借还图书任务，办理图书入库任务，可以查询图书信息、读者信息和所有读者的借阅历史，办理图书遗失、证件遗失、证件办新任务。具体情况如家所示。</p><h3 id="图书借还"><a href="#图书借还" class="headerlink" title="图书借还"></a>图书借还</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image30.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image31.png" alt=""></p><p>逻辑控制代码，其中针对不同的情况，例如没有剩余的数、结束量已经达到最大、用户重复借书等等，都有相应的控制，出现不正常的情况会有弹窗提示</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image32.png" alt=""></p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image33.png" alt=""></p><h3 id="图书入库"><a href="#图书入库" class="headerlink" title="图书入库"></a>图书入库</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image34.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image35.png" alt=""></p><p>逻辑控制代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image36.png" alt=""></p><h3 id="图书信息查询"><a href="#图书信息查询" class="headerlink" title="图书信息查询"></a>图书信息查询</h3><p>和普通用户后所使用的完全一样，不做赘述</p><h3 id="用户信息查询"><a href="#用户信息查询" class="headerlink" title="用户信息查询"></a>用户信息查询</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image37.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image38.png" alt=""></p><p>逻辑控制代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image39.png" alt=""></p><h3 id="借阅信息查询"><a href="#借阅信息查询" class="headerlink" title="借阅信息查询"></a>借阅信息查询</h3><p>和普通用户后所使用的基本一样，只是需要另外输入用户信息，不做赘述</p><h3 id="图书挂失办理"><a href="#图书挂失办理" class="headerlink" title="图书挂失办理"></a>图书挂失办理</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image40.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image41.png" alt=""></p><p>逻辑控制代码</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image42.png" alt=""></p><h3 id="借书证挂失办理"><a href="#借书证挂失办理" class="headerlink" title="借书证挂失办理"></a>借书证挂失办理</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image43.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image44.png" alt=""></p><p>逻辑控制代码，其中完成挂失后会自动给用户发送一份邮件</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image45.png" alt=""></p><h3 id="借书证办新"><a href="#借书证办新" class="headerlink" title="借书证办新"></a>借书证办新</h3><p>界面</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image46.png" alt=""></p><p>子界面代码（部分）</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image47.png" alt=""></p><p>逻辑控制代码，其中完成挂失后会自动给用户发送一份邮件</p><p><img src="/2018/05/12/朝花夕拾——《数据库系统原理》课程设计/image48.png" alt=""></p><h1 id="系统使用说明"><a href="#系统使用说明" class="headerlink" title="系统使用说明"></a>系统使用说明</h1><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><div class="table-container"><table><thead><tr><th>编程语言</th><th>Python3.5</th></tr></thead><tbody><tr><td>框架</td><td>Django</td></tr><tr><td>操作系统</td><td>Windows或Linux</td></tr><tr><td>已兼容浏览器</td><td>IE、Firefox、Edge</td></tr></tbody></table></div><h2 id="系统亮点"><a href="#系统亮点" class="headerlink" title="系统亮点"></a>系统亮点</h2><p>（1） 系统功能完备，完整性约束完整</p><p>（2） 系统界面采用扁平化设计，辅助以响应动画，比较美观</p><p>（3） 后台自动根据用户登录名判定用户身份，自动跳转到对应界面</p><p>（4） 查询操作均采用模糊查询、即时查询，部分查询条件，例如日期类别，采用选择框，简化用户操作，优化用户体验</p><p>（5） 用户查询时不必另外输入个人信息，这得益于cookie的使用</p><h1 id="实验难点与总结改进"><a href="#实验难点与总结改进" class="headerlink" title="实验难点与总结改进"></a>实验难点与总结改进</h1><p>纵观整个实验有以下几个难点：</p><p>（1） 实验平台的搭建。本来我使用的数据库是SQL Server，但最后发现Django的框架对于它的支持程度非常差，最终选择了开源的MySQL。</p><p>（2） 用户界面的编写。此前我并没有上过网站开发的课程，这次相当于是边学边写，从html的到CSS再到JavaScript，遇到不会的就搜索资料，最后终于初步掌握了网站及脚本的开发。</p><p>（3） 网站页面和服务器之间的参数传递。网页给服务器可以用post方法，用户信息可以使用cookie，而服务器给网页传递的参数，我使用的是Django提供的语句，它内嵌在网页中，和python语句很相似。</p><p>（4） 业务逻辑的实现。整个系统对于数据库查询操作比较多，同时又要顾及完整性约束，一次写成功并不容易。我采用的是快速迭代，小步快跑的方法，每次写几个功能，写完之后再和原来的功能进行整合优化。</p><p>终于完成了实验，本次课程设计实现的是高校图书借阅管理系统。</p><p>总的来说，我的系统还存在着一些优化的地方。一方面是功能的完善，例如加入图片、金额系统等等，另一方面是细节的优化，例如数据库查询的速度、还有即时查询的体验等等。</p><p>此次课设需要用到本学期数据库学习的几乎全部知识。除第七章数据库设计之外，还包括规范优化基本表，正确使用索引、触发器和存储过程，正确使用数据库增、删、改、查语句等等。</p><p>通过动手编程，完成了对所学知识的复习与实践，并加深了自己对知识的理解。做完之后，我对整个数据库原理的掌握也更为系统和规范。此外，此次实验还用到了网站开发的界面设计，使得我初步掌握了python的云端开发。这必将各位的进一步学习带来诸多积极的影响。</p>]]></content>
      
      <categories>
          
          <category> 数据库系统原理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>朝花夕拾——《数据结构》实验合集</title>
      <link href="/2018/05/11/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C%E5%90%88%E9%9B%86/"/>
      <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>某软件公司大约有30名员工，每名员工有姓名、工号、职务等属性，每年都有员工离职和入职。</p><p>把所有员工按照顺序存储结构建立一个线性表，建立离职和入职函数，当有员工离职或入职时，修改线性表，并且打印最新的员工名单。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1#<span class="meta-keyword">define</span> ERROR 0#<span class="meta-keyword">define</span> INFEASIBLE -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 20#<span class="meta-keyword">define</span> LISTINCREMENT 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//每位职员的结构体</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* name;</span><br><span class="line"><span class="keyword">int</span> job_name;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* duty;</span><br><span class="line">&#125;Member; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//公司的结构体</span></span><br><span class="line">Member *member;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">int</span> listsize;</span><br><span class="line">&#125;CompanyList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Init_CompanyList</span><span class="params">(CompanyList* companylist)</span> </span>&#123;</span><br><span class="line">companylist-&gt;member = (Member *)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(Member));</span><br><span class="line"><span class="keyword">if</span> (! companylist-&gt;member) <span class="keyword">return</span> OVERFLOW;</span><br><span class="line">companylist-&gt;length = <span class="number">0</span>;</span><br><span class="line">companylist-&gt;listsize = LIST_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Join_CompanyList</span><span class="params">(CompanyList* companylist, <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> <span class="keyword">char</span>* duty)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (companylist-&gt;length == companylist-&gt;listsize) &#123;</span><br><span class="line">Member *newbase = (Member *)<span class="built_in">realloc</span>(companylist-&gt;member, ( companylist-&gt;listsize + LISTINCREMENT) * <span class="keyword">sizeof</span>(Member));</span><br><span class="line"><span class="keyword">if</span> (! newbase) <span class="keyword">return</span> OVERFLOW;</span><br><span class="line">companylist-&gt;member = newbase;</span><br><span class="line">companylist-&gt;listsize += LISTINCREMENT;</span><br><span class="line">&#125;</span><br><span class="line">companylist-&gt;member[companylist-&gt;length].name = name;</span><br><span class="line">companylist-&gt;member[companylist-&gt;length].duty = duty;</span><br><span class="line">companylist-&gt;member[companylist-&gt;length].job_name = ++companylist-&gt;length;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_CompanyList</span><span class="params">(CompanyList companylist)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (companylist.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No member!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Number of member: %d\n"</span>, companylist.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; companylist.length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t%3d\t%s\n"</span>, </span><br><span class="line">companylist.member[i].name,</span><br><span class="line">companylist.member[i].job_name, </span><br><span class="line">companylist.member[i].duty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Leave_CompanyList</span><span class="params">(CompanyList *companylist, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((i &lt; <span class="number">1</span>) || (i &gt; companylist-&gt;length)) <span class="keyword">return</span> ERROR;</span><br><span class="line">Member* p = &amp;companylist-&gt;member[i<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Member %d leaves.\n"</span>, p-&gt;job_name);</span><br><span class="line">Member* q = companylist-&gt;member + companylist-&gt;length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>( p++; p &lt;= q; p++) &#123;</span><br><span class="line">*(p<span class="number">-1</span>) = *p;</span><br><span class="line">&#125;</span><br><span class="line">companylist-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CompanyList companylist;</span><br><span class="line">Init_CompanyList(&amp;companylist);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">Join_CompanyList(&amp;companylist, <span class="string">"person"</span>,<span class="string">"job"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Print_CompanyList(companylist);</span><br><span class="line"><span class="keyword">int</span> len = companylist.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">Leave_CompanyList(&amp;companylist, <span class="built_in">floor</span>(rand() % companylist.length) + <span class="number">1</span>);</span><br><span class="line">Print_CompanyList(companylist);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p> 约瑟夫（Josephus）环问题：编号为1,2,3,…,n的n个人按顺时针方向围坐一圈，每人持有一个密码（正整数）。一开始任选一个正整数作为报数的上限值m，从第一个人开始按顺时针方向自1开始顺序报数,报到m时停止。报m的人出列，将他的密码作为新的m值，从他在顺时针方向上的下一人开始重新从1报数，如此下去，直到所有人全部出列为止。</p><p>建立n个人的单循环链表存储结构，运行结束后，输出依次出队的人的序号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;#include &lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1#<span class="meta-keyword">define</span> ERROR 0#<span class="meta-keyword">define</span> INFEASIBLE -1#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> order;<span class="comment">//座位编号</span></span><br><span class="line"><span class="keyword">int</span> number;<span class="comment">//个人密码</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">Generate_List</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//用n生成一个list</span></span><br><span class="line">List head = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">head-&gt;number = <span class="number">1</span>;</span><br><span class="line">head-&gt;order = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">List p = head;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++, p = p-&gt;next) &#123;</span><br><span class="line">List q = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">q-&gt;number = i;</span><br><span class="line">q-&gt;order = i;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Play_List</span><span class="params">(List head, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">List p = head;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != p) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m<span class="number">-1</span>; i ++) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; </span><br><span class="line">List q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"delete: %d\n"</span>, p-&gt;order);</span><br><span class="line">List s = p;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">m = s-&gt;number;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"winner: %d\n"</span>, p-&gt;order);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">10</span>;<span class="keyword">int</span> m = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"m: %d\tn: %d\n"</span>, m, n);</span><br><span class="line">List head = Generate_List(n);</span><br><span class="line">Play_List(head, m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>某商场有一个100个车位的停车场，当车位未满时，等待的车辆可以进入并计时；当车位已满时，必须有车辆离开，等待的车辆才能进入；当车辆离开时计算停留的的时间，并且按照每小时1元收费。</p><p>汽车的输入信息格式可以是（进入/离开，车牌号，进入/离开时间），要求可以随时显示停车场内的车辆信息以及收费历史记录。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;#include &lt;ctime&gt;#include &lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNumerOfLot = <span class="number">1</span>;<span class="comment">//停车场最大容量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> lengthOfPlateNumer = <span class="number">6</span>;<span class="comment">//车牌号最大长度</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNumberOfQueue = <span class="number">2</span>;<span class="comment">//等待队列的最大长度</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNumberOfHistoryCharge = <span class="number">200</span>;<span class="comment">//收费历史记录数量的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> OK = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ERROR = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">long</span> inTime;<span class="comment">//车辆进入停车场的时间</span></span><br><span class="line">        <span class="built_in">string</span> plateNumber;<span class="comment">//车牌号</span></span><br><span class="line">        <span class="keyword">int</span> lotOrder;<span class="comment">//车辆在停车场的车位号</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Vehicle() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            lotOrder = maxNumerOfLot;</span><br><span class="line">            inTime = <span class="number">0</span>;</span><br><span class="line">            plateNumber = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">getInTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setInTime</span><span class="params">(<span class="keyword">long</span> inTime)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;inTime = inTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">getPlateNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> plateNumber;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setPlatNumber</span><span class="params">(<span class="built_in">string</span> plateNumber)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;plateNumber = plateNumber;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getLotOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lotOrder;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setLotOrder</span><span class="params">(<span class="keyword">int</span> lotOrder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;lotOrder = lotOrder;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HistoryCharge</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">string</span> plateNumber;</span><br><span class="line">        <span class="keyword">long</span> inTime;</span><br><span class="line">        <span class="keyword">int</span> charge;<span class="comment">//收取费用</span></span><br><span class="line"></span><br><span class="line">        HistoryCharge() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            plateNumber = <span class="string">""</span>;</span><br><span class="line">            inTime = <span class="number">0</span>;</span><br><span class="line">            charge = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParkingLot</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Vehicle *parkingSpace;<span class="comment">//停车位数组</span></span><br><span class="line">        <span class="keyword">int</span> leftSpace;<span class="comment">//剩余的停车空间</span></span><br><span class="line">        <span class="keyword">int</span> ratePerSecond;<span class="comment">//每秒收费</span></span><br><span class="line">        <span class="keyword">long</span> createdTime;<span class="comment">//停车场建立时间</span></span><br><span class="line">        HistoryCharge *historyCharge;<span class="comment">//历史纪录数组</span></span><br><span class="line">        <span class="keyword">int</span> numberOfHistoryCharge;<span class="comment">//现有的历史记录条数</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        ParkingLot() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            parkingSpace = <span class="keyword">new</span> Vehicle[maxNumerOfLot];</span><br><span class="line">            leftSpace = maxNumerOfLot;</span><br><span class="line">            ratePerSecond = <span class="number">2</span>;</span><br><span class="line">            createdTime = time(<span class="literal">NULL</span>);</span><br><span class="line">            historyCharge = <span class="keyword">new</span> HistoryCharge[maxNumberOfHistoryCharge];</span><br><span class="line">            numberOfHistoryCharge = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getRatePerSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ratePerSecond;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> createdTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getLeftSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> leftSpace;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">in</span><span class="params">(<span class="built_in">string</span> plateNumber)</span> </span>&#123;<span class="comment">//车辆进入停车场</span></span><br><span class="line">            <span class="keyword">if</span>(leftSpace == <span class="number">0</span>) <span class="keyword">return</span> ERROR;<span class="comment">//没有空间则返回错误</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxNumerOfLot; i++) &#123;<span class="comment">//遍历寻找空车位</span></span><br><span class="line">                <span class="keyword">if</span>(parkingSpace[i].getInTime() == <span class="number">0</span>) &#123;</span><br><span class="line">                    parkingSpace[i].setInTime(time(<span class="literal">NULL</span>) - createdTime);</span><br><span class="line">                    parkingSpace[i].setPlatNumber(plateNumber);</span><br><span class="line">                    parkingSpace[i].setLotOrder(i);</span><br><span class="line">                    leftSpace--;<span class="comment">//剩余空间减一</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"剩余车位： "</span> &lt;&lt; leftSpace &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Vehicle <span class="title">out</span><span class="params">(<span class="built_in">string</span> plateNumber)</span> </span>&#123;<span class="comment">//车辆出停车场</span></span><br><span class="line">            <span class="keyword">if</span>(leftSpace != maxNumerOfLot) &#123;<span class="comment">//如果停车场内有车</span></span><br><span class="line">                Vehicle vehicle;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxNumerOfLot; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(parkingSpace[i].getPlateNumber() == plateNumber) &#123;</span><br><span class="line">                        vehicle = parkingSpace[i];</span><br><span class="line">                        parkingSpace[i] = Vehicle();</span><br><span class="line">                        leftSpace++;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"outLot: "</span> &lt;&lt; vehicle.getPlateNumber() &lt;&lt; <span class="string">"\tcost: "</span> &lt;&lt; (time(<span class="literal">NULL</span>) - createdTime - vehicle.getInTime()) * ratePerSecond &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"剩余车位： "</span> &lt;&lt; leftSpace &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                        addHistoryCharge(vehicle.getPlateNumber(), vehicle.getInTime(), (time(<span class="literal">NULL</span>) - createdTime - vehicle.getInTime()) * ratePerSecond);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> vehicle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"No vehicle in this lot"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> Vehicle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addHistoryCharge</span><span class="params">(<span class="built_in">string</span> plateNumber, <span class="keyword">int</span> inTime, <span class="keyword">int</span> charge)</span> </span>&#123;</span><br><span class="line">            historyCharge[numberOfHistoryCharge].plateNumber = plateNumber;</span><br><span class="line">            historyCharge[numberOfHistoryCharge].inTime = inTime;</span><br><span class="line">            historyCharge[numberOfHistoryCharge++].charge = charge;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;<span class="comment">//打印停车场现在车位情况</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"parkingSpace: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(leftSpace == maxNumerOfLot) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"No vehicle in this lot."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxNumerOfLot; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(parkingSpace[i].getInTime() != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; parkingSpace[i].getLotOrder() &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; parkingSpace[i].getPlateNumber() &lt;&lt; <span class="string">'\t'</span> &lt;&lt; time(<span class="literal">NULL</span>) - createdTime - parkingSpace[i].getInTime() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printHistoryCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"收费历史： "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfHistoryCharge; i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; historyCharge[i].plateNumber &lt;&lt; <span class="string">":\t"</span> &lt;&lt; historyCharge[i].charge &lt;&lt; <span class="string">"\t"</span> &lt;&lt; historyCharge[i].inTime &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitingQueue</span> &#123;</span><span class="comment">//等待队列</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Vehicle* waitingSpace;</span><br><span class="line">        <span class="keyword">int</span> leftspace;<span class="comment">//队列剩余空间</span></span><br><span class="line">        <span class="keyword">int</span> queueFront;<span class="comment">//队列头部</span></span><br><span class="line">        <span class="keyword">int</span> queueRear;<span class="comment">// 队列尾部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        WaitingQueue() &#123;<span class="comment">//构造队列</span></span><br><span class="line">            waitingSpace = <span class="keyword">new</span> Vehicle[maxNumberOfQueue];</span><br><span class="line">            leftspace = maxNumberOfQueue;</span><br><span class="line">            queueFront = <span class="number">0</span>;</span><br><span class="line">            queueRear = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getLeftspace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> leftspace;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;<span class="comment">//判断队列是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(leftspace == maxNumberOfQueue) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;<span class="comment">//判断队列是否为满</span></span><br><span class="line">            <span class="keyword">if</span>(leftspace == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">in</span><span class="params">(<span class="built_in">string</span> plateNumber)</span> </span>&#123;<span class="comment">//车辆进入等待队列</span></span><br><span class="line">            <span class="keyword">if</span>(isFull()) <span class="keyword">return</span> ERROR;<span class="comment">//队列满则返回错误</span></span><br><span class="line">            waitingSpace[queueRear].setPlatNumber(plateNumber);</span><br><span class="line">            queueRear = (queueRear + <span class="number">1</span>) % maxNumberOfQueue;</span><br><span class="line">            leftspace--;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Vehicle <span class="title">out</span><span class="params">()</span> </span>&#123;<span class="comment">//车辆离开队列</span></span><br><span class="line">            <span class="keyword">if</span>(!isEmpty()) &#123;</span><br><span class="line">                Vehicle vehicle = waitingSpace[queueFront];</span><br><span class="line">                queueFront = (queueFront + <span class="number">1</span>) % maxNumberOfQueue;</span><br><span class="line">                leftspace++;</span><br><span class="line">                <span class="keyword">return</span> vehicle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"No vehicle in this queue."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> Vehicle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;<span class="comment">//打印队列排队情况</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"waitingQueue: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(!isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = queueFront; i != queueRear; i = (i + <span class="number">1</span>) % maxNumberOfQueue) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; waitingSpace[i].getPlateNumber() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"No vehicle in this queue."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interface</span><span class="params">()</span> </span>&#123;<span class="comment">//用户操作界面</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请选择操作："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、进入停车场"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、离开停车场"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"3、打印停车场"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"4、收费历史"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"5、退出程序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ParkingLot parkingLot = ParkingLot();</span><br><span class="line">    WaitingQueue waitingQueue = WaitingQueue();</span><br><span class="line">    <span class="keyword">int</span> operation;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"欢迎来到本停车场:\n共有车位"</span> &lt;&lt; maxNumerOfLot &lt;&lt; <span class="string">"个，排队位置"</span> &lt;&lt; maxNumberOfQueue &lt;&lt; <span class="string">"个。"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    interface();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; operation) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation == <span class="number">1</span>) &#123;<span class="comment">//如果选择进车</span></span><br><span class="line">            <span class="keyword">if</span>(parkingLot.getLeftSpace() != <span class="number">0</span>) &#123;<span class="comment">//如果停车场还有车位</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the plate number: "</span>;</span><br><span class="line">                <span class="built_in">string</span> plateNumber;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; plateNumber;</span><br><span class="line">                parkingLot.in(plateNumber);<span class="comment">//进入停车场</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"InLot: "</span> &lt;&lt; plateNumber &lt;&lt; <span class="string">"\ttime: "</span> &lt;&lt; (time(<span class="literal">NULL</span>) - parkingLot.getCreatedTime()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!waitingQueue.isFull())&#123;<span class="comment">//没有车位，进入等待队列</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the plate number: "</span>;</span><br><span class="line">                <span class="built_in">string</span> plateNumber;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; plateNumber;</span><br><span class="line">                waitingQueue.in(plateNumber);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; plateNumber &lt;&lt; <span class="string">" is waiting in the queue."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//如果等待队列也满了，输出相关信息</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Sorry, No space in lot or queue."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( operation == <span class="number">2</span>) &#123;<span class="comment">//如果选择离开停车场</span></span><br><span class="line">            <span class="keyword">if</span>(parkingLot.getLeftSpace() != maxNumerOfLot) &#123;<span class="comment">//如果有车</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the plate number: "</span>;</span><br><span class="line">                <span class="built_in">string</span> plateNumber;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; plateNumber;</span><br><span class="line">                Vehicle vehicle = parkingLot.out(plateNumber);<span class="comment">//离开停车场</span></span><br><span class="line">                <span class="keyword">if</span>(!waitingQueue.isEmpty()) &#123;<span class="comment">//如果等待队列有车</span></span><br><span class="line">                    plateNumber = waitingQueue.out().getPlateNumber();</span><br><span class="line">                    parkingLot.in(plateNumber);<span class="comment">//该车进入停车场</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; plateNumber &lt;&lt; <span class="string">" has entered."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">3</span>) &#123;<span class="comment">//如果选择打印停车场及队列情况</span></span><br><span class="line">            parkingLot.print();<span class="comment">//打印停车场情况</span></span><br><span class="line">            waitingQueue.print();<span class="comment">//打印队列情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (operation == <span class="number">4</span>) &#123;<span class="comment">//如果选择打印历史记录</span></span><br><span class="line">            parkingLot.printHistoryCharge();<span class="comment">//打印历史记录</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">5</span>) &#123;<span class="comment">//如果选择退出</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//退出循环，程序结束</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        interface();<span class="comment">//打印用户界面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>某银行营业厅共有6个营业窗口，设有排队系统广播叫号，该银行的业务分为公积金、银行卡、理财卡等三种。公积金业务指定1号窗口，银行卡业务指定2、3、4号窗口，理财卡业务指定5、6号窗口。但如果5、6号窗口全忙，而2、3、4号窗口有空闲时，理财卡业务也可以在空闲的2、3、4号窗口之一办理。</p><p>客户领号、业务完成可以作为输入信息，要求可以随时显示6个营业窗口的状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;#define ERROR -1#define OK 1</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span><span class="comment">//客户类</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> order;<span class="comment">//客户排队序号</span></span><br><span class="line">        <span class="keyword">int</span> typeOfCard;<span class="comment">//客户类型</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Customer() &#123;<span class="comment">//构造函数1</span></span><br><span class="line">            order = <span class="number">0</span>;</span><br><span class="line">            typeOfCard = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Customer(<span class="keyword">int</span> order, <span class="keyword">int</span> typeOfCard) &#123;<span class="comment">//构造函数2</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;order = order;</span><br><span class="line">            <span class="keyword">this</span>-&gt;typeOfCard = order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getTypeOfCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> typeOfCard;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitingQueue</span> &#123;</span><span class="comment">//排队队列</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> length = <span class="number">10</span>;<span class="comment">//最大队列长度</span></span><br><span class="line">        <span class="keyword">int</span> queueFront; <span class="comment">//队列头部</span></span><br><span class="line">        <span class="keyword">int</span> queueRear; <span class="comment">//队列尾部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:<span class="comment">//为减少代码量，将某些变量设为public</span></span><br><span class="line">        Customer* waitingQueue;</span><br><span class="line">        <span class="keyword">int</span> numberOfCustomers;<span class="comment">//队列中客户人数</span></span><br><span class="line"></span><br><span class="line">        WaitingQueue() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            waitingQueue = <span class="keyword">new</span> Customer[length];</span><br><span class="line">            queueFront = <span class="number">0</span>;</span><br><span class="line">            queueRear = <span class="number">0</span>;</span><br><span class="line">            numberOfCustomers = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;<span class="comment">//判断队列是否满</span></span><br><span class="line">            <span class="keyword">if</span>(numberOfCustomers == length) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;<span class="comment">//判断队列是否空</span></span><br><span class="line">            <span class="keyword">if</span>(numberOfCustomers == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> queueFront;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addFront</span><span class="params">()</span> </span>&#123;<span class="comment">//队前加一</span></span><br><span class="line">            queueFront = (queueFront + <span class="number">1</span>) % length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getRear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> queueRear;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addRear</span><span class="params">()</span> </span>&#123;<span class="comment">//队尾加一</span></span><br><span class="line">            queueRear = (queueRear + <span class="number">1</span>) % length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> &#123;</span>银行类</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> numberOfWindows = <span class="number">6</span>;<span class="comment">//窗口数量</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> numberOfCardTypes = <span class="number">3</span>;<span class="comment">//客户种类</span></span><br><span class="line">        <span class="keyword">int</span> *windows;<span class="comment">//窗口数组，0表示空闲，1表示处理业务中</span></span><br><span class="line">        WaitingQueue *queues;<span class="comment">//排队队列数组，与客户类型一一对应</span></span><br><span class="line">        <span class="keyword">int</span> order;<span class="comment">//客户序号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Bank() &#123;<span class="comment">//构造函数</span></span><br><span class="line">            windows = <span class="keyword">new</span> <span class="keyword">int</span>[numberOfWindows] ();</span><br><span class="line">            queues = <span class="keyword">new</span> WaitingQueue[numberOfCardTypes];</span><br><span class="line">            order = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">interface</span><span class="params">()</span> </span>&#123;<span class="comment">//用户界面</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------菜单----------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、新的客户"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、完成业务"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"3、打印状态"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"4、退出程序"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------菜单----------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//根据客户类型，进入相应等待队列</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">enterWaitingQueue</span><span class="params">(<span class="keyword">int</span> order, <span class="keyword">int</span> typeOfCard)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> typeOrder = typeOfCard - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(queues[typeOrder].numberOfCustomers == queues[typeOrder].getLength()) <span class="keyword">return</span> ERROR;<span class="comment">//如果对应队列已满，返回错误</span></span><br><span class="line">            queues[typeOrder].waitingQueue[queues[typeOrder].getRear()] = Customer(order, typeOfCard);</span><br><span class="line">            queues[typeOrder].addRear();</span><br><span class="line">            queues[typeOrder].numberOfCustomers++;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//客户离开等待队列，准备办理业务</span></span><br><span class="line">        <span class="function">Customer <span class="title">leaveWaitingQueue</span><span class="params">(<span class="keyword">int</span> typeOfCard)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> typeOrder = typeOfCard - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(queues[typeOrder].numberOfCustomers == <span class="number">0</span>) <span class="keyword">return</span> Customer();</span><br><span class="line">            Customer customer = queues[typeOrder].waitingQueue[queues[typeOrder].getFront()];</span><br><span class="line">            queues[typeOrder].addFront();</span><br><span class="line">            queues[typeOrder].numberOfCustomers--;</span><br><span class="line">            <span class="keyword">return</span> customer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">finishWindow</span><span class="params">(<span class="keyword">int</span> orderOfWindow)</span> </span>&#123;<span class="comment">// 选择完成业务的窗口</span></span><br><span class="line">            <span class="keyword">if</span>(orderOfWindow &lt; <span class="number">0</span> || orderOfWindow &gt;= numberOfWindows) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(windows[orderOfWindow] != <span class="number">0</span>) &#123;</span><br><span class="line">                windows[orderOfWindow] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">startWindow</span><span class="params">(<span class="keyword">int</span> orderOfWindow)</span> </span>&#123;<span class="comment">//选择窗口开始办理业务</span></span><br><span class="line">            <span class="keyword">if</span>(orderOfWindow &lt; <span class="number">0</span> || orderOfWindow &gt;= numberOfWindows) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(windows[orderOfWindow] == <span class="number">0</span>) &#123;</span><br><span class="line">                windows[orderOfWindow] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printWindow</span><span class="params">()</span> </span>&#123;<span class="comment">//打印所有窗口状态</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Windows Status: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfWindows; i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Window "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">                <span class="keyword">if</span>(windows[i]) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t处理中......"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t空闲中......"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">chooseCardType</span><span class="params">(<span class="keyword">int</span> typeOfCard)</span> </span>&#123;<span class="comment">//根据卡的类型返回string，方便打印</span></span><br><span class="line">            <span class="keyword">switch</span> (typeOfCard) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="string">"公积金"</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="string">"银行卡"</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="string">"理财卡"</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">()</span> </span>&#123;<span class="comment">//打印所有等待队列</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"WaitingQueue: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfCardTypes; i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; chooseCardType(i+<span class="number">1</span>) &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = queues[i].getFront(); j != queues[i].getRear(); j = (j + <span class="number">1</span>) % queues[i].getLength() ) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\tCustomer: "</span> &lt;&lt; queues[i].waitingQueue[j].getOrder() &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printListOfCard</span><span class="params">()</span> </span>&#123;<span class="comment">//打印客户类型列表</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"1、公积金"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"2、银行卡"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"3、理财卡"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//运行函数，体现逻辑</span></span><br><span class="line">            <span class="keyword">int</span> operation;</span><br><span class="line">            interface();<span class="comment">//打印用户界面</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; operation) &#123;<span class="comment">//输入循环</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(operation == <span class="number">1</span>) &#123;<span class="comment">//如果选择新用户</span></span><br><span class="line">                    printListOfCard();<span class="comment">//打印已有客户类型列表，方便选择</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> typeOfCard;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入客户类型： "</span>;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; typeOfCard;</span><br><span class="line">                    <span class="keyword">if</span>(typeOfCard == <span class="number">1</span>) &#123;<span class="comment">//如果选择公积金</span></span><br><span class="line">                        <span class="keyword">if</span>(windows[<span class="number">0</span>]) &#123;<span class="comment">//如果窗口1正忙</span></span><br><span class="line">                            enterWaitingQueue(order, typeOfCard);<span class="comment">//进入等待队列</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;<span class="comment">//如果窗口1空闲</span></span><br><span class="line">                            startWindow(<span class="number">0</span>);<span class="comment">//窗口1开始办理业务</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(typeOfCard == <span class="number">2</span>) &#123;<span class="comment">//如果选择银行卡</span></span><br><span class="line">                        <span class="keyword">if</span>(windows[<span class="number">1</span>] &amp;&amp; windows[<span class="number">2</span>] &amp;&amp; windows[<span class="number">3</span>]) &#123;<span class="comment">//若2、3、4均忙</span></span><br><span class="line">                            enterWaitingQueue(order++, typeOfCard);<span class="comment">//进入等待队列</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">1</span>] == <span class="number">0</span>) &#123;如果有一个空闲，则改窗口开始业务</span><br><span class="line">                            startWindow(<span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">2</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                            startWindow(<span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            startWindow(<span class="number">3</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(typeOfCard == <span class="number">3</span>) &#123;<span class="comment">//如果选择理财卡</span></span><br><span class="line">                        <span class="keyword">if</span>(windows[<span class="number">4</span>] &amp;&amp; windows[<span class="number">5</span>]) &#123;如果<span class="number">5</span>、<span class="number">6</span>窗口均忙</span><br><span class="line"><span class="comment">//若2、3、4窗口有空闲，则至相应窗口办理业务</span></span><br><span class="line">                            <span class="keyword">if</span>(windows[<span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                                startWindow(<span class="number">1</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">2</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                                startWindow(<span class="number">2</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">3</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                                startWindow(<span class="number">3</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;<span class="comment">//若2、3、4窗口也均忙，进入等待队列</span></span><br><span class="line">                                enterWaitingQueue(order++, typeOfCard);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(windows[<span class="number">4</span>] == <span class="number">0</span>) &#123;如果<span class="number">5</span>、<span class="number">6</span>窗口有空闲，则办理业务</span><br><span class="line">                            startWindow(<span class="number">4</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            startWindow(<span class="number">5</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    order++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">2</span>) &#123;如果选择某窗口完成业务</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入完成的窗口号（1-6）： "</span>;</span><br><span class="line">                    <span class="keyword">int</span> i;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;<span class="comment">//如果是1窗口，查看队列，若有人则继续办理</span></span><br><span class="line">                        <span class="keyword">if</span>(!queues[<span class="number">0</span>].isEmpty()) &#123;</span><br><span class="line">                            leaveWaitingQueue(<span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            finishWindow(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">1</span> || i == <span class="number">2</span> || i == <span class="number">3</span>) &#123;<span class="comment">//如果是2、3、4窗口</span></span><br><span class="line">                        <span class="keyword">if</span>(!queues[<span class="number">1</span>].isEmpty()) &#123;<span class="comment">//如果银行卡队列不空，办理银行卡</span></span><br><span class="line">                            leaveWaitingQueue(<span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(!queues[<span class="number">2</span>].isEmpty()) &#123;<span class="comment">//否则如果理财卡队列不空，办理之</span></span><br><span class="line">                            leaveWaitingQueue(<span class="number">3</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;<span class="comment">//两队列均为空则设置窗口空闲</span></span><br><span class="line">                            finishWindow(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">4</span> || i == <span class="number">5</span>) &#123;<span class="comment">//如果是5、6窗口，等待队列为空则继续办理</span></span><br><span class="line">                        <span class="keyword">if</span>(!queues[<span class="number">3</span>].isEmpty()) &#123;</span><br><span class="line">                            leaveWaitingQueue(<span class="number">3</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            finishWindow(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">3</span>) &#123;<span class="comment">//如果选择打印，则打印窗口队列状态</span></span><br><span class="line">                    printWindow();</span><br><span class="line">                    printQueue();</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(operation == <span class="number">4</span>) &#123;<span class="comment">//如果选择退出，则结束循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                interface();<span class="comment">//不结束循环则打印用户界面</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bank *bank = <span class="keyword">new</span> Bank();</span><br><span class="line">    bank-&gt;run();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>4阶斐波那契序列如下：f0=f1=f2=0,f3=1,…,fi=fi-1+fi-2+fi-3+fi-4，</p><p>利用容量为k=4的循环队列，构造序列的前n+1项（f0, f1 , f2 ,… fn ），要求满足fn ≤200而fn+1 &gt;200。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;using namespace std;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> &#123;</span><span class="comment">//斐波那契类</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> lengthOfqueue = <span class="number">4</span>;<span class="comment">//队列长度</span></span><br><span class="line">        <span class="keyword">int</span> *circularQueue;<span class="comment">//循环队列</span></span><br><span class="line">        <span class="keyword">int</span> queueFront;<span class="comment">//队列头部，没必要设置队尾</span></span><br><span class="line">        <span class="keyword">int</span> m;<span class="comment">//题中的200</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Fibonacci(<span class="keyword">int</span> m) &#123;<span class="comment">//构造函数，设置队列为0、0、0、1</span></span><br><span class="line">            circularQueue = <span class="keyword">new</span> <span class="keyword">int</span>[lengthOfqueue];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthOfqueue<span class="number">-1</span>; i++) &#123;</span><br><span class="line">                circularQueue[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            circularQueue[lengthOfqueue - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            queueFront = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m = m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;<span class="comment">//计算斐波那契数列</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthOfqueue; i++) &#123;<span class="comment">//输出前四项</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; circularQueue[i] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthOfqueue; i++) &#123;<span class="comment">//计算fn+1</span></span><br><span class="line">                    sum += circularQueue[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; m) <span class="keyword">break</span>;<span class="comment">//如果fn+1&gt;mj结束</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">"  "</span>;<span class="comment">//否则打印出来，并进入队列</span></span><br><span class="line">                circularQueue[queueFront] = sum;</span><br><span class="line">                queueFront = (queueFront+<span class="number">1</span>) % lengthOfqueue;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fibonacci *fibonacci = <span class="keyword">new</span> Fibonacci(<span class="number">200</span>);</span><br><span class="line">    fibonacci-&gt;calculate();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>八皇后问题：设8皇后问题的解为 (x1,x2, x3, …,x8), 约束条件为：在8x8的棋盘上，其中任意两个xi 和xj不能位于棋盘的同行、同列及同对角线。要求用一位数组进行存储，输出所有可能的排列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;#define ERROR -1#define OK 1</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NQueenStack</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">8</span>;<span class="comment">//棋盘大小</span></span><br><span class="line">        <span class="keyword">int</span> *queenStack;</span><br><span class="line">        <span class="keyword">int</span> top;<span class="comment">//栈顶</span></span><br><span class="line">        <span class="keyword">int</span> printOrder;<span class="comment">//标记结果数量</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> queenStack[top - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="comment">//入栈</span></span><br><span class="line">            <span class="keyword">if</span>(top == n) <span class="keyword">return</span> ERROR;</span><br><span class="line">            queenStack[top++] = i;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;<span class="comment">//出栈</span></span><br><span class="line">            <span class="keyword">if</span>(top == <span class="number">0</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">            <span class="keyword">return</span> queenStack[--top];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> tryNumber)</span> </span>&#123;<span class="comment">//检查即将入栈的数是否满足条件</span></span><br><span class="line">            <span class="keyword">if</span>(tryNumber == n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(queenStack[i] == tryNumber) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//检查列</span></span><br><span class="line">                <span class="keyword">if</span>(top - i == tryNumber - queenStack[i]) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//检查主对角线</span></span><br><span class="line">                <span class="keyword">if</span>(top + tryNumber == queenStack[i] + i) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//检查副对角线</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printQueenStack</span><span class="params">()</span> </span>&#123;打印堆栈</span><br><span class="line">            <span class="keyword">if</span>(top != n) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; printOrder++ &lt;&lt; <span class="string">":\t"</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; queenStack[i] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        NQueenStack() &#123;构造函数</span><br><span class="line">            queenStack = <span class="keyword">new</span> <span class="keyword">int</span>[n] ();<span class="comment">//将堆栈初始化为0</span></span><br><span class="line">            top = <span class="number">0</span>;</span><br><span class="line">            printOrder = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> tryNumber = <span class="number">0</span>;<span class="comment">//即将入栈的数</span></span><br><span class="line">            <span class="keyword">int</span> isOver = <span class="number">1</span>;<span class="comment">//标记是否跳出循环</span></span><br><span class="line">            <span class="keyword">int</span> isPrint = <span class="number">1</span>;<span class="comment">//标记是否打印当前堆栈</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) &#123;<span class="comment">//主循环</span></span><br><span class="line">                <span class="keyword">if</span>(check(tryNumber)) &#123;<span class="comment">//如果该数满足条件</span></span><br><span class="line">                    push(tryNumber);<span class="comment">//入栈</span></span><br><span class="line">                    tryNumber = <span class="number">0</span>;<span class="comment">//下一行，从第一列开始检查</span></span><br><span class="line">                    <span class="keyword">if</span>(top == n &amp;&amp; isPrint ) &#123;<span class="comment">//如果栈满，且可以打印，打印</span></span><br><span class="line">                        printQueenStack();</span><br><span class="line">                        tryNumber = pop() + <span class="number">1</span>;<span class="comment">//尝试的数变为出栈的数加一</span></span><br><span class="line">                        isPrint = <span class="number">0</span>;<span class="comment">//避免重复打印，</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(tryNumber &lt; n ) &#123;<span class="comment">//如果不满足条件，尝试下一个数</span></span><br><span class="line">                    tryNumber++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tryNumber = pop() + <span class="number">1</span>;<span class="comment">//如果不满足条件且队列满，弹出</span></span><br><span class="line">                    isPrint = <span class="number">1</span>;<span class="comment">//此时改为可以打印</span></span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//以下为设置循环打印条件，防止不停打印</span></span><br><span class="line">                <span class="keyword">if</span>(queenStack[<span class="number">0</span>] == <span class="number">1</span>)</span><br><span class="line">                    isOver = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(isOver == <span class="number">0</span> &amp;&amp; queenStack[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NQueenStack *nQueenStack = <span class="keyword">new</span> NQueenStack();</span><br><span class="line">    nQueenStack-&gt;run();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组与广义表"><a href="#数组与广义表" class="headerlink" title="数组与广义表"></a>数组与广义表</h1><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p> 鞍点问题：  若矩阵A中的某一元素A[i,j]是第i行中的最小值，而又是第j列中的最大值，则称A[i,j]是矩阵A中的一个鞍点。写出一个可以确定鞍点位置的程序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">double</span> *matrix;</span><br><span class="line">        <span class="keyword">int</span> numberOfRow;</span><br><span class="line">        <span class="keyword">int</span> numberOfColumn;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Matrix(<span class="keyword">int</span> numberOfRow, <span class="keyword">int</span> numberOfColumn) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;numberOfRow = numberOfRow;</span><br><span class="line">            <span class="keyword">this</span>-&gt;numberOfColumn = numberOfColumn;</span><br><span class="line">            matrix = (<span class="keyword">double</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>) * numberOfRow * numberOfColumn);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) &#123;</span><br><span class="line">                    *(matrix + i * numberOfRow + j) = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">isSaddlePoint</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; numberOfRow; index++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(*(matrix + i * numberOfRow + j) &lt;= *(matrix + index * numberOfRow + j) &amp;&amp; index != i) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; numberOfColumn; index++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(*(matrix + i * numberOfRow + j) &gt;= *(matrix + i * numberOfRow + index) &amp;&amp; index != j) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printSaddlePoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(isSaddlePoint(i, j)) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; *(matrix + i * numberOfRow + j) &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-\t"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">double</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= numberOfRow || i &lt; <span class="number">0</span> || i &gt;= numberOfRow) <span class="keyword">return</span> ERROR;</span><br><span class="line">            *(matrix + i * numberOfRow + j) = value;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入矩阵： ("</span> &lt;&lt; numberOfRow &lt;&lt; <span class="string">" * "</span> &lt;&lt; numberOfColumn &lt;&lt; <span class="string">"): "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) &#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; *(matrix + i * numberOfRow + j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; *(matrix + i * numberOfRow + j) &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Matrix *matrix = <span class="keyword">new</span> Matrix(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    matrix-&gt;setValue(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    matrix-&gt;setValue(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    matrix-&gt;setValue(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    matrix-&gt;setValue(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    matrix-&gt;printMatrix();</span><br><span class="line">    matrix-&gt;printSaddlePoint();</span><br><span class="line"></span><br><span class="line">    matrix-&gt;setValues();</span><br><span class="line">    matrix-&gt;printSaddlePoint();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>稀疏矩阵转置： 输入稀疏矩阵中每个元素的行号、列号、值，建立稀疏矩阵的三元组存储结构，并将此矩阵转置，显示转置前后的三元组结构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOSPACE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triple</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">double</span> value;</span><br><span class="line"></span><br><span class="line">        Triple() &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            value = <span class="number">0.</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TSMatrix</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Triple *matrix;</span><br><span class="line">        <span class="keyword">int</span> numberOfRow;</span><br><span class="line">        <span class="keyword">int</span> numberOfColumn;</span><br><span class="line">        <span class="keyword">int</span> maxNumberOfNonzeroPoint;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> numberOfNonzeroPoint;</span><br><span class="line"></span><br><span class="line">        TSMatrix(<span class="keyword">int</span> numberOfRow, <span class="keyword">int</span> numberOfColumn) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;numberOfRow = numberOfRow;</span><br><span class="line">            <span class="keyword">this</span>-&gt;numberOfColumn = numberOfColumn;</span><br><span class="line">            numberOfNonzeroPoint = <span class="number">0</span>;</span><br><span class="line">            maxNumberOfNonzeroPoint =  (<span class="keyword">int</span>)numberOfColumn * numberOfRow * <span class="number">0.05</span>;</span><br><span class="line">            matrix = <span class="keyword">new</span> Triple[maxNumberOfNonzeroPoint];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">oneDimensionOrder</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (i - <span class="number">1</span>) * numberOfColumn + j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">setPointByOrder</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; numberOfRow || i &lt;= <span class="number">0</span> || j &gt; numberOfColumn || j &lt;= <span class="number">0</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">            <span class="keyword">if</span>(numberOfNonzeroPoint == maxNumberOfNonzeroPoint) <span class="keyword">return</span> NOSPACE;</span><br><span class="line">            <span class="keyword">if</span>(numberOfNonzeroPoint != <span class="number">0</span>) &#123;</span><br><span class="line">                Triple lastPoint = matrix[numberOfNonzeroPoint - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(oneDimensionOrder(lastPoint.i, lastPoint.j) &gt; oneDimensionOrder(i, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ERROR;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            matrix[numberOfNonzeroPoint].i = i;</span><br><span class="line">            matrix[numberOfNonzeroPoint].j = j;</span><br><span class="line">            matrix[numberOfNonzeroPoint].value = value;</span><br><span class="line">            numberOfNonzeroPoint++;</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setPointsByOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i,j;</span><br><span class="line">            <span class="keyword">double</span> value;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"please set Point by order: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; i &gt;&gt; j &gt;&gt; value) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">int</span> status = setPointByOrder(i, j, value);</span><br><span class="line">                <span class="keyword">if</span>(status == ERROR) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input error! Please try again."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(status == NOSPACE) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"No more space!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">TSMatrix* <span class="title">getFastTransposedSMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            TSMatrix *retMatrix = <span class="keyword">new</span> TSMatrix(numberOfColumn, numberOfRow);</span><br><span class="line">            retMatrix-&gt;numberOfNonzeroPoint = numberOfNonzeroPoint;</span><br><span class="line">            <span class="keyword">if</span>(numberOfNonzeroPoint) &#123;</span><br><span class="line">                <span class="keyword">int</span> num[numberOfColumn];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numberOfColumn; j++) num[j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; numberOfNonzeroPoint; index++) num[matrix[index].j - <span class="number">1</span>]++;</span><br><span class="line">                <span class="keyword">int</span> cpot[numberOfColumn];</span><br><span class="line">                cpot[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; numberOfColumn; j++) cpot[j] = cpot[j - <span class="number">1</span>] + num[j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; numberOfNonzeroPoint; index++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> col = matrix[index].j;</span><br><span class="line">                    <span class="keyword">int</span> n = cpot[col];</span><br><span class="line">                    retMatrix-&gt;matrix[n].i = matrix[index].j;</span><br><span class="line">                    retMatrix-&gt;matrix[n].j = matrix[index].i;</span><br><span class="line">                    retMatrix-&gt;matrix[n].value = matrix[index].value;</span><br><span class="line">                    cpot[col]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> retMatrix;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printTSMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numberOfRow; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= numberOfColumn; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(oneDimensionOrder(i, j) &lt;= oneDimensionOrder(matrix[index].i, matrix[index].j)) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; matrix[index++].value &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; "Please input the size of the matrix: (m*n)" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//    int row, column;</span></span><br><span class="line"><span class="comment">//    cin &gt;&gt; row &gt;&gt; column;</span></span><br><span class="line">    TSMatrix *matrix = <span class="keyword">new</span> TSMatrix(<span class="number">10</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//    matrix-&gt;setPointsByOrder();</span></span><br><span class="line">    matrix-&gt;setPointByOrder(<span class="number">10</span>, <span class="number">5</span>, <span class="number">55</span>);</span><br><span class="line">    matrix-&gt;printTSMatrix();</span><br><span class="line">    matrix = matrix-&gt;getFastTransposedSMatrix();</span><br><span class="line">    matrix-&gt;printTSMatrix();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="以下的，貌似因为写在vs的默认文件夹里面，重装系统丢掉了。。"><a href="#以下的，貌似因为写在vs的默认文件夹里面，重装系统丢掉了。。" class="headerlink" title="以下的，貌似因为写在vs的默认文件夹里面，重装系统丢掉了。。"></a>以下的，貌似因为写在vs的默认文件夹里面，重装系统丢掉了。。</h1><p>狗带。。</p><h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>以下问题要求统一在一个大程序里解决：</p><p>按先序遍历的扩展序列建立二叉树的存储结构；</p><p>二叉树先序、中序、后序遍历的递归算法；</p><p>二叉树中序遍历的非递归算法；</p><p>二叉树层次遍历的非递归算法；</p><p>求二叉树的深度(后序遍历)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>以下问题要求统一在一个大程序里解决：</p><p>建立树的存储结构；</p><p>求树的深度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>输入任意的一个网，用普里姆(Prim)算法构造最小生成树。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>要求建立图的存储结构（邻接表或邻接矩阵），输入任意的一个图，显示图的深度优先搜索遍历路径。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p>要求建立图的存储结构（邻接表或邻接矩阵），输入任意的一个图，显示图的广度优先搜索遍历路径。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><p>设计一个读入一串整数构成一颗二叉排序树的程序，从二叉排序树中删除一个结点，使该二叉树仍保持二叉排序树的特性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>设定哈希函数 H(key) = key MOD 11 ( 表长=11 )，输入一组关键字序列，根据线性探测再散列解决冲突的方法建立哈希表的存储结构，显示哈希表，任意输入关键字，判断是否在哈希表中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><p>以下问题要求统一在一个大程序里解决：</p><p>​        折半插入排序；</p><pre><code>   冒泡排序；</code></pre><p>​        快速排序；</p><p>​        简单选择排序；                 </p><pre><code> 归并排序；</code></pre><p>​    堆排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>朝花夕拾——《计算机网络原理》实验合集</title>
      <link href="/2018/05/11/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C%E5%90%88%E9%9B%86/"/>
      <content type="html"><![CDATA[<h1 id="简易Web-Mail服务器"><a href="#简易Web-Mail服务器" class="headerlink" title="简易Web Mail服务器"></a>简易Web Mail服务器</h1><p>该实验由我和温浩珉同学合作完成，主要分为TCP连接测试、</p><h2 id="TCP连接测试"><a href="#TCP连接测试" class="headerlink" title="TCP连接测试"></a>TCP连接测试</h2><h3 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h3><ol><li>各自编写两个版本的服务端和客户端</li><li>分别以对方作为服务器和客户端，测试自己的客户端和服务器程序</li><li>将服务端代码上传至服务器，再次测试</li></ol><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端-王子泰</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 连接到百度</span></span><br><span class="line"><span class="comment"># host, port = 'www.baidu.com', 80</span></span><br><span class="line"><span class="comment"># ip = socket.gethostbyname(host)</span></span><br><span class="line"><span class="comment"># 连接到自己</span></span><br><span class="line">host, port = <span class="string">'127.0.0.1'</span>, <span class="number">80</span></span><br><span class="line">ip = socket.gethostbyname(host)</span><br><span class="line"><span class="comment"># 连接到别人</span></span><br><span class="line"><span class="comment"># host, port = '192.168.43.157', 6666</span></span><br><span class="line"><span class="comment"># ip = socket.gethostbyname(host)</span></span><br><span class="line">ip_port = (ip, port)</span><br><span class="line">sk.connect(ip_port)</span><br><span class="line">message = <span class="string">"GET / HTTP/1.1\r\n\r\n"</span></span><br><span class="line">sk.sendall(bytes(message, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">info = sk.recv(<span class="number">4096</span>)</span><br><span class="line">print(info)</span><br><span class="line">sk.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器端-王子泰</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host, port = <span class="string">'127.0.0.1'</span>, <span class="number">80</span></span><br><span class="line"><span class="comment"># host, port = '100.89.184.99', 80</span></span><br><span class="line">ip = socket.gethostbyname(host)</span><br><span class="line">ip_port = (ip, port)</span><br><span class="line">sk.bind(ip_port)</span><br><span class="line"></span><br><span class="line">sk.listen()</span><br><span class="line">print(<span class="string">'listening...'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    connect, address = sk.accept()</span><br><span class="line">    print(<span class="string">'accepting...'</span>)</span><br><span class="line">    request = connect.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'receive: '</span> + str(request))</span><br><span class="line">    http_response = <span class="string">"""</span></span><br><span class="line"><span class="string">    HTTP/1.1 200 OK</span></span><br><span class="line"><span class="string">    Hello, World!</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    connect.send(bytes(http_response, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    connect.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端-温浩珉</span></span><br><span class="line"><span class="comment">#tcp client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#ip_port=('172.27.69.48',9999)</span></span><br><span class="line">ip_port=(<span class="string">'100.89.184.99'</span>,<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_send</span><span class="params">(content=<span class="string">'hallo'</span>)</span>:</span></span><br><span class="line">    sk=socket.socket()</span><br><span class="line">    sk.connect(ip_port)</span><br><span class="line">    sk.sendall(bytes(content,<span class="string">'utf8'</span>))</span><br><span class="line">    server_reply=sk.recv(<span class="number">1024</span>)</span><br><span class="line">    print(str(server_reply,<span class="string">'utf-8'</span>))</span><br><span class="line">    sk.close()</span><br><span class="line">client_send(content=<span class="string">'哈喽，子泰'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器端-温浩珉</span></span><br><span class="line">ip_port=(<span class="string">'162.219.123.220'</span>,<span class="number">6666</span>)</span><br><span class="line">sk=socket.socket()</span><br><span class="line">sk.bind(ip_port)</span><br><span class="line">sk.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"server waiting..."</span>)</span><br><span class="line">    conn,addr=sk.accept()</span><br><span class="line">    client_data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">    print(str(client_data),<span class="string">'utf-8'</span>)</span><br><span class="line">    conn.sendall(bytes(<span class="string">"ok"</span>))</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image2.png" alt=""></p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image3.png" alt=""></p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image4.png" alt=""></p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image5.png" alt=""></p><h2 id="web服务器搭建"><a href="#web服务器搭建" class="headerlink" title="web服务器搭建"></a>web服务器搭建</h2><h3 id="框架简介"><a href="#框架简介" class="headerlink" title="框架简介"></a>框架简介</h3><p>我们项目采用Django。Django是一个开放源代码的Web应用框架，由Python写成。采用了MVC的框架模式，即模型M，视图V和控制器C.使用模型得到了如下项目文件结构：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image6.png" alt=""></p><h3 id="网站编写"><a href="#网站编写" class="headerlink" title="网站编写"></a>网站编写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>邮件发送网站<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background-img</span>=<span class="string">D:\\Study\\必修\\计算机网络原理\\第二章实验\\mail_website\\templates\\back_ground.jpg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/mail-send"</span>&gt;</span></span><br><span class="line">     &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"height:500px;width:900px"</span> <span class="attr">border</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>收件人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"recevier"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"发送"</span> <span class="attr">style</span>=<span class="string">"width:100px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"width:100px;vertical-align:top;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">b</span>&gt;</span>邮件内容<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"height:400px;width:800px;align:right;text-align:top"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">style</span>=<span class="string">"background-color:#FFA500;text-align:center;"</span>&gt;</span></span><br><span class="line">                版权 © mail service.com</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图处理函数view.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEBase, MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.encoders <span class="keyword">import</span> encode_base64</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail_send_post</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">"mail_send_post.html"</span>)</span><br><span class="line">_user = <span class="string">"wang22ti@163.com"</span></span><br><span class="line">_pwd = <span class="string">"**********"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail_send</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        content = request.POST[<span class="string">'content'</span>]</span><br><span class="line">        _to = request.POST[<span class="string">'recevier'</span>]</span><br><span class="line">        msg = MIMEMultipart()</span><br><span class="line">        msg[<span class="string">"Subject"</span>] = <span class="string">"hello world"</span></span><br><span class="line">        msg[<span class="string">"From"</span>] = _user</span><br><span class="line">        <span class="comment"># 图片加入文本</span></span><br><span class="line">        text = MIMEText(<span class="string">'&lt;html&gt;&lt;body&gt;&lt;div&gt;%s&lt;/div&gt;&lt;img src="cid:0"/&gt;&lt;/body&gt;&lt;/html&gt;'</span> % content, <span class="string">'html'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        msg.attach(text)</span><br><span class="line">        <span class="comment"># 附件</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">r'templates\image\1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># 设置附件的MIME和文件名 这里是png类型：</span></span><br><span class="line">            attachfile = MIMEBase(<span class="string">'image'</span>, <span class="string">'png'</span>, filename=<span class="string">'1.png'</span>)</span><br><span class="line">            <span class="comment"># 加上必要的头信息</span></span><br><span class="line">            attachfile.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'1.png'</span>)</span><br><span class="line">            attachfile.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;0&gt;'</span>)</span><br><span class="line">            attachfile.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="comment"># 把附件类容读进来</span></span><br><span class="line">            attachfile.set_payload(f.read())</span><br><span class="line">            <span class="comment"># 利用base64编码</span></span><br><span class="line">            encode_base64(attachfile)</span><br><span class="line">            <span class="comment"># 添加到MIMEMultipart:</span></span><br><span class="line">            msg.attach(attachfile)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = smtplib.SMTP(<span class="string">'smtp.163.com'</span>)</span><br><span class="line">            s.login(_user, _pwd)</span><br><span class="line">            s.sendmail(_user, _to, msg.as_string())</span><br><span class="line">            s.quit()</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"成功发送"</span>)</span><br><span class="line">        <span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'发送失败'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"成功发送"</span>)</span><br></pre></td></tr></table></figure><h3 id="网站测试"><a href="#网站测试" class="headerlink" title="网站测试"></a>网站测试</h3><p>本地，服务器响应了HTTP的GET 请求：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image8.png" alt=""></p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image7.png" alt=""></p><p>部署到服务器，同样相应的请求：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image9.png" alt=""></p><h2 id="Email客户端"><a href="#Email客户端" class="headerlink" title="Email客户端"></a>Email客户端</h2><h3 id="使用qq邮箱"><a href="#使用qq邮箱" class="headerlink" title="使用qq邮箱"></a>使用qq邮箱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 温浩珉负责</span></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line">_user = <span class="string">"291221910@qq.com"</span></span><br><span class="line">_pwd  = <span class="string">"*********"</span></span><br><span class="line">_to   = <span class="string">"291221910@qq.com"</span></span><br><span class="line">msg = MIMEText(<span class="string">"Test"</span>)</span><br><span class="line">msg[<span class="string">"Subject"</span>] = <span class="string">"don't panic"</span></span><br><span class="line">msg[<span class="string">"From"</span>]    = _user</span><br><span class="line">msg[<span class="string">"To"</span>]      = _to</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = smtplib.SMTP_SSL(<span class="string">"smtp.qq.com"</span>, <span class="number">465</span>)</span><br><span class="line">    s.login(_user, _pwd)</span><br><span class="line">    s.sendmail(_user, _to, msg.as_string())</span><br><span class="line">    print(msg.as_string())</span><br><span class="line">    s.quit()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Success!"</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Falied"</span>)</span><br></pre></td></tr></table></figure><h3 id="使用163邮箱"><a href="#使用163邮箱" class="headerlink" title="使用163邮箱"></a>使用163邮箱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 王子泰负责</span></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEBase, MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.encoders <span class="keyword">import</span> encode_base64</span><br><span class="line"></span><br><span class="line">mail_name = <span class="string">'wang22ti@163.com'</span></span><br><span class="line">to_list = [mail_name, <span class="string">'455049206@qq.com'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不构造邮件，会被网易识别为554垃圾邮件</span></span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line"><span class="comment"># 图片</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    image = MIMEImage(f.read())</span><br><span class="line">    msg.attach(image)</span><br><span class="line"><span class="comment"># 图片加入文本</span></span><br><span class="line">text = MIMEText(<span class="string">'&lt;html&gt;&lt;body&gt;&lt;img src="cid:0"/&gt;&lt;/body&gt;&lt;/html&gt;'</span>, <span class="string">'html'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">msg.attach(text)</span><br><span class="line"><span class="comment"># 附件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 设置附件的MIME和文件名 这里是png类型：</span></span><br><span class="line">    attachfile = MIMEBase(<span class="string">'image'</span>, <span class="string">'png'</span>, filename=<span class="string">'1.png'</span>)</span><br><span class="line">    <span class="comment"># 加上必要的头信息</span></span><br><span class="line">    attachfile.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=<span class="string">'1.png'</span>)</span><br><span class="line">    attachfile.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;0&gt;'</span>)</span><br><span class="line">    attachfile.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</span><br><span class="line">    <span class="comment"># 把附件类容读进来</span></span><br><span class="line">    attachfile.set_payload(f.read())</span><br><span class="line">    <span class="comment"># 利用base64编码</span></span><br><span class="line">    encode_base64(attachfile)</span><br><span class="line">    <span class="comment"># 添加到MIMEMultipart:</span></span><br><span class="line">    msg.attach(attachfile)</span><br><span class="line">msg[<span class="string">'Content-Type'</span>] = <span class="string">'Text/HTML'</span></span><br><span class="line">msg[<span class="string">'Subject'</span>] = Header(<span class="string">'hello'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">msg[<span class="string">'To'</span>] = mail_name</span><br><span class="line">msg[<span class="string">'From'</span>] = <span class="string">'Python_wang22ti &lt;%s&gt;'</span> % mail_name</span><br><span class="line">smtp = smtplib.SMTP(<span class="string">'smtp.163.com'</span>)</span><br><span class="line">smtp.login(mail_name, <span class="string">'**********'</span>)</span><br><span class="line">smtp.sendmail(from_addr=mail_name, to_addrs=to_list, msg=msg.as_string())</span><br><span class="line">smtp.close()</span><br></pre></td></tr></table></figure><h2 id="进一步的开发"><a href="#进一步的开发" class="headerlink" title="进一步的开发"></a>进一步的开发</h2><h3 id="完善发邮件的基本功能"><a href="#完善发邮件的基本功能" class="headerlink" title="完善发邮件的基本功能"></a>完善发邮件的基本功能</h3><p>​    现有的网站只实现了固定用户向不同用户发送文字邮件的功能，虽然在发送的邮件中添加了图片，但是该图片并不能由用户选择。我们希望在下一步的开发中实现用户登录、添加附件、正文自由添加图片等等功能。</p><h3 id="优化用户界面"><a href="#优化用户界面" class="headerlink" title="优化用户界面"></a>优化用户界面</h3><p>​    由于制作匆忙，软件的界面比较简陋，在进一步的开发中可以使用CSS样式表或者HTML5等方法优化界面，使之对用户更加友好。</p><h3 id="加入接收邮件的功能"><a href="#加入接收邮件的功能" class="headerlink" title="加入接收邮件的功能"></a>加入接收邮件的功能</h3><p>​    在开发中我们已经测试了使用POP3协议接收邮件的功能，在进一步的开发中可以加入，并通过图形界面使之对用户更加友好。</p><h3 id="优化报错机制"><a href="#优化报错机制" class="headerlink" title="优化报错机制"></a>优化报错机制</h3><p>​    在现有的版本中，当发送邮件发生错误时。有些情况下，例如图片不在指定的路径当中，返回给用户的是面向开发者的错误说明，在进一步的开发当中，我们需要返回面向用户的错误提醒机制，例如弹窗或者利用CSS样式表；另外的一些情况下，发送错误并不会报错，例如邮件并没有成功送达对方邮箱，这需要我们完善报错的代码，使之能满足更多的需求</p><h3 id="加入数据库，实现更多功能"><a href="#加入数据库，实现更多功能" class="headerlink" title="加入数据库，实现更多功能"></a>加入数据库，实现更多功能</h3><p>​    一方面，可以在客户端实现“已发送”、“草稿箱”、“已删除”、“通讯录”等邮件功能；另一方面，利用机器学习，还可以实现一些更高级的功能，例如邮件分类、垃圾处理等等。</p><h1 id="GBN算法的python实现"><a href="#GBN算法的python实现" class="headerlink" title="GBN算法的python实现"></a>GBN算法的python实现</h1><h2 id="主要问题及解决方案"><a href="#主要问题及解决方案" class="headerlink" title="主要问题及解决方案"></a>主要问题及解决方案</h2><p>（1）数据传送格式</p><p>​      网络数据的传输本质上是以字节流的方式进行的，因此想要传输例如图片的多媒体文件，需要先将其转化为字节流的形式。同时我们给每段字节流加上固定长度的GBN信息，以实现GBN的滑动窗口算法。</p><p>（2）有限状态机的程序表示</p><p>实现GBN协议，核心问题是要解决将有限状态机翻译为程序语言的问题。以发送端的有限状态机来说，在面对不同的触发条件的时候，需要执行不同的程序，而且要能回到最初的状态。在本次实验中，我们给出的方案是将所有要执行的内容放在一个大的循环里面，在循环里面使用if语句进行判断，当满足触发条件的时候，执行if语句中的内容，否则进行下一轮循环。</p><h2 id="实验源码"><a href="#实验源码" class="headerlink" title="实验源码"></a>实验源码</h2><p>代码我们主要分为两部分，发送端（服务端）和接收端（客户端）。实现的代码中，我们采用TCP连接，通过TCP连接中服务端向客户端发送数据来实现GBN协议。</p><p>（1）服务端</p><p>​      监听连接，当有客户端请求数据时，开始传输数据，传输过程中使用GBN协议，直到传输完成。</p><p>（2）客户端</p><p>​        请求TCP连接，不断检查收到的包是否正确，并且给服务端发送相应的ACK。同时设置客户端以一定概率丢掉接收到的包以模拟真实网络环境下的丢包情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host, port = <span class="string">'127.0.0.1'</span>, <span class="number">80</span></span><br><span class="line">ip = socket.gethostbyname(host)</span><br><span class="line">ip_port = (ip, port)</span><br><span class="line">sk.bind(ip_port)</span><br><span class="line">sk.listen()</span><br><span class="line">print(<span class="string">'listening...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    mss = <span class="number">1024</span></span><br><span class="line">    head_len = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    connect, address = sk.accept()</span><br><span class="line">    print(<span class="string">'accepting...'</span>)</span><br><span class="line">    request = str(connect.recv(mss), encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    print(<span class="string">'receive: '</span> + request)</span><br><span class="line"></span><br><span class="line">    type_request, file_path = request.split(<span class="string">' '</span>)</span><br><span class="line">    len_data = os.path.getsize(file_path)</span><br><span class="line">    last_packet = int(len_data / (mss - head_len)) + <span class="number">1</span></span><br><span class="line">    connect.send(bytes(str(last_packet), encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    print(<span class="string">'packet number: '</span> + str(last_packet))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        base = <span class="number">0</span></span><br><span class="line">        next_seq_num = <span class="number">0</span></span><br><span class="line">        window_size = <span class="number">10</span></span><br><span class="line">        time_out = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            print(base)</span><br><span class="line">            print(next_seq_num)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> next_seq_num &lt; base + window_size:</span><br><span class="line">                    data = f.read(mss - head_len)</span><br><span class="line">                    packet = bytes(str(next_seq_num).ljust(<span class="number">10</span>), encoding=<span class="string">'utf-8'</span>) + data</span><br><span class="line">                    connect.send(packet)</span><br><span class="line">                    <span class="keyword">if</span> base == next_seq_num:</span><br><span class="line">                        connect.settimeout(time_out)</span><br><span class="line">                    next_seq_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                ack_list = str(connect.recv(mss), encoding=<span class="string">'utf-8'</span>).split(<span class="string">' '</span>, window_size - <span class="number">1</span>)</span><br><span class="line">                ack_list = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> ack_list]</span><br><span class="line">                print(ack_list)</span><br><span class="line">                <span class="keyword">if</span> len(ack_list) &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> base != next_seq_num:</span><br><span class="line">                        connect.settimeout(time_out)</span><br><span class="line">                    base = max(ack_list) + <span class="number">1</span></span><br><span class="line">                    next_seq_num = base</span><br><span class="line">            <span class="keyword">except</span> socket.timeout <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">'******'</span> + str(base) + str(next_seq_num))</span><br><span class="line">                <span class="keyword">if</span> next_seq_num == last_packet:</span><br><span class="line">                    f.seek((mss - head_len) * (next_seq_num - <span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f.seek((mss - head_len) * (next_seq_num - base) * <span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">                next_seq_num = base</span><br><span class="line"></span><br><span class="line">        connect.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host, port = <span class="string">'127.0.0.1'</span>, <span class="number">80</span></span><br><span class="line">ip = socket.gethostbyname(host)</span><br><span class="line">ip_port = (ip, port)</span><br><span class="line">sk.connect(ip_port)</span><br><span class="line"></span><br><span class="line">mss = <span class="number">1024</span></span><br><span class="line">file_name = <span class="string">'1.png'</span></span><br><span class="line">message = <span class="string">"GET "</span> + file_name</span><br><span class="line">sk.sendall(bytes(message, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">num_packet = int(sk.recv(mss))</span><br><span class="line">print(num_packet)</span><br><span class="line"></span><br><span class="line">head_len = <span class="number">10</span></span><br><span class="line"><span class="keyword">with</span> open(file_name, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    pic = <span class="string">b''</span></span><br><span class="line">    ack = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        packet = sk.recv(mss)</span><br><span class="line">        <span class="comment"># 设置一定的丢包率作为测试</span></span><br><span class="line">        <span class="keyword">if</span> random.random() &gt; <span class="number">0.99</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        seq_number = int(str(packet[:head_len], encoding=<span class="string">'utf-8'</span>).replace(<span class="string">' '</span>, <span class="string">''</span>))</span><br><span class="line">        <span class="keyword">if</span> ack == seq_number:</span><br><span class="line">            data = packet[head_len:]</span><br><span class="line">            pic += data</span><br><span class="line">            sk.sendall(bytes(str(ack), encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">            ack += <span class="number">1</span></span><br><span class="line">            print(ack)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sk.sendall(bytes(str(ack), encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">if</span> seq_number == num_packet - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># time.sleep(0.1)</span></span><br><span class="line">    file.write(pic)</span><br><span class="line"></span><br><span class="line">sk.close()</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>程序运行之前，在发送端有文件图片，大小为246kb，如下：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image10.png" alt=""></p><p>程序运行时的效果，客户端打印收到的包的序号：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image11.png" alt=""></p><p>程序运行结束时，客户端文件中收到了完整的图片，大小为246kb，经检查没有错误，说明了传输的可靠性和完整性：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image12.png" alt=""></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="发送方"><a href="#发送方" class="headerlink" title="发送方"></a>发送方</h3><p>​    GBN发送方必须响应以下三种类型的事件：</p><p>​        上层的调用，当上层调用发送函数的时候，发送方首先检查发送窗口是否已满，即是否有N个已发送但未被确认的分组。如果窗口未满，则创建一个分组并将其发送，变量也相应的更新。</p><p>​        收到ACK，在GBN协议中，对序号为n的分组的确认采取累计确认的方式。表明接收方以正确接收序号n以前（包括n在内）的所有分组。</p><p>​        超时事件：如果出现超时，发送方将重传所有已发送还未被确认的分组。如果收到一个ACK，但是仍有已发送但未被确认的分组，则定时器被重新启动，如果没有已发送但未被确认的分组，则定时器被终止。</p><h3 id="接收方"><a href="#接收方" class="headerlink" title="接收方"></a>接收方</h3><p>​        在GBN中，接收方的动作比较简单。</p><p>​        接收方只需要判断当前接收的分组是否正确。如果一个序号为n的分组被正确收到，并且按序（即上次交付给上层的分组的序号是n-1），则接收方位分组n发送一个ACK，并且将改分组中的数据交付到上层。</p><p>​    在其他所有的情况下，接收方都丢弃该分组，并且为最近按序接收的分组重传ACK。</p><p>​    需要注意的是，因为采用累积确定机制，如果分组k已接受并交付，这意味着所有比k小的分组也已经交付。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>​    本次实验中，我们完成了python的网络编程，模拟了GBN协议在真实环境下的运行，对GBN协议有了进一步的了解。</p><p>​    在GBN协议中，接收方会丢弃所有失序的分组，尽管丢弃一个正确接收但是失序的分组有点浪费。但是根据GBN的原理。假定当前期望的编号是n，但是n+1提前达到。因为数据必须是有序交付，接收方可能缓存分组n+1，然后在他收到并交付分组n后，再将该分组交付到上层。但是如果n丢失，则n和n+1的分组都会被重发，因此，接收方只需要丢弃分组n+1即可。</p><p>​    这种方法的优点是接收方缓存简单，即接收方不需要缓存任何失序分组。对于发送方来说，他只需要维护窗口的下边界和和nextseqnum在窗口中的位置。对于接收方来说，只需要维护下一个按序接收的分组的序号。</p><h1 id="Dijkstra-算法的路由软件——python实现"><a href="#Dijkstra-算法的路由软件——python实现" class="headerlink" title="Dijkstra 算法的路由软件——python实现"></a>Dijkstra 算法的路由软件——python实现</h1><h2 id="Dijkstra算法的实现"><a href="#Dijkstra算法的实现" class="headerlink" title="Dijkstra算法的实现"></a>Dijkstra算法的实现</h2><p>本实验的基础内容。我们使用python的第三方库networks生成、存储图，使用标准库语句完成Dijkstra算法的实现——输入一个图，返回存储任意两点间最短路径的字典。关键代码及注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_graph</span><span class="params">(num_node)</span>:</span></span><br><span class="line">    G = nx.Graph()</span><br><span class="line">    <span class="comment"># 使用nx.barabasi_albert_graph构造一个num_node顶点，每个新顶点有num_node/10条边的图</span></span><br><span class="line">    <span class="comment"># 在构造的图上赋以权重，存入文件‘graph.txt’中</span></span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> nx.barabasi_albert_graph(num_node, int(num_node / <span class="number">10</span>), seed=<span class="number">1</span>).edges():</span><br><span class="line">        G.add_edge(u, v, weight=random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">    nx.write_edgelist(G, <span class="string">"graph.txt"</span>, data=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(G)</span>:</span></span><br><span class="line">    path = &#123;&#125;</span><br><span class="line">    nodes = G.nodes()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">        N_set = [node]</span><br><span class="line">        D = &#123;&#125;</span><br><span class="line">        <span class="comment"># 初始化path和D</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> nodes:</span><br><span class="line">            path[node, v] = [node]</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> G.neighbors(node):</span><br><span class="line">                D[v] = G.get_edge_data(node, v)[<span class="string">'weight'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                D[v] = float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="comment"># 算法主体部分</span></span><br><span class="line">        <span class="comment"># 当所有点都在N中时跳出循环</span></span><br><span class="line">        <span class="keyword">while</span> len(N_set) &lt; len(nodes):</span><br><span class="line">            <span class="comment"># 找到距离node最近的点并将其加入N</span></span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> sorted(D, key=D.__getitem__, reverse=<span class="keyword">False</span>):</span><br><span class="line">                <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> N_set:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            N_set.append(w)</span><br><span class="line">            <span class="comment"># 根据w和新的N，更新D和path</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> set(G.neighbors(w)) - set(N_set):</span><br><span class="line">                <span class="comment"># 如果D(v) &gt; D(w) + cost(w, v)，</span></span><br><span class="line">                <span class="comment"># 使用【w的path加上w】作为v的path</span></span><br><span class="line">                <span class="comment"># 使用D(w) + cost(w, v)作为D(v)</span></span><br><span class="line">                <span class="keyword">if</span> D[v] &gt; D[w] + G.get_edge_data(w, v)[<span class="string">'weight'</span>]:</span><br><span class="line">                    path[node, v][:] = path[node, w][:]</span><br><span class="line">                    path[node, v].append(w)</span><br><span class="line">                    D[v] = D[w] + G.get_edge_data(w, v)[<span class="string">'weight'</span>]</span><br><span class="line">        <span class="comment"># 将每个点本身加到其path的最后</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> v != node:</span><br><span class="line">                path[node, v].append(v)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><h2 id="最优路径的可视化"><a href="#最优路径的可视化" class="headerlink" title="最优路径的可视化"></a>最优路径的可视化</h2><p>networks提供了可视化的接口，我们实现了20个点下5到15的最优路径可视化如下图，上图为原图，下图红色的为最优路径[5, 4, 0, 15]，线的粗细表示两点间的cost。</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (1" alt="">.png)</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (2" alt="">.png)</p><p>关键代码及注释如下，最优路径图由点、非最优路径、最优路径三部分组成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用自己写的dijkstra算法得到最短路径</span></span><br><span class="line">G = get_graph(<span class="number">20</span>)</span><br><span class="line">path = dijkstra(G)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出原图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">6</span>))</span><br><span class="line">plt.title(<span class="string">"graph"</span>)</span><br><span class="line">pos = nx.spring_layout(G)</span><br><span class="line">nx.draw_networkx(G, pos)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出带有5到15的最短路径的图</span></span><br><span class="line">start_node = <span class="number">5</span></span><br><span class="line">end_node = <span class="number">15</span></span><br><span class="line"><span class="comment"># 画点</span></span><br><span class="line">edges = path_to_edges(path, start_node, end_node)</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">6</span>))</span><br><span class="line">plt.title(<span class="string">"The shortest path from %d to %d"</span> % (start_node, end_node))</span><br><span class="line">nx.draw_networkx_nodes(G, pos, node_size=<span class="number">40</span>)</span><br><span class="line"><span class="comment"># 画非路径上的边</span></span><br><span class="line">edges_not_in_path = list(set(G.edges()) - set(edges))</span><br><span class="line">edgewidth = [G.get_edge_data(edge[<span class="number">0</span>], edge[<span class="number">1</span>])[<span class="string">'weight'</span>] <span class="keyword">for</span> edge <span class="keyword">in</span> edges_not_in_path]</span><br><span class="line">nx.draw_networkx_edges(G, pos, edgelist=edges_not_in_path, width=edgewidth, edge_color=<span class="string">'b'</span>)</span><br><span class="line"><span class="comment"># 画路径上的边</span></span><br><span class="line">edgewidth = [G.get_edge_data(edge[<span class="number">0</span>], edge[<span class="number">1</span>])[<span class="string">'weight'</span>] <span class="keyword">for</span> edge <span class="keyword">in</span> edges]</span><br><span class="line">nx.draw_networkx_edges(G, pos, edgelist=edges, width=edgewidth, edge_color=<span class="string">'r'</span>)</span><br></pre></td></tr></table></figure><h2 id="算法结果检查"><a href="#算法结果检查" class="headerlink" title="算法结果检查"></a>算法结果检查</h2><p>一方面，通过人工检查，20个点的图的数据存储在文件中，易知5到15的最优路径的确为[5, 4,0, 15]。</p><p>另一方面，将得到的路径输出并与networks提供的Dijistra算法结果比对，发现全部一致，可以认为我们的算法无误，截取部分结果如下：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (3" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (4" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (5" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (6" alt="">.png)</p><p>关键代码和注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用networkx实现的dijkstra得到路径并和自己实现的比对</span></span><br><span class="line">path2 = nx.all_pairs_dijkstra_path(G)</span><br><span class="line"><span class="keyword">for</span> start_node <span class="keyword">in</span> G.nodes():</span><br><span class="line">    <span class="keyword">for</span> end_node <span class="keyword">in</span> G.nodes():</span><br><span class="line">        <span class="keyword">if</span> end_node != start_node:</span><br><span class="line">            print(<span class="string">'my：'</span>, path[start_node, end_node])</span><br><span class="line">            print(<span class="string">'nx: '</span>, path2[start_node][end_node])</span><br></pre></td></tr></table></figure><h2 id="路由表的输出"><a href="#路由表的输出" class="headerlink" title="路由表的输出"></a>路由表的输出</h2><p>在本课程中，Dijistra算法的使用根本是为了获得每个路由器的转发表，所以我们将所有的最优路径转化为转发表并输出，部分结果如下，其中左边的为目的路由器，右边的为下一个路由器：<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (7" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (8" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (9" alt="">.png)<br><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (10" alt="">.png)</p><p>关键代码和注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出路由表</span></span><br><span class="line"><span class="keyword">for</span> router <span class="keyword">in</span> G.nodes():</span><br><span class="line">    print(<span class="string">'forwarding table for router %d'</span> % router)</span><br><span class="line">    <span class="keyword">for</span> start_node <span class="keyword">in</span> G.nodes():</span><br><span class="line">        <span class="comment"># 输出路由器router转发来自start_node的数据报的转发表</span></span><br><span class="line">        print(<span class="string">'from start_node %d: '</span> % start_node)</span><br><span class="line">        <span class="keyword">for</span> end_node <span class="keyword">in</span> G.nodes():</span><br><span class="line">            <span class="keyword">if</span> start_node != end_node:</span><br><span class="line">                path_start_to_end = path[start_node, end_node]</span><br><span class="line">                <span class="keyword">if</span> router <span class="keyword">in</span> path_start_to_end:</span><br><span class="line">                    <span class="keyword">if</span> router != end_node:</span><br><span class="line">                        next_router = path_start_to_end[path_start_to_end.index(router) + <span class="number">1</span>]</span><br><span class="line">                    print(<span class="string">'%d\t|\t%d'</span> % (end_node, next_router))</span><br><span class="line">    print(<span class="string">'-----------------------------'</span>)</span><br></pre></td></tr></table></figure><h2 id="算法性能对比"><a href="#算法性能对比" class="headerlink" title="算法性能对比"></a>算法性能对比</h2><p>我们将我们的算法与networks提供的算法进行性能比对，测试环境如下：</p><p>处理器：Intel i7 7500U</p><p>内存：8G, lddr4</p><p>系统：windows 10 1709 家庭中文版</p><p>Python版本：python3.5.3</p><p>IDE：PyCharm Community Edition 2017.2.4</p><p>得到的原始数据如下：</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (12" alt="">.png)</p><p>将其可视化后，可以清楚地发现，我们的时间以指数增长，标准的算法以对数增长，这是我们需要进一步优化的地方，低效率的路由算法不具备任何的工程意义。</p><p><img src="/2018/05/11/朝花夕拾——《计算机网络原理》实验合集/image (11" alt="">.png)</p><p>关键代码和注释如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得原始数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cmp_time.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>, <span class="number">600</span>, <span class="number">20</span>):</span><br><span class="line">        G = get_graph(i)</span><br><span class="line">        print(<span class="string">'node num: %d'</span> % i)</span><br><span class="line">        f.write(<span class="string">'%d,'</span> % i)</span><br><span class="line"></span><br><span class="line">        start1 = time()</span><br><span class="line">        dijkstra(G)</span><br><span class="line">        time1 = time() - start1</span><br><span class="line">        print(time1)</span><br><span class="line">        f.write(str(time1) + <span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">        start2 = time()</span><br><span class="line">        nx.all_pairs_dijkstra_path(G)</span><br><span class="line">        time2 = time() - start2</span><br><span class="line">        print(time2)</span><br><span class="line">        f.write(str(time2) + <span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> time2 &gt; <span class="number">0</span>:</span><br><span class="line">            ratio = time1 / time2</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ratio = float(<span class="string">'inf'</span>)</span><br><span class="line">        print(ratio)</span><br><span class="line">        f.write(str(ratio) + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据可视化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_data</span><span class="params">(datas, attr, min_, max_)</span>:</span></span><br><span class="line">    results = [data <span class="keyword">for</span> data <span class="keyword">in</span> datas <span class="keyword">if</span> data[attr] &gt;= min_ <span class="keyword">and</span> data[attr] &lt;= max_]</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(fp, columns=[])</span>:</span></span><br><span class="line">    f = pd.read_csv(fp)</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(f.__len__()):</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> columns:</span><br><span class="line">            data[c] = f[c][i]</span><br><span class="line">        datas.append(data)</span><br><span class="line">    <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    plog = <span class="string">'./cmp_time.csv'</span></span><br><span class="line">    datas = read_data(plog, [<span class="string">'node'</span>, <span class="string">'my'</span>, <span class="string">'nx'</span>, <span class="string">'rate'</span>])</span><br><span class="line">    nodes = [data[<span class="string">'node'</span>] <span class="keyword">for</span> data <span class="keyword">in</span> datas]</span><br><span class="line">    my_ = [data[<span class="string">'my'</span>] <span class="keyword">for</span> data <span class="keyword">in</span> datas]</span><br><span class="line">    nx_ = [data[<span class="string">'nx'</span>] <span class="keyword">for</span> data <span class="keyword">in</span> datas]</span><br><span class="line">    rate_ = [data[<span class="string">'rate'</span>] <span class="keyword">for</span> data <span class="keyword">in</span> datas]</span><br><span class="line"></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">'time'</span>)</span><br><span class="line"></span><br><span class="line">    ax1.plot(nodes, my_, <span class="string">'p-.'</span>, label=<span class="string">" our own algorithm"</span>)</span><br><span class="line">    ax1.plot(nodes, nx_, <span class="string">'p-.'</span>, label=<span class="string">"standard algorithm"</span>)</span><br><span class="line">    plt.legend(loc=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    ax2 = ax1.twinx()</span><br><span class="line">    ax2.plot(nodes, rate_, <span class="string">'D-.'</span>, color=<span class="string">'r'</span>, label=<span class="string">"rate"</span>)</span><br><span class="line">    ax2.set_ylabel(<span class="string">'rate'</span>)</span><br><span class="line">    plt.legend(loc=<span class="number">1</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="实验总结与未来展望"><a href="#实验总结与未来展望" class="headerlink" title="实验总结与未来展望"></a>实验总结与未来展望</h2><p>​    通过本次实验，我们完成了路由算法的实现、校验、可视化和性能测试。一方面，我们对于算法的理解更加深入，对于网络层数据报的路由转发过程的认识更加清晰，这必将对我们的进一步学习带来积极地影响；另一方面，算法的低效让我们认识到存在的不足和差距，意识到算法对于效率的重要性，我们将以此为基础，做出改进。</p><p>​    限于时间，我们并没有进一步优化算法，现在我们想到的提高程序效率的方案有：</p><ol><li><p>尝试使用更加底层的语言编写程序</p></li><li><p>由于最短路径是双向的，循环应该跳过已经计算好的路径</p></li><li><p>优化程序的逻辑结构、数据的存储方式</p></li><li><p>采用多线程的方式计算路径并调用GPU加速</p></li></ol><p>当然，得益于networks库的开源性，我们可以进一步研究其源代码以获得启发，但这可能已经远远超出了本次实验所要求的内容了，在此不做赘述。</p>]]></content>
      
      <categories>
          
          <category> 计算机网络原理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>朝花夕拾——《汇编与接口技术》综合实验</title>
      <link href="/2018/05/11/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E6%B1%87%E7%BC%96%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF%E3%80%8B%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C/"/>
      <content type="html"><![CDATA[<p>这个作业并不是我独立完成的，需要特别感谢祝叶舟和吴文睿两位同学协作。</p><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>1)   综合运用课堂学习的汇编与接口知识，在实践的基础上进一步巩固知识点</p><p>2)   通过自学课堂上没有讲到的接口技术，提高同学们的自学意识与能力</p><p>3)   通过实验的设计，提高同学们系统工程的意识，提高同学们的创新意识与能力</p><p>4)   通过团队协作，提高同学们合作的能力与意识</p><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><h2 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h2><p>小时候在红白机上，我们都玩过经典的“打飞机”游戏，我们的实验就是通过开发板上现有的接口，实现游戏的基本功能，包括：</p><p>1)   用一个像素点表示一下飞机</p><p>2)   通过按键控制飞机移动</p><p>3)   随着时间的推移，自动出现敌人</p><p>4)   通过按键控制飞机开炮，使得同一条直线上的敌人死亡</p><p>5)   当敌人飞越我方飞机，则我方输，显示相关信息</p><p>6)   当将敌人飞机全部消灭，我方胜利，显示相关信息</p><h2 id="实验所用接口"><a href="#实验所用接口" class="headerlink" title="实验所用接口"></a>实验所用接口</h2><p>本次实验一共使用了6个接口，他们的功能如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">接口</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">8255并行接口</td><td style="text-align:center">并行输出点阵的亮灭信息到8*8点阵</td></tr><tr><td style="text-align:center">8*8点阵</td><td style="text-align:center">接收8255的点阵信息并显示游戏界面</td></tr><tr><td style="text-align:center">4*4小键盘</td><td style="text-align:center">输出的信号作为中断源，执行相应的中断程序完成对我方飞机的左右控制与开炮操作</td></tr><tr><td style="text-align:center">8254计数器</td><td style="text-align:center">计时，用于控制新的敌人产生的速度与8*8点阵的刷新频率</td></tr><tr><td style="text-align:center">8259中断控制</td><td style="text-align:center">接收其他接口的信号并产生对应的中断</td></tr><tr><td style="text-align:center">6位数码管</td><td style="text-align:center">用于显示玩家的分数，可以是击落敌机的数量，或者是剩余敌机的数量</td></tr></tbody></table></div><h2 id="实验连线"><a href="#实验连线" class="headerlink" title="实验连线"></a>实验连线</h2><h3 id="8255与8-8点阵"><a href="#8255与8-8点阵" class="headerlink" title="8255与8*8点阵"></a>8255与8*8点阵</h3><p>用8255的A口输出控制8*8点阵的行信息，B口输出控制8*8点阵的列信息。如果只有行信息或列信息，对应行或列的灯都会被电亮；但如果同时都有行列信息，行和列对应的一个灯会被点亮。通过高速的刷新8*8点阵，当刷新频率超过人眼可以识别的时候，就会形成连续的图像，让人感觉是动画。</p><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/1.png" alt=""></p><h3 id="8254、5259和6位数码管"><a href="#8254、5259和6位数码管" class="headerlink" title="8254、5259和6位数码管"></a>8254、5259和6位数码管</h3><p>和之前做过的实验相同，通过串联两个定时器，8254发出一定频率的方波，当传到系统总线的时候引发中断，执行中断程序让所有的敌人向下移动1个单位，从而推动游戏的发展。而每次集中敌人的时候，也会引发中断，执行相应的程序完成计数并显示到数码管上。</p><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/2.png" alt=""></p><h3 id="8255和小键盘"><a href="#8255和小键盘" class="headerlink" title="8255和小键盘"></a>8255和小键盘</h3><p>通过设置8255的控制字，使得由C接收来自小键盘行和列的信号。通过汇编软件的逻辑操作，完成对是哪一个按键的判断，从而触发相应的中断程序，完成游戏的逻辑控制。</p><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/3.png" alt=""></p><h3 id="实验连线实物图"><a href="#实验连线实物图" class="headerlink" title="实验连线实物图"></a>实验连线实物图</h3><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/4.jpg" alt=""></p><h2 id="实验程序设计"><a href="#实验程序设计" class="headerlink" title="实验程序设计]"></a>实验程序设计]</h2><p>本程序采用中断的方式，否则不断刷新界面，保持画面的稳定性，当有中断的时候处理相应事件完成对应操作。其中，中断服务程序需要完成两个任务，一个是点阵刷新，另外一个是更新敌人。程序的流程图如下：</p><p><img src="/2018/05/11/朝花夕拾——《汇编与接口技术》综合实验/5.png" alt=""></p><h2 id="程序源代码"><a href="#程序源代码" class="headerlink" title="程序源代码"></a>程序源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line">;****************************************;</span><br><span class="line">;*        游戏                          *;</span><br><span class="line">;****************************************;</span><br><span class="line">data   segment   </span><br><span class="line">led_cs_0   equ  220H</span><br><span class="line">led_cs_1   equ  221h</span><br><span class="line"></span><br><span class="line">i8254_0    equ  210h</span><br><span class="line">i8254_1    equ  211h</span><br><span class="line">i8254_kz   equ  213h</span><br><span class="line"></span><br><span class="line">i8255_kz   equ  203h</span><br><span class="line">i8255_a    equ  200h</span><br><span class="line">i8255_b    equ  201h</span><br><span class="line">i8255_c    equ  202h</span><br><span class="line"></span><br><span class="line">pdata      db   11h,0h,0h,00h,0h,0h,0h</span><br><span class="line">user       db   08h</span><br><span class="line">num_row    dw   0h</span><br><span class="line">bit_num    db   01h,02h,04h,08h,10h,20h,40h,80h  ;led位置选择码</span><br><span class="line">lose       db   81h,42h,24h,18h,18h,24h,42h,81h</span><br><span class="line">victory    db   00h,66h,99h,81h,42h,24h,18h,00h</span><br><span class="line">enemy      db   21h,42h,42h,04h,8h,78h,12h,20h,10h,40h,20h,04h,10h,04h,80h,10h</span><br><span class="line">ledcode    db   3fh,06h,5bh,4fh,66h,6dh,7dh,07h,7fh,67h,77h,7ch,39h,5eh,79h,71h</span><br><span class="line">flag       db   01h</span><br><span class="line">count      dw   00h</span><br><span class="line">num_enemy  dw   00h</span><br><span class="line">num        db   00h</span><br><span class="line"></span><br><span class="line">data   ends    </span><br><span class="line">code segment  </span><br><span class="line">         assume cs:code,ds:data </span><br><span class="line">start:   cli</span><br><span class="line">         mov   ax,data</span><br><span class="line">         mov   ds,ax</span><br><span class="line">         mov   es,ax  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">;------- 8254 初始化---------------   </span><br><span class="line">         mov   dx,i8254_kz    </span><br><span class="line">         mov   al,00110110b      ;0# mode 3</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   ax,10</span><br><span class="line">         mov   dx,i8254_0</span><br><span class="line">         out   dx,al;先写入低字节</span><br><span class="line">         mov   al,ah</span><br><span class="line">         out   dx,al;后写入高字节</span><br><span class="line">         mov   dx,i8254_kz</span><br><span class="line">         mov   al,01111100b;设8254通道1工作方式2</span><br><span class="line">         out   dx,al</span><br><span class="line">         </span><br><span class="line">         mov   ax,10;写入循环计数初值1000</span><br><span class="line">         mov   dx,i8254_1</span><br><span class="line">         out   dx,al;先写低字节</span><br><span class="line">         mov   al,ah</span><br><span class="line">         out   dx,al;后写高字节</span><br><span class="line"></span><br><span class="line">;------ 8259 初始化----------------      </span><br><span class="line">         push  ds    </span><br><span class="line">         mov   ax,0</span><br><span class="line">         mov   ds,ax</span><br><span class="line">         lea   ax,cs:mint_proc;写入中断程序入口</span><br><span class="line">         mov   bx,5;n=IRx</span><br><span class="line">         mov   si,30H           ;base =30H   Master</span><br><span class="line">         add   si,bx</span><br><span class="line">         add   si,si;type num</span><br><span class="line">         add   si,si;X4</span><br><span class="line">         mov   ds:[si],ax</span><br><span class="line">         push  cs            </span><br><span class="line">         pop   ax   </span><br><span class="line">         mov   ds:[si+2],ax    </span><br><span class="line">         pop   ds         </span><br><span class="line"></span><br><span class="line">;------ WRITE 8259 MASK WORD-----------</span><br><span class="line">         in    al,21h    </span><br><span class="line">         and   al,11011011b;mask byte       </span><br><span class="line">         out   21h,al</span><br><span class="line">         sti</span><br><span class="line"></span><br><span class="line">step1:    </span><br><span class="line">         lea   si,ledcode</span><br><span class="line">         mov   cl,num</span><br><span class="line">         add   si,cx</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         mov   dx,led_cs_0</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   al,00000001b</span><br><span class="line">         mov   dx,led_cs_1</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   dx,i8255_kz;8255控制口地址  </span><br><span class="line">         mov   al,10000001b</span><br><span class="line">         out   dx,al</span><br><span class="line">L1:      mov   al,0efh</span><br><span class="line">         mov   dx,i8255_c</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   dx,i8255_c</span><br><span class="line">         in    al,dx</span><br><span class="line">         or    al,0f0h</span><br><span class="line">         cmp   al,0ffh</span><br><span class="line">         jne   key</span><br><span class="line">         jmp   L1           </span><br><span class="line">key:     mov   bl,al;</span><br><span class="line">noup:    mov   dx,i8255_c</span><br><span class="line">         in    al,dx</span><br><span class="line">         or    al,0f0h</span><br><span class="line">         cmp   al,0ffh</span><br><span class="line">         je    et</span><br><span class="line">         jmp   noup</span><br><span class="line">et:      mov   al,bl</span><br><span class="line"> or    al,0f0h</span><br><span class="line"></span><br><span class="line">         cmp   al,0f7h</span><br><span class="line">         jz    toright</span><br><span class="line"></span><br><span class="line">         cmp   al,0fbh</span><br><span class="line">         jz    toleft</span><br><span class="line"></span><br><span class="line">         cmp   al,0fdh</span><br><span class="line">         jz    atta</span><br><span class="line"></span><br><span class="line">         jmp   step1</span><br><span class="line">         </span><br><span class="line">toleft:  mov   al,user</span><br><span class="line">         rol   al,1</span><br><span class="line">         mov   user,al</span><br><span class="line">         jmp   step1</span><br><span class="line"></span><br><span class="line">toright: mov   al,user</span><br><span class="line">         ror   al,1</span><br><span class="line">         mov   user,al</span><br><span class="line">         jmp   step1</span><br><span class="line"></span><br><span class="line">atta:                  </span><br><span class="line"> lea   si,user;  </span><br><span class="line"> mov   ah, 00h</span><br><span class="line">isenemy: cmp   ah,8</span><br><span class="line"> jz    step1</span><br><span class="line"> inc   ah</span><br><span class="line"> sub   si,01h</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         cmp   al,0</span><br><span class="line">         jz    isenemy</span><br><span class="line">         xor   al,user</span><br><span class="line">         cmp   al,[si]</span><br><span class="line">         jnb   isenemy </span><br><span class="line">         mov   [si],al   </span><br><span class="line">         </span><br><span class="line">         mov   al,num</span><br><span class="line">         inc   al;</span><br><span class="line">         cmp   al,0cH</span><br><span class="line">         mov   num,al</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">         jc    step1</span><br><span class="line">         cli</span><br><span class="line">win: </span><br><span class="line">         call  disp2</span><br><span class="line">         jmp   win      </span><br><span class="line"> </span><br><span class="line">readkey  proc</span><br><span class="line">scan:    mov   al,0e0h</span><br><span class="line">         mov   dx,i8255_c</span><br><span class="line">         out   dx,al</span><br><span class="line">         mov   dx,i8255_c</span><br><span class="line">         in    al,dx</span><br><span class="line">         or    al,0f0h</span><br><span class="line">         cmp   al,0ffh</span><br><span class="line">         jne   exitkey</span><br><span class="line">         jmp   scan</span><br><span class="line">exitkey: ret</span><br><span class="line">readkey  endp</span><br><span class="line"></span><br><span class="line">keyup    proc</span><br><span class="line">noup1:   mov   dx,i8255_c</span><br><span class="line">         in    al,dx</span><br><span class="line">         or    al,0f0h</span><br><span class="line">         cmp   al,0ffh</span><br><span class="line">         je    et</span><br><span class="line">         jmp   noup</span><br><span class="line">et1:     ret</span><br><span class="line">keyup    endp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;------Master INT Prog------------------</span><br><span class="line">mint_proc proc far   </span><br><span class="line">         sti</span><br><span class="line">         push  ax</span><br><span class="line">         push  dx</span><br><span class="line"> push  si</span><br><span class="line">         mov   ax,count</span><br><span class="line">         cmp   ax,500 ;每一秒更新敌人</span><br><span class="line">         jnz   next  </span><br><span class="line">         </span><br><span class="line">         lea   si,user;</span><br><span class="line">         sub   si,01h</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         cmp   al,0</span><br><span class="line">         jz    com</span><br><span class="line">dead:    call  disp1</span><br><span class="line">         jmp   dead</span><br><span class="line">com:     sub   si,01h</span><br><span class="line">         mov   cx,6          </span><br><span class="line">lo:      mov   al,[si]</span><br><span class="line">         mov   [si+1],al;</span><br><span class="line">         sub   si,01h</span><br><span class="line">         loop  lo;</span><br><span class="line">         lea   si,enemy</span><br><span class="line">         add   si,num_enemy</span><br><span class="line">          </span><br><span class="line">         add   num_enemy,01h</span><br><span class="line">         mov   al,[si] </span><br><span class="line">         lea   si,pdata           </span><br><span class="line">         mov   [si],al </span><br><span class="line">         mov   count,0</span><br><span class="line">  </span><br><span class="line">next:    add   count,01h</span><br><span class="line">         call  disp    ;每0.01秒刷新一次</span><br><span class="line"></span><br><span class="line">         mov   al,20h  </span><br><span class="line">         out   20h,al</span><br><span class="line">         pop   si</span><br><span class="line">         pop   dx  </span><br><span class="line">         pop   ax         </span><br><span class="line">         iret</span><br><span class="line">mint_proc  endp</span><br><span class="line"></span><br><span class="line">disp     proc        ;显示</span><br><span class="line">         push  dx</span><br><span class="line">         push  bx</span><br><span class="line">         push  ax</span><br><span class="line">         push  si         </span><br><span class="line">         mov   ax,0h           </span><br><span class="line">         mov   num_row,ax;</span><br><span class="line">            </span><br><span class="line">ll1:     cmp   num_row,08h</span><br><span class="line">         jz    exi</span><br><span class="line"></span><br><span class="line">         mov   dx,i8255_kz  ;b口控制列</span><br><span class="line">         mov   al,81h</span><br><span class="line">         out   dx,al</span><br><span class="line"> lea   si,bit_num</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]            </span><br><span class="line"> mov   dx,i8255_b</span><br><span class="line">         out   dx,al</span><br><span class="line"></span><br><span class="line">         lea   si,pdata  ;a口控制列</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         mov   dx,i8255_a</span><br><span class="line">         out   dx,al</span><br><span class="line">         call  delay</span><br><span class="line">l3:      inc   num_row</span><br><span class="line">         jmp   ll1   </span><br><span class="line">exi:      </span><br><span class="line">         pop   si</span><br><span class="line">         pop   ax</span><br><span class="line">         pop   bx</span><br><span class="line">         pop   dx </span><br><span class="line">         ret    </span><br><span class="line">disp     endp</span><br><span class="line"></span><br><span class="line">disp1    proc        ;显示</span><br><span class="line">         push  dx</span><br><span class="line">         push  bx</span><br><span class="line">         push  ax</span><br><span class="line">         push  si         </span><br><span class="line">         mov   ax,0h           </span><br><span class="line">         mov   num_row,ax;</span><br><span class="line">            </span><br><span class="line">ll11:    cmp   num_row,08h</span><br><span class="line">         jz    exi1</span><br><span class="line"></span><br><span class="line">         mov   dx,i8255_kz  ;b口控制列</span><br><span class="line">         mov   al,81h</span><br><span class="line">         out   dx,al</span><br><span class="line"> lea   si,bit_num</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]            </span><br><span class="line"> mov   dx,i8255_b</span><br><span class="line">         out   dx,al</span><br><span class="line"></span><br><span class="line">         lea   si,lose  ;a口控制列</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         mov   dx,i8255_a</span><br><span class="line">         out   dx,al</span><br><span class="line">         call  delay</span><br><span class="line">l31:     inc   num_row</span><br><span class="line">         jmp   ll11   </span><br><span class="line">exi1:      </span><br><span class="line">         pop   si</span><br><span class="line">         pop   ax</span><br><span class="line">         pop   bx</span><br><span class="line">         pop   dx </span><br><span class="line">         ret    </span><br><span class="line">disp1    endp</span><br><span class="line"></span><br><span class="line">disp2    proc        ;显示</span><br><span class="line">         push  dx</span><br><span class="line">         push  bx</span><br><span class="line">         push  ax</span><br><span class="line">         push  si         </span><br><span class="line">         mov   ax,0h           </span><br><span class="line">         mov   num_row,ax;</span><br><span class="line">            </span><br><span class="line">ll12:    cmp   num_row,08h</span><br><span class="line">         jz    exi2</span><br><span class="line"></span><br><span class="line">         mov   dx,i8255_kz  ;b口控制列</span><br><span class="line">         mov   al,81h</span><br><span class="line">         out   dx,al</span><br><span class="line"> lea   si,bit_num</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]            </span><br><span class="line"> mov   dx,i8255_b</span><br><span class="line">         out   dx,al</span><br><span class="line"></span><br><span class="line">         lea   si,victory  ;a口控制列</span><br><span class="line"> add   si,num_row</span><br><span class="line">         mov   al,[si]</span><br><span class="line">         mov   dx,i8255_a</span><br><span class="line">         out   dx,al</span><br><span class="line">         call  delay</span><br><span class="line">l32:     inc   num_row</span><br><span class="line">         jmp   ll12  </span><br><span class="line">exi2:      </span><br><span class="line">         pop   si</span><br><span class="line">         pop   ax</span><br><span class="line">         pop   bx</span><br><span class="line">         pop   dx </span><br><span class="line">         ret    </span><br><span class="line">disp2    endp</span><br><span class="line"></span><br><span class="line">update   proc</span><br><span class="line">         push  ax</span><br><span class="line">         push  bx</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">         pop   bx</span><br><span class="line">         pop   ax  </span><br><span class="line">update   endp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack   proc</span><br><span class="line">         push  ax</span><br><span class="line">  </span><br><span class="line">         pop   ax      </span><br><span class="line">attack   endp</span><br></pre></td></tr></table></figure><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>录了两个视频，从中可以看到，程序按照我们所期望的方式运行。当我们胜利后，8*8点阵会显示一个心型；当我们失败的时候，会显示一个叉。</p><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><p>通过这次的综合研究型实验，我们完成了打飞机游戏，遇到了不少挑战，但最终克服了它们，有了不少收获。主要遇到了三点挑战：</p><p>第一个是图像的显示。由于8×8点阵的显示原理，我们必须采用不断刷新的方式才能显示图像；一方面，如果刷新的频率过快，会导致两次信号的重叠，最终导致显示大量的残影；另一方面，如果刷新频率过慢，两次刷新的图片，由于视觉暂留产生重叠，也得不到良好的显示效果。这个频率的确定需要反复的尝试，最终才能有理想的效果。</p><p>第二是程序逻辑的实现。由于实现的是一个游戏，所以涉及到的逻辑控制比较多，例如屏幕的向下移动，根据玩家操作给予相应的反应，根据游戏运行成败输出相应的图像。这样的汇编程序设计并不容易，每一个逻辑都要编写相应的子程序去进行。</p><p>第三则是新的汇编接口的学习。我们查看系统提供的演示实验，根据提供的演示代码和接线图，理解新的接口的含义。还好，这些接口并不算复杂，我们最终掌握了它。</p><p>当然，这个游戏还有很多改进的地方。比如根据不同的操作以及游戏状态，用蜂鸣器发出相应的声音。这样游戏玩起来更带感，用户体验更好。比如，飞机并不一定需要发射直线的炮弹，还可以向斜前方发射，这样就增加了游戏的难度和挑战，使得游戏更具备可玩性。</p><p>不过总体来说，通过本次实验，我们完成了游戏的设计、新的接口的学习、多个接口的综合使用。这一方面加深了我们对于接口的理解与掌握，在实践的过程中加深了对理论的理解，另一方面提高了我们的创新意识与能力，激发了我们探索的兴趣。这些将在我们的进一步学习中，给我们带来许多积极的影响。</p>]]></content>
      
      <categories>
          
          <category> 汇编与接口技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>朝花夕拾——《嵌入式系统设计》实验合集</title>
      <link href="/2018/05/08/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AE%9E%E9%AA%8C%E5%90%88%E9%9B%86/"/>
      <content type="html"><![CDATA[<blockquote><p>虽然是大三上（2017年下半年）的成果，但是得益于高金山老师的耐心指导，嵌入式是学得比较透彻的课，所以就把<a href="http://wang22ti.com/2018/05/08/%E3%80%8A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94%E3%80%8A%E9%A3%9E%E5%85%A5%E5%AF%BB%E5%B8%B8%E7%99%BE%E5%A7%93%E5%AE%B6%E2%80%94%E2%80%94%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87%E3%80%8B/">课程论文</a>和比较重要的实验的合集贴出来，里面用到的驱动默认驱动合集当中。</p><p>算是我的Linux、Arm启蒙课吧</p></blockquote><h1 id="点亮LED"><a href="#点亮LED" class="headerlink" title="点亮LED"></a>点亮LED</h1><p>这个是一个入门性的实验，用板子LED干些事情，驱动用fpga_led.c就行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line">fd = open(<span class="string">"/dev/fpga_led"</span>, O_WRONLY);</span><br><span class="line">assert(fd != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 已实现要求的全部功能，并设计了其他问题</span></span><br><span class="line"><span class="comment">// 菜单</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"请选择功能：\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"1、计数显示\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"2、显示学号\n"</span>); <span class="comment">//我的学号后两位是63</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"3、跑马灯显示\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"4、两侧跑马灯\n"</span>); <span class="comment">//在第三题的基础上改进，左右对称的跑马灯</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"5、退出\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)value;</span><br><span class="line">write(fd, &amp;ch, <span class="number">1</span>);</span><br><span class="line">value++;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="number">256</span>) &#123; <span class="comment">//当计数到256的时候重新计数</span></span><br><span class="line">value = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">63</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)value;</span><br><span class="line">write(fd, &amp;ch, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">0</span>; <span class="comment">// 控制灯光的移动方向</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)value;</span><br><span class="line"><span class="keyword">if</span>(tag == <span class="number">0</span>) &#123;</span><br><span class="line">value *= <span class="number">2</span>; <span class="comment">// 灯向右边移动</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">value /= <span class="number">2</span>; <span class="comment">// 灯向左边移动</span></span><br><span class="line">&#125;</span><br><span class="line">write(fd, &amp;ch, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(value == <span class="number">128</span>) &#123;<span class="comment">// 当灯移动到最右边，将标记置为1，以后左移</span></span><br><span class="line">tag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="number">1</span>) &#123; <span class="comment">// 当灯移动到最左边，将标记置为0，以后右移</span></span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value1 = <span class="number">1</span>;<span class="comment">// 左边的灯</span></span><br><span class="line"><span class="keyword">int</span> value2 = <span class="number">128</span>;   <span class="comment">// 右边的灯</span></span><br><span class="line"><span class="keyword">int</span> tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 求和后转化为unsigned char，可以同时点亮两边</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(value1 + value2);</span><br><span class="line"><span class="comment">// 以下的控制部分和第三题类似，不做赘述</span></span><br><span class="line"><span class="keyword">if</span>(tag == <span class="number">0</span>) &#123;</span><br><span class="line">value1 *= <span class="number">2</span>;</span><br><span class="line">value2 /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">value1 /= <span class="number">2</span>;</span><br><span class="line">value2 *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">write(fd, &amp;ch, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(value1 == <span class="number">8</span>) &#123;</span><br><span class="line">tag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value1 == <span class="number">1</span>) &#123;</span><br><span class="line">tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> choice;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%d"</span>, &amp;choice) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(choice == <span class="number">1</span>) &#123;</span><br><span class="line">func1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">2</span>) &#123;</span><br><span class="line">func2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">3</span>) &#123;</span><br><span class="line">func3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">4</span>) &#123;</span><br><span class="line">func4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="蜂鸣器驱动及乐曲播放"><a href="#蜂鸣器驱动及乐曲播放" class="headerlink" title="蜂鸣器驱动及乐曲播放"></a>蜂鸣器驱动及乐曲播放</h1><p>在本实验中，我和子芃合作完成了使用蜂鸣器演奏《铃儿响叮当》前4个小节，我主要负责程序结构的设计，由于子芃有较好的音乐功底，他负责设置参数。我们的亮点在于实现了音与音之间的停顿，从而有比较好的播放效果。</p><p>要找到了比较好的一个拍子的时长，0.13秒。之后设置好每一个小节的音的声调、音的拍数、停顿的拍数，并传入write和usleep函数。如果write传入的是声调，那么usleep实现的是音的拍数；如果write传入的是nullValue，那么usleep实现的是停顿的拍数。通过数组和循环语句，就实现了音乐的输出。</p><p>驱动程序用的是fpga_piezo.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> quater_beats = <span class="number">120000</span>;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> nullValue = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> values1[] = &#123;<span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x15</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> voice_length1[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0.5</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delay1[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> values2[] = &#123;<span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x15</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> voice_length2[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delay2[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> values3[] = &#123;<span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x15</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> voice_length3[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0.5</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delay3[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> values4[] = &#123;<span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x15</span>, <span class="number">0x15</span>, <span class="number">0x14</span>, <span class="number">0x12</span>, <span class="number">0x11</span>, <span class="number">0x21</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> voice_length4[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delay4[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">"/dev/fpga_piezo"</span>, O_WRONLY);</span><br><span class="line">assert(fd != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">write(fd, &amp;values1[i], <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * voice_length1[i]);</span><br><span class="line">write(fd, &amp;nullValue, <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * delay1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usleep(quater_beats * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">write(fd, &amp;values2[i], <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * voice_length2[i]);</span><br><span class="line">write(fd, &amp;nullValue, <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * delay2[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usleep(quater_beats * <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">write(fd, &amp;values3[i], <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * voice_length3[i]);</span><br><span class="line">write(fd, &amp;nullValue, <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * delay3[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usleep(quater_beats * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">write(fd, &amp;values4[i], <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * voice_length4[i]);</span><br><span class="line">write(fd, &amp;nullValue, <span class="number">1</span>);</span><br><span class="line">usleep(quater_beats * delay4[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(fd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时还没学系统编程，吐血一般地面向搜索引擎地写了makefile的解释，现在看来基本正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 驱动程序的makefile</span></span><br><span class="line"><span class="comment"># silent，表示在make过程中不打印任何执行的命令</span></span><br><span class="line">.SILENT:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于C语言的宏定义，导入文件make_adb</span></span><br><span class="line">include C:/AndroXStudio/Tools/make_adb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置两个环境变量ARCH和CROSS_COMPILE</span></span><br><span class="line"><span class="built_in">export</span> ARCH=arm</span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=arm-linux-androideabi-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于C语言的IFNDEF，</span></span><br><span class="line"><span class="comment"># 如果是第一次运行Makefile，</span></span><br><span class="line"><span class="comment"># 内核源码的顶层Makefile中定义的KERNELRELEASE还没有生成，</span></span><br><span class="line"><span class="comment"># 就会转入else语句，一直执行到endif；</span></span><br><span class="line"><span class="comment"># 如果不是第一次运行，不需要编译，</span></span><br><span class="line"><span class="comment"># 就会直接将fpga_piezo.o编译为内核模块；</span></span><br><span class="line">ifneq ($(KERNELRELEASE),)</span><br><span class="line">obj-m := fpga_piezo.o</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将目录/platform/linux定义为KDIR</span></span><br><span class="line">KDIR := /platform/linux</span><br><span class="line"></span><br><span class="line">all是个伪目标，是所有目标的目标，其功能是编译所有的目标。</span><br><span class="line">all:</span><br><span class="line"><span class="comment"># 对make modules命令的扩展</span></span><br><span class="line"><span class="comment"># -C表示将当前工作目录转移到指定的目录KDIR中</span></span><br><span class="line"><span class="comment"># M表示到shell pwd中找到模块代码并编译生成fpga_piezo.ko文件</span></span><br><span class="line">$(MAKE) -C $(KDIR) M=$(shell <span class="built_in">pwd</span>) modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo语句类似于C语言的printf，表示在命令行输出</span></span><br><span class="line"><span class="comment"># 有了上面的生成的ko文件，打印安装提示</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"**** Install:"</span> /system/lib/modules/fpga_piezo.ko <span class="string">"****"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $(ADB)类似于Linux中输入提示符</span></span><br><span class="line"><span class="comment"># 其中make_adb文件宏定义了ADB的值</span></span><br><span class="line"><span class="comment"># 将文件fpga_piezo.ko上传到板子/system/lib/modules/目录下</span></span><br><span class="line">$(ADB) push fpga_piezo.ko /system/lib/modules/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件fpga_piezo.ko的编辑模式修改为644，即为rw-r--r--</span></span><br><span class="line">$(ADB) shell chmod 644 /system/lib/modules/fpga_piezo.ko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 板子上有了ko文件并修改了编辑模式之后，将ko作为内核进行加载，打印提示</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"**** Load Module:"</span> /system/lib/modules/fpga_piezo.ko <span class="string">"****"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载板子上原来的在目录/dev/null下的内核文件fpga_led</span></span><br><span class="line">$(ADB) shell toolbox rmmod fpga_piezo &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将刚刚导入的文件fpga_piezo.ko作为内核进行加载</span></span><br><span class="line">$(ADB) shell insmod /system/lib/modules/fpga_piezo.ko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印已经加载的模块，使用fpga_piezo作为关键字</span></span><br><span class="line">$(ADB) shell lsmod | grep fpga_piezo</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理加载内核过程中产生的文件</span></span><br><span class="line">clean:</span><br><span class="line"><span class="comment"># rm，即为remove，即删除文件</span></span><br><span class="line"><span class="comment"># -f是rm命令的参数，表示即使文件不存在也不要报错</span></span><br><span class="line"><span class="comment"># *是通配符，例如*.o表示所有类型为o的文件</span></span><br><span class="line">rm -f *.symvers</span><br><span class="line">rm -f *.ko</span><br><span class="line">rm -f *.o</span><br><span class="line">rm -f *.mod.c</span><br><span class="line">rm -f *.order</span><br><span class="line">rm -f .*.cmd</span><br><span class="line">rm -rf .tmp_versions</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用程序的makefile</span></span><br><span class="line"><span class="comment"># silent，表示在make过程中不打印任何执行的命令</span></span><br><span class="line">.SILENT:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于C语言的宏定义，导入文件make_comn，其中有大量宏定义</span></span><br><span class="line">include C:/AndroXStudio/Tools/make_comm</span><br><span class="line"></span><br><span class="line"><span class="comment"># all表示编译所有相关项目</span></span><br><span class="line">all: $(OBJECTS)</span><br><span class="line"><span class="comment"># CC是宏定义中的gcc操作</span></span><br><span class="line"><span class="comment"># -o 表示输出的文件名为testPiezo</span></span><br><span class="line"><span class="comment"># -O2是编译器提供的选项，提供高级的代码优化，但是更耗时间</span></span><br><span class="line"><span class="comment"># -save-temps -march=armv7-a表示输出所有中间代码</span></span><br><span class="line"><span class="comment"># $(LLIB)/libgcc.a表示使用在宏定义LLIB对应的路径下的libgcc.a文件</span></span><br><span class="line">$(CC) $(CFLAGS) $(LDFLAGS) -save-temps -march=armv7<span class="_">-a</span> -O2 -o testPiezo $(OBJECTS) \</span><br><span class="line">$(LLIB)/libgcc.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo语句类似于C语言的printf，表示在命令行输出安装提示</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"**** Install:"</span> /data/<span class="built_in">local</span>/tmp/testPiezo <span class="string">"****"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件testPiezo上传到板子testPiezo /data/local/tmp目录下</span></span><br><span class="line">$(ADB) push testPiezo /data/<span class="built_in">local</span>/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件testPizzo的编辑模式修改为755，即为rwxr-xr-x</span></span><br><span class="line">$(ADB) shell chmod 755 /data/<span class="built_in">local</span>/tmp/testPiezo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理加载内核过程中产生的文件</span></span><br><span class="line">clean:</span><br><span class="line"><span class="comment"># rm，即为remove，即删除文件</span></span><br><span class="line"><span class="comment"># -f是rm命令的参数，表示即使文件不存在也不要报错</span></span><br><span class="line"><span class="comment"># *是通配符，例如*.o表示所有类型为o的文件</span></span><br><span class="line">rm -f *.o</span><br><span class="line">rm -f *.i</span><br><span class="line">rm -f *.s</span><br><span class="line">rm -f testPiezo</span><br></pre></td></tr></table></figure><h1 id="电子琴驱动及测试程序设计"><a href="#电子琴驱动及测试程序设计" class="headerlink" title="电子琴驱动及测试程序设计"></a>电子琴驱动及测试程序设计</h1><p>学到这里的时候，开始对驱动程序有所理解，正好老师要求写实验报告，就写了一份比较深入的理解。</p><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>1)    把调试好的键盘驱动程序和对应的测试程序上传到教学平台<br>2)    把LED驱动加入进项目，当按下某键时，该键的编码，显示在LED。<br>3)    模仿电子琴的功能，即当按下1号键，播放“1”；当按下2号键，播放“2”；当按下3号键，播放“3”…声音。<br>4)    说明Keypad设备驱动、LED设备驱动、蜂鸣器设备驱动、测试程序的功能和原理，驱动和测试程序加载过程，函数间调用关系和参数传递过程等。</p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>1)    基本功能：<br>    按1-16对应的键的时候，LED等显示编号对应的二进制代码<br>    按1-8对应的键的时候，蜂鸣器发出0x11到0x17以及0x21对应的音<br>    按9-16对应的键或不按键的时候，蜂鸣器不发音<br>2)    进阶功能<br>    当解除程序中的一段注释代码后，按1-8对应的键的时候，蜂鸣器发出对应的音以及其后的三个音，LED灯同    时亮起对应的二进制代码（已检查）。</p><h2 id="代码与原理说明"><a href="#代码与原理说明" class="headerlink" title="代码与原理说明"></a>代码与原理说明</h2><p>为了更方便地实现实验要求，驱动程序经过了一定的修改。</p><h3 id="经过修改的fpga-keypad-c"><a href="#经过修改的fpga-keypad-c" class="headerlink" title="经过修改的fpga_keypad.c"></a>经过修改的fpga_keypad.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/hardware.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_AUTHOR   <span class="meta-string">"Hanback Electronics"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_DESC       <span class="meta-string">"KEYPAD program"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_NAME   <span class="meta-string">"fpga-keypad"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_PHY_ADDR0x05000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_ADDR_RANGE0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>  keypad_ioremap;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *keypad_row_addr,*keypad_col_addr;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> *keypad_check_addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> keypad_fpga_keycode[<span class="number">16</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_open</span><span class="params">(struct inode * inode, struct file * file)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_open, \n"</span>);</span><br><span class="line"><span class="comment">// 默认认外设I/O资源是不在Linux内核空间中的，若需要访问keypad的I/O资源，必须先将其地址映射到内核空间中来，然后才能在内核空间中访问它。该程序的ioremap函数重写了定义在&lt;asm/io.h&gt;中的_ioremap动态映射函数，返回了keypad的起始的映射到内存的地址，其中KEYPAD_PHY_ADDR为keypad的起始IO地址，KEYPAD_ADDR_RANGE为要映射的空间大小，两个变量的值均在宏定义中。（参考http://blog.csdn.net/liuxd3000/article/details/16819921）</span></span><br><span class="line"><span class="comment">// keypad_ioremap=(unsigned long)ioremap(KEYPAD_PHY_ADDR,KEYPAD_ADDR_RANGE);</span></span><br><span class="line"><span class="comment">// 用&lt;linux/ioport.h&gt;中的check_mem_region函数检查从内存地址keypad_ioremap开始的、长度为KEYPAD_ADDR_RANGE的IO空间是否被占用。如果被占用，输出错误并返回，否则用&lt;linux/ioport.h&gt;中的request_mem_region函数申请那片空间，并命名为fpga-keypad（参考https://www.cnblogs.com/FarmPick/p/5629731.html）</span></span><br><span class="line"><span class="keyword">if</span>(!check_mem_region(keypad_ioremap, KEYPAD_ADDR_RANGE)) &#123;</span><br><span class="line">request_mem_region(keypad_ioremap, KEYPAD_ADDR_RANGE, KEYPAD_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">printk(<span class="string">"FPGA KEYPAD Memory Alloc Faild!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// keypad_col_addr和keypad_row_addr两个变量分别存储keypad行列按键的起始地址</span></span><br><span class="line">keypad_col_addr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(keypad_ioremap+<span class="number">0x70</span>);</span><br><span class="line">keypad_row_addr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(keypad_ioremap+<span class="number">0x72</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fpga_keypad_release函数完成keypad使用结束后的内存释放工作</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_release</span><span class="params">(struct inode * inode, struct file * file)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_release, \n"</span>);</span><br><span class="line"><span class="comment">// &lt;asm/io/h&gt;中的iounmap函数解除内存地址keypad_ioremap对IO地址的映射（参考http://blog.csdn.net/tronteng/article/details/7266788）</span></span><br><span class="line">iounmap((<span class="keyword">unsigned</span> <span class="keyword">long</span>*)keypad_ioremap);</span><br><span class="line"><span class="comment">// &lt;linux/ioport.h&gt;中的release_region函数释放掉以keypad_ioremap为起始，长度为KEYPAD_ADDR_RANGE的内存地址（参考https://www.cnblogs.com/FarmPick/p/5629731.html）</span></span><br><span class="line">release_region(keypad_ioremap, KEYPAD_ADDR_RANGE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fpga_keypad_read函数读取来自keypad的信号</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_keypad_read</span><span class="params">(struct file * file, <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_read, \n"</span>);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>,k,i,ret;</span><br><span class="line"><span class="keyword">int</span> funtion_key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// tmp中四个二进制数对应0001,0010,0100,1000，分别对应行的第1、2、3、4个键</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> send_buf[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// 用两层长度均为4的循环遍历检查keypad的16个键有没有信号</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line"><span class="comment">// 用tmp[i]选中第i行</span></span><br><span class="line">*keypad_row_addr = tmp[i];</span><br><span class="line"><span class="comment">// 用0x0f获得内存keypad_col_addr低4位的值，即第i行的4个按键的信号</span></span><br><span class="line">value = *keypad_col_addr &amp; <span class="number">0x0f</span>;</span><br><span class="line"><span class="comment">// value&gt;0表示有按键被按下，如果判断为真，则用tmp[k]遍历检验</span></span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(value == tmp[k])  &#123;</span><br><span class="line"><span class="comment">// 找到按下的键，对value、funtion_key赋值，并用goto跳转到stop_poll段进行处理。注意到，如果同时按下两个键，并不会跳转。</span></span><br><span class="line">value = j+(i*<span class="number">4</span>);</span><br><span class="line">funtion_key = keypad_fpga_keycode[value<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(value != <span class="number">0x00</span>) <span class="keyword">goto</span> stop_poll;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Stop_poll处理段，如果value&gt;0即有键被按下，则将相关信息写入字符串send_buf，否则显示没有打印。注意到，如果同时按下第4行的多个键，上面的循环虽然不会跳转，但循环结束后value的值并不为0。所以我预测，如果在测试程序中直接将value或者buff的值传给led灯，同时按下多个键的时候led灯也会被电亮。这个有待检验，不过如果属实，只要在stop_poll段之前将value置0便可以解决。</span></span><br><span class="line">stop_poll:</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"%d pressed"</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"pressed nothing"</span>);</span><br><span class="line">*keypad_row_addr = <span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于内核空间与用户空间不能直接互访，因此借助函数copy_to_user完成内核到用户空间的复制（参考http://blog.csdn.net/yangdelong/article/details/5491097）</span></span><br><span class="line">ret = copy_to_user(buf,send_buf,<span class="built_in">strlen</span>(send_buf));</span><br><span class="line"><span class="comment">// 这里我稍微修改了驱动程序，将返回值改为value</span></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 综上所述，fpga_keypad_read函数可以进行一定的修改如下，解决上述的bug并精简部分代码。</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_keypad_read</span><span class="params">(struct file * file, <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_read, \n"</span>);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>,k,i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> send_buf[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">*keypad_row_addr = tmp[i];</span><br><span class="line">value = *keypad_col_addr &amp; <span class="number">0x0f</span>;</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(value == tmp[k])  &#123;</span><br><span class="line">value = j+(i*<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(value != <span class="number">0x00</span>) <span class="keyword">goto</span> stop_poll;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">value = <span class="number">0</span>;</span><br><span class="line">stop_poll:</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"%d pressed"</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"pressed nothing"</span>);</span><br><span class="line">*keypad_row_addr = <span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line">copy_to_user(buf,send_buf,<span class="built_in">strlen</span>(send_buf));</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当然，如果不考虑接口的稳定还可以跟精简，如果时间允许还可以写出多按键的驱动。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设备驱动配置项结构体，用来将标准的接口重定向为在上面写好的函数。其中THIS_MODULE是一个宏，推向编译模块时自动创建的__this_module变量（参考http://blog.csdn.net/joshua_love/article/details/53047128）</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_keypad_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.open = fpga_keypad_open,</span><br><span class="line">.release = fpga_keypad_release,</span><br><span class="line">.read = fpga_keypad_read,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 杂设备结构体，在Linux驱动中十分必要（参考https://www.cnblogs.com/heat-man/p/4175842.html）</span></span><br><span class="line"><span class="comment">// minor表示次设备号。杂设备（个人认为将mis翻译为“杂”很不好，让人困惑）为了节约主设备号，采用共用主设备号的方式，次设备号加以区分的方式来描述设备。</span></span><br><span class="line"><span class="comment">// name表示设备名称</span></span><br><span class="line"><span class="comment">// fops表示设备驱动的具体配置项，在上面已经定义好</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_keypad_driver</span> = &#123;</span></span><br><span class="line">.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">.name = <span class="string">"fpga_keypad"</span>,</span><br><span class="line">.fops = &amp;fpga_keypad_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_init, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> misc_register(&amp;fpga_keypad_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_keypad_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_exit, \n"</span>);</span><br><span class="line">misc_deregister(&amp;fpga_keypad_driver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为满足接口，module_init函数用定义好的fpga_keypad_init函数完成驱动的初始化。</span></span><br><span class="line"><span class="comment">// 在fpga_keypad_init函数中，将定义好的杂设备结构fpga_keypad_driver传入字符杂项设备函数misc_register，使得在加载模块时会自动创建设备文件（参考http://blog.csdn.net/wsh604/article/details/7534251）</span></span><br><span class="line">module_init(fpga_keypad_init);</span><br><span class="line"><span class="comment">// 为满足接口，module_exit函数用定义好的fpga_keypad_exit函数完成驱动的删除。</span></span><br><span class="line"><span class="comment">// 在fpga_keypad_exit函数中将定义好的杂设备结构fpga_keypad_driver传入字符杂项设备删除函数misc_deregister，使得在删除模块时会自动删除设备文件（参考http://blog.csdn.net/wsh604/article/details/7534251）</span></span><br><span class="line">module_exit(fpga_keypad_exit);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是对该模块的一些信息的定义。</span></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Author of the fpga_keypad to put it here."</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"Description of the fpga_keypad to put it here."</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br><span class="line"><span class="comment">// 当然可以修改为</span></span><br><span class="line"><span class="comment">// MODULE_AUTHOR("Author: wang22ti 15281163");</span></span><br><span class="line"><span class="comment">// MODULE_DESCRIPTION("hello, I have understood this driver");</span></span><br><span class="line"><span class="comment">// MODULE_LICENSE("Dual BSD/GPL");</span></span><br></pre></td></tr></table></figure><h3 id="fpga-led-c和fpga-piezo-c"><a href="#fpga-led-c和fpga-piezo-c" class="headerlink" title="fpga_led.c和fpga_piezo.c"></a>fpga_led.c和fpga_piezo.c</h3><p>基本和fpga_keypad.c相同，博客里删去这部分内容。</p><h3 id="应用程序fpga-keypad-test-c"><a href="#应用程序fpga-keypad-test-c" class="headerlink" title="应用程序fpga_keypad_test.c"></a>应用程序fpga_keypad_test.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line"><span class="comment">// 在运行测试程序的时候，keypad、led以及piezo的驱动都已经通过make命令写到硬件，所以通过open函数打开dev目录下对应的文件就可以获得对应的地址。</span></span><br><span class="line">fd = open(<span class="string">"/dev/fpga_keypad"</span>,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">"Device Open ERROR!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please push the button !\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得led对应的IO地址。</span></span><br><span class="line"><span class="keyword">int</span> fd_led;</span><br><span class="line">fd_led = open(<span class="string">"/dev/fpga_led"</span>, O_WRONLY);</span><br><span class="line">assert(fd_led != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 获得蜂鸣器对应的IO地址。</span></span><br><span class="line"><span class="keyword">int</span> fd_piezo;</span><br><span class="line">fd_piezo = open(<span class="string">"/dev/fpga_piezo"</span>, O_WRONLY);</span><br><span class="line">assert(fd_piezo != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 定义好voice和led_num两个数组，用来映射keypad的read函数的返回值，即将键与亮灯情况、发声音调一一对应。</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> voice[] = &#123;<span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x21</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> led_num[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>&#125;;</span><br><span class="line"><span class="comment">// 在循环中不停地使用read函数读取keypad的按键情况，同时利用write函数以及上面取得的地址将映射的值写入led和蜂鸣器。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch;</span><br><span class="line">ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)read(fd,buf,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\r\n"</span>,buf);</span><br><span class="line"></span><br><span class="line">write(fd_led, &amp;led_num[ch], <span class="number">1</span>);</span><br><span class="line">write(fd_piezo, &amp;voice[ch], <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 线程睡眠50毫秒，使得led亮起的状态和蜂鸣器的发声可以保持一定的时间。睡眠结束后，进入新的循环，如果没有新的输入，led和蜂鸣器都会被置零。</span></span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line"><span class="comment">// 这段被注释掉的代码完成的是一次按键多次发声多次亮灯（实际看到的是灯在闪烁），原理并无创新。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(ch != 0 &amp;&amp; ch &lt;= 8) &#123;</span></span><br><span class="line"><span class="comment">write(fd_led, &amp;led_num[ch+1], 1);</span></span><br><span class="line"><span class="comment">write(fd_piezo, &amp;voice[ch+1], 1);</span></span><br><span class="line"><span class="comment">usleep(50000);</span></span><br><span class="line"><span class="comment">write(fd_led, &amp;led_num[ch+2], 1);</span></span><br><span class="line"><span class="comment">write(fd_piezo, &amp;voice[ch+2], 1);</span></span><br><span class="line"><span class="comment">usleep(50000);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 重置buf数组。</span></span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭驱动，但由于无限循环不可能执行，所以没有补上led和蜂鸣器的。</span></span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验小结"><a href="#实验小结" class="headerlink" title="实验小结"></a>实验小结</h2><p>在本次实验中，我首先利用之前led和蜂鸣器的经验，将三个驱动程序通过测试程序整合到一起，完成了基本的实验要求。课后，通过大量的资料查阅，我完成了代码原理的解释并撰写了本报告，并产生了以下新的认识：</p><ol><li><p>驱动程序并不可怕，它一方面通过系统接口调动硬件底层，另一方面又为应用程序的开发者提供接口，从而让应用开发者从事进一步的开发。</p></li><li><p>统一的函数接口有利于进一步的开发。例如应用开发者可以通过统一的函数open、write、read、close，利用不同的地址完成对不同硬件的调用。</p></li></ol><p>通过本次的开发和学习，对于嵌入式编程，无论从理论上还是实践上我都有了比较深入的认识。我相信这能够在进一步的学习中给我带来帮助。</p><h1 id="显示屏Text-LCD"><a href="#显示屏Text-LCD" class="headerlink" title="显示屏Text LCD"></a>显示屏Text LCD</h1><p>到这里已经对驱动理解更加深入，修改幅度也可以变大了。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本次一共提交了1个驱动程序和4个测试程序，测试程序分别对应的功能为：</p><div class="table-container"><table><thead><tr><th style="text-align:center">程序</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">testtextlcd</td><td style="text-align:left">基本要求，在textlcd上显示输入的字符</td></tr><tr><td style="text-align:center">testtextlcd_blink</td><td style="text-align:left">让输入在textLcd上的字符按照一定的频率闪烁一定次数</td></tr><tr><td style="text-align:center">testtextlcd_move</td><td style="text-align:left">让输入在textLcd上的字符按照一定的速率向左循环移动</td></tr><tr><td style="text-align:center">testtextlcd_withkeypad</td><td style="text-align:left">按下keypad的某个键，textlcd显示对应的字符，同时蜂鸣器发出对应频率的声音，led等显示对应的二进制数</td></tr></tbody></table></div><h2 id="Testtextlcd"><a href="#Testtextlcd" class="headerlink" title="Testtextlcd"></a>Testtextlcd</h2><p>按照给定的说明，移植驱动文件fpga_textlcd.c、测试源文件testtextlcd.c和头文件textlcd.h，无须赘述。</p><h2 id="testtextlcd-blink"><a href="#testtextlcd-blink" class="headerlink" title="testtextlcd_blink"></a>testtextlcd_blink</h2><p>在testtextlcd的基础上，将控制字TEXTLCD_CLEAR传入 ioctl函数，完成清屏，同时使用usleep函数使清屏状态保持一段时间。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"textlcd.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">"/dev/fpga_textlcd"</span>, O_WRONLY);</span><br><span class="line">assert(fd != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">ioctl(fd, TEXTLCD_INIT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) <span class="comment">// infinite loop</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> msgs[<span class="number">2</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"1st line msg: "</span>);</span><br><span class="line"><span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%16s"</span>, msgs[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"2nd line msg: "</span>);</span><br><span class="line"><span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%16s"</span>, msgs[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"%s\n%s\n"</span>, msgs[<span class="number">0</span>], msgs[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">ioctl(fd, TEXTLCD_CLEAR);</span><br><span class="line">usleep(<span class="number">1000000</span>);</span><br><span class="line">ioctl(fd, TEXTLCD_LINE1);</span><br><span class="line">write(fd, msgs[<span class="number">0</span>], <span class="built_in">strlen</span>(msgs[<span class="number">0</span>]));</span><br><span class="line">ioctl(fd, TEXTLCD_LINE2);</span><br><span class="line">write(fd, msgs[<span class="number">1</span>], <span class="built_in">strlen</span>(msgs[<span class="number">1</span>]));</span><br><span class="line">usleep(<span class="number">1000000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ioctl(fd, TEXTLCD_OFF);</span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="testtextlcd-move"><a href="#testtextlcd-move" class="headerlink" title="testtextlcd_move"></a>testtextlcd_move</h2><p>要深入的理解驱动程序和硬件功能，必须通过驱动程序的修改完成该功能。</p><p>注意到驱动中的io控制函数fpga_textlcd_ioctl并没有实现画面的移动，又注意到驱动中的函数cursorOrDisplayshift提供了画面移动的接口，所以在头文件textlcd.h中定义新的控制字TEXTLCD_SHIFT。同时为了让该控制字功能更强，让用户在使用其他功能的时候尽量少修改驱动或少使用控制字，注意到fpga_textlcd_ioctl提供了arg的参数，于是使用arg与位操作将参数传入。关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在驱动中加入新控制字并通过arg与位操作传入参数</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_SHIFT:</span><br><span class="line">screenOrCursor = arg &amp; <span class="number">1</span>;</span><br><span class="line">rightOrLeft = arg &amp; <span class="number">2</span>;</span><br><span class="line">cursorOrDisplayshift(screenOrCursor, rightOrLeft);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 测试程序，<span class="number">1</span>二进制最后两位为<span class="number">0</span>和<span class="number">1</span></span><br><span class="line">ioctl(fd, TEXTLCD_CLEAR);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) &#123;</span><br><span class="line">ioctl(fd, TEXTLCD_LINE1);</span><br><span class="line">write(fd, msgs[<span class="number">0</span>], <span class="built_in">strlen</span>(msgs[<span class="number">0</span>]));</span><br><span class="line">ioctl(fd, TEXTLCD_LINE2);</span><br><span class="line">write(fd, msgs[<span class="number">1</span>], <span class="built_in">strlen</span>(msgs[<span class="number">1</span>]));</span><br><span class="line">ioctl(fd, TEXTLCD_SHIFT, <span class="number">1</span>);</span><br><span class="line">usleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="testtextlcd-withkeypad"><a href="#testtextlcd-withkeypad" class="headerlink" title="testtextlcd_withkeypad"></a>testtextlcd_withkeypad</h2><p>实际上就是上次的keypad实验，只是加上了新的设备，不做赘述，关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> voice[] = &#123;<span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x21</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> led_num[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> textlcd[] =&#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch;</span><br><span class="line">ch = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)read(fd,buf,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\r\n"</span>,buf);</span><br><span class="line"></span><br><span class="line">write(fd_led, &amp;led_num[ch], <span class="number">1</span>);</span><br><span class="line">write(fd_piezo, &amp;voice[ch], <span class="number">1</span>);</span><br><span class="line">ioctl(fd_textlcd, TEXTLCD_CLEAR);</span><br><span class="line">ioctl(fd_textlcd, TEXTLCD_LINE1);</span><br><span class="line">write(fd_textlcd, &amp;textlcd[ch], <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">usleep(<span class="number">50000</span>);</span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通用驱动合集"><a href="#通用驱动合集" class="headerlink" title="通用驱动合集"></a>通用驱动合集</h1><h2 id="fpga-led-c"><a href="#fpga-led-c" class="headerlink" title="fpga_led.c"></a>fpga_led.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mutex.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_ADDRESS 0x05000020</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_ADDRESS_RANGE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">"fpga_led"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> led_usage = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> *led_ioremap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_led_open</span><span class="params">(struct inode * inode, struct file * file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (led_usage == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> -EBUSY;</span><br><span class="line">led_ioremap = ioremap(LED_ADDRESS, LED_ADDRESS_RANGE);</span><br><span class="line"><span class="keyword">if</span>(check_mem_region((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>)led_ioremap,LED_ADDRESS_RANGE) )</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"Can't get IO Region, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">request_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) led_ioremap, LED_ADDRESS_RANGE, DEVICE_NAME);</span><br><span class="line">led_usage = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_led_release</span><span class="params">(struct inode * inode, struct file * file)</span> </span>&#123;</span><br><span class="line">release_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) led_ioremap, LED_ADDRESS_RANGE);</span><br><span class="line">iounmap(led_ioremap);</span><br><span class="line">led_usage = <span class="number">0</span>;</span><br><span class="line">printk(<span class="string">"fpga_led_release, \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_led_write</span><span class="params">(struct file * file, <span class="keyword">const</span> <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> value;</span><br><span class="line">get_user(value, buf);</span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> *)led_ioremap = value;</span><br><span class="line">printk(<span class="string">"fpga_led_write, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_led_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.open = fpga_led_open,</span><br><span class="line">.release = fpga_led_release,</span><br><span class="line"><span class="comment">// .read = fpga_led_read,</span></span><br><span class="line">.write = fpga_led_write,</span><br><span class="line"><span class="comment">// .unlocked_ioctl = fpga_led_ioctl,</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_led_driver</span> = &#123;</span></span><br><span class="line">.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">.name = <span class="string">"fpga_led"</span>,</span><br><span class="line">.fops = &amp;fpga_led_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_led_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_led_init, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> misc_register(&amp;fpga_led_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_led_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_led_exit, \n"</span>);</span><br><span class="line">misc_deregister(&amp;fpga_led_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(fpga_led_init);</span><br><span class="line">module_exit(fpga_led_exit);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"BJTU_computer_science"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"fpga_led driver test"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br></pre></td></tr></table></figure><h2 id="fpga-piezo-c"><a href="#fpga-piezo-c" class="headerlink" title="fpga_piezo.c"></a>fpga_piezo.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mutex.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIEZO_ADDRESS 0x05000050</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIEZO_ADDRESS_RANGE 0x1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">"fpga_piezo"</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> piezo_usage = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> *piezo_ioremap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_piezo_open</span><span class="params">(struct inode * inode, struct file * file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (piezo_usage == <span class="number">-1</span>)</span><br><span class="line"> <span class="keyword">return</span> -EBUSY;</span><br><span class="line"></span><br><span class="line"> piezo_ioremap = ioremap(PIEZO_ADDRESS, PIEZO_ADDRESS_RANGE);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> ( check_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) piezo_ioremap, PIEZO_ADDRESS_RANGE) != <span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> printk(KERN_WARNING <span class="string">"Can't get IO Region 0x%x\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)piezo_ioremap);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> request_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) piezo_ioremap, PIEZO_ADDRESS_RANGE,DEVICE_NAME);</span><br><span class="line"> piezo_usage = <span class="number">1</span>;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_open, \n"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_piezo_release</span><span class="params">(struct inode * inode, struct file * file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> release_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) piezo_ioremap, PIEZO_ADDRESS_RANGE);</span><br><span class="line"> iounmap(piezo_ioremap);</span><br><span class="line"> piezo_usage = <span class="number">0</span>;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_release, \n"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not use</span></span><br><span class="line"><span class="comment">static ssize_t fpga_piezo_read(struct file * file, char * buf, size_t length,_t * ofs)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"> printk("fpga_piezo_read, \n");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_piezo_write</span><span class="params">(struct file * file, <span class="keyword">const</span> <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line"> get_user(c, buf);</span><br><span class="line"></span><br><span class="line"> *(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> *)piezo_ioremap = c;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_write, \n"</span>);</span><br><span class="line"> <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not use</span></span><br><span class="line"><span class="comment">static DEFINE_MUTEX(fpga_piezo_mutex);</span></span><br><span class="line"><span class="comment">static long fpga_piezo_ioctl(struct file * file, unsigned int cmd, unsigned arg)&#123;</span></span><br><span class="line"><span class="comment"> printk("fpga_piezo_ioctl, \n");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> switch(cmd)&#123;</span></span><br><span class="line"><span class="comment"> default:</span></span><br><span class="line"><span class="comment"> mutex_unlock(&amp;fpga_piezo_mutex);</span></span><br><span class="line"><span class="comment"> return ENOTTY;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> mutex_unlock(&amp;fpga_piezo_mutex);</span></span><br><span class="line"><span class="comment"> return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_piezo_fops</span> = &#123;</span></span><br><span class="line"> .owner = THIS_MODULE,</span><br><span class="line"> .open = fpga_piezo_open,</span><br><span class="line"> .release = fpga_piezo_release,</span><br><span class="line"> <span class="comment">// .read = fpga_piezo_read,</span></span><br><span class="line"> .write = fpga_piezo_write,</span><br><span class="line"> <span class="comment">// .unlocked_ioctl = fpga_piezo_ioctl,</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_piezo_driver</span> = &#123;</span></span><br><span class="line"> .minor = MISC_DYNAMIC_MINOR,</span><br><span class="line"> .name = <span class="string">"fpga_piezo"</span>,</span><br><span class="line"> .fops = &amp;fpga_piezo_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_piezo_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_init, \n"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> misc_register(&amp;fpga_piezo_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_piezo_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"> printk(<span class="string">"fpga_piezo_exit, \n"</span>);</span><br><span class="line"></span><br><span class="line"> misc_deregister(&amp;fpga_piezo_driver);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(fpga_piezo_init);</span><br><span class="line">module_exit(fpga_piezo_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Hanback"</span>);</span><br><span class="line">MODULE_DESCRIPTION (<span class="string">"fpga_piezo driver test"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br></pre></td></tr></table></figure><h2 id="fpga-keypad-c"><a href="#fpga-keypad-c" class="headerlink" title="fpga_keypad.c"></a>fpga_keypad.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/hardware.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_AUTHOR   <span class="meta-string">"Hanback Electronics"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRIVER_DESC       <span class="meta-string">"KEYPAD program"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_NAME   <span class="meta-string">"fpga-keypad"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_PHY_ADDR0x05000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPAD_ADDR_RANGE0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>  keypad_ioremap;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *keypad_row_addr,*keypad_col_addr;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> *keypad_check_addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> keypad_fpga_keycode[<span class="number">16</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_open</span><span class="params">(struct inode * inode, struct file * file)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_open, \n"</span>);</span><br><span class="line"></span><br><span class="line">keypad_ioremap=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)ioremap(KEYPAD_PHY_ADDR,KEYPAD_ADDR_RANGE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!check_mem_region(keypad_ioremap, KEYPAD_ADDR_RANGE)) &#123;</span><br><span class="line">request_mem_region(keypad_ioremap, KEYPAD_ADDR_RANGE, KEYPAD_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">printk(<span class="string">"FPGA KEYPAD Memory Alloc Faild!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">keypad_col_addr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(keypad_ioremap+<span class="number">0x70</span>);</span><br><span class="line">keypad_row_addr = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(keypad_ioremap+<span class="number">0x72</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_release</span><span class="params">(struct inode * inode, struct file * file)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_release, \n"</span>);</span><br><span class="line">iounmap((<span class="keyword">unsigned</span> <span class="keyword">long</span>*)keypad_ioremap);</span><br><span class="line">release_region(keypad_ioremap, KEYPAD_ADDR_RANGE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_keypad_read</span><span class="params">(struct file * file, <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_read, \n"</span>);</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>,k,i,ret;</span><br><span class="line"><span class="keyword">int</span> funtion_key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> send_buf[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">*keypad_row_addr = tmp[i];</span><br><span class="line">value = *keypad_col_addr &amp; <span class="number">0x0f</span>;</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(value == tmp[k])  &#123;</span><br><span class="line">value = j+(i*<span class="number">4</span>);</span><br><span class="line">funtion_key = keypad_fpga_keycode[value<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(value != <span class="number">0x00</span>) <span class="keyword">goto</span> stop_poll;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stop_poll:</span><br><span class="line"><span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"%d pressed"</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(send_buf,<span class="string">"pressed nothing"</span>);</span><br><span class="line">*keypad_row_addr = <span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line">ret = copy_to_user(buf,send_buf,<span class="built_in">strlen</span>(send_buf));</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_keypad_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.open = fpga_keypad_open,</span><br><span class="line">.release = fpga_keypad_release,</span><br><span class="line">.read = fpga_keypad_read,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_keypad_driver</span> = &#123;</span></span><br><span class="line">.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">.name = <span class="string">"fpga_keypad"</span>,</span><br><span class="line">.fops = &amp;fpga_keypad_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_keypad_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_init, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> misc_register(&amp;fpga_keypad_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_keypad_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_keypad_exit, \n"</span>);</span><br><span class="line">misc_deregister(&amp;fpga_keypad_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(fpga_keypad_init);</span><br><span class="line">module_exit(fpga_keypad_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Author of the fpga_keypad to put it here."</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"Description of the fpga_keypad to put it here."</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br></pre></td></tr></table></figure><h2 id="fpga-textlcd-c"><a href="#fpga-textlcd-c" class="headerlink" title="fpga_textlcd.c"></a>fpga_textlcd.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/miscdevice.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;linux/mutex.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_ADDRESS 0x05000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_ADDRESS_RANGE 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">"fpga_textlcd"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> textlcd_usage = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> *textlcd_ioremap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_ON 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_OFF 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_INIT 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXT_CLEAR 4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXT_LINE1 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXT_LINE2 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTLCD_SHIFT 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> command;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runCommand</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command &amp;= <span class="number">0x00FF</span>;</span><br><span class="line">*textlcd_ioremap = command | <span class="number">0x0000</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">*textlcd_ioremap = command | <span class="number">0x0100</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">*textlcd_ioremap = command | <span class="number">0x0000</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCharacter</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> data;</span><br><span class="line">data = ch &amp; <span class="number">0x00FF</span>;</span><br><span class="line">*textlcd_ioremap = <span class="number">0x0400</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">*textlcd_ioremap = data | <span class="number">0x0500</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">*textlcd_ioremap = data | <span class="number">0x0400</span>;</span><br><span class="line">udelay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearDisplay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0001</span>;</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">returnHome</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0002</span>;</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">entryModeSet</span><span class="params">(<span class="keyword">int</span> increase, <span class="keyword">int</span> shift)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0004</span>;</span><br><span class="line">command |= (increase &lt;&lt; <span class="number">1</span>) + shift; <span class="comment">// == (increase &lt;&lt; 1) | shift</span></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayOnOffControl</span><span class="params">(<span class="keyword">int</span> display, <span class="keyword">int</span> cursor, <span class="keyword">int</span> blink)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0008</span>;</span><br><span class="line">command |= (display &lt;&lt; <span class="number">2</span>) + (cursor &lt;&lt; <span class="number">1</span>) + blink;</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cursorOrDisplayshift</span><span class="params">(<span class="keyword">int</span> screenOrCursor, <span class="keyword">int</span> rightOrLeft)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0010</span>;</span><br><span class="line">command |= (screenOrCursor &lt;&lt;<span class="number">3</span>) + (rightOrLeft &lt;&lt; <span class="number">2</span>);</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFunctionSet</span><span class="params">(<span class="keyword">int</span> dataLength, <span class="keyword">int</span> row, <span class="keyword">int</span> font)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0020</span>;</span><br><span class="line">command |= (dataLength &lt;&lt; <span class="number">4</span>) + (row &lt;&lt; <span class="number">3</span>) + (font &lt;&lt; <span class="number">2</span>);</span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCGRamAddress</span><span class="params">(<span class="keyword">int</span> address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0040</span>;</span><br><span class="line">command |= address; <span class="comment">// addr: [4-0]</span></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDDRamAddress</span><span class="params">(<span class="keyword">int</span> address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0080</span>;</span><br><span class="line">command |= address; <span class="comment">// addr: [5-0]</span></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readBusyFlagAndAddress</span><span class="params">(<span class="keyword">int</span> *pBusyFlag, <span class="keyword">int</span> *pAddressCounter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0200</span>;</span><br><span class="line">runCommand();</span><br><span class="line"></span><br><span class="line">*pBusyFlag = (command &gt;&gt; <span class="number">7</span>) &amp; <span class="number">0x01</span>;</span><br><span class="line">*pAddressCounter = command &amp; <span class="number">0xEF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dataWriteToCGRamOrDDRam</span><span class="params">(<span class="keyword">int</span> address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0400</span>;</span><br><span class="line">command |= address; <span class="comment">// addr: [7-0]</span></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dataReadFromCGRamOrDDRam</span><span class="params">(<span class="keyword">int</span> address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">command = <span class="number">0x0300</span>;</span><br><span class="line">command |= address; <span class="comment">// addr: [7-0]</span></span><br><span class="line"></span><br><span class="line">runCommand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeTextLcd</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setFunctionSet(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//1 - dataLen: 8, 1 - line: 2, 0 - font: 5 *7 dot</span></span><br><span class="line">displayOnOffControl(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//1 - display on, 0 - cursor off, 0 - cursor blink off</span></span><br><span class="line">clearDisplay();</span><br><span class="line">entryModeSet(<span class="number">1</span>, <span class="number">0</span>); <span class="comment">// 1 - after data is read or written, curor pos increase, 0-creen scroll off</span></span><br><span class="line">returnHome();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_textlcd_open</span><span class="params">(struct inode * inode, struct file * file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (textlcd_usage == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> -EBUSY;</span><br><span class="line"></span><br><span class="line">textlcd_ioremap = ioremap(TEXTLCD_ADDRESS, TEXTLCD_ADDRESS_RANGE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( check_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) textlcd_ioremap, TEXTLCD_ADDRESS_RANGE) <span class="comment">/* != 0 */</span>)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"Can't get IO Region 0x%x\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) textlcd_ioremap, TEXTLCD_ADDRESS_RANGE, DEVICE_NAME);</span><br><span class="line">textlcd_usage = <span class="number">1</span>;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_open, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_textlcd_release</span><span class="params">(struct inode * inode, struct file * file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">release_mem_region( (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>) textlcd_ioremap, TEXTLCD_ADDRESS_RANGE);</span><br><span class="line">iounmap(textlcd_ioremap);</span><br><span class="line">textlcd_usage = <span class="number">0</span>;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_release, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* not use</span></span><br><span class="line"><span class="comment">static ssize_t fpga_textlcd_read(struct file * file, char * buf, size_t length, loff_t * ofs)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printk("fpga_textlcd_read, \n");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">fpga_textlcd_write</span><span class="params">(struct file * file, <span class="keyword">const</span> <span class="keyword">char</span> * buf, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> * ofs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">size = (length &lt; <span class="number">20</span>) ? length : <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">copy_from_user(str, buf, length);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size ; ++i)</span><br><span class="line">writeCharacter(str[i]);</span><br><span class="line">printk(<span class="string">"fpga_textlcd_write, \n"</span>);</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static DEFINE_MUTEX(fpga_textlcd_mutex);</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fpga_textlcd_ioctl</span><span class="params">(struct file * file, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd,<span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> screenOrCursor;</span><br><span class="line"><span class="keyword">int</span> rightOrLeft;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_ioctl, \n"</span>);</span><br><span class="line"><span class="keyword">switch</span>(cmd)&#123;</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_ON:</span><br><span class="line">displayOnOffControl(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_OFF:</span><br><span class="line">displayOnOffControl(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_INIT:</span><br><span class="line">initializeTextLcd();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXT_CLEAR:</span><br><span class="line">clearDisplay();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXT_LINE1:</span><br><span class="line">setDDRamAddress(<span class="number">0x00</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXT_LINE2:</span><br><span class="line">setDDRamAddress(<span class="number">0x40</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TEXTLCD_SHIFT:</span><br><span class="line">screenOrCursor = arg &amp; <span class="number">1</span>;</span><br><span class="line">rightOrLeft = arg &amp; <span class="number">2</span>;</span><br><span class="line">cursorOrDisplayshift(screenOrCursor, rightOrLeft);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//default:</span></span><br><span class="line"><span class="comment">// mutex_unlock(&amp;fpga_textlcd_mutex);</span></span><br><span class="line"><span class="comment">// return ENOTTY;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutex_unlock(&amp;fpga_textlcd_mutex);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fpga_textlcd_fops</span> = &#123;</span></span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.open = fpga_textlcd_open,</span><br><span class="line">.release = fpga_textlcd_release,</span><br><span class="line"><span class="comment">// .read = fpga_textlcd_read,</span></span><br><span class="line">.write = fpga_textlcd_write,</span><br><span class="line">.unlocked_ioctl = fpga_textlcd_ioctl,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">fpga_textlcd_driver</span> = &#123;</span></span><br><span class="line">.minor = MISC_DYNAMIC_MINOR,</span><br><span class="line">.name = <span class="string">"fpga_textlcd"</span>,</span><br><span class="line">.fops = &amp;fpga_textlcd_fops,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fpga_textlcd_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_init, \n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> misc_register(&amp;fpga_textlcd_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fpga_textlcd_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">printk(<span class="string">"fpga_textlcd_exit, \n"</span>);</span><br><span class="line"></span><br><span class="line">misc_deregister(&amp;fpga_textlcd_driver);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(fpga_textlcd_init);</span><br><span class="line">module_exit(fpga_textlcd_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"Hanback"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"fpga_textlcd driver test"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 嵌入式系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《嵌入式系统设计》课程论文——《飞入寻常百姓家——嵌入式的机器学习加速芯片》</title>
      <link href="/2018/05/08/%E3%80%8A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E3%80%8B%E8%AF%BE%E7%A8%8B%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94%E3%80%8A%E9%A3%9E%E5%85%A5%E5%AF%BB%E5%B8%B8%E7%99%BE%E5%A7%93%E5%AE%B6%E2%80%94%E2%80%94%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87%E3%80%8B/"/>
      <content type="html"><![CDATA[<blockquote><p>虽然是大三上（2017年9月）的成果，但是得益于高金山老师的耐心指导，嵌入式是学得比较透彻的课，所以就把课程论文和<a href="http://wang22ti.com/2018/05/08/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE%E2%80%94%E2%80%94%E3%80%8A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AE%9E%E9%AA%8C%E5%90%88%E9%9B%86/">比较重要的实验的合集</a>贴出来。</p><p>那时还没学体系结构，现在看来还有值得深入的地方了。</p></blockquote><p><strong>摘要：</strong>嵌入式的加速芯片使得机器学习任务能够在各种设备上有效进行。在可以预见的将来，随着相关技术的进一步发展，加速芯片必然会更加迅速、高效，集成度更高，由此带来的大量智能化程度更高的便携设备，令人遐想。</p><p><strong>关键字</strong>：嵌入式；机器学习；SoC；寒武纪 </p><p>​    2017年9月2日，华为在德国柏林国际消费类电子产品展览会发布“麒麟970”芯片，其最大的亮点在于集成在SoC上的机器学习加速芯片“NPU”，也就是由初创高科技企业寒武纪推出的国际首款深度学习处理器产品“寒武纪1A深度学习处理器”。出于对手机SoC和机器学习的兴趣，本文将对嵌入式的机器学习加速芯片做简单介绍，并对其发展提出自己的看法。</p><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><h2 id="手机SoC简介"><a href="#手机SoC简介" class="headerlink" title="手机SoC简介"></a>手机SoC简介</h2><p>​    SoC，全称System-on-a-Chip，翻译为“片上系统”，是指利用嵌入式技术将系统的关键部件集成在一块芯片上<strong>[1]</strong>，从而实现模块化、移动化、低功耗化的手机硬件系统。常见的手机SoC集成了中央处理器CPU、图形处理器GPU、内存芯片ROM、数字信号处理器DSP、图像信号处理器ISP、基带芯片Baseband、协处理器Coprocessor等等原件<strong>[2]</strong>。</p><p>​    现在市面上主流的手机SoC有高通骁龙系列、华为麒麟系列、三星猎户座系列、联发科MTK系列和苹果的A系列<strong>[3]</strong>。其中代表各家最高水平的旗舰芯片为骁龙835、麒麟970、猎户座8895、联发科MTK HelioX30和苹果A10Fusion。另外小米也在自研处理器澎湃系列，已发布澎湃S1芯片。<strong>[4]</strong></p><p>​    当今SoC中CPU与GPU的工艺制程已经达到10nm<strong>[5]</strong>，正在逼近传统电子的物理极限，如何进一步提高处理能力，应对大数据时代的移动计算任务，成为急需解决的问题。</p><h2 id="移动平台的机器学习简介-6"><a href="#移动平台的机器学习简介-6" class="headerlink" title="移动平台的机器学习简介[6]"></a>移动平台的机器学习简介[6]</h2><p>​    随着机器学习的发展，尤其是在深层神经网络流行之后，机器学习任务对于计算能力的要求越来越高，虽然部分公司推出了专门用于机器学习任务加速的硬件，例如Google的张量处理单元TPU<strong>[7]</strong>，但是都是面向服务器的。</p><p>​    相对于服务器，基于移动平台的机器学习任务有着诸多优势：</p><ol><li><p>离线性，不依赖网络条件</p></li><li><p>即时性，无可比拟的速度与低延迟</p></li><li><p>安全性，不存在隐私的问题</p></li><li><p>易维护，不需要搭建服务器，不会出现服务器过载的情况</p></li><li><p>价格低，易于实现面向消费者的商用产品</p><p>但是，在传统的SoC架构上处理机器学习任务，存在致命的弊端：</p></li><li><p>数据集会占用本来就很珍贵的存储空间</p></li><li><p>较高的功耗会严重减少设备的续航时间</p></li><li><p>应用程序的代码移植性较低</p><p>因此，进行异构计算的嵌入式机器学习加速芯片便应运而生了。</p></li></ol><h1 id="芯片简介"><a href="#芯片简介" class="headerlink" title="芯片简介"></a>芯片简介</h1><p>​    寒武纪1A深度学习处理器是由初创高科技企业寒武纪推出的国际首款深度学习处理器产品，它着重解决了传统SoC架构上处理机器学习任务的前两个弊端。一下将对其做简单介绍，并不涉及技术细节。<strong>[8-9]</strong></p><h2 id="改进计算模型的表示方法"><a href="#改进计算模型的表示方法" class="headerlink" title="改进计算模型的表示方法"></a>改进计算模型的表示方法</h2><p>​    针对大规模的稀疏不对称图的表示，基于磁盘的图形处理框架GraphChi<strong>[10]</strong>将顶点集合分为若干个子集，并在每个子集中按照边进行记录。在寒武纪的架构中，将顶点的划分由原来的不规则改为相同的，存储的规则性极大地提高了随机访问的速度和计算单元的效率。</p><p><img src="/2018/05/08/《嵌入式系统设计》课程论文——《飞入寻常百姓家——嵌入式的机器学习加速芯片》/1.png" alt=""></p><h2 id="挖掘图像处理局部性"><a href="#挖掘图像处理局部性" class="headerlink" title="挖掘图像处理局部性"></a>挖掘图像处理局部性</h2><p>​    通过观测，设计者发现在图像处理过程中顶点的使用往往符合偏态的幂律分布<strong>[11]</strong>，即最经常出现的1%的顶点平均和22.18%的边相连，也就是顶点的使用具有很强的局部性。因此，设计者在寒武纪芯片上加上了一些复杂的顶点缓存，从而减少了常用顶点的读取次数。</p><p> <img src="/2018/05/08/《嵌入式系统设计》课程论文——《飞入寻常百姓家——嵌入式的机器学习加速芯片》/2.png" alt=""></p><h2 id="杰出的性能表现"><a href="#杰出的性能表现" class="headerlink" title="杰出的性能表现"></a>杰出的性能表现</h2><p>​       通过对GPU与加速芯片进行相同机器学习任务的比较，可以发现，在代码量、运算速度、功耗等等各个主要的性能指标中，加速芯片都表现出良好的性能，甚至提高了几十倍乃至上百倍，体现出异构计算的优越性。</p><p><img src="/2018/05/08/《嵌入式系统设计》课程论文——《飞入寻常百姓家——嵌入式的机器学习加速芯片》/3.png" alt=""></p><h1 id="个人感想与展望"><a href="#个人感想与展望" class="headerlink" title="个人感想与展望"></a>个人感想与展望</h1><p>​    毫无疑问，从寒武纪发布芯片，再到华为集成到SoC，是我国IC设计的巨大进步。在和舍友讨论的过程中，他认为麒麟970能否成功关键在于开发者是否愿意使用——否则只会空耗电量。而我认为，即便第三方开发者暂时还没有使用，NPU的加入也会极大提高华为手机在诸多应用的表现并使之脱颖而出：</p><p>1、相册图片的即时分类。传统的相册分类任务需要在手机接通电源乃至保持联网的状态下进行，而且速度较慢。而NPU可以使得在低功耗的状态下快速完成本地的分类任务。</p><p>2、用户场景的识别与任务推荐。在我看来，此前华为在荣耀Magic中试验的智慧系统<strong>[12]</strong>正是为此进行的提前布局。在验证了程序的可行性之后，配有高效的加速硬件，场景识别及其配套的任务推荐必然更加迅速而有效。</p><p>3、人脸识别。使用虹膜或人脸识别的解锁必然更加准确、快速、高效。</p><p>4、拍照图像渲染。一方面，可以快速识别拍照环境并给予相应的优化处理；另一方面可以对拍好的图像进行即时性的优化处理。关键这一切都是在极低的功耗下完成的。</p><p>​    不仅如此，更让我感到兴奋的，是嵌入式的加速芯片使得机器学习任务能够在各种设备上有效进行。新的加速芯片的主要缺陷在于工艺程度不够高，在可以预见的将来，随着相关技术的进一步发展，加速芯片必然会更加迅速、高效，集成度更高，价格更加低廉，由此带来的大量智能化程度更高的便携设备，令人遐想。例如我可以猜想，现在只带有一层神经网络的开发板，未来完全可以改为集成加速芯片，其能够处理的任务，便完全不可同日而语了吧？得益于加速芯片极高的能效，智能手环可能实现令人惊奇的待机时间，从而极大提高用户体验。还有，传统笔记本的架构是否会因此发生改变呢？</p><p>​    这些，仿佛都在昭示这一个新的时代的到来，硬件级的机器学习加速，从此飞入寻常百姓家。</p><p>​    另：在撰写的过程中，苹果公司发布了最新的A11 Bionic，也加入了类似的机器学习加速引擎，在此不做赘述，但可以看出嵌入式的机器学习加速芯片已经成为SoC发展的新趋势。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] soc（多种含义）_百度百科</p><p><a href="https://baike.baidu.com/item/soc/1053305?fr=aladdin#3" target="_blank" rel="noopener">https://baike.baidu.com/item/soc/1053305?fr=aladdin#3</a></p><p>[2] 只谈核数没意义 带你重新认识手机SoC_高通_骁龙_八核_手机_新浪科技_新浪网<a href="http://tech.sina.com.cn/mobile/n/2014-09-29/08399657494.shtml" target="_blank" rel="noopener">http://tech.sina.com.cn/mobile/n/2014-09-29/08399657494.shtml</a></p><p>[3] 高通海思联发科_三星 常见手机SoC科普</p><p><a href="http://www.eepw.com.cn/article/201701/342481.htm" target="_blank" rel="noopener">http://www.eepw.com.cn/article/201701/342481.htm</a></p><p>[4] 澎湃S1_百度百科</p><p><a href="https://baike.baidu.com/item/%E6%BE%8E%E6%B9%83S1/20455910?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%BE%8E%E6%B9%83S1/20455910?fr=aladdin</a></p><p>[5] 骁龙835处理器正式发布 10nm工艺+五大特色_数码_腾讯网</p><p><a href="http://digi.tech.qq.com/a/20170104/003947.htm" target="_blank" rel="noopener">http://digi.tech.qq.com/a/20170104/003947.htm</a></p><p>[6] 基于移动设备的机器学习，本地与云端孰优孰劣？ _ 雷锋网</p><p><a href="https://www.leiphone.com/news/201702/kXMhFVvF143mxunm.html" target="_blank" rel="noopener">https://www.leiphone.com/news/201702/kXMhFVvF143mxunm.html</a></p><p>[7] 谷歌的机器学习专用芯片让AI速度更快、更高效_科技_腾讯网</p><p><a href="http://tech.qq.com/a/20170425/046948.htm" target="_blank" rel="noopener">http://tech.qq.com/a/20170425/046948.htm</a></p><p>[8] Jinhong Zhou, Shaoli Liu, Qi Guo, XudaZhou, Tian Zhi, Daofu Liu, Chao Wang Xuehai Zhou, Yunji Chen and Tianshi Chen， “TuNao: AHigh-Performance and Energy-EfficientRecofigurable Accelerator for Graph Processing” 17th IEEE/ACMInternational Symposium on Cluster, Cloud and Grid Computing，2017</p><p>[9]Shaoli Liu, Zidong Du, Jinhua Tao, Dong Han, Tao Luo, Yuan Xie, Yunji Chen andTianshi Chen，“Cambricon: An Instruction Set Architecture for NeuralNetwork” ACM/IEEE 43rd Annual International Symposiumon Computer Architecture，2016</p><p>[10]A. Kyrola, G. Blelloch, and C. Guestrin, “Graphchi: Large-scale graph computationon just a pc,” in Proceedings of the 10th USENIX Conference on OperatingSystems Design and Implementation, 2012.               </p><p>[11]  幂律分布_百度百科</p><p><a href="https://baike.baidu.com/item/%E5%B9%82%E5%BE%8B%E5%88%86%E5%B8%83/4281937?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%B9%82%E5%BE%8B%E5%88%86%E5%B8%83/4281937?fr=aladdin</a></p><p>[12] 【荣耀Magic【报价参数 功能 性能 图片 怎么样】】_华为商城</p><p><a href="https://www.vmall.com/product/531767730.html" target="_blank" rel="noopener">https://www.vmall.com/product/531767730.html</a></p><p>注：因为并不是十分严格的学术论文，故将大量新闻网页作为参考资料列入，同时没有遵循严格的引用格式。</p>]]></content>
      
      <categories>
          
          <category> 嵌入式系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《编译原理》实验3-语法分析器（LL1分析法）python实现</title>
      <link href="/2018/05/05/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B9%8BLL1%E5%88%86%E6%9E%90%E6%B3%95python%E5%AE%9E%E7%8E%B0/"/>
      <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        本次实验中，在上次实验（递归下降分析法）实现的first集follow集的基础上，我用python3.5实现了一个LL(1)语法分析类，具有以下功能：</p><ol><li><p>根据文法的起始符号、非终结符号、产生式自动生成文法终结符号的First集和Follow集，并进一步生成文法的LL(1)文法分析表。</p></li><li><p>根据文法分析表判断输入串是否满足该文法。</p></li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>​        实验中实现的词法分析类名为LLOneAnalyzer，具体描述信息如下：</p><p><img src="/2018/05/05/《编译原理》实验3-语法分析器之LL1分析法python实现/2.png" alt=""><br><img src="/2018/05/05/《编译原理》实验3-语法分析器之LL1分析法python实现/3.png" alt=""></p><h1 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h1><p><img src="/2018/05/05/《编译原理》实验3-语法分析器之LL1分析法python实现/Snipaste_2018-05-07_15-41-27.png" alt=""></p><p><img src="/2018/05/05/《编译原理》实验3-语法分析器之LL1分析法python实现/4.png" alt=""></p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写过递归下降分析，可以直接写LL1的加强版啦</span></span><br><span class="line"><span class="comment"># E'用B代替，T'用U来代替</span></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LLOneAnalyzer</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, overs, production)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.overs = overs</span><br><span class="line">        self.production = production</span><br><span class="line">        self.nontermainals = production.keys()</span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line">        self.analyse_table = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.get_analyse_table()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        ret_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">            <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                ret_dict = self.first[nontermainal]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    ret_dict.update(&#123;right[<span class="number">0</span>]: right&#125;)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                            first_ = self.first[sign]</span><br><span class="line">                            ret_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret_dict</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 求first集和follow集</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮，产生式右部首字符为终结符号</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_first = deepcopy(self.first)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                self.first[nontermainal].update(self.get_first(nontermainal))</span><br><span class="line">            <span class="keyword">if</span> old_first == self.first:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[self.start].add(<span class="string">'#'</span>)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = deepcopy(self.follow)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.overs:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.overs:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_set = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_set_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_set_without_null</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_set:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 将follow集加入first集</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal]:</span><br><span class="line">                self.follow[nontermainal] -= &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[nontermainal].keys()&#125;</span><br><span class="line">                self.first[nontermainal][<span class="string">''</span>] = self.follow[nontermainal]</span><br><span class="line">        print(self.first)</span><br><span class="line">        print(self.follow)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据first集follow集生成分析表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analyse_table</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 对于first集中每一个产生式及对应的输入符号</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> a, right <span class="keyword">in</span> self.first[nontermainal].items():</span><br><span class="line">                <span class="comment"># 如果输入符号为终结符号，将终结符号、输入符号、产生式右部写入分析表</span></span><br><span class="line">                <span class="keyword">if</span> a != <span class="string">''</span>:</span><br><span class="line">                    self.analyse_table[nontermainal][a] = right</span><br><span class="line">                <span class="comment"># 如果输入符号是空串，将非终结符号的follow集中每一个符号在分析表中的值写为空串</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> b <span class="keyword">in</span> right:</span><br><span class="line">                        self.analyse_table[nontermainal][b] = <span class="string">''</span></span><br><span class="line">        print(self.analyse_table)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ll(1)文法分析函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_llone</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 拿出分析栈栈顶符号分析</span></span><br><span class="line">            x = self.stack.pop()</span><br><span class="line">            <span class="comment"># 如果是栈顶符号终结符号</span></span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> self.overs:</span><br><span class="line">                <span class="comment"># 如果和待分析的符号匹配，分析下一个符号</span></span><br><span class="line">                <span class="keyword">if</span> x == self.a:</span><br><span class="line">                    self.index += <span class="number">1</span></span><br><span class="line">                    self.a = self.string[self.index]</span><br><span class="line">                <span class="comment"># 如果不匹配，返回False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 如果栈顶符号是'#'</span></span><br><span class="line">            <span class="keyword">elif</span> x == <span class="string">'#'</span>:</span><br><span class="line">                <span class="comment"># 如果和待分析的符号匹配，返回True</span></span><br><span class="line">                <span class="keyword">if</span> x == self.a:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="comment"># 如果不匹配，返回False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 如果是非终结符号，将产生式右部元素逆序压入分析栈</span></span><br><span class="line">            <span class="keyword">elif</span> self.a <span class="keyword">in</span> self.analyse_table[x].keys():</span><br><span class="line">                self.stack += list(reversed(self.analyse_table[x][self.a]))</span><br><span class="line">            <span class="comment"># 如果是未知符号，返回False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ll(1)文法分析程序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.string = string + <span class="string">'#'</span></span><br><span class="line">        self.stack = [<span class="string">'#'</span>, self.start]</span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.a = self.string[self.index]</span><br><span class="line">        <span class="keyword">if</span> self.analyse_llone():</span><br><span class="line">            print(<span class="string">'OK  '</span>, string)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Fail'</span>, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = <span class="string">'E'</span></span><br><span class="line">overs = [<span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>, <span class="string">'i'</span>]</span><br><span class="line">production = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'TB'</span>, ],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'ATB'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'FU'</span>, ],</span><br><span class="line">    <span class="string">'U'</span>: [<span class="string">'MFU'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'+'</span>, <span class="string">'-'</span>],</span><br><span class="line">    <span class="string">'M'</span>: [<span class="string">'*'</span>, <span class="string">'/'</span>],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [</span><br><span class="line">    <span class="string">''</span>,</span><br><span class="line">    <span class="string">'i+@'</span>,</span><br><span class="line">    <span class="string">'i'</span>,</span><br><span class="line">    <span class="string">'i+'</span>,</span><br><span class="line">    <span class="string">'+*i'</span>,</span><br><span class="line">    <span class="string">'i+i*i'</span>,</span><br><span class="line">    <span class="string">'i+i*ii'</span>,</span><br><span class="line">    <span class="string">'i+i*i+'</span>,</span><br><span class="line">    <span class="string">'i+i*i/i-i'</span>,</span><br><span class="line">]</span><br><span class="line">llone_analyzer = LLOneAnalyzer(start=start, overs=overs, production=production)</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    llone_analyzer.analyse(string=string)</span><br><span class="line"><span class="comment"># start = 'S'</span></span><br><span class="line"><span class="comment"># overs = ['a', 'b']</span></span><br><span class="line"><span class="comment"># production =&#123;</span></span><br><span class="line"><span class="comment">#     'S': ['AbT', 'bT'],</span></span><br><span class="line"><span class="comment">#     'T': ['bT', ''],</span></span><br><span class="line"><span class="comment">#     'A': ['aB',],</span></span><br><span class="line"><span class="comment">#     'B': ['aB', '']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">start = <span class="string">'S'</span></span><br><span class="line">overs = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">production =&#123;</span><br><span class="line">    <span class="string">'S'</span>: [<span class="string">'SaB'</span>, <span class="string">'bB'</span>],</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'S'</span>,<span class="string">'a'</span>],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'Ac'</span>,]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># start = 'S'</span></span><br><span class="line"><span class="comment"># overs = ['a', 'b']</span></span><br><span class="line"><span class="comment"># production = &#123;</span></span><br><span class="line"><span class="comment">#     'S': ['aAB', 'bA', ''],</span></span><br><span class="line"><span class="comment">#     'A': ['aAb', ''],</span></span><br><span class="line"><span class="comment">#     'B': ['bB', '']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">string_list = [<span class="string">'b'</span>, <span class="string">'aabbb'</span>]</span><br><span class="line"></span><br><span class="line">llone_analyzer2 = LLOneAnalyzer(start=start, overs=overs, production=production)</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    llone_analyzer2.analyse(string=string)</span><br></pre></td></tr></table></figure><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p><img src="/2018/05/05/《编译原理》实验3-语法分析器之LL1分析法python实现/1.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：由于上一次实验打下的良好基础，本次实验较为顺利，没有遇到明显的困难。</p><p>​        本程序的优点包括：比较完整地实现了LL(1)分析算法；分析器只需要输入起始符号、产生式、终结符号就可以初始化，自动生成First集、Follow集和分析表。</p><p>​        本程序还存在可以优化的地方，主要包括：将输入符号串改为由词法分析器生成的二元式从文件中读取，为完整编译器的实现打下良好的基础；</p><p>​        本实验中，通过实现LL(1)文法分析表生成算法与LL(1)文法分析算法，加深了我对两个算法的理解，提高了我对问题分析、抽象的能力，为实现完整编译器打下了良好的基础。</p>]]></content>
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《操作系统》实验4-进程通信与线程同步</title>
      <link href="/2018/05/01/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C4-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <content type="html"><![CDATA[<h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><p>​    <strong>创建两个进程。要求两个进程分别作为“生产者”和“消费者”，由生产者生产1-100数字，通过命名管道传递给消费者进程，并由消费者屏幕输出。通过实验验证命名管道同步方式（生产者发送时阻塞或者非阻塞，消费者阻塞或者非阻塞）</strong></p><p>​        实验中我使用fork创建了两个进程分别作为生产者和消费者，从屏幕右侧的输出来看，到后期基本按照“写入一个，读出一个”的方式进行生产消费，不过消费者相对于生产者有3个周期的延迟。最终程序很好的在“生产者-消费者”模式下完成了进程的同步输出。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image1.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIFO_NAME <span class="meta-string">"my_fifo"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE PIPE_BUF </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (access(FIFO_NAME, F_OK) == <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> ( mkfifo(FIFO_NAME, <span class="number">0777</span>) )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[producer %d] could not create fifo %s\n"</span>, getpid(), FIFO_NAME);  </span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ( (pipe_id =open(FIFO_NAME, O_WRONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">         <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];</span><br><span class="line">         <span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">             <span class="built_in">sprintf</span>(buffer, <span class="string">"%d"</span>, num);</span><br><span class="line">             <span class="keyword">if</span> ( (write(pipe_id, buffer, BUFFER_SIZE)) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[producer]Write error on pipe\n"</span>);  </span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">             &#125;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"[producer %d] put %d\n"</span>, getpid(), num++); </span><br><span class="line">         &#125;</span><br><span class="line">         close(pipe_id); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[producer %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">comsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];   </span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ((pipe_id =open(FIFO_NAME, O_RDONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">do</span>&#123;  </span><br><span class="line">            read(pipe_id, buffer, BUFFER_SIZE);</span><br><span class="line">            num = atoi(buffer);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[somsumer %d] get %d\n"</span>, getpid(), num); </span><br><span class="line">        &#125;<span class="keyword">while</span>(num &lt; <span class="number">100</span>);  </span><br><span class="line">        close(pipe_id);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[somsumer %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">while</span> ((pid = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line">producer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">comsumer();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>​    <strong>创建两个进程，通过消息传递机制通信。进程A接受用户的键盘输入，并通过消息通信传递给进程B。进程B根据收到的命令如下处理，如果是“exit”则退出，否则将收到的命令串原样屏幕输出。</strong></p><p>​        由于仍然采用命名管道的方法，该题和上一题十分相似，在此不做赘述，程序运行结果如下，很好的满足了题目的要求。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image2.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIFO_NAME <span class="meta-string">"my_fifo_cmd"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE PIPE_BUF </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_cmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (access(FIFO_NAME, F_OK) == <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> ( mkfifo(FIFO_NAME, <span class="number">0777</span>) )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[get_cmd %d] could not create fifo %s\n"</span>, getpid(), FIFO_NAME);  </span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ( (pipe_id =open(FIFO_NAME, O_WRONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">         <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];</span><br><span class="line">         <span class="keyword">char</span>* exit_str = <span class="string">"exit"</span>;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"please input cmd:\n"</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buffer);</span><br><span class="line">            <span class="keyword">if</span> ( (write(pipe_id, buffer, BUFFER_SIZE)) == <span class="number">-1</span>) &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"[get_cmd]Write error on pipe\n"</span>);  </span><br><span class="line">               <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(buffer, exit_str) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         close(pipe_id); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[get_cmd %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_cmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pipe_id;</span><br><span class="line">    <span class="keyword">if</span> ((pipe_id =open(FIFO_NAME, O_RDONLY)) != <span class="number">-1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">char</span> buffer[BUFFER_SIZE + <span class="number">1</span>];   </span><br><span class="line">        <span class="built_in">memset</span>(buffer, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">        <span class="keyword">char</span>* exit_str = <span class="string">"exit"</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;  </span><br><span class="line">            read(pipe_id, buffer, BUFFER_SIZE);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(buffer, exit_str) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[print_cmd %d] %s\n"</span>, getpid(), buffer); </span><br><span class="line">        &#125;  </span><br><span class="line">        close(pipe_id);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[print_cmd %d] open fifo file failed\n"</span>, getpid());  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">while</span> ((pid = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line">get_cmd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">print_cmd();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><p>​    <strong>采用线程的互斥锁和条件变量，实现最多允许10个读者同时读的读者写者线程同步问题。</strong></p><p>​        解决读写者问题的关键在于深入分析读者写者的同步需求。读者之间读不需要互斥，但为了设定读者数量最大值必须在计数的时候互斥，开始时计数需要考虑读者数是否达到最大值，结束计数的时候需要考虑结束前读者数是否为最大值、结束后是否还有读者，最后对条件变量进行相应的操作；写者之间当然也要互斥，写之前需要考虑是否有读者在读，写期间不允许有读者读。</p><p>​        本实验我将以上思路转变为代码并测试如下，为了方便结果的截取将读者最大数量设为2（当然设为10也没问题），写者数量为1。写者的工作是将共有的变量i加1并打印，读者的工作是读取变量i的值并打印。最终实验结果如下图所示，可见读者读取期间i的值不变，写者写数期间i依次增加，满足读写者同步的要求。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image3.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> rmutex;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> wmutex;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> wcond;</span><br><span class="line"><span class="keyword">pthread_cond_t</span> rcond;</span><br><span class="line"><span class="keyword">int</span> readcount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;rmutex);</span><br><span class="line">        <span class="keyword">if</span> (readcount &gt;= N) &#123;</span><br><span class="line">            pthread_cond_wait(&amp;rcond, &amp;rmutex);</span><br><span class="line">        &#125;</span><br><span class="line">        readcount++;</span><br><span class="line">        pthread_mutex_unlock(&amp;rmutex);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"reader: %d\n"</span>, i);</span><br><span class="line"></span><br><span class="line">        pthread_mutex_lock(&amp;rmutex);</span><br><span class="line">        <span class="keyword">if</span> (readcount == N) &#123;</span><br><span class="line">            pthread_cond_signal(&amp;rcond);</span><br><span class="line">        &#125;</span><br><span class="line">        readcount--;</span><br><span class="line">        <span class="keyword">if</span>(readcount == <span class="number">0</span>) &#123;</span><br><span class="line">            pthread_cond_signal(&amp;wcond);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_mutex_unlock(&amp;rmutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;wmutex);</span><br><span class="line">        <span class="keyword">while</span>(readcount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            pthread_cond_wait(&amp;wcond, &amp;wmutex);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_mutex_lock(&amp;rmutex);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"writer: %d\n"</span>, ++i);</span><br><span class="line">        <span class="comment">// sleep(1);</span></span><br><span class="line">        </span><br><span class="line">        pthread_mutex_unlock(&amp;rmutex);</span><br><span class="line">        pthread_mutex_unlock(&amp;wmutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1, thid2, thid3;</span><br><span class="line">    pthread_mutex_init(&amp;rmutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_init(&amp;wmutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;wcond, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;rcond, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)reader, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)reader, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid3, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)writer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;rmutex);</span><br><span class="line">    pthread_mutex_destroy(&amp;wmutex);</span><br><span class="line">    pthread_cond_destroy(&amp;rcond);</span><br><span class="line">    pthread_cond_destroy(&amp;wcond);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p>​    <strong>采用java管程实现生产者消费者线程同步并通过实验测试验证正确性。</strong></p><p>​    由于使用Java编程，因此转而使用windows，正好借此机会复习了Java。</p><p>​    在本次实验中，我通过实践Runnable接口创建了生产者类Producer和消费者类Comsumer，使用Java自带的LinkedQueue结构作为数据缓冲区，并使用synchronized关键字和wait()、signal()方法完成线程的同步与互斥。最后同时开启了3个生产者线程和3个消费者线程。</p><p>​    实验结果如屏幕右方所示，可以看到在生产者在生成随机数89后发现队列已满于是进入阻塞状态并放弃对buffer的互斥锁，于是消费者取出上一轮第一个生产出的随机数98并唤醒所有线程。此时有一个生产者发现buffer不满于是又生产了一个随机数44，之后消费者占据主导权并持续消费，可以看到在这一轮消费中最后一个恰好是之前生产的44。可见很好的实现了“生产者-消费者”的线程同步。</p><p><img src="/2018/05/01/《操作系统》实验4-进程通信与线程同步/image4.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Queue bufferQueue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> bound = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">    Producer(Queue bufferQueue) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferQueue = bufferQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bufferQueue) &#123;</span><br><span class="line">                <span class="keyword">while</span> (bufferQueue.size ( ) &gt;= N) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bufferQueue.wait ( );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace ( );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> newInt = <span class="keyword">new</span> Random ( ).nextInt (bound) + <span class="number">10</span>;</span><br><span class="line">                bufferQueue.add (newInt);</span><br><span class="line">                System.out.println (<span class="string">"produce : "</span> + newInt + <span class="string">"\tqueue : "</span> + bufferQueue.size ( ));</span><br><span class="line">                bufferQueue.notifyAll ( );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Queue bufferQueue;</span><br><span class="line"></span><br><span class="line">    Comsumer(Queue buffer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferQueue = buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bufferQueue) &#123;</span><br><span class="line">                <span class="keyword">while</span> (bufferQueue.size ( ) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bufferQueue.wait ( );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace ( );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> ch = (<span class="keyword">int</span>) bufferQueue.poll ( );</span><br><span class="line">                System.out.println (<span class="string">"comsume : "</span> + ch + <span class="string">"\tqueue : "</span> + bufferQueue.size ( ));</span><br><span class="line">                bufferQueue.notifyAll ( );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Queue bufferqueue = <span class="keyword">new</span> LinkedList ( );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread (<span class="keyword">new</span> Producer (bufferqueue)).start ( );</span><br><span class="line">            <span class="keyword">new</span> Thread (<span class="keyword">new</span> Comsumer (bufferqueue)).start ( );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] Linux学习笔记6——access函数 </p><p><a href="https://blog.csdn.net/yellowston/article/details/53493293" target="_blank" rel="noopener">https://blog.csdn.net/yellowston/article/details/53493293</a></p><p>[2] Linux进程通信：命名管道FIFO小结</p><p> <a href="https://blog.csdn.net/MONKEY_D_MENG/article/details/5651430" target="_blank" rel="noopener">https://blog.csdn.net/MONKEY_D_MENG/article/details/5651430</a></p><p>[3] Java 多线程编程</p><p><a href="http://www.runoob.com/java/java-multithreading.html" target="_blank" rel="noopener">http://www.runoob.com/java/java-multithreading.html</a></p><p>[4] JAVA多线程之Runnable和Thread比较</p><p><a href="https://blog.csdn.net/u013755987/article/details/51855098" target="_blank" rel="noopener">https://blog.csdn.net/u013755987/article/details/51855098</a></p><p>[5] Java中的LinkedList的方法的应用</p><p><a href="https://blog.csdn.net/sinat_36246371/article/details/53709625" target="_blank" rel="noopener">https://blog.csdn.net/sinat_36246371/article/details/53709625</a></p><p>[6] java中的notify和notifyAll有什么区别？ </p><p><a href="https://www.zhihu.com/question/37601861" target="_blank" rel="noopener">https://www.zhihu.com/question/37601861</a></p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《操作系统》实验3-进程同步-子泰编写的实验指导书</title>
      <link href="/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/"/>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>既然要进行进程同步，首先要有多个进程，所以要学会在Linux环境下使用<code>fork</code>等函数创建进程，具体参见文献[1]或实验《进程控制》，在此不做赘述。下面着重介绍Linux环境下实现进程同步、进程通信、线程同步的C语言函数及其使用方法。</p><h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><p>Linux信号量操作的相关函数都声明在头文件<code>&lt;sys/sem.h&gt;</code> 中，包括<code>semget</code>、<code>semop</code>、<code>semctl</code>，以下将分别对其进行介绍。</p><h2 id="semget——得到一个信号量“集”"><a href="#semget——得到一个信号量“集”" class="headerlink" title="semget——得到一个信号量“集”"></a>semget——得到一个信号量“集”</h2><p>调用该函数后，会得到一个信号量集，注意，这意味着可以通过一次调用获得多个信号量，具体怎么使用呢？接下来会介绍。我们先看一下该函数的原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> num_sems, <span class="keyword">int</span> sem_flags)</span></span>;</span><br></pre></td></tr></table></figure><p>其中最容易理解的是<code>num_sems</code>，它表示创建的信号量的集合中含有的信号量的个数，当然可以是1个或多个。那其他的参数呢？</p><p><code>key_t key</code>告诉操作系统：“我需要的信号量集键值（可以理解为编号）为key！”收到这个指令后，系统就会给出一个信号量标识符（也可以理解为编号，比如10086）作为semget的返回值（失败返回-1），之后我们使用信号量标识符（10086）而非key实现对信号量的间接操作（操作系统是不会允许我们直接加减信号量的）。</p><p>key和信号量标识符是一一对应的，且标识符的值是由系统根据key计算得到的，所以实际调用的时候，我们只需要考虑对于key限制。如果只使用一个信号量集合，key可以是任意的非零整数（比如1000）。当使用多个集合的时候，由于这种一一对应的关系，为了区别不同的信号量集合，key的值必须是各不相同的。如何做到各不相同呢？一种方法是手动指定不同的值，另一方法是使用函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">key_t</span> ftok( <span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> proj_id);</span><br></pre></td></tr></table></figure><p>将系统中各不相同的文件路径转化为一一对应的整数，具体参见文献[2]，由于本实验中手动指定的方法足以满足要求，所以在此不做赘述。</p><p><code>sem_flags</code>是对得到的信号量集进行权限的配置，典型值为<code>IPC_CREAT | 0666</code>，就是常量IPC_CREAT和八进制数666进行或操作。八进制数的三位依次表示对这个信号量集的操作权限。其中第一个数表示创建者的操作权限，第二个数表示同组人的操作权限，第三个数表示其他人的操作权限。操作权限用4表示读，2表示写，6表示可读也可写，0表示不能读也不能写，具体参见文献[3]。还可以是<code>IPC_CREAT| IPC_EXCL</code>，表示创建一个新的、唯一的信号量，如果信号量已存在，返回-1表示错误。</p><h2 id="semop——改变信号量的值"><a href="#semop——改变信号量的值" class="headerlink" title="semop——改变信号量的值"></a>semop——改变信号量的值</h2><p>通过semget创建了信号量集合之后，我们总需要通过<code>semop</code>改变信号量的值，其原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> sem_id, struct sembuf *sem_opa, <span class="keyword">size_t</span> num_sem_ops)</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>sem_id</code>就是通过semget得到的信号量标识符，返回值表示操作是否成功。<code>sem_opa</code>是对该集合中信号量操作的数组（operation array），根据C语言的编程技巧，一般传入数组的同时要传入数组的长度，<code>num_sem_ops</code>就是sem_opa中操作的数量。</p><p>为了让操作系统明白操作的具体内容，sem_opa中的每一个元素都是一个名为<code>sembuf</code>的结构体，其结构定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span>&#123;</span>  </span><br><span class="line">        <span class="keyword">short</span> sem_num; </span><br><span class="line">        <span class="keyword">short</span> sem_op;</span><br><span class="line">        <span class="keyword">short</span> sem_flg; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中<code>sem_num</code>表示操作的那一个信号量在信号量集当中的编号，当然是从0开始啦；<code>sem_op</code>表示对信号量进行+=sem_op的操作；<code>sem_flg</code>是对这一操作的进一步解释，典型值<code>SEM_UNDO</code>表示该进程结束的时候撤销这次操作，让信号量回到该进程执行之前的状态，当然也可以设置为0表示正常的操作，进一步解释可以参见文献[4]。需要注意的是，<strong>对sem_flg不同的设置可能会导致死锁、实验现象不可重复等现象，这需要在实验中进一步探索。</strong></p><p>​        当然，为了方便的修改信号量的值，我们可以进一步对semop函数进行封装，比如对指定信号量的<code>wait</code>原语：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = sem_num;</span><br><span class="line">sem_buff.sem_op = <span class="number">-1</span>;</span><br><span class="line">sem_buff.sem_flg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - wait"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        类似的，也可以写出对指定信号量的signal操作、或是对某一信号量集内所有信号量的signal、wait操作，具体问题具体分析啦！</p><h2 id="semctl——对信号量的复杂控制"><a href="#semctl——对信号量的复杂控制" class="headerlink" title="semctl——对信号量的复杂控制"></a>semctl——对信号量的复杂控制</h2><p>semop函数似乎已经可以解决很多问题了，但是还远远不够。如果希望对信号量进行赋值而非相对地加减，如果希望得到信号量的值，如果希望得到等待进程的数目……还需要<code>semctl</code>函数，它的原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num, <span class="keyword">int</span> cmd, <span class="keyword">union</span> semun)</span></span>;</span><br></pre></td></tr></table></figure><p>已经容易知道，<code>sem_id</code>是通过semget得到的信号量标识符，<code>sem_num</code>表示控制的那一个信号量在信号量集当中的编号。<code>cmd</code>就是控制的动作，本实验中可能用到的有：</p><p><code>IPC_RMID</code>    将信号量集从内存中删除。<br><code>GETALL</code>        用于读取信号量集中所有信号量的值。<br><code>GETVAL</code>        返回信号量集中某一个信号量的值。<br><code>SETALL</code>        设置信号量集中的所有信号量的值<br><code>SETVAL</code>        设置信号量集中的某一个信号量的值。</p><p>你可能困惑，如果cmd为SETVAL或者SETALL，如果将设置的值传入呢？答案就在可选的参数<code>semun</code>，其结构为如下（值得注意的是，<strong>sem.h中把该联合体的声明注释掉了，需要自己在程序中定义union semun</strong>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> semun &#123;</span><br><span class="line">   <span class="keyword">int</span>   val;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span>   <span class="title">semid_ds</span>  *<span class="title">buf</span>;</span></span><br><span class="line">   <span class="keyword">unsigned</span> <span class="keyword">short</span>   *arrary;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果cmd是SETVAL，你想设置的值为10，那么令semun.val=10传入semctl。同理，当cmd为SETALL时，封装函数如下，实现同时对某一信号量集中所有信号量的赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_values_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.arry = arry;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="keyword">sizeof</span>(arry) - <span class="number">1</span>, SETALL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - set values of semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此，我们就可以对信号量集进行复杂的控制，进一步参见文献[5]相关内容。</p><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><p>​        由于进程之间的内存是隔离的，因此即便在编程的时候设置一个全局变量，即便在不同进程里打印这个变量的地址也是相同的，不同进程的内的变量也是完全独立的——这告诉我们fork()函数创建的子进程和父进程之间除了id不同外，是完全一样的，甚至变量的地址也是，虽然它们之间已经完全没关系了。</p><p>但有时候进程的通信是必须的——比如生产者消费者模型，所以引入共享内存的方式进行进程通信，即允许两个不同的进程访问同一个逻辑内存。Linux共享内存的实现通过的是声明于<code>sys/shm.h</code>（shared memory）中<code>shmget</code>、<code>shmat</code>、<code>shmdt</code>、<code>shmctl</code>四个函数实现。是不是看起来很眼熟？因为这几个函数的操作逻辑和进程同步的几个函数是很相似的。由于进程通信不是本次实验的重点，因此给出如下的代码模板，详细参见文献[6]相关内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> share_memory_id;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// TO-DO</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span> *<span class="title">shared</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建共享内存</span></span><br><span class="line">share_memory_id = shmget(<span class="number">12345</span>, <span class="keyword">sizeof</span>(struct share_data), <span class="number">0666</span>|IPC_CREAT);</span><br><span class="line"><span class="comment">// 将这段共享内存映射到需要共享的变量上</span></span><br><span class="line">shared = (struct share_data *) shmat(share_memory_id, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TO-DO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程互斥"><a href="#线程互斥" class="headerlink" title="线程互斥"></a>线程互斥</h1><p>Linux中的多线程实现的函数，都声明在头文件<code>pthread.h</code>中，包括<code>pthread_create</code>、<code>pthread_join</code>、<code>pthread_exit</code>、<code>pthread_cancel</code>、<code>pthread_self</code>这一类控制进程状态的函数和<code>pthread_mutex_init</code>、<code>pthread_mutex_destroy</code>、<code>pthread_mutex_lock</code>、<code>pthread_mutex_unlock</code>、<code>pthread_mutex_trylock</code>这一类进程互斥锁相关的函数。由于本部分属于预习内容，以下将按照最基本的要求对上述函数进行介绍。</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>​        要使用多线程，首先需要创建多个线程，于是使用函数pthread_create，其原型为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_create(pthread_t*thread, pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);</span><br></pre></td></tr></table></figure><p>和进程类似的地方是，执行该函数后程序就会产生分支，一方面继续执行调用pthread_create的函数，另一方面开始执行<code>start_routine</code>指定的函数。start_routine究竟是什么？一眼看上去可能不明所以，其实就是你写的一个函数的函数名，比如transfer；如果该函数(transfer)需要参数呢？就通过参数arg构造结构体传入即可。</p><p>​        和进程创建不同的是，pthread_create的返回值表示是否创建成功，而thread实际上是一个int型的指针，指向存储执行函数start_routine进程的id。示例代码如下所示，需要注意的是，因为pthread库不是Linux系统默认的库，连接时需要使用库<code>libpthread.a</code>，所以编译时要加<code>-lpthread</code>参数，比如<code>gcc createThread.c -lpthread -o createThread</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TO-DO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1, thid2;</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <code>thread_join</code>是什么意思呢？其原型为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(pthread_tthread, <span class="keyword">void</span> **retval)</span></span>;</span><br></pre></td></tr></table></figure><p>在很多情况下，子线程里要进行大量的耗时的运算，主线程往往在子线程之前结束。但是，如果主线程需要用到子线程的处理结果，就要用到pthread_join方法了。可以理解为告诉主线程：“执行到这里的时候，停下来等id为thid的线程！”其中thread为等待线程的id，retval用来存储被等待进程的返回值。</p><p>​        本实验中，还有可能用到的函数为<code>pthread_self</code>，其原型为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_tpthread_self(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><p>很容易理解啦，和<code>getpid</code>很类似，可以得到当前线程的id。另外的两个线程状态管理函数pthread_exit和pthread_cancel，以及pthread_create中参数attr的设置，由于在本实验不是必须的，在此不做赘述，进一步可以参考文献[7]和[8]。</p><h2 id="互斥锁——线程的互斥"><a href="#互斥锁——线程的互斥" class="headerlink" title="互斥锁——线程的互斥"></a>互斥锁——线程的互斥</h2><p>​        和进程通过信号量完成互斥不同，线程的互斥的实现依靠互斥锁。首先，和线程的创建类似，要使用函数<code>pthread_mutex_init(pthread_mutex_t * mutex,const pthread_mutexattr_t*attr)</code>初始化互斥锁，之后在线程函数中使用<code>int pthread_mutex_lock(pthread_mutex_t *mutex)</code>和<code>int pthread_mutex_unlock(pthread_mutex_t*mutex)</code>两个函数进行加锁和解锁（即开始和结束线程对于临界资源的占用），最后使用函数<code>pthread_mutex_destroy(pthread_mutex_t *mutex)</code>销毁一个互斥锁。一个典型的程序示例如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    <span class="comment">// TO-DO</span></span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1, thid2;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        互斥锁还有哪些操作呢？线程之间如何同步呢？（这个问题在下次实验中会详细讨论），可以进一步参见文献[9]</p><h2 id="Peterson算法——实现线程互斥的另一种方法"><a href="#Peterson算法——实现线程互斥的另一种方法" class="headerlink" title="Peterson算法——实现线程互斥的另一种方法"></a>Peterson算法——实现线程互斥的另一种方法</h2><p>​        在线程的前提下，由于不存在进程中的内存隔离，因此还可以设置某些精巧的算法实现进程的互斥，Peterson算法就是其中的一个代表。该算法使用两个控制变量数组flag与标量turn，其中flag[n]的值为1表示ID号为n的线程希望使用临界区资源，turn的值为有权访问共享资源的进程的ID号。当线程不能访问临界区资源时，会陷入死循环中作为等待。其伪代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">turn;</span><br><span class="line"></span><br><span class="line">P0: flag[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    turn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">1</span>] == <span class="literal">true</span> &amp;&amp; turn == <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 访问临界区资源</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">P1: flag[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    turn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">0</span>] == <span class="literal">true</span> &amp;&amp; turn == <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 访问临界区资源</span></span><br><span class="line">    flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>该算法的实现需要在实验中完成，更详细的解释可以参见文献[10]。</p><p>​        </p><h1 id="实验题目"><a href="#实验题目" class="headerlink" title="实验题目"></a>实验题目</h1><p>好了，有了以上的知识储备，完成以下的实验应该没有问题。</p><h2 id="进程的同步与互斥"><a href="#进程的同步与互斥" class="headerlink" title="进程的同步与互斥"></a>进程的同步与互斥</h2><p>创建4个进程P1-P4。要求进程P1在P2，P3之前，P4在其他进程之后执行。P2、P3两个进程互斥。用信号量机制实现同步与互斥，并用实验验证。</p><h2 id="进程的生产者消费者模型"><a href="#进程的生产者消费者模型" class="headerlink" title="进程的生产者消费者模型"></a>进程的生产者消费者模型</h2><p>生产者消费者同步。生产者进程将生产的数据写入文件中。消费者读取文件中的数据。注意，传送的每个数据都是一个字符，文件中最多可写入10个字符。编程实现并用实验验证结果。</p><h2 id="线程的互斥"><a href="#线程的互斥" class="headerlink" title="线程的互斥"></a>线程的互斥</h2><p>假设有两个银行账户，初始金额值分别为</p><p>int nAccount1 = 0,nAccount2 = 0; </p><p>下面是在这两个银行账户间转账一个随机金额的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">transfer() &#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="built_in">printf</span>(“账户金额之和 = %d”, nAccount1 + nAccount2)；</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试创建两个转账线程使其并发执行。（1）观察无同步控制时，两个线程并发执行的可能次序；观察账户金额的错误现象（正确的结果应该是两个账户金额之和始终为0）。分析在何种执行次序时会导致错误（2）分别利用互斥锁、Peterson方法实现两个线程互斥，并比较两者时间效率的差异。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 《linux c 创建进程》<a href="https://blog.csdn.net/u011641885/article/details/47061985" target="_blank" rel="noopener">https://blog.csdn.net/u011641885/article/details/47061985</a></p><p>[2] 《ftok()函数深度解析》<a href="https://blog.csdn.net/u013485792/article/details/50764224" target="_blank" rel="noopener">https://blog.csdn.net/u013485792/article/details/50764224</a></p><p>[3] 《IPC_CREAT | 0660 的意义是什么？》 <a href="http://www.169it.com/tech-qa-linux/article-14093527959559782876.html" target="_blank" rel="noopener">http://www.169it.com/tech-qa-linux/article-14093527959559782876.html</a></p><p>[4] 《struct sembuf的部分讲解》 <a href="https://blog.csdn.net/wanzyao/article/details/55271103" target="_blank" rel="noopener">https://blog.csdn.net/wanzyao/article/details/55271103</a></p><p>[5] 《Linux系统调用—semctl函数详解》 <a href="https://blog.csdn.net/dongzhongshu/article/details/2056516" target="_blank" rel="noopener">https://blog.csdn.net/dongzhongshu/article/details/2056516</a></p><p>[6] 《Linux进程间通信（六）：共享内存shmget()、shmat()、shmdt()、shmctl()》 <a href="https://www.cnblogs.com/52php/p/5861372.html" target="_blank" rel="noopener">https://www.cnblogs.com/52php/p/5861372.html</a></p><p>[7] 《pthread_create()之前的属性设置》 <a href="https://blog.csdn.net/valjackson123/article/details/47395053" target="_blank" rel="noopener">https://blog.csdn.net/valjackson123/article/details/47395053</a></p><p>[8] 《2线程原语：pthread_create()，pthread_self()，pthread_exit(), pthread_join(), pthread_cancel(),pthread_detach()》<a href="https://blog.csdn.net/tototuzuoquan/article/details/39553427" target="_blank" rel="noopener">https://blog.csdn.net/tototuzuoquan/article/details/39553427</a></p><p>[9] 《【Linux C 多线程编程】互斥锁与条件变量》<a href="https://blog.csdn.net/xing_hao/article/details/6626223" target="_blank" rel="noopener">https://blog.csdn.net/xing_hao/article/details/6626223</a></p><p>[10] 《Peterson算法感悟》 <a href="https://blog.csdn.net/yake827/article/details/37878017" target="_blank" rel="noopener">https://blog.csdn.net/yake827/article/details/37878017</a></p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《编译原理》实验2-语法分析器（递归下降分析法）的python实现</title>
      <link href="/2018/04/27/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C2-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E4%B9%8B%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E5%88%86%E6%9E%90%E6%B3%95%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
      <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>在本次实验中，我用python3.5实现了一个LL(1)文法的递归下降语法分析类，具有以下功能：</p><p>一、根据文法的起始符号、非终结符号、产生式自动生成文法终结符号的First集、Follow集和分析表。</p><p>二、根据文法的分析表判断输入串是否满足该文法。</p><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p><img src="/2018/04/27/《编译原理》实验2-语法分析器之递归下降分析法的python实现/2.png" alt=""><br><img src="/2018/04/27/《编译原理》实验2-语法分析器之递归下降分析法的python实现/3.png" alt=""></p><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p><img src="/2018/04/27/《编译原理》实验2-语法分析器之递归下降分析法的python实现/1.png" alt=""></p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面把自动生成first集follow的部分加上去！</span></span><br><span class="line"><span class="comment"># E'用B代替，T'用U来代替</span></span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecAnalyzer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, over, production)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.over = over</span><br><span class="line">        self.production = production</span><br><span class="line">        self.nontermainals = production.keys()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] == nontermainal:</span><br><span class="line">                    exit(<span class="string">'left recursive!'</span>)</span><br><span class="line">        self.first = &#123;nontermainal: &#123;&#125; <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.follow = &#123;nontermainal: set() <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals&#125;</span><br><span class="line">        self.get_first_follow()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        ret_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">            <span class="keyword">if</span> (nontermainal, right) <span class="keyword">in</span> self.first_first:</span><br><span class="line">                ret_dict = self.first[nontermainal]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> right != <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">if</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.over:</span><br><span class="line">                    ret_dict.update(&#123;right[<span class="number">0</span>]: right&#125;)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> sign <span class="keyword">in</span> right:</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                            first_ = self.first[sign]</span><br><span class="line">                            ret_dict.update(&#123;key: right <span class="keyword">for</span> key <span class="keyword">in</span> first_.keys()&#125;)</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">not</span> <span class="keyword">in</span> first_.keys():</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret_dict.update(&#123;<span class="string">''</span>: <span class="string">''</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> ret_dict</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求first集和follow集</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_follow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 求first第一轮，产生式右部首字符为终结符号</span></span><br><span class="line">        self.first_first = set()</span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                <span class="keyword">if</span> right != <span class="string">''</span> <span class="keyword">and</span> right[<span class="number">0</span>] <span class="keyword">in</span> self.over:</span><br><span class="line">                    self.first[nontermainal][right[<span class="number">0</span>]] = right</span><br><span class="line">                    self.first_first.add((nontermainal, right))</span><br><span class="line">        <span class="comment"># 求first第二轮</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_first = deepcopy(self.first)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                self.first[nontermainal].update(self.get_first(nontermainal))</span><br><span class="line">            <span class="keyword">if</span> old_first ==self.first:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 起始符号follow集</span></span><br><span class="line">        self.follow[self.start].add(<span class="string">'#'</span>)</span><br><span class="line">        <span class="comment"># 循环直到follow集不再变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            old_follow = deepcopy(self.follow)</span><br><span class="line">            <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">                <span class="keyword">for</span> right <span class="keyword">in</span> self.production[nontermainal]:</span><br><span class="line">                    <span class="keyword">for</span> i, sign <span class="keyword">in</span> enumerate(right):</span><br><span class="line">                        <span class="keyword">if</span> sign <span class="keyword">in</span> self.over:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> i == len(right) - <span class="number">1</span>:</span><br><span class="line">                            self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">                        <span class="keyword">elif</span> right[i + <span class="number">1</span>] <span class="keyword">in</span> self.over:</span><br><span class="line">                            self.follow[sign].add(right[i + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            next_set = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys()&#125;</span><br><span class="line">                            next_set_without_null = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[right[i + <span class="number">1</span>]].keys() <span class="keyword">if</span> key != <span class="string">''</span>&#125;</span><br><span class="line">                            self.follow[sign] |= next_set_without_null</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> next_set:</span><br><span class="line">                                self.follow[sign] |= self.follow[nontermainal]</span><br><span class="line">            <span class="keyword">if</span> old_follow == self.follow:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 将follow集加入first集</span></span><br><span class="line">        <span class="keyword">for</span> nontermainal <span class="keyword">in</span> self.nontermainals:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal]:</span><br><span class="line">                self.first[nontermainal][<span class="string">''</span>] = self.follow[nontermainal] - &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> self.first[nontermainal].keys()&#125;</span><br><span class="line">        pprint(self.first)</span><br><span class="line">        pprint(self.follow)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断string中的下一个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">advance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index + <span class="number">1</span> &lt; len(self.string):</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            self.current = self.string[self.index]</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归下降分析</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse_rec</span><span class="params">(self, nontermainal)</span>:</span></span><br><span class="line">        <span class="comment"># print(self.current, nontermainal)</span></span><br><span class="line">        <span class="comment"># 如果current在现在的非终结符号的first集中</span></span><br><span class="line">        <span class="keyword">if</span> self.current <span class="keyword">in</span> self.first[nontermainal].keys():</span><br><span class="line">            <span class="comment"># 逐个讨论产生式右部</span></span><br><span class="line">            <span class="keyword">for</span> new_right_sign <span class="keyword">in</span> self.first[nontermainal][self.current]:</span><br><span class="line">                <span class="comment"># 如果是终结符号，调用advance</span></span><br><span class="line">                <span class="keyword">if</span> new_right_sign <span class="keyword">in</span> self.over:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> self.advance():</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                <span class="comment"># 如果是非终结符号，递归调用</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="keyword">not</span> self.analyse_rec(new_right_sign):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="comment"># 对于可以调用follow集的非终结符号，递归调用本身</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal].keys():</span><br><span class="line">                <span class="keyword">return</span> self.analyse_rec(nontermainal)</span><br><span class="line">            <span class="comment"># 对于不可以调用follow的非终结符号，返回True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># 如果current不在现在的非终结符号的first集中</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">''</span> <span class="keyword">in</span> self.first[nontermainal].keys():</span><br><span class="line">            <span class="comment"># 返回是否在follow集的判断</span></span><br><span class="line">            <span class="keyword">return</span> self.current <span class="keyword">in</span> self.first[nontermainal][<span class="string">''</span>]</span><br><span class="line">        <span class="comment"># 如果current不在符号集合内，返回False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析程序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self, string=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.string = string + <span class="string">'#'</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.current = self.string[self.index]</span><br><span class="line">        <span class="keyword">if</span> self.analyse_rec(self.start):</span><br><span class="line">            print(<span class="string">'OK  '</span>, string)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Fail'</span>, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = <span class="string">'E'</span></span><br><span class="line">over = [<span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>, <span class="string">'i'</span>]</span><br><span class="line">production = &#123;</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'TB'</span>, ],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'ATB'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'T'</span>: [<span class="string">'FU'</span>, ],</span><br><span class="line">    <span class="string">'U'</span>: [<span class="string">'MFU'</span>, <span class="string">''</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'(E)'</span>, <span class="string">'i'</span>],</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'+'</span>, <span class="string">'-'</span>],</span><br><span class="line">    <span class="string">'M'</span>: [<span class="string">'*'</span>, <span class="string">'/'</span>],</span><br><span class="line">&#125;</span><br><span class="line">string_list = [</span><br><span class="line">    <span class="string">''</span>,</span><br><span class="line">    <span class="string">'i+@'</span>,</span><br><span class="line">    <span class="string">'i'</span>,</span><br><span class="line">    <span class="string">'i+'</span>,</span><br><span class="line">    <span class="string">'+*i'</span>,</span><br><span class="line">    <span class="string">'i+i*i'</span>,</span><br><span class="line">    <span class="string">'i+i*ii'</span>,</span><br><span class="line">    <span class="string">'i+i*i+'</span>,</span><br><span class="line">    <span class="string">'i+i*i/i-i'</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># start = 'P'</span></span><br><span class="line"><span class="comment"># over = ['d', ';', 's', 'b', 'd', 'e']</span></span><br><span class="line"><span class="comment"># production = &#123;</span></span><br><span class="line"><span class="comment">#     'P': ['bd;Xe',],</span></span><br><span class="line"><span class="comment">#     'X': ['d;X', 'sY'],</span></span><br><span class="line"><span class="comment">#     'Y': [';sY', '']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['bd;d;s;se', 'd;s;', 'd;d;s;s;;s']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start = 'C'</span></span><br><span class="line"><span class="comment"># over = ['b', 'e', ':', '=', '+', 'i', 't', 'f', '+']</span></span><br><span class="line"><span class="comment"># production = &#123;</span></span><br><span class="line"><span class="comment">#     'C': ['bYe', ],</span></span><br><span class="line"><span class="comment">#     'Y': ['F', 'T'],</span></span><br><span class="line"><span class="comment">#     'F': ['L:=B', ],</span></span><br><span class="line"><span class="comment">#     'T': ['fBtY', ],</span></span><br><span class="line"><span class="comment">#     'B': ['L', 'B+L'],</span></span><br><span class="line"><span class="comment">#     'L': ['i', ]</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['bi:=ie', 'd;s;', 'd;d;s;s;;s']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start = 'S'</span></span><br><span class="line"><span class="comment"># over = ['a', 'b']</span></span><br><span class="line"><span class="comment"># production =&#123;</span></span><br><span class="line"><span class="comment">#     'S': ['aAB', 'bA', ''],</span></span><br><span class="line"><span class="comment">#     'A': ['aAb', ''],</span></span><br><span class="line"><span class="comment">#     'B': ['bB', '']</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># string_list = ['b', 'aabbb']</span></span><br><span class="line"></span><br><span class="line">rec_analyzer = RecAnalyzer(start=start, over=over, production=production)</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> string_list:</span><br><span class="line">    rec_analyzer.analyse(string=string)</span><br></pre></td></tr></table></figure><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：对递归下降算法中通用的递归程序的设计，以及first集follow集分析表的存储结构的设计，通过写一个特例后观察抽象得到；对first集follow集的理解不够透彻导致实现get_first_follow(self)的时候比较吃力。</p><p>​        本程序的优点包括：比较完整地实现了递归下降分析算法，递归函数的实现具有较高的抽象度；分析器只需要输入起始符号、产生式、终结符号就可以初始化，自动生成First集、Follow集和分析表。</p><p>​        由于时间有限，本程序还存在可以优化的地方，主要包括：将输入字符串改为由词法分析器生成的二元式从文件中读取，为完整编译器的实现打下良好的基础；</p><p>​        本实验中，通过实现递归下降算法与First集Follow集生成算法，加深了我对两个算法的理解，提高了我对问题分析、抽象的能力，为实现完整编译器打下了良好的基础。</p>]]></content>
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《编译原理》实验1-词法分析器的python实现</title>
      <link href="/2018/04/20/%E3%80%8A%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E3%80%8B%E5%AE%9E%E9%AA%8C1-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
      <content type="html"><![CDATA[<h1 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h1><p>​        在本次实验中，我用python3.5实现了一个词法分析类，具有以下功能：</p><ol><li>在适当扩充实验要求文法的基础上，给出输入串中标识符、保留字（’begin’, ‘end’, ‘if’, ‘then’, ‘else’, ‘for’, ‘do’, ‘while’, ‘and’,’or’, ‘not’, ‘program’, ‘int’, ‘char’, ‘double’, ‘float’, ‘long’）、整数、常见单字符（’+’, ‘-‘, ‘*’, ‘;’, ‘(‘,’)’, “‘“, ‘“‘, ‘ ‘）、双字符终结符（’&gt;’,  ‘&lt;’, ‘&gt;=’,’&lt;=’, ‘&lt;&gt;’, ‘:=’）、注释符、空格、部分转义符号（’\n’）的类别编码。</li><li>程序能够发现输入串中的错误，指出错误发生位置与基本类别，包括未知的中介符号、无法匹配注释符、文件无法打开等等。</li><li>分析结果一方面输出为二元式序列组成的中间文件，另一方面可选择输出在终端作为调试信息。</li><li>对单字符、双字符终结符的识别进行了抽象处理，分析结果只依赖参数的设置，便于词法分析器的修改和扩充。</li><li>在构造函数中为参数的设置提供的接口，包括输入文件的路径、是否大小写敏感、输出路径、调试信息等级。</li></ol><h1 id="数据结构与程序描述"><a href="#数据结构与程序描述" class="headerlink" title="数据结构与程序描述"></a>数据结构与程序描述</h1><p>​        实验中实现的词法分析类名为Analyzer，具体描述信息如下：</p><p><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/0-1.png" alt=""><br><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/0-2.png" alt=""></p><h1 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Analyzer</span>:</span></span><br><span class="line">    token = <span class="string">''</span></span><br><span class="line">    string = <span class="string">''</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    is_end = <span class="keyword">False</span></span><br><span class="line">    ch = <span class="string">''</span></span><br><span class="line">    error_type = <span class="string">''</span></span><br><span class="line">    one_op = [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">';'</span>, <span class="string">'('</span>, <span class="string">')'</span>, <span class="string">"'"</span>, <span class="string">'"'</span>, <span class="string">' '</span>, <span class="string">'\n'</span>]</span><br><span class="line">    not_print = [<span class="string">' '</span>, <span class="string">'\n'</span>]</span><br><span class="line">    reserved = [<span class="string">'begin'</span>, <span class="string">'end'</span>, <span class="string">'if'</span>, <span class="string">'then'</span>, <span class="string">'else'</span>, <span class="string">'for'</span>, <span class="string">'do'</span>, <span class="string">'while'</span>, <span class="string">'and'</span>, <span class="string">'or'</span>, <span class="string">'not'</span>, <span class="string">'program'</span>, <span class="string">'int'</span>, <span class="string">'char'</span>, <span class="string">'double'</span>, <span class="string">'float'</span>, <span class="string">'long'</span>]</span><br><span class="line">    two_next = &#123;</span><br><span class="line">        <span class="string">'&lt;'</span>: [<span class="string">'='</span>, <span class="string">'&gt;'</span>],</span><br><span class="line">        <span class="string">'&gt;'</span>: [<span class="string">'='</span>, ],</span><br><span class="line">        <span class="string">':'</span>: [<span class="string">'='</span>, ],</span><br><span class="line">    &#125;</span><br><span class="line">    token_to_category = &#123;word: word.upper() <span class="keyword">for</span> word <span class="keyword">in</span> reserved&#125;</span><br><span class="line">    token_to_category[<span class="string">'&gt;'</span>] = <span class="string">'GT'</span></span><br><span class="line">    token_to_category[<span class="string">'&lt;'</span>] = <span class="string">'LT'</span></span><br><span class="line">    token_to_category[<span class="string">'&gt;='</span>] = <span class="string">'GE'</span></span><br><span class="line">    token_to_category[<span class="string">'&lt;='</span>] = <span class="string">'LE'</span></span><br><span class="line">    token_to_category[<span class="string">'&lt;&gt;'</span>] = <span class="string">'NE'</span></span><br><span class="line">    token_to_category[<span class="string">':='</span>] = <span class="string">'ASSIGN'</span></span><br><span class="line">    token_to_category[<span class="string">';'</span>] = <span class="string">'SEPARATOR'</span></span><br><span class="line">    token_to_category[<span class="string">'+'</span>] = <span class="string">'ADD'</span></span><br><span class="line">    token_to_category[<span class="string">'-'</span>] = <span class="string">'MINUS'</span></span><br><span class="line">    token_to_category[<span class="string">'*'</span>] = <span class="string">'MUL'</span></span><br><span class="line">    token_to_category[<span class="string">'('</span>] = <span class="string">'LB'</span></span><br><span class="line">    token_to_category[<span class="string">')'</span>] = <span class="string">'RB'</span></span><br><span class="line">    token_to_category[<span class="string">"'"</span>] = <span class="string">'QUO'</span></span><br><span class="line">    token_to_category[<span class="string">'"'</span>] = <span class="string">'DQUO'</span></span><br><span class="line">    token_to_category[<span class="string">' '</span>] = <span class="string">'BLANK'</span></span><br><span class="line">    token_to_category[<span class="string">'\n'</span>] = <span class="string">'ENTER'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, is_sensitive=False, file=<span class="string">'file.txt'</span>, out_file=<span class="string">''</span>, log_level=<span class="number">1</span>)</span>:</span></span><br><span class="line">        self.log_level = log_level</span><br><span class="line">        self.is_sensitive = is_sensitive</span><br><span class="line">        <span class="keyword">if</span> out_file == <span class="string">''</span>:</span><br><span class="line">            out_path = os.path.dirname(file)</span><br><span class="line">            out_file_name = os.path.basename(file)[:file.rindex(<span class="string">'.'</span>)]</span><br><span class="line">            self.out_file = os.path.join(out_path, out_file_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.out_f = open(self.out_file, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            exit(<span class="string">'[error] can not open file'</span>)</span><br><span class="line">        <span class="keyword">with</span> open(file, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            file = f.read()</span><br><span class="line">            self.string = file.replace(<span class="string">'\t'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.is_sensitive:</span><br><span class="line">                self.string.lower()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> self.token <span class="keyword">in</span> self.reserved <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(self, c=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">if</span> self.token <span class="keyword">in</span> self.token_to_category.keys():</span><br><span class="line">                <span class="keyword">if</span> self.token <span class="keyword">not</span> <span class="keyword">in</span> self.not_print:</span><br><span class="line">                    self.out_f.write(self.token_to_category[self.token] + <span class="string">' '</span> + self.token + <span class="string">'\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> self.log_level:</span><br><span class="line">                        print(self.token_to_category[self.token] + <span class="string">'\t'</span> + self.token)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.out_f.write(self.token_to_category[self.token] + <span class="string">'\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> self.log_level:</span><br><span class="line">                        print(self.token_to_category[self.token])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.error_type = <span class="string">"unkown terminal character '%s'"</span> % self.token</span><br><span class="line">                self.report_error()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.out_f.write(c + <span class="string">' '</span> + self.token + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">if</span> self.log_level:</span><br><span class="line">                print(c + <span class="string">'\t'</span> + self.token)</span><br><span class="line"></span><br><span class="line">        self.token = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_char</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_end:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        self.ch = self.string[self.index]</span><br><span class="line">        self.token += self.ch</span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.log_level == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'[get_char]index: %s, ch: %s, token: %s'</span> % (self.index, self.ch, self.token))</span><br><span class="line">        <span class="keyword">if</span> self.index == len(self.string):</span><br><span class="line">            self.is_end = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> self.ch</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retract</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.is_end = <span class="keyword">False</span></span><br><span class="line">        self.index = max(self.index - <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.ch = self.string[max(self.index - <span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line">        self.token = self.token[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> self.log_level == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'[retract]index: %s, ch: %s, token: %s'</span> % (self.index, self.ch, self.token))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alpha</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.is_end <span class="keyword">and</span> self.string[self.index].isalnum() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        self.out(<span class="string">''</span> <span class="keyword">if</span> self.lookup() <span class="keyword">else</span> <span class="string">'ID'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">digit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.is_end <span class="keyword">and</span> self.string[self.index].isdigit() <span class="keyword">and</span> self.get_char():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.out(<span class="string">'INTSTR'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(self)</span>:</span></span><br><span class="line">        now_ch = self.ch</span><br><span class="line">        <span class="keyword">if</span> self.get_char() <span class="keyword">in</span> self.two_next[now_ch]:</span><br><span class="line">            self.out()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.retract()</span><br><span class="line">            self.out()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">back_slant</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.get_char()</span><br><span class="line">        <span class="keyword">if</span> self.ch == <span class="string">'*'</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                end_index = self.string.index(<span class="string">'*/'</span>, self.index)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.error_type = <span class="string">"no pair with '*/'"</span></span><br><span class="line">                self.report_error()</span><br><span class="line">            self.token = self.token + self.string[self.index:end_index] + <span class="string">'*/'</span></span><br><span class="line">            self.ch = self.string[end_index + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> end_index + <span class="number">2</span> &lt; len(self.string):</span><br><span class="line">                self.index = end_index + <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.is_end = <span class="keyword">True</span></span><br><span class="line">            self.out(<span class="string">'NOTE'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error_type = <span class="string">"no '*' after '/'"</span></span><br><span class="line">            self.report_error()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report_error</span><span class="params">(self)</span>:</span></span><br><span class="line">        exit(<span class="string">'[error]index %s: %s'</span> % (self.index, self.error_type))</span><br><span class="line"></span><br><span class="line">    switch = &#123;</span><br><span class="line">        <span class="string">'alpha'</span>: alpha, <span class="string">'digit'</span>: digit,  <span class="string">'one'</span>: one,  <span class="string">'two'</span>: two,</span><br><span class="line">        <span class="string">'/'</span>: back_slant,  <span class="string">''</span>: report_error,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analyse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.get_char():</span><br><span class="line">            <span class="keyword">if</span> self.ch.isalpha():</span><br><span class="line">                case = <span class="string">'alpha'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch.isdigit():</span><br><span class="line">                case = <span class="string">'digit'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.one_op:</span><br><span class="line">                case = <span class="string">'one'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch <span class="keyword">in</span> self.two_next.keys():</span><br><span class="line">                case = <span class="string">'two'</span></span><br><span class="line">            <span class="keyword">elif</span> self.ch == <span class="string">'/'</span>:</span><br><span class="line">                case = <span class="string">'/'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.error_type = <span class="string">"unkown character '%s'"</span> % self.ch</span><br><span class="line">                case = <span class="string">''</span></span><br><span class="line">            self.switch[case](self)</span><br><span class="line"></span><br><span class="line">Analyzer().analyse()</span><br></pre></td></tr></table></figure><h1 id="程序测试及结果"><a href="#程序测试及结果" class="headerlink" title="程序测试及结果"></a>程序测试及结果</h1><p>​        测试结果截图分为三栏，左栏为源代码，中栏为测试文件，右栏为程序运行的调试信息，在默认等级下若测试文件完全满足文法，则将调试信息写入中间文件。</p><p>​        第一个截图构造了一个比较复杂的测试样本，包括空格、空白行、注释内部的换行空白、多个相似终结符交替运行等等。经检查，在不考虑语法的情况下，输出完全符合词法要求。</p><p><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/1.png" alt=""></p><p>​        第二个截图中测试文件中构造了一个非法的终结符号”:”，运行程序输出了错误信息“[error]index 40: unkownterminal character ‘:’”，指明在索引为40处出现了词法错误，并成功指出了错误的符号。</p><p><img src="/2018/04/20/《编译原理》实验1-词法分析器的python实现/2.png" alt=""></p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>​        本次实验主要遇到的困难及解决方法包括：不太理解将正则文法转化为词法分析代码的方法，通过参照书本上81到82页的扫描器先模仿后理解吸收；程序抽象程度不够，通过先写两个特例，完成“特殊到一般”的抽象过程；python缺乏switch-case语句导致代码冗长难看，通过查阅网上资料利用dict<str,func>类型的字典代替。</str,func></p><p>​        本程序的优点包括：比较完美的完成了词法分析器的基本功能；有着较高的抽象度，方便复用、修改、扩充。</p><p>​        由于时间有限，本程序还存在可以优化的地方，主要包括：许多参数（one_op,reserved, not_print, two_next, token_to_category）的默认值可以通过文件的形式读取，从而将数据与代码完全分离，进一步提高程序的抽象度；程序默认所识别的终结符号可以进一步扩充使其完全符合Pascal的文法要求；源代码中可以增加注释，方便进一步的工作。</p>]]></content>
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《操作系统》实验3-进程同步</title>
      <link href="/2018/04/20/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <content type="html"><![CDATA[<h1 id="进程的同步与互斥"><a href="#进程的同步与互斥" class="headerlink" title="进程的同步与互斥"></a>进程的同步与互斥</h1><p><strong>创建4个进程P1-P4。要求进程P1在P2，P3之前，P4在其他进程之后执行。P2、P3两个进程互斥。用信号量机制实现同步与互斥，并用实验验证。</strong></p><p>实验说明书中对于semctl以及semget两个函数的讲解存在矛盾，需要详细了解这两个函数的参数含义才能完美地实现进程的同步与互斥，具体函数解释参见<a href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/">我的另一篇博客《操作系统》实验3-进程同步-子泰编写的实验指导书</a>。本程序实现的函数中，set_value_of_sem对单信号量赋值，set_values_of_sem可以同时对多个信号量赋值，signal和wait函数与教材中信号量同步函数含义一致。在主函数中，使用5个信号量控制整个进程，其中2个信号量在1执行完之后被同时设置为1从而实现P1在P2和P3之前，1个信号量被用作P2和P3的互斥，另外2个信号量分别在P2和P3执行完之后被设置为1，从而实现P4在所有进程之后。实验结果与源代码如下。可以看出原来不同步的顺序为2143，经过同步的进程为1234或1324，完全符合实验的要求。</p><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image1.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> semun</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_value_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num,  <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.val = val;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, sem_num, SETVAL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - set value of semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_values_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.arry = arry;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="keyword">sizeof</span>(arry) - <span class="number">1</span>, SETALL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - set values of semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, IPC_RMID, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - delete semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = sem_num;</span><br><span class="line">sem_buff.sem_op = <span class="number">1</span>;</span><br><span class="line">sem_buff.sem_flg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - signal"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = sem_num;</span><br><span class="line">sem_buff.sem_op = <span class="number">-1</span>;</span><br><span class="line">sem_buff.sem_flg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, sem_id, <span class="string">"error - wait"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> pid1, pid2, pid3;</span><br><span class="line"><span class="keyword">int</span> sem_id1, sem_id2, sem_id3;</span><br><span class="line">sem_id1 = semget(<span class="number">1000</span>, <span class="number">2</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">sem_id2 = semget(<span class="number">1001</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">sem_id3 = semget(<span class="number">1002</span>, <span class="number">2</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf("%d %d %d\n", sem_id1, sem_id2, sem_id3);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> init_arry[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">set_values_of_sem(sem_id1, init_arry);</span><br><span class="line">set_value_of_sem(sem_id2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">set_values_of_sem(sem_id3, init_arry);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pid1 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid1 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> ((pid2 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid2 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">wait(sem_id1, <span class="number">0</span>);</span><br><span class="line">wait(sem_id2, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p2 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line">signal(sem_id2, <span class="number">0</span>);</span><br><span class="line">signal(sem_id3, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">wait(sem_id3, <span class="number">0</span>);</span><br><span class="line">wait(sem_id3, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p4 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line"></span><br><span class="line">delete_sem(sem_id1);</span><br><span class="line">delete_sem(sem_id2);</span><br><span class="line">delete_sem(sem_id3);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pid1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> ((pid3 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid3 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p1 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> arry[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">set_values_of_sem(sem_id1, arry);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">wait(sem_id1, <span class="number">1</span>);</span><br><span class="line">wait(sem_id2, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"p3 pid: %d ppid: %d\n"</span>, getpid(), getppid() );</span><br><span class="line">signal(sem_id2, <span class="number">0</span>);</span><br><span class="line">signal(sem_id3, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进程的生产者消费者同步"><a href="#进程的生产者消费者同步" class="headerlink" title="进程的生产者消费者同步"></a>进程的生产者消费者同步</h1><p><strong>生产者消费者同步。生产者进程将生产的数据写入文件中。消费者读取文件中的数据。注意，传送的每个数据都是一个字符，文件中最多可写入10个字符。编程实现并用实验验证结果。</strong></p><p>本题使用使用上一题写好的信号量函数，为了让生产者与消费者共用一个buff内存，还需要使用shm.h中的函数进行进程通信，具体亦参见<a href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/">我的另一篇博客《操作系统》实验3-进程同步-子泰编写的实验指导书</a>。算法实现与经典的生产者消费者模型一致，实验结果与源代码如下，test.txt与test_out.txt的内容完全一致，符合实验预期。</p><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image2.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> semun</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">short</span> *arry;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_init_value_of_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> init_value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line">sem_union.val = init_value;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - inital semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line"><span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, IPC_RMID, sem_union) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - delete semaphore"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = <span class="number">0</span>;</span><br><span class="line">sem_buff.sem_op = <span class="number">1</span>;</span><br><span class="line">sem_buff.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - signal"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_buff</span>;</span></span><br><span class="line">sem_buff.sem_num = <span class="number">0</span>;</span><br><span class="line">sem_buff.sem_op = <span class="number">-1</span>;</span><br><span class="line">sem_buff.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (semop(sem_id, &amp;sem_buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"error - wait"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> share_memory_id;</span><br><span class="line"><span class="keyword">void</span> *share_memory;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> in, out;</span><br><span class="line"><span class="keyword">char</span> buffer[N];</span><br><span class="line">FILE *fp;</span><br><span class="line">FILE *fp_out;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">share_data</span> *<span class="title">shared</span>;</span></span><br><span class="line"><span class="keyword">int</span> empty, full, mutex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">wait(empty);</span><br><span class="line">wait(mutex);</span><br><span class="line"><span class="comment">// printf("%p\n", shared-&gt;fp);</span></span><br><span class="line"><span class="keyword">char</span> ch = fgetc(shared-&gt;fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, ch);</span><br><span class="line"><span class="keyword">if</span> (ch == EOF) &#123;</span><br><span class="line">signal(mutex);</span><br><span class="line"><span class="comment">// signal(full);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared-&gt;buffer[shared-&gt;in] = ch;</span><br><span class="line">shared-&gt;in = (shared-&gt;in + <span class="number">1</span>) % N;</span><br><span class="line">signal(mutex);</span><br><span class="line">signal(full);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">wait(full);</span><br><span class="line">wait(mutex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"out: %d "</span>, shared-&gt;out);</span><br><span class="line"><span class="keyword">char</span> out_char = shared-&gt;buffer[shared-&gt;out];</span><br><span class="line"><span class="keyword">if</span> (out_char == EOF)</span><br><span class="line">&#123;</span><br><span class="line">signal(mutex);</span><br><span class="line"><span class="comment">// signal(empty);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared-&gt;out = (shared-&gt;out + <span class="number">1</span>) % N;</span><br><span class="line"><span class="built_in">fprintf</span>(shared-&gt;fp_out, <span class="string">"%c"</span>, out_char);</span><br><span class="line">fflush(shared-&gt;fp_out);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, out_char);</span><br><span class="line"></span><br><span class="line">signal(mutex);</span><br><span class="line">signal(empty);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">share_memory_id = shmget(<span class="number">12345</span>, <span class="keyword">sizeof</span>(struct share_data), <span class="number">0666</span>|IPC_CREAT);</span><br><span class="line">share_memory = shmat(share_memory_id, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">shared = (struct share_data *)share_memory;</span><br><span class="line">shared-&gt;fp = fopen(<span class="string">"test.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">shared-&gt;fp_out = fopen(<span class="string">"test_out.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">if</span> (shared-&gt;fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="string">"file open fail"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// printf("%p\n", shared-&gt;fp);</span></span><br><span class="line">shared-&gt;in = <span class="number">0</span>; shared-&gt;out = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">empty = semget(<span class="number">3000</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT); </span><br><span class="line">full = semget(<span class="number">3001</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">mutex = semget(<span class="number">3002</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">set_init_value_of_sem(empty, N);</span><br><span class="line">set_init_value_of_sem(full, <span class="number">0</span>);</span><br><span class="line">set_init_value_of_sem(mutex, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> pid1, pid2;</span><br><span class="line"><span class="keyword">while</span> ((pid1 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid1 &gt; <span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">while</span> ((pid2 = fork()) == <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (pid2 &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (producer()) &#123;</span><br><span class="line"><span class="comment">// usleep(100000);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (producer()) &#123;</span><br><span class="line"><span class="comment">// usleep(100000);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (comsumer()) </span><br><span class="line">;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(shared-&gt;fp_out);</span><br><span class="line">fclose(shared-&gt;fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的同步互斥——以银行转账为例"><a href="#线程的同步互斥——以银行转账为例" class="headerlink" title="线程的同步互斥——以银行转账为例"></a>线程的同步互斥——以银行转账为例</h1><p><strong>假设有两个银行账户，初始金额值分别为int nAccount1 = 0, nAccount2 = 0; 下面是在这两个银行账户间转账一个随机金额的函数transfer。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">transfer() &#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            nTemp1 = nAccount1;</span><br><span class="line">            nTemp2 = nAccount2;</span><br><span class="line">            nRandom = rand();</span><br><span class="line">            nAccount1 = nTemp1 + nRandom;</span><br><span class="line">            nAccount2 = nTemp2 - nRandom;</span><br><span class="line">            <span class="built_in">printf</span>(“账户金额之和 = %d”, nAccount1 + nAccount2)；</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>试创建两个转账线程使其并发执行。（1）观察无同步控制时，两个线程并发执行的可能次序；观察账户金额的错误现象（正确的结果应该是两个账户金额之和始终为0）。分析在何种执行次序时会导致错误（2）分别利用互斥锁、Peterson方法实现两个线程互斥，并比较两者时间效率的差异。</strong></p><p>(1)  首先我写了一个不含进程同步的程序，为了计算2个线程执行的次数并观察它们的分布，采用transfer1和transfer2分别执行进程，并在和不为0的时候退出循环，源代码与运行结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid2;</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image3.png" alt=""></p><p>可见在分别运行了近200万次之后，两个线程由于没有设置互斥而发生了错误。可能的情况是：线程1执行nAccount1=nTemp1+nRandom后，线程2执行nAccount1 = nTemp1 + nRandom，之后线程1继续执行，导致了线程1在执行sum=nAccount1 + nAccount2的时候nAccount1的值和nAccount2的值相加并不为0。</p><p>(2)    首先使用互斥锁的方法进行线程同步，源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!sum) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid2;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了验证互斥锁的有效性，让程序运行充分长时间。最终线程1和线程2均运行了2亿多次，没有发生不同步的情况，证明程序在线程同步的有效性，如下图所示：</p><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image4.png" alt=""></p><p>同样，使用peterson算法进行进程同步，运行1亿次没有发生不同步的情况，源代码和运行结果如下。peterson算法依靠flag数组和turn变量完成同步，在此不做赘述，具体亦参见<a href="http://wang22ti.com/2018/04/27/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C3-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5-%E5%AD%90%E6%B3%B0%E7%BC%96%E5%86%99%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6/">我的另一篇博客《操作系统》实验3-进程同步-子泰编写的实验指导书</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flag[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> turn = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        flag[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">1</span>] &amp;&amp; turn == <span class="number">1</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        flag[<span class="number">0</span>] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">0</span>] &amp;&amp; turn == <span class="number">0</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid0, thid1;</span><br><span class="line">    pthread_create(&amp;thid0, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image5.png" alt=""></p><p>最后，为了比较两者的执行效率，我让它们分别都让两个线程执行1千万次，源码以及执行结果如下。最终互斥锁共计执行了约56秒，peterson算法执行了155秒，可见互斥锁效率更高。</p><h2 id="互斥锁1千万次运行计时"><a href="#互斥锁1千万次运行计时" class="headerlink" title="互斥锁1千万次运行计时"></a>互斥锁1千万次运行计时</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// while(!sum) &#123;</span></span><br><span class="line">    <span class="keyword">while</span>(cnt1 &lt; N) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nTemp1, nTemp2, nRandom, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// while(!sum) &#123;</span></span><br><span class="line">    <span class="keyword">while</span>(cnt2 &lt; N) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">pthread_t</span> thid1;</span><br><span class="line">    <span class="keyword">pthread_t</span> thid2;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid2, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> finish = clock(); </span><br><span class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(finish - start) / CLOCKS_PER_SEC;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mutex: %f seconds\n"</span>, duration); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image6.png" alt=""></p><h2 id="peterson算法1千万次运行计时"><a href="#peterson算法1千万次运行计时" class="headerlink" title="peterson算法1千万次运行计时"></a>peterson算法1千万次运行计时</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nAccount1 = <span class="number">0</span>, nAccount2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flag[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> turn = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cnt1 &lt; N) &#123;</span><br><span class="line">    <span class="comment">// while(1) &#123;</span></span><br><span class="line">        flag[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">1</span>] &amp;&amp; turn == <span class="number">1</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt1++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1 %d sum = %d\n"</span>, cnt1, sum);</span><br><span class="line">        flag[<span class="number">0</span>] == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    turn = <span class="number">1</span>;</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cnt2 &lt; N) &#123;</span><br><span class="line">    <span class="comment">// while(1) &#123;</span></span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        turn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag[<span class="number">0</span>] &amp;&amp; turn == <span class="number">0</span>) ;</span><br><span class="line">        <span class="keyword">int</span> nTemp1, nTemp2, nRandom;</span><br><span class="line">        nTemp1 = nAccount1;</span><br><span class="line">        nTemp2 = nAccount2;</span><br><span class="line">        nRandom = rand();</span><br><span class="line">        nAccount1 = nTemp1 + nRandom;</span><br><span class="line">        nAccount2 = nTemp2 - nRandom;</span><br><span class="line">        <span class="keyword">int</span> sum = nAccount1 + nAccount2;</span><br><span class="line">        cnt2++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2 %d sum = %d\n"</span>, cnt2, sum);</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    turn = <span class="number">0</span>;</span><br><span class="line">    flag[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">pthread_t</span> thid0, thid1;</span><br><span class="line">    pthread_create(&amp;thid0, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thid1, <span class="literal">NULL</span>, (<span class="keyword">void</span> *)transfer1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid0, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thid1, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> finish = clock(); </span><br><span class="line">    <span class="keyword">double</span> duration = (<span class="keyword">double</span>)(finish - start) / CLOCKS_PER_SEC;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"peterson: %f seconds\n"</span>, duration);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《操作系统》实验3-进程同步/image7.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《计算机体系结构》实验2.1-MIPS指令集编程之冒泡排序</title>
      <link href="/2018/04/20/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C2-1-MIPS%E6%8C%87%E4%BB%A4%E9%9B%86%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <content type="html"><![CDATA[<h1 id="1-学习过程"><a href="#1-学习过程" class="headerlink" title="1 学习过程"></a>1 学习过程</h1><p>​        第一次写MIPS指令集程序，于是我从简单到复杂地写了4个程序<code>helloworld</code>, <code>testio</code>, <code>swap</code>, <code>bubblesort_noinput</code>并在<code>PCSpim</code>环境（使用教程见参考文献4和5）中运行，由于时间限制，最终实现了不具有输入的冒泡排序程序。</p><h1 id="2-hello-world程序"><a href="#2-hello-world程序" class="headerlink" title="2 hello world程序"></a>2 hello world程序</h1><p>​        该程序验证环境可用性，初步了解MIPS汇编语法，无须赘述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">str:    .asciiz &quot;hello world!\n &quot;</span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str      # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image1.png" alt=""></p><h1 id="3-testio程序"><a href="#3-testio程序" class="headerlink" title="3 testio程序"></a>3 testio程序</h1><p>​        该程序实现输出输入的整数，初步了解MIPS汇编程序的syscall机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">str:    .asciiz &quot;please input a num: &quot;</span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str      # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        li $v0, 5# 读取一个整数</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        move $a0, $v0# 打印一个数</span><br><span class="line">        li   $v0, 1</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image2.png" alt=""></p><h1 id="4-swap程序"><a href="#4-swap程序" class="headerlink" title="4 swap程序"></a>4 swap程序</h1><p>​        该程序在testio的基础上实现比较两个数并交换为由小到大排序，为冒泡排序的实现做准备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">        .data</span><br><span class="line">array:  .word 5, 4</span><br><span class="line">str_old:    .asciiz &quot;old array:\n&quot;</span><br><span class="line">str_new:    .asciiz &quot;new array:\n&quot;</span><br><span class="line">blank:      .asciiz &quot; &quot;</span><br><span class="line">enter:      .asciiz &quot;\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str_old  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        jal swap</span><br><span class="line"></span><br><span class="line">        la $a0,str_new  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_array:</span><br><span class="line">        li $a1, 2       # 设置循环计数初值</span><br><span class="line">        la $a2, array   # 指针初始化</span><br><span class="line">loop1:  blez $a1, over1       # 如果$a1 &lt;= 0，跳转到retmain</span><br><span class="line">        lw   $a0, 0($a2)        # 将$a2对应的值取到$a0</span><br><span class="line">        li   $v0, 1             # 打印$a0的值</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        la $a0, blank              # 打印空格</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        addi $a2, $a2, 4        # 指针+1</span><br><span class="line">        addi $a1, $a1, -1       # 循环计数减一</span><br><span class="line">        j loop1</span><br><span class="line">over1:</span><br><span class="line">        la $a0, enter           # 打印一个换行</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line">        j retmain</span><br><span class="line"></span><br><span class="line">swap:</span><br><span class="line">        la $a2, array           # 指针初始化</span><br><span class="line">        addi $a3, $a2, 4        # 指针初始化</span><br><span class="line">        lw $t0, 0($a2)          # 将$a2对应的值取到$t0</span><br><span class="line">        lw $t1, 0($a3)          # 将$a3对应的值取到$t1</span><br><span class="line"></span><br><span class="line">        bge $t1, $t0, retmain   # 如果顺序，返回</span><br><span class="line">        sw $t0, 0($a3)          # 逆序，交换</span><br><span class="line">        sw $t1, 0($a2)</span><br><span class="line">        j retmain</span><br><span class="line"></span><br><span class="line">retmain:</span><br><span class="line">        jr $ra          # 返回主程序</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image3.png" alt=""></p><h1 id="5-bubblesort-noinput程序"><a href="#5-bubblesort-noinput程序" class="headerlink" title="5 bubblesort_noinput程序"></a>5 bubblesort_noinput程序</h1><p>​        该程序在swap程序的基础上修改，利用指针的思想加入两层循环的控制，实现了冒泡排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">        .data</span><br><span class="line">array:  .word 3, 1, 5, 3, 6</span><br><span class="line">str_old:    .asciiz &quot;old array:\n&quot;</span><br><span class="line">str_new:    .asciiz &quot;new array:\n&quot;</span><br><span class="line">blank:      .asciiz &quot; &quot;</span><br><span class="line">enter:      .asciiz &quot;\n&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        .text</span><br><span class="line">        .globl main</span><br><span class="line">main:</span><br><span class="line">        la $a0,str_old  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        jal sort</span><br><span class="line"></span><br><span class="line">        la $a0,str_new  # 打印一个字符串</span><br><span class="line">        li $v0,4</span><br><span class="line">        syscall</span><br><span class="line">        jal print_array      # 跳转，并将地址保存在$ra用来返回</span><br><span class="line"></span><br><span class="line">        li $v0,10</span><br><span class="line">        syscall         # exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_array:</span><br><span class="line">        li $a1, 5       # 设置循环计数初值</span><br><span class="line">        la $a2, array   # 指针初始化</span><br><span class="line">loop1:  blez $a1, over1       # 如果$a1 &lt;= 0，跳转到retmain</span><br><span class="line">        lw   $a0, 0($a2)        # 将$a2对应的值取到$a0</span><br><span class="line">        li   $v0, 1             # 打印$a0的值</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        la $a0, blank              # 打印空格</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line"></span><br><span class="line">        addi $a2, $a2, 4        # 指针+1</span><br><span class="line">        addi $a1, $a1, -1       # 循环计数减一</span><br><span class="line">        j loop1</span><br><span class="line">over1:</span><br><span class="line">        la $a0, enter           # 打印一个换行</span><br><span class="line">        li $v0, 4</span><br><span class="line">        syscall</span><br><span class="line">        j retmain</span><br><span class="line"></span><br><span class="line">sort:</span><br><span class="line">        la $a1, array           # 外层指针初始化</span><br><span class="line">        addi $t4, $a1, 16       # 外层尾指针初始化</span><br><span class="line">loop_out:</span><br><span class="line">        la $a2, array           # 内层指针初始化</span><br><span class="line">        sub $t3, $t4, $a1        # 内层尾指针初始化</span><br><span class="line">        addu $t5, $a1, $t3</span><br><span class="line">loop_in:</span><br><span class="line">        addi $a3, $a2, 4        # 指针初始化</span><br><span class="line">        lw $t0, 0($a2)          # 将$a2对应的值取到$t0</span><br><span class="line">        lw $t1, 0($a3)          # 将$a3对应的值取到$t1</span><br><span class="line"></span><br><span class="line">        bge $t1, $t0, next_loop   # 如果顺序，返回</span><br><span class="line">        sw $t0, 0($a3)          # 逆序，交换</span><br><span class="line">        sw $t1, 0($a2)</span><br><span class="line"></span><br><span class="line">next_loop:</span><br><span class="line">        addi $a2, $a2, 4        # 内层指针++</span><br><span class="line">        bne $t4, $a2, loop_in   # 判断内层指针是否指向尾指针</span><br><span class="line">        addi $a1, $a1, 4        # 外层指针++</span><br><span class="line">        bne $t5, $a1, loop_out  # 判断外层指针是否指向尾指针</span><br><span class="line">        j retmain               # 排序结束，返回</span><br><span class="line"></span><br><span class="line">retmain:</span><br><span class="line">        jr $ra          # 返回主程序</span><br></pre></td></tr></table></figure><p><img src="/2018/04/20/《计算机体系结构》实验2-1-MIPS指令集编程之冒泡排序/image4.png" alt=""></p><h1 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6 参考资料"></a>6 参考资料</h1><p>[1]【十分钟教会你汇编】MIPS编程入门  <a href="https://blog.csdn.net/king523103/article/details/45967991" target="_blank" rel="noopener">https://blog.csdn.net/king523103/article/details/45967991</a></p><p>[2] MIPS编程实例集锦(1)  <a href="https://wenku.baidu.com/view/ec9f638583d049649b66588b.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/ec9f638583d049649b66588b.html</a></p><p>[3] MIPS汇编：冒泡排序 <a href="https://blog.csdn.net/linwh8/article/details/68944058" target="_blank" rel="noopener">https://blog.csdn.net/linwh8/article/details/68944058</a></p><p>[4] 非常简单的MIPS小工具-SPIM <a href="https://blog.csdn.net/makethyme/article/details/6277769" target="_blank" rel="noopener">https://blog.csdn.net/makethyme/article/details/6277769</a></p><p>[5] PCspim的安装及使用操作 <a href="https://blog.csdn.net/Kiloveyousmile/article/details/69055131" target="_blank" rel="noopener">https://blog.csdn.net/Kiloveyousmile/article/details/69055131</a></p>]]></content>
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《虚拟化与云计算》学习</title>
      <link href="/2018/04/13/%E3%80%8A%E8%99%9A%E6%8B%9F%E5%8C%96%E4%B8%8E%E4%BA%91%E8%AE%A1%E7%AE%97%E3%80%8B%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p>嘉哥要做一个简单的云盘，所以就一步一步来吧。</p><h1 id="1-FTP"><a href="#1-FTP" class="headerlink" title="1 FTP"></a>1 FTP</h1><h1 id="1-1-FTP命令行上传下载"><a href="#1-1-FTP命令行上传下载" class="headerlink" title="1.1 FTP命令行上传下载"></a>1.1 FTP命令行上传下载</h1><p>嘉哥用阿里云开了一台云服务器，安装了ftp服务器，打开了端口，关闭了用户验证，于是我就可以用匿名（Anonymous）的方式登录。解释参见<a href="https://jingyan.baidu.com/article/fdbd4277d8a4f7b89e3f48ab.html" target="_blank" rel="noopener">百度经验：怎样在命令行中使用FTP</a></p><p><img src="/2018/04/13/《虚拟化与云计算》学习/屏幕截图(540" alt="">.png)</p><p>下载需要使用<code>LITERAL PASV</code>设置为被动模式，具体参见<a href="https://blog.csdn.net/wxqian25/article/details/16821333" target="_blank" rel="noopener">ftp错误150 Opening ASCII mode data connection for /bin/ls.</a>以及<a href="https://bbs.csdn.net/topics/310044648/" target="_blank" rel="noopener">CMD里的FTP命令，怎么切换FTP的主被动模式？</a></p><p>默认下载目录为c:\user\45504，其中45504是我的用户名。</p><p><img src="/2018/04/13/《虚拟化与云计算》学习/屏幕截图(543" alt="">.png)</p><h1 id="1-2-python的FTP库ftplib上传"><a href="#1-2-python的FTP库ftplib上传" class="headerlink" title="1.2 python的FTP库ftplib上传"></a>1.2 python的FTP库ftplib上传</h1><p>有了上面的过程，python代码也很好理解啦，使用python自带的<code>ftplib</code>库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'101.200.57.***'</span></span><br><span class="line">user = <span class="string">'Anonymous'</span></span><br><span class="line">password = <span class="string">'wang22ti@163.com'</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'wang22ti.docx'</span></span><br><span class="line"></span><br><span class="line">ftp = FTP()</span><br><span class="line">ftp.set_pasv(<span class="keyword">False</span>)</span><br><span class="line">ftp.set_debuglevel(<span class="number">2</span>)</span><br><span class="line">ftp.connect(ip)</span><br><span class="line">ftp.login(user, password)</span><br><span class="line">print(ftp.getwelcome())</span><br><span class="line">ftp.storbinary(<span class="string">'STOR %s'</span> % file_name, open(file_name, <span class="string">'rb'</span>))</span><br></pre></td></tr></table></figure><p>其中<code>ftp.set_debuglevel</code>设置日志等级，<code>ftp.storbinary</code>以二进制的方式打开文件并上传。</p><p><code>ftp.set_pasv</code>比较复杂，详情参见<a href="http://blog.sina.com.cn/s/blog_9f6591a30101cj5r.html" target="_blank" rel="noopener">纯真的花花牛的博客</a></p><p><strong>然而还没完！</strong></p><p>当上传中文文件名的时候，出现了问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;D:/45504/Documents/MiCloud/Coding/python/虚拟化与云计算/test_ftp.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">    ftp.storbinary(&apos;STOR %s&apos; % file_name, open(file_name, &apos;rb&apos;))</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 503, in storbinary</span><br><span class="line">    with self.transfercmd(cmd, rest) as conn:</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 398, in transfercmd</span><br><span class="line">    return self.ntransfercmd(cmd, rest)[0]</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 382, in ntransfercmd</span><br><span class="line">    resp = self.sendcmd(cmd)</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 271, in sendcmd</span><br><span class="line">    self.putcmd(cmd)</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 198, in putcmd</span><br><span class="line">    self.putline(line)</span><br><span class="line">  File &quot;C:\Users\45504\AppData\Local\Programs\Python\Python35\lib\ftplib.py&quot;, line 193, in putline</span><br><span class="line">    self.sock.sendall(line.encode(self.encoding))</span><br><span class="line">UnicodeEncodeError: &apos;latin-1&apos; codec can&apos;t encode characters in position 5-7: ordinal not in range(256)</span><br></pre></td></tr></table></figure><p>昂，原因是<code>latin-1</code>的编码方式，看起来就不支持中文，打开最后一个报错地址可以看到最后发消息是以<code>self.encoding</code>的方式编码的：</p><p><img src="/2018/04/13/《虚拟化与云计算》学习/Snipaste_2018-04-13_11-54-53.png" alt=""></p><p>本以为找到它修改为<code>utf-8</code>就好了，结果又发生了新的错误：</p><p><img src="/2018/04/13/《虚拟化与云计算》学习/1523593140997.png" alt=""></p><p>百思不得其解，<a href="https://blog.csdn.net/chenhongwu666/article/details/43524035" target="_blank" rel="noopener">CSDN的一个博客</a>说是服务器的问题，需要将服务器是否接受<code>utf-8</code>打开（看来命令行走的不是utf-8），结果结果改来改去还是这个问题！最后发现一个神贴：<a href="https://blog.csdn.net/iamsujin/article/details/19616247" target="_blank" rel="noopener">CSDN：python实现ftp中的乱码问题</a>。用更优雅的方法修改为<code>GB18030</code>就ok啦。之后又从<a href="http://www.jb51.net/article/88215.htm" target="_blank" rel="noopener">Python中的FTP通信模块ftplib的用法整理</a>学习了其他的操作，这是最后的代码，部分操作没有测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'101.200.57.***'</span></span><br><span class="line">user = <span class="string">'Anonymous'</span></span><br><span class="line">password = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file_name = '王王王.docx'</span></span><br><span class="line">file_name = <span class="string">'wang22ti.docx'</span></span><br><span class="line"></span><br><span class="line">ftp = FTP()</span><br><span class="line">ftp.set_pasv(<span class="keyword">False</span>)</span><br><span class="line">ftp.encoding = <span class="string">'GB18030'</span></span><br><span class="line">ftp.set_debuglevel(<span class="number">2</span>)</span><br><span class="line">ftp.connect(ip)</span><br><span class="line">ftp.login(user, password)</span><br><span class="line">print(ftp.getwelcome())</span><br><span class="line">ftp.storbinary(<span class="string">'STOR %s'</span> % file_name, open(file_name, <span class="string">'rb'</span>))</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'wang22ti_downloaded.docx'</span>, <span class="string">'wb'</span>)</span><br><span class="line">bufsize = <span class="number">1024</span></span><br><span class="line">ftp.retrbinary(<span class="string">'RETR %s'</span> % file_name, f.write, bufsize)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ftp.cwd(pathname) #设置FTP当前操作的路径</span></span><br><span class="line"><span class="comment"># ftp.dir() #显示目录下文件信息</span></span><br><span class="line"><span class="comment"># file_list = ftp.nlst() #获取目录下的文件</span></span><br><span class="line"><span class="comment"># from pprint import pprint</span></span><br><span class="line"><span class="comment"># pprint(file_list)</span></span><br><span class="line"><span class="comment"># ftp.mkd(pathname) #新建远程目录</span></span><br><span class="line"><span class="comment"># ftp.pwd() #返回当前所在位置</span></span><br><span class="line"><span class="comment"># ftp.rmd(dirname) #删除远程目录</span></span><br><span class="line">ftp.delete(file_name) <span class="comment">#删除远程文件</span></span><br><span class="line"><span class="keyword">if</span> file_name <span class="keyword">not</span> <span class="keyword">in</span> ftp.nlst():</span><br><span class="line">    print(<span class="string">'delete OK - %s'</span> % file_name)</span><br><span class="line"><span class="comment"># ftp.rename(fromname, toname)#将fromname修改名称为toname。</span></span><br></pre></td></tr></table></figure><h1 id="1-3-对ftplib的进一步封装"><a href="#1-3-对ftplib的进一步封装" class="headerlink" title="1.3 对ftplib的进一步封装"></a>1.3 对ftplib的进一步封装</h1><p>可以说，ftplib已经比较方便了，但是一方面类似于<code>storbinary</code>和<code>retrbinary</code>一类的函数封装性仍然不够好，另一方面在实际使用中还会出现长时间无响应的情况。为了能够在作业中的体验更好，进一步封装ftplib如下。接口是嘉哥设计的，我就完全照搬了，以下代码已经通过了测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileTransfer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ip=<span class="string">'101.200.57.***'</span>, debug_level=<span class="number">2</span>)</span>:</span></span><br><span class="line">        self.ftp = FTP()</span><br><span class="line">        self.ftp.set_pasv(<span class="keyword">False</span>)</span><br><span class="line">        self.ftp.encoding = <span class="string">'GB18030'</span></span><br><span class="line">        self.ftp.set_debuglevel(debug_level)</span><br><span class="line">        self.ftp.connect(ip)</span><br><span class="line">        self.ftp.login(<span class="string">'Anonymous'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ListFile</span><span class="params">(self, UserID, Directory)</span>:</span></span><br><span class="line">        dir_path = os.path.join(UserID, Directory)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            self.ftp.cwd(dir_path)</span><br><span class="line">            file_list = self.ftp.nlst()  <span class="comment"># 获取目录下的文件</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> json.dumps([<span class="string">'error'</span>, ])</span><br><span class="line">        <span class="keyword">return</span> json.dumps(file_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddNewFolder</span><span class="params">(self, UserID, FolderNameWithPath)</span>:</span></span><br><span class="line">        path, new_folder = os.path.split(FolderNameWithPath)</span><br><span class="line">        dir_path = os.path.join(UserID, path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            <span class="keyword">if</span> UserID <span class="keyword">not</span> <span class="keyword">in</span> self.ftp.nlst():</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError()</span><br><span class="line">            <span class="keyword">if</span> new_folder <span class="keyword">not</span> <span class="keyword">in</span> json.loads(transfer.ListFile(UserID, path)):</span><br><span class="line">                self.ftp.mkd(new_folder)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddNewUser</span><span class="params">(self, UserID)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            <span class="keyword">if</span> UserID <span class="keyword">not</span> <span class="keyword">in</span> self.ftp.nlst():</span><br><span class="line">                self.ftp.mkd(UserID)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DeleteFile</span><span class="params">(self, UserID, FileNameWithPath)</span>:</span></span><br><span class="line">        path, file_name = os.path.split(FileNameWithPath)</span><br><span class="line">        dir_path = os.path.join(UserID, path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            self.ftp.cwd(dir_path)</span><br><span class="line">            self.ftp.delete(file_name)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Upload</span><span class="params">(self, UserID, FileNameWithtmpPath, Path)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            tmp_path, filename = os.path.split(FileNameWithtmpPath)</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            dir_path = os.path.join(UserID, Path, filename)</span><br><span class="line">            self.ftp.storbinary(<span class="string">'STOR %s'</span> % dir_path, open(FileNameWithtmpPath, <span class="string">'rb'</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Download</span><span class="params">(self, UserID, FileNameWithPath)</span>:</span></span><br><span class="line">        dir_path = os.path.join(UserID, FileNameWithPath)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            local_path, file_name = os.path.split(dir_path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(local_path):</span><br><span class="line">                os.makedirs(local_path)</span><br><span class="line">            self.ftp.retrbinary(<span class="string">'RETR %s'</span> % dir_path, open(dir_path, <span class="string">'wb'</span>).write, <span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">return</span> dir_path</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">transfer = FileTransfer(debug_level=<span class="number">0</span>)</span><br><span class="line">username = <span class="string">'wangwangwang4'</span></span><br><span class="line">ret = transfer.AddNewUser(username)</span><br><span class="line">print(ret)</span><br><span class="line">ret = transfer.AddNewFolder(username, <span class="string">r'test_for_add_folder'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">print(<span class="string">'test_for_add_folder'</span> <span class="keyword">in</span> json.loads(transfer.ListFile(username, <span class="string">''</span>)))</span><br><span class="line">ret = transfer.Upload(username, <span class="string">'wang22ti.docx'</span>, <span class="string">'test_for_add_folder'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">data = json.loads(transfer.ListFile(username, <span class="string">'test_for_add_folder'</span>))</span><br><span class="line">print(data)</span><br><span class="line">ret = transfer.Download(username, <span class="string">'test_for_add_folder\wang22ti.docx'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">ret = transfer.DeleteFile(username, <span class="string">'test_for_add_folder\wang22ti.docx'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">data = json.loads(transfer.ListFile(username, <span class="string">'test_for_add_folder'</span>))</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p>稍微改进，加入报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileTransfer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ip=<span class="string">'101.200.57.174'</span>, debug_level=<span class="number">2</span>)</span>:</span></span><br><span class="line">        self.ftp = FTP()</span><br><span class="line">        self.ftp.set_pasv(<span class="keyword">False</span>)</span><br><span class="line">        self.ftp.encoding = <span class="string">'GB18030'</span></span><br><span class="line">        self.ftp.set_debuglevel(debug_level)</span><br><span class="line">        self.ftp.connect(ip)</span><br><span class="line">        self.ftp.login(<span class="string">'Anonymous'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ListFile</span><span class="params">(self, UserID, Directory)</span>:</span></span><br><span class="line">        dir_path = os.path.join(UserID, Directory)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            self.ftp.cwd(dir_path)</span><br><span class="line">            file_list = self.ftp.nlst()  <span class="comment"># 获取目录下的文件</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">return</span> json.dumps([<span class="string">'error'</span>, ])</span><br><span class="line">        <span class="keyword">return</span> json.dumps(file_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddNewFolder</span><span class="params">(self, UserID, FolderNameWithPath)</span>:</span></span><br><span class="line">        path, new_folder = os.path.split(FolderNameWithPath)</span><br><span class="line">        dir_path = os.path.join(UserID, path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            <span class="keyword">if</span> UserID <span class="keyword">not</span> <span class="keyword">in</span> self.ftp.nlst():</span><br><span class="line">                <span class="keyword">raise</span> FileNotFoundError()</span><br><span class="line">            <span class="keyword">if</span> new_folder <span class="keyword">not</span> <span class="keyword">in</span> json.loads(transfer.ListFile(UserID, path)):</span><br><span class="line">                self.ftp.mkd(new_folder)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> FileExistsError()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddNewUser</span><span class="params">(self, UserID)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            <span class="keyword">if</span> UserID <span class="keyword">not</span> <span class="keyword">in</span> self.ftp.nlst():</span><br><span class="line">                self.ftp.mkd(UserID)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> FileExistsError()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DeleteFile</span><span class="params">(self, UserID, FileNameWithPath)</span>:</span></span><br><span class="line">        path, file_name = os.path.split(FileNameWithPath)</span><br><span class="line">        dir_path = os.path.join(UserID, path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            self.ftp.cwd(dir_path)</span><br><span class="line">            self.ftp.delete(file_name)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Upload</span><span class="params">(self, UserID, FileNameWithtmpPath, Path)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            tmp_path, filename = os.path.split(FileNameWithtmpPath)</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            dir_path = os.path.join(UserID, Path, filename)</span><br><span class="line">            self.ftp.storbinary(<span class="string">'STOR %s'</span> % dir_path, open(FileNameWithtmpPath, <span class="string">'rb'</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Download</span><span class="params">(self, UserID, FileNameWithPath)</span>:</span></span><br><span class="line">        dir_path = os.path.join(UserID, FileNameWithPath)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ftp.cwd(<span class="string">r'\\'</span>)</span><br><span class="line">            local_path, file_name = os.path.split(dir_path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(local_path):</span><br><span class="line">                os.makedirs(local_path)</span><br><span class="line">            self.ftp.retrbinary(<span class="string">'RETR %s'</span> % dir_path, open(dir_path, <span class="string">'wb'</span>).write, <span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">return</span> dir_path</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">transfer = FileTransfer(debug_level=<span class="number">0</span>)</span><br><span class="line">username = <span class="string">'wangwangwang4'</span></span><br><span class="line">ret = transfer.AddNewUser(username)</span><br><span class="line">print(ret)</span><br><span class="line">ret = transfer.AddNewFolder(username, <span class="string">r'test_for_add_folder'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">ret = transfer.AddNewFolder(username, <span class="string">r'test_for_add_folder2'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">print(json.loads(transfer.ListFile(username, <span class="string">''</span>)))</span><br><span class="line">ret = transfer.Upload(username, <span class="string">'wang22ti.docx'</span>, <span class="string">'test_for_add_folder'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">data = json.loads(transfer.ListFile(username, <span class="string">'test_for_add_folder'</span>))</span><br><span class="line">print(data)</span><br><span class="line">ret = transfer.Download(username, <span class="string">'test_for_add_folder\wang22ti.docx'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">ret = transfer.DeleteFile(username, <span class="string">'test_for_add_folder\wang22ti.docx'</span>)</span><br><span class="line">print(ret)</span><br><span class="line">data = json.loads(transfer.ListFile(username, <span class="string">'test_for_add_folder'</span>))</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 虚拟化与云计算 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《计算机体系结构》实验2-MIPS指令集</title>
      <link href="/2018/04/10/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C2-MIPS%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
      <content type="html"><![CDATA[<h1 id="0-lab1的内容"><a href="#0-lab1的内容" class="headerlink" title="0 lab1的内容"></a>0 lab1的内容</h1><h2 id="0-1-Exercise1"><a href="#0-1-Exercise1" class="headerlink" title="0.1  Exercise1"></a>0.1  Exercise1</h2><p>由下图易知LW R2,100(R3)对应的二进制代码为10001100011 00010 0000000001100100，转化为十六进制为0x8C62 0064。</p><p><img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image1.png" alt="">                              </p><p>由下图易知SW R5,100(R6)对应的二进制代码为10101100110 00101 000000001100100，转化为十六进制为0xACC5 0064。</p><p><img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image2.png" alt=""></p><h2 id="0-2-Exercise2"><a href="#0-2-Exercise2" class="headerlink" title="0.2  Exercise2"></a>0.2  Exercise2</h2><p>由下图易知OR R7,R18, R12对应的二进制代码为00000010010 01100 00111 00000 100101，转化为十六进制为0x024C 3825。</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image3.png" alt=""></p><p>由下图易知SUB R5,R4, R31对应的二进制代码为00000000100 11111 00101 00000 100010，转化为十六进制为0x009F 2822。</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image4.png" alt=""></p><h2 id="0-3-Exercise3"><a href="#0-3-Exercise3" class="headerlink" title="0.3  Exercise3"></a>0.3  Exercise3</h2><p>由下图易知BNEQ R7, R8,-5对应的二进制代码为00010100111 01000 11111111111111011，转化为十六进制为0x14E8 FFFB。当PC为124的时候，分支后的PC值为124 + (-5&lt;&lt;2) = 104。</p><p><img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image5.png" alt=""> </p><h2 id="0-4-Exercise5"><a href="#0-4-Exercise5" class="headerlink" title="0.4  Exercise5"></a>0.4  Exercise5</h2><p>不知道为啥没发现exercise4，但由下图易知ADDI R7, R8, 600对应的二进制代码为001000 01000 001110000001001011000，转化为十六进制为0x21070258。为啥没有SUBI呢？可能是因为该指令并不常用，且可以被ADDI代替，为了满足精简指令集的设计要求，就被去掉了。</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image6.png" alt=""></p><h1 id="1指令集学习"><a href="#1指令集学习" class="headerlink" title="1指令集学习"></a>1指令集学习</h1><p>​        因为我们班分配到的是分支指令（Branch），所以我遵循从简单到复杂的一般思路，学习了B和BAL两条指令，以及与他们相关的BEQ和BGEZAL两条指令。</p><h2 id="1-1-B和BEQ的学习"><a href="#1-1-B和BEQ的学习" class="headerlink" title="1.1 B和BEQ的学习"></a>1.1 B和BEQ的学习</h2><p>​        B指令在指令集说明里的介绍重点如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image7.png" alt=""></p><p>​        可见该32位的指令最高6位000100是用来告诉处理器——这是一条分支指令！而最低16位offset再加上2位的偏移量（之所以用2位是因为一条指令为32位即4位，4刚好是2的2次方）组成了一个±128Kb的相对寻址空间，用来指明指令相对寻址的位置。</p><p>​        那中间的两个00000呢？注意到该指令实际被机器翻译为BEQ r0, r0, offset，我又查看了BEQ指令，其重点介绍如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image8.png" alt=""></p><p>​        GPR看起来非常关键，我检索到如下信息：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image9.png" alt=""></p><p>​        Amazing！原来是通用寄存器的缩写，而且编号为0的通用寄存器的值永远为0。于是知道BEQ表示如果寄存器rs和寄存器rt的值如果相等就执行分支操作。进一步地，因为指令B的rs和rt均为编号为0的通用寄存器，所以就变成了无条件分支了！</p><h2 id="1-2-BAL和BGEZAL的学习"><a href="#1-2-BAL和BGEZAL的学习" class="headerlink" title="1.2 BAL和BGEZAL的学习"></a>1.2 BAL和BGEZAL的学习</h2><p>​        类似于1.1中的学习过程，我先查看了BAL的重点介绍：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image10.png" alt=""></p><p>​        指令BAL构造方式和指令B并不一样。但目前为止可以很容易理解的是，BAL执行的也是±128Kb范围内的相对寻址，和指令B不同的是BAL会把分支子程序运行结束、回到分支点后执行的下一条指令的地址（returnaddress link）存放在编号为31的通用寄存器里。它是怎么做到的呢？于是查看BGEZAL的重点介绍：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image11.png" alt=""></p><p>和1.1中的情况类似，指令BGEZAL是一个条件分支指令，当寄存器rs中的值大于等于0的情况下执行分支操作，而在指令BAL将寄存器rs强制为r0=0，于是就变成了无条件的分支。然而还有疑惑——如果10001表明这是一条BGEZAL指令，那么该指令最高6位的000001是什么意思呢？进一步检索到如下信息：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image12.png" alt=""></p><p>​        从这里可以明白REGIMM指明了immediate instruction的条件，看来opcode是一个很重要的信息！进一步检索，得到了更通用的信息——</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image13.png" alt=""></p><p>​        这幅图告诉我们，所有的MIPS指令都具有类似于6+5+5+16的形式，其中前6位被称为opcode——显然就是operation code！很顺利地，还找到了以下的几张表格——</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image14.png" alt=""></p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image15.png" alt=""></p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image16.png" alt=""></p><p>Unbelievable！将这几张图结合起来后，我们就可以明白计算机理解指令BAL的过程：</p><p>一、 读取opcode，发现是REGIMM，它表示要执行的指令是具有一个判断参数条件指令，参数用rs表示，而具体是什么指令呢？用rt表示。</p><p>二、 读取rt，发现是BGEZAL，它表示在rs≥0的情况下执行带有返回地址的分支操作，这已经是一条很具体的操作了。</p><p>三、 读取rs，发现是00000，于是就去读取编号为0的通用寄存器的值。而我们知道这个值恒为0，于是无条件地满足了分支条件。</p><p>四、 读取offset，对其做左移2位操作后执行分支操作。</p><p>五、 执行完分支程序，读取编号为31的通用寄存器里的返回地址并寻址执行。</p><h2 id="1-3-指令学习小结"><a href="#1-3-指令学习小结" class="headerlink" title="1.3 指令学习小结"></a>1.3 指令学习小结</h2><p>​        MIPS是经典的精简指令集，根据以上的学习，它使用了哪些技巧使得指令长度变短、数量减少呢？</p><p>一、 统一的指令格式。指令长度均为32位且为6+5+5+16的形式，一方面地址实现了对齐，指令中的地址就可以减少2位；另一方面降低了机器对指令理解的难度，必然可以提高一般任务下的执行效率。</p><p>二、 指令复用。B和BEQ、BAL和BGEZAL从机器码的角度来说是一模一样的，但是通过默认值的巧妙设定，用相同的机器码实现不同的指令，从而减少指令的总数。</p><p>三、 多级操作码。很多opcode仅仅表示一类指令，具体是哪一个指令需要进一步理解其他域中的值，因此opcode只需要6位即可。那为什么BEQ不采用这样的方式呢？显然是因为BEQ这一类指令需要更多的参数。</p><p>此外，本次实验中“顺藤摸瓜式”的搜索路径、“关键词查找”的搜索方法和类比的学习方法，让整个实验十分顺畅且严谨合理，也是值得总结回味的，它让我体会到一种探索的乐趣。</p><h1 id="2-大小端编址的实验测试"><a href="#2-大小端编址的实验测试" class="headerlink" title="2 大小端编址的实验测试"></a>2 大小端编址的实验测试</h1><p>根据实验要求，编写程序并运行如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image17.png" alt=""></p><p>可以看出，x1取的是x的低地址，输出的是0x1122的低地址对应的十进制数34，可见我的电脑的CPU（Intel 酷睿i7 7500U）采用的编址方式为小端编址。</p><h1 id="3观察指令执行过程——以winmips64为例"><a href="#3观察指令执行过程——以winmips64为例" class="headerlink" title="3观察指令执行过程——以winmips64为例"></a>3观察指令执行过程——以winmips64为例</h1><h2 id="3-1-观察指令执行过程——以计算阶乘为例"><a href="#3-1-观察指令执行过程——以计算阶乘为例" class="headerlink" title="3.1 观察指令执行过程——以计算阶乘为例"></a>3.1 观察指令执行过程——以计算阶乘为例</h2><p>​       虽然只知道这是一款MIPS指令集的仿真软件，参考文档糟糕的排版和字体让人提不起学习的兴趣，我还是打开了这款软件。由于此前的学习加上一些文献的查找，我觉得大体还是能看懂每个window的作用。它在我的眼里长这样：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image18.png" alt=""></p><p>然后我打开一段叫做factorial.s的程序，从字面上看这段程序是用来计算阶乘的：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image19.png" alt=""></p><p>​       实验要求为观察指令执行的过程，给出指令集和硬件高效执行关系的观察体会。于是我就开始一个周期一个周期地执行这个程序，直到第5个周期如下：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image20.png" alt=""></p><p>​       可以看出，指令采用五级流水线的方式执行，分为读指令、指令译码、指令执行、访问内存和写回寄存器五个阶段，每个阶段的时间均相同。同时，针对不同数据类型的指令，采用相应的硬件进行处理。</p><p>​       继续执行一个周期，发现statistics窗口多了一项数据：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image21.png" alt=""></p><p>恰好就是课上学的CPI！由于刚刚执行完一条指令，流水线的效果还没有显现，所以CPI = 5。继续执行几个周期，CPI逐渐减小并趋向于1，并要求我在终端（Terminal）输入计算阶乘的初值： </p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image22.png" alt=""></p><p>​       我输入了3后继续执行，出现了不一样的结果：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image23.png" alt=""></p><p>Amazing！可以看出，指令jal factorial让程序开始从003c读指令，而此前已经被读取、本应该在这个周期译码的、位于002c的指令daddi r24, r0, 1被阻塞了！于是Statistics窗口中Branch Taken Stall的值增加了1！再执行几个周期：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image24.png" alt=""></p><p>​        可以观察到流水线开始被重新构建。此外，结合参考手册中对于指令slti的介绍</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image25.png" alt=""></p><p>可知指令slti在对编号为10的寄存器进行写操作的同时指令bnez要对r10进行读操作，于是就产生了如图所示的“写后读”阻塞。进行执行若干个周期，上述两种情况交替出现若干次，目的在于将需要的数据即，n到1压入堆栈。运行若干周期之后终于跳出了这个循环，出现了新的情况：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image26.png" alt=""></p><p>​        Surprise！在执行指令dmulu的时候，使用了专门的硬件！同时由于乘法计算的时间仍然较长且与下一条指令dadd均需要访问编号为3的寄存器，所以整个程序都处于“写后读”阻塞！最终，当dmulu指令进入访问内存阶段时，statistics窗口中的Structural Stall的值变为了1！</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image27.png" alt=""></p><p>​        继续执行若干个周期，除了程序在循环计算阶乘的过程中又出现了StructuralStall外，并没有发现新的有趣的现象。最后，终端输出了正确的结果，statistics窗口中数据如下所示：</p><p> <img src="/2018/04/10/《计算机体系结构》实验2-MIPS指令集/image28.png" alt=""></p><p>​        最终的CPI为1.640，远远小于5，可见流水线的威力。</p><h2 id="3-2-指令观察小结"><a href="#3-2-指令观察小结" class="headerlink" title="3.2 指令观察小结"></a>3.2 指令观察小结</h2><p>​        这次仿真观察真是惊喜连连，我收获了哪些呢？</p><p>一、 流水线是一个复杂的系统，包括指令周期的划分、指令周期的对齐、资源冲突的应对等等，可以有效地减小CPI。</p><p>二、 为了对齐指令周期，需要尽量减少各个阶段的时间长度，例如通过指令长度的对齐和指令格式的统一提高译码效率。</p><p>三、 对了避免部分周期，尤其是执行周期流水线效率的影响，在设计指令集的时候就考虑使用不同的硬件以提高执行效率，例如采用协处理器专门处理浮点运算，采用专门的硬件计算加速乘法计算（这样的思想也被应用到近几年的异构计算中）。</p><h1 id="4-参考文献"><a href="#4-参考文献" class="headerlink" title="4 参考文献"></a>4 参考文献</h1><p>[1] MIPS指令集</p><p><a href="http://blog.sina.com.cn/s/blog_7f293c900100zdm8.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_7f293c900100zdm8.html</a></p><p>[2] C++中数据类型int, short, long, long long的数据范围</p><p><a href="https://blog.csdn.net/elohims/article/details/23558779" target="_blank" rel="noopener">https://blog.csdn.net/elohims/article/details/23558779</a></p><p>[3] 大端模式和小端模式</p><p><a href="https://www.cnblogs.com/itcsl/p/6567963.html" target="_blank" rel="noopener">https://www.cnblogs.com/itcsl/p/6567963.html</a></p><p>[4] MIPS入门</p><p><a href="https://wenku.baidu.com/view/f719c320647d27284b735199.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/f719c320647d27284b735199.html</a></p><p>[5] MIPS的五级流水线</p><p><a href="http://imgtec.eetrend.com/article/1247" target="_blank" rel="noopener">http://imgtec.eetrend.com/article/1247</a></p><p>[6] MIPS指令集实验</p><p><a href="https://wenku.baidu.com/view/6d94c44c1fd9ad51f01dc281e53a580216fc509d.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/6d94c44c1fd9ad51f01dc281e53a580216fc509d.html</a></p><p>[7] cpu结构和功能</p><p><a href="https://max.book118.com/html/2017/0628/118707202.shtm" target="_blank" rel="noopener">https://max.book118.com/html/2017/0628/118707202.shtm</a></p>]]></content>
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《操作系统》作业2.5-进程控制块的类C语言描述</title>
      <link href="/2018/04/02/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E4%BD%9C%E4%B8%9A2-5-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%9D%97%E7%9A%84%E7%B1%BBC%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0/"/>
      <content type="html"><![CDATA[<p>这个作业差点要手写，倒腾了一晚上，肯定还有很多问题，就先贴在这里吧。</p><p><strong>试根据你自己的理解，采用类C语言设计和描述操作系统关于进程控制块的数据结构、组织方式及管理机制。在此基础上，给出进程的创建、终止、阻塞、唤醒、挂起与激活等函数原型及函数代码。注意，对于过于复杂的功能或你无法解决的细节可采用指定功能的函数模块如处理机调度scheduler()来替代。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line"> <span class="keyword">pid_t</span> pid;<span class="comment">//进程pid</span></span><br><span class="line"><span class="keyword">pid_t</span> ppid;<span class="comment">//父进程pid</span></span><br><span class="line"> <span class="keyword">enum</span> status&#123;<span class="comment">//进程状态</span></span><br><span class="line"> CREATING,<span class="comment">//创建</span></span><br><span class="line"> TERMINATING,<span class="comment">//终止</span></span><br><span class="line"> RUNNING,<span class="comment">//执行</span></span><br><span class="line"> ACTIVE_READY,<span class="comment">//活动就绪</span></span><br><span class="line"> INACTIVE_READY,<span class="comment">//静止就绪</span></span><br><span class="line"> ACTIVE_BLOCK,<span class="comment">//活动阻塞</span></span><br><span class="line"> INACTIVE_BLOCK,<span class="comment">//静止阻塞</span></span><br><span class="line">&#125;;<span class="comment">//进程的状态</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> memory_address;<span class="comment">//进程下一次执行程序的开始地址</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allocate_address</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TO-DO: 为新的进程分配一块内存空间，返回首地址的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deallocate_address</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TO-DO: 解除进程的内存分配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> process(<span class="keyword">pid_t</span> pid, <span class="keyword">pid_t</span> ppid) &#123;</span><br><span class="line"> <span class="keyword">this</span>.pid = pid;</span><br><span class="line"> <span class="keyword">this</span>.ppid = ppid;</span><br><span class="line"> <span class="keyword">this</span>.status = CREATING;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">this</span>.pid != ERROR)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">this</span>.memory_address = allocate_address();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> ~process()&#123;</span><br><span class="line"> <span class="keyword">this</span>.status = TERMINATING;</span><br><span class="line"> deallocate_address();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">system</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">pid_t</span> start_pid = <span class="number">0</span>;<span class="comment">//初始进程的pid</span></span><br><span class="line"><span class="keyword">pid_t</span> next_pid;<span class="comment">//下一个创建的的进程pid</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span> <span class="title">running_porcess</span>;</span><span class="comment">//正在执行的进程</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">running_start_time</span>;</span><span class="comment">//正在执行进程开始执行的时间</span></span><br><span class="line"><span class="keyword">long</span> max_time = <span class="number">100</span>;<span class="comment">//一个时间片的长度（微秒）</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct process&gt; ready_queue;<span class="comment">//就绪进程的队列</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct process&gt; block_queue;<span class="comment">//阻塞进程的队列</span></span><br><span class="line"><span class="built_in">queue</span>&lt;struct process&gt; suspend_queue;<span class="comment">//挂起进程的的队列</span></span><br><span class="line"><span class="keyword">int</span> genearl_register[<span class="number">4</span>][<span class="number">2</span>];<span class="comment">//标准寄存器</span></span><br><span class="line"><span class="keyword">int</span> PSW[<span class="number">16</span>];<span class="comment">//状态寄存器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> system&#123;<span class="comment">//状态转移</span></span><br><span class="line"> CREATE,<span class="comment">//创建</span></span><br><span class="line"> BLOCK,<span class="comment">//阻塞</span></span><br><span class="line"> RELEASE,<span class="comment">//释放</span></span><br><span class="line"> SUSPEND,<span class="comment">//挂起</span></span><br><span class="line"> ACTIVATE,<span class="comment">//激活</span></span><br><span class="line"> TERMINATE,<span class="comment">//终止</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; operater_queue;<span class="comment">//待执行的操作的队列</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct process <span class="title">create</span><span class="params">(<span class="keyword">pid_t</span> ppid)</span></span>;<span class="comment">//创建进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">block</span><span class="params">()</span></span>;<span class="comment">//阻塞正在执行的进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(struct process)</span></span>;<span class="comment">//释放阻塞的进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suspend</span><span class="params">(struct process)</span></span>;<span class="comment">//挂起进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activate</span><span class="params">(struct process)</span></span>;<span class="comment">//激活被挂起的进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">terminate</span><span class="params">(struct process)</span></span>;<span class="comment">//终止进程</span></span><br><span class="line"></span><br><span class="line">system();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span> <span class="title">system</span>:</span>:create(<span class="keyword">pid_t</span> ppid) &#123;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">new_process = process(<span class="keyword">this</span>.next_pid , ppid);</span><br><span class="line"><span class="keyword">this</span>.next_pid += <span class="number">1</span>;</span><br><span class="line">new_process.status = ACTIVE_READY;</span><br><span class="line"><span class="keyword">this</span>.ready_queue.push(new_process);</span><br><span class="line"><span class="keyword">this</span>.timeval = gettiemofday();</span><br><span class="line"><span class="keyword">return</span> new_process;</span><br><span class="line"><span class="keyword">catch</span>:</span><br><span class="line"><span class="keyword">return</span> process(ERROR, ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::block() &#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess.memory_address = getNowAddress();</span><br><span class="line"><span class="comment">// 阻塞执行进程，调度下一个进程</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.running_porcess != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess.status = ACTIVE_BLOCK;</span><br><span class="line">block_queue.push(<span class="keyword">this</span>.running_porcess);</span><br><span class="line"><span class="keyword">this</span>.running_porcess = <span class="keyword">this</span>.ready_queue.pop():</span><br><span class="line">&#125;</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::release(struct process) &#123;</span><br><span class="line"><span class="comment">// 释放活动阻塞进程，转入活动就绪</span></span><br><span class="line"><span class="keyword">if</span> (process.status == ACTIVE_BLOCK)</span><br><span class="line">&#123;</span><br><span class="line">process.status = ACTIVE_READY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放静止阻塞进程，转入静止就绪</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.status == INACTIVE_BLOCK)</span><br><span class="line">&#123;</span><br><span class="line">process.status == INACTIVE_READY;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ready_queue.push(process);</span><br><span class="line">block_queue.pop(process);</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::suspend(struct process) &#123;</span><br><span class="line">porcess.memory_address = getNowAddress();</span><br><span class="line"><span class="comment">// 挂起执行进程，转入静止就绪，调度下一个程序</span></span><br><span class="line"><span class="keyword">if</span> (process == <span class="keyword">this</span>.running_porcess) &#123;</span><br><span class="line">process.status = INACTIVE_READY;</span><br><span class="line">next_process = ready_queue.pop();</span><br><span class="line"><span class="keyword">if</span> (! suspend_queue.isMember(new_process))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess = new_process;</span><br><span class="line">exec_from(new_process.memory_address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 挂起活动就绪进程，转入静止就绪</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ready_queue.isMember(process))</span><br><span class="line">&#123;</span><br><span class="line">process.status = INACTIVE_READY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 挂起活动阻塞进程，转入静止阻塞</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (block_queue.isMember(process)) &#123;</span><br><span class="line">process.status = INACTIVE_BLOCK;</span><br><span class="line">&#125;</span><br><span class="line">suspend_queue.push(process);</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::activate(struct process) &#123;</span><br><span class="line"><span class="comment">// 如果是就绪进程，转入活动就绪</span></span><br><span class="line"><span class="keyword">if</span> (ready_queue.isMember(process))</span><br><span class="line">&#123;</span><br><span class="line">process.status == ACTIVE_READY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是阻塞进程，转入活动阻塞</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (block_queue.isMember(process))</span><br><span class="line">&#123;</span><br><span class="line">process.status == ACTIVE_BLOCK;</span><br><span class="line">&#125;</span><br><span class="line">suspend_queue.pop(process);</span><br><span class="line">scheduler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> system::terminate(struct process) &#123;</span><br><span class="line"><span class="comment">// 调用该进程的析构函数，并调度下一个进程</span></span><br><span class="line">process.~process();</span><br><span class="line"><span class="keyword">this</span>.next_process = ready_queue.pop();</span><br><span class="line"><span class="keyword">if</span> (! suspend_queue.isMember(new_process))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess = new_process;</span><br><span class="line">exec_from(new_process.memory_address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system::system() &#123;</span><br><span class="line"><span class="keyword">this</span>.next_pid = <span class="keyword">this</span>.start_pid;</span><br><span class="line">ready_queue = <span class="built_in">queue</span>&lt;struct process&gt;();</span><br><span class="line">block_queue = <span class="built_in">queue</span>&lt;struct process&gt;();</span><br><span class="line">suspend_queue = <span class="built_in">queue</span>&lt;struct process&gt;();</span><br><span class="line"><span class="comment">//初始化状态转移队列，并将系统启动时必要的一些状态转移入列</span></span><br><span class="line">operater_queue = <span class="built_in">queue</span>&lt;strct process&gt;(<span class="comment">/*TO-DO: 一些状态转移*/</span>);</span><br><span class="line"><span class="comment">// 创建第一个进程</span></span><br><span class="line"><span class="keyword">while</span>((<span class="keyword">this</span>.running_porcess = <span class="keyword">this</span>.create(<span class="keyword">this</span>.start_pid).pid != ERROR);</span><br><span class="line"><span class="keyword">this</span>.timeval = gettiemofday();</span><br><span class="line"><span class="keyword">this</span>.running_porcess.status = RUNNING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 选择下一个状态转移</span></span><br><span class="line"><span class="keyword">if</span> ( !operater_queue.isEmpty() )</span><br><span class="line">&#123;</span><br><span class="line">operater = operater_queue.pop();</span><br><span class="line"><span class="keyword">switch</span> operater &#123;</span><br><span class="line">CREATE: <span class="keyword">this</span>.create(<span class="keyword">this</span>.running_porcess.pid);<span class="keyword">break</span>;</span><br><span class="line">BLOCK: <span class="keyword">this</span>.block();<span class="keyword">break</span>;</span><br><span class="line">RELEASE: <span class="keyword">this</span>.release();<span class="keyword">break</span>;</span><br><span class="line">SUSPEND: <span class="keyword">this</span>.suspend(process);<span class="keyword">break</span>;</span><br><span class="line">ACTIVATE: <span class="keyword">this</span>.activate();<span class="keyword">break</span>;</span><br><span class="line">TERMINATE: <span class="keyword">this</span>.terminate();<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间片结束，当前进程转移到活动就绪，并调度下一个进程</span></span><br><span class="line"><span class="keyword">if</span> (gettiemofday - <span class="keyword">this</span>.timeval &gt;= <span class="keyword">this</span>.max_time <span class="keyword">or</span> <span class="keyword">this</span>.running_porcess == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess.memory_address = getNowAddress();</span><br><span class="line"><span class="keyword">this</span>.running_porcess.status = ACTIVE_READY;</span><br><span class="line">ready_queue.push(<span class="keyword">this</span>.running_porcess);</span><br><span class="line">next_process = ready_queue.pop();</span><br><span class="line"><span class="keyword">if</span> (! suspend_queue.isMember(new_process))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.running_porcess = new_process;</span><br><span class="line">exec_from(new_process.memory_address);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《操作系统》实验2-进程控制</title>
      <link href="/2018/03/30/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C2-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><strong>打开一个vi进程。通过ps命令以及选择合适的参数，只显示名字为vi的进程。寻找vi进程的父进程，直到init进程为止。记录过程中所有进程的ID和父进程ID。将得到的进程树和由pstree命令的得到的进程树进行比较。</strong></p><p>解：pgrep 是通过程序的名字来查询进程的工具，一般是用来判断程序是否正在运行；xargs能够捕获一个命令的输出，然后传递给另外一个命令。通过两个命令的配合，完成了显示名字为vi的进程的输出，并通过ps命令一步一步找到父进程。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image1.png" alt="mage"></p><p>通过pstree命令得到以下的进程树：</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image2.png" alt="mage"> </p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image3.png" alt="mage"></p><p>比对两种方法获得的父进程，发现均为systemd→lightdm→upstart→gnome-terminal→bash→vi。其中，systemd是一组系统管理命令，取代了init命令成为系统的第一个进程；LightDM即Light Display Manager，是一个全新的、轻量的Linux桌面的桌面显示管理器；有趣的是，upstart是一种基于事件通知机制启动相应服务的init进程，即较早版本的Ubuntu的初始化进程为init→upstart；gnome-terminal为终端的管理进程；bash是其中一套shell规范（类似于Ubuntu和Linux的关系），而shell是一套linux接口。</p><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p><strong>编写程序，使用getpid、getppid系统调用，输出当前进程的ID以及父进程的ID。</strong></p><p>解：编写程序及其输入结果如下，不做赘述。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image4.png" alt="mage"></p><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><p><strong>编写程序，首先使用fork系统调用，创建子进程。在父进程中继续执行空循环操作；在子进程中调用exec编辑器。然后在另外一个终端中，通过ps –Al命令、ps aux命令，查看vi进程及其父进程的运行状态，理解每个参数所表达的意义。选择合适的命令参数，对所有进程按照cpu占用率排序。</strong></p><p>解：根据题目要求，编写程序如下，并使用命令ps -AL查看现有进程信息。查阅资料可知，</p><p>#F代表程序的旗标(flag)，4代表使用者为 superuser，1代表user；</p><p>#S代表这个程序的状态 (STAT)；</p><p>#UID代表执行者身份；</p><p>#PID代表进程的ID号</p><p>#PPID代表父进程的ID；</p><p>#C代表使用的CPU资源百分比；</p><p>#PRI代表进程的执行优先权(Priority的简写)，其值越小越早被执行；</p><p>#NI代表进程的nice值，其表示进程可被执行的优先级的修正数值；</p><p>#ADDR代表内核函数； </p><p>#SZ表示占用内存的大小；</p><p>#WCHAN表示这个程序是否正在运作当中，其中’ -’表示正在运作；</p><p>#TTY表示登入者的终端机位置；</p><p>#TIME表示使用掉的 CPU 时间；</p><p>#CMD 表示下达指令的名称；</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image5.png" alt="mage"></p><p>在右下角的中找到vi进程及其状态：</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image6.png" alt="mage"></p><p>使用命令ps aux查看内存中运行的程序，查阅资料可知：</p><p>• USER：该进程属于的使用者账号；</p><p>• PID：该进程的进程ID号；</p><p>• CPU：该进程使用掉的CPU资源百分比；</p><p>• MEM：该进程所占用的物理内存百分比；</p><p>• VSZ：该进程使用掉的虚拟内存量 (Kbytes)</p><p>• RSS ：该进程占用的固定的内存量 (Kbytes)</p><p>• TTY ：该进程是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</p><p>• STAT：该程序目前的状态，主要的状态有：</p><p>   R ：该程序目前正在运作，或者是可被运作；</p><p>   S ：该程序目前正在睡眠当中；</p><p>   T ：该程序目前正在侦测或者是停止了；</p><p>   Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie(疆尸) 程序的状态；</p><p>• START：该进程被触发启动的时间；</p><p>• TIME ：该进程实际使用 CPU 运作的时间。</p><p>• COMMAND：该进程所属的指令</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image7.png" alt="mage"></p><p>​       使用top命令将所有进程按照cpu占有率排名，可见死循环程序fork_exec已经几乎完全占有了CPU：</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image8.png" alt="mage"></p><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p><strong>使用fork系统调用，创建如下进程树，并使每个进程输出自己的ID和父进程的ID。观察进程的执行顺序。</strong></p><p>解：根据题目要求编写程序，多次运行得到如下输出。可以看出P1为P2和P3的父进程，P2位P4和P5的父进程，与实验要求的进程树相同。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image9.png" alt="mage"></p><h1 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h1><p><strong>修改上述进程树中的进程，使得所有进程都循环输出自己的ID和父进程的ID。然后终止p2进程(kill或者自动退出)，观察p1、p3、p4、p5进程的运行状态和其他相关参数有何改变。</strong></p><p>解：由于需要循环输出自己的ID和父进程的ID，所以程序逻辑发生变化，重新编写程序并运行如下。5个程序并发执行，前后并无固定的顺序，但是进程ID及其父进程ID始终满足题目进程树的要求。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image10.png" alt="mage1"></p><p>​       修改程序如下，P2只循环输出3次。观察到从第4轮输出开始除了P2没有继续输出外，其他进程仍然满足题目要求的进程树。这和我预计的结果并不一样，所以猜测可能进程P2并没有结束。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image11.png" alt="mage1"></p><p>​       进一步修改程序如下，P2在3次输出之后执行return语句，惊奇地发现P2的子进程P4和P5的父进程均变为了1537！可见此前的程序并没有结束进程P2。使用ps命令，发现该进程名为upstart，它负责收养孤儿进程，其父进程就是ubuntu图形化界面的进程lightdm。这意味着在文本界面下，一切都和upstart无关了。</p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image12.png" alt="mage1"></p><p><img src="/2018/03/30/《操作系统》实验2-进程控制/image13.png" alt="mage1"></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] linux pgrep命令的使用 </p><p><a href="https://blog.csdn.net/edman_linux/article/details/78722021" target="_blank" rel="noopener">https://blog.csdn.net/edman_linux/article/details/78722021</a></p><p>[2] Linux xargs命令小结</p><p><a href="https://blog.csdn.net/wh_19910525/article/details/8494444" target="_blank" rel="noopener">https://blog.csdn.net/wh_19910525/article/details/8494444</a></p><p>[3] Systemd 入门教程：命令篇</p><p><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html</a></p><p>[4] 百度百科：LightDM</p><p><a href="https://baike.baidu.com/item/LightDM/9557430?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/LightDM/9557430?fr=aladdin</a></p><p>[5] linux第一个用户进程init—upstart</p><p><a href="https://blog.csdn.net/itsenlin/article/details/42329851" target="_blank" rel="noopener">https://blog.csdn.net/itsenlin/article/details/42329851</a></p><p>[6] 知乎：想了解一下ubuntu下的终端，shell，bash是什么以及区别？</p><p><a href="https://www.zhihu.com/question/40448945" target="_blank" rel="noopener">https://www.zhihu.com/question/40448945</a></p><p>[7] Linux ps命令详解与示例说明</p><p><a href="https://blog.csdn.net/lsbhjshyn/article/details/18549869" target="_blank" rel="noopener">https://blog.csdn.net/lsbhjshyn/article/details/18549869</a></p><p>[8] Ubuntu15.04 删除/sbin/upstart与孤儿进程收养的问题</p><p><a href="https://www.cnblogs.com/chilumanxi/p/5136102.html" target="_blank" rel="noopener">https://www.cnblogs.com/chilumanxi/p/5136102.html</a></p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《计算机体系结构》实验1-计算机性能测试</title>
      <link href="/2018/03/29/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%8B%E5%AE%9E%E9%AA%8C1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>本次实验中，我共计采用5种方式（4个成熟的测试软件和1个自己写的小程序）对3台计算机（期间对联想小新V4000进行固态的改装升级）进行了全方位的测试，具体方案如下表所示：</p><div class="table-container"><table><thead><tr><th></th><th><strong>MIIX 5Pro</strong></th><th><strong>小新V4000</strong>  <strong>（改装固态）</strong></th><th><strong>小新V4000</strong>  <strong>（未改装）</strong></th><th><strong>方正</strong>  <strong>Wenxiang E620</strong></th></tr></thead><tbody><tr><td><strong>鲁大师</strong></td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td><strong>CrystalDisk</strong></td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td><strong>CPU-Z</strong></td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td><strong>Performance Test 9</strong></td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td><strong>My benchmark</strong></td><td>√</td><td>√</td><td>×</td><td>×</td></tr></tbody></table></div><p>​        此外，根据鲁大师、CPU-Z的检测结果，3台计算机主要的软硬件配置如下表所示：</p><p> <img src="/2018/03/29/《计算机体系结构》实验1-计算机性能测试/1.png" alt="1"></p><h1 id="测试过程与结果分析"><a href="#测试过程与结果分析" class="headerlink" title="测试过程与结果分析"></a>测试过程与结果分析</h1><h2 id="鲁大师磁盘测试"><a href="#鲁大师磁盘测试" class="headerlink" title="鲁大师磁盘测试"></a>鲁大师磁盘测试</h2><p>鲁大师磁盘检测的健康程度取决于访问该存储单元的响应时间。小于三毫秒为优秀，小于12毫秒为良好，是小于20毫秒为正常，小于120毫秒为瑕疵，小于600毫秒为丢失，大于600毫秒为严重，无法读取为损坏。</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">优良</th><th style="text-align:center">良好</th><th style="text-align:center">正常</th><th style="text-align:center">瑕疵</th><th style="text-align:center">丢失</th></tr></thead><tbody><tr><td style="text-align:center">方正</td><td style="text-align:center"><strong>1779866</strong></td><td style="text-align:center"><strong>69891</strong></td><td style="text-align:center"><strong>20114</strong></td><td style="text-align:center"><strong>12976</strong></td><td style="text-align:center"><strong>712</strong></td></tr><tr><td style="text-align:center">小新_旧</td><td style="text-align:center"><strong>2185385</strong></td><td style="text-align:center"><strong>275919</strong></td><td style="text-align:center"><strong>11963</strong></td><td style="text-align:center"><strong>37386</strong></td><td style="text-align:center"><strong>1750</strong></td></tr><tr><td style="text-align:center">小新_新</td><td style="text-align:center"><strong>951431</strong></td><td style="text-align:center"><strong>9</strong></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>0</strong></td></tr><tr><td style="text-align:center">MIIX</td><td style="text-align:center"><strong>1953524</strong></td><td style="text-align:center"><strong>6</strong></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center"><strong>0</strong></td></tr></tbody></table></div><p>从上表的测试结果可以看出，在经过一段时间的使用后，机械硬盘具有明显的损耗，小部分存储单元延迟较长；而固态硬盘，具有良好的稳定性，在一段时间的使用之后仍然保持优良的健康状态。</p><h2 id="鲁大师性能测试"><a href="#鲁大师性能测试" class="headerlink" title="鲁大师性能测试"></a>鲁大师性能测试</h2><p>鲁大师的计算机性能测试，包括处理器、显卡、内存和硬盘。总分是根据各个属性加权求和得到。</p><div class="table-container"><table><thead><tr><th></th><th>总分</th><th>处理器</th><th>显卡</th><th>内存</th><th>硬盘</th></tr></thead><tbody><tr><td>方正</td><td><strong>58240</strong></td><td><strong>46696</strong></td><td><strong>3651</strong></td><td><strong>6963</strong></td><td><strong>930</strong></td></tr><tr><td>小新_旧</td><td><strong>70953</strong></td><td><strong>32486</strong></td><td><strong>28744</strong></td><td><strong>8223</strong></td><td><strong>1500</strong></td></tr><tr><td>小新_新</td><td><strong>96665</strong></td><td><strong>32728</strong></td><td><strong>26217</strong></td><td><strong>8223</strong></td><td><strong>10860</strong></td></tr><tr><td>MIIX</td><td><strong>126353</strong></td><td><strong>39076</strong></td><td><strong>11722</strong></td><td><strong>9006</strong></td><td><strong>42960</strong></td></tr></tbody></table></div><p>通过分析上表数据，可以得到一些结论：</p><p>越新的计算机测试总分越高，这符合计算机发展的常识与我日常使用的体验；</p><p>近几代英特尔处理器升级幅度并不是很大；</p><p>得益于较大的功率，桌面级处理器相较于笔记本级处理器具有较大优势；</p><p>独立显卡具有碾压于核心显卡的处理能力，不过近几年核心显卡有了较大的发展；</p><p>近几年内存升级幅度并不是很大；</p><p>固态硬盘具有碾压机械硬盘的传输速度。</p><h2 id="CrystalDisk"><a href="#CrystalDisk" class="headerlink" title="CrystalDisk"></a>CrystalDisk</h2><p>​      CrystalDisk测试主要包括硬盘的顺序读写、4k读写，其中比较容易理解的顺序读写结果如下：</p><div class="table-container"><table><thead><tr><th></th><th><strong>Read(MB/s)</strong></th><th><strong>Write(MB/s)</strong></th></tr></thead><tbody><tr><td>小新_新</td><td><strong>561.9</strong></td><td><strong>305.5</strong></td></tr><tr><td>MIIX</td><td><strong>2041.2</strong></td><td><strong>1588.4</strong></td></tr></tbody></table></div><p>可以看出，固态硬盘之间也有较大差距。查阅相关资料可知，这主要取决于固态硬盘的闪存颗粒、主控芯片以及接口规格。不过从实际体验来看，SATA3固态硬盘的500MB/s读取速度与300MB/s写入速度已经满足了日常的基本需求，实际体验没有太大的差别。</p><h2 id="CPU-Z"><a href="#CPU-Z" class="headerlink" title="CPU-Z"></a>CPU-Z</h2><p>​        CPU-Z测试主要包括处理器的单核性能和多核性能。</p><div class="table-container"><table><thead><tr><th></th><th><strong>单核</strong></th><th><strong>多核</strong></th></tr></thead><tbody><tr><td><strong>小新_新</strong></td><td><strong>322.7</strong></td><td><strong>895.3</strong></td></tr><tr><td><strong>MIIX</strong></td><td><strong>344.2</strong></td><td><strong>1002.7</strong></td></tr></tbody></table></div><p>从上表可知，虽然代数相差两代，但是i7 7500U相较于i7 5500U并没有显著的提升。两款CPU的功耗、工艺、核心数量、线程数量制成完全相同，区别主要在于架构和主频。单从处理性能来看，英特尔牙膏厂的称号名副其实，可见垄断并不利于技术的进步。</p><h2 id="Performance-Test-9"><a href="#Performance-Test-9" class="headerlink" title="Performance Test 9"></a>Performance Test 9</h2><p>​        PerformanceTest 9测试内容主要包括CPU、2d图形、3d图形、内存和磁盘。这些属性和鲁大师的相似，2d图形和3d图形相比更看重CPU的处理能力。</p><div class="table-container"><table><thead><tr><th></th><th><strong>PassMark</strong></th><th><strong>CPU</strong></th><th><strong>2D图形</strong></th><th><strong>3D图形</strong></th><th><strong>内存</strong></th><th><strong>磁盘</strong></th></tr></thead><tbody><tr><td><strong>小新_新</strong></td><td><strong>2214.3</strong></td><td><strong>4284.8</strong></td><td><strong>617.2</strong></td><td><strong>550.9</strong></td><td><strong>1720.1</strong></td><td><strong>5443.1</strong></td></tr><tr><td><strong>MIIX</strong></td><td><strong>2186.2</strong></td><td><strong>5534.9</strong></td><td><strong>460.3</strong></td><td><strong>453.0</strong></td><td><strong>2341.8</strong></td><td><strong>19460.6</strong></td></tr></tbody></table></div><p>令人意外的是，上表显示比较老旧的联想小新获得了更高的总分，这一方面可能是因为硬盘在该项测试中所占权重较小，另一方面可能是因为联想小新具有更大的机身体积，故而具有较好的散热。由此可见，计算机性能测试的标准并不唯一，每一项属性所占的权重因人而异；同时，计算机的性能参数并不是决定计算机最终实际使用性能的唯一指标。</p><h2 id="My-benchmark"><a href="#My-benchmark" class="headerlink" title="My benchmark"></a>My benchmark</h2><p>​      除了使用上述的成熟软件，我还编写了以下的python3.5程序，以测试不同电脑的性能。</p><p>​        每次测试要按不同次数执行三个操作。其中，第一个操作是整数0到1000万的累加，主要考察CPU的整数加法计算能力；第二个操作是1到1万的阶乘，主要考察CPU的整数乘法计算能力；第三个操作是，对17MB纯文本文件的读写，文本内容为所有维基百科的词条，主要考察计算机的IO读写速度。四次测试中，三种操作的频数之比分别为10:10:10，28:1:1，1:28:1，1:1:28。</p><div class="table-container"><table><thead><tr><th></th><th>T1(s)</th><th>T2(s)</th><th>T3(s)</th><th>Ttotal(s)</th></tr></thead><tbody><tr><td>小新V4000</td><td></td><td></td><td></td><td></td></tr><tr><td>[10,  10, 10]</td><td>11.19</td><td>1.33</td><td>22.34</td><td>34.87</td></tr><tr><td>[28,  1, 1]</td><td>31.30</td><td>0.13</td><td>2.23</td><td>33.67</td></tr><tr><td>[1,  28, 1]</td><td>1.15</td><td>3.70</td><td>2.26</td><td>7.11</td></tr><tr><td>[1,  1, 28]</td><td>1.11</td><td>0.13</td><td>62.62</td><td>63.87</td></tr><tr><td>MIIX  5pro</td><td></td><td></td><td></td><td></td></tr><tr><td>[10,  10, 10]</td><td>10.37</td><td>1.12</td><td>6.84</td><td>28.33</td></tr><tr><td>[28,  1, 1]</td><td>28.7</td><td>0.11</td><td>1.68</td><td>30.56</td></tr><tr><td>[1,  28, 1]</td><td>1.01</td><td>3.08</td><td>1.68</td><td>5.77</td></tr><tr><td>[1,  1, 28]</td><td>1.06</td><td>0.11</td><td>47.3</td><td>48.5</td></tr></tbody></table></div><p>测试的结果比较符合预期，即两者在CPU的处理能力上相差不大，而MIIX在磁盘读写的能力上有明显的优势。此外，本实验中操作三在总时长中占比较大，真实应用场景中，应该对相应的操作进行优化，从而有效的提高全局加速比。</p><h1 id="购机建议"><a href="#购机建议" class="headerlink" title="购机建议"></a>购机建议</h1><p>根据上述实验结论，提出以下的购机建议：</p><p>受制于笔记本功耗与工艺制成的阻碍，低压版处理器实际性能相距不大，散热成为实际性能的瓶颈。</p><p>独立显卡具有碾压核心显卡的处理能力，有游戏、大型图像处理以及机器学习需求的用户需要购买较为高端的显卡。</p><p>硬盘的读写速度是制约当前计算机实际使用体验的重要瓶颈。在预算充足的情况下，尽量购买带有固态硬盘的计算机。</p><p>由于软件的更新升级，内存容量的大小建议8G起步。</p><p>计算机的实际使用体验不仅取决于各项性能参数，还取决于显示器键盘触控板等外设的质量、配备接口的数量与质量、实际做工以及硬件之间的配合程度，不能陷入单纯比较参数的陷阱当中，一切以实际的使用体验为准。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次实验中，我首先使用四种成熟的测试软件对个人的两台计算机和机房的计算机进行性能测试，然后又自己编写python程序测试个人的两台计算机性能，得到了一系列实验数据，并分析得到相关实验结论。</p><p>通过本次实验，我从总体上了解了计算机测试的各项指标，验证了课堂上所学的相关知识与课下了解的近几年计算机发展状况，同时对个人的计算机状况有了较为深入的理解，这些必将有利于我进一步的学习与实践。</p>]]></content>
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>联想小新V4000安装固态硬盘</title>
      <link href="/2018/03/26/%E8%81%94%E6%83%B3%E5%B0%8F%E6%96%B0V4000%E5%AE%89%E8%A3%85%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/"/>
      <content type="html"><![CDATA[<p>计算机体系结构第一次上机做性能检测，好吧惊讶地发现小新V4000的硬盘已经老化了不少，考虑到非优秀良好的单元虽然数量占比并不是很高但是响应时间占比却吓人，于是就考虑换一下硬盘。<img src="/2018/03/26/联想小新V4000安装固态硬盘/磁盘检测.PNG" alt=""></p><p>原来是想换联想原装的，然而悲哀的发现同等容量（200多G）同等接口（SATA3）下三星的反而更快（500对300）更便宜（可能刚好赶上秒杀？），于是就入了<a href="https://item.jd.com/6287165.html" target="_blank" rel="noopener">三星(SAMSUNG) 860 EVO 250G SATA3 固态硬盘（MZ-76E250B）</a>。</p><p>由于此前没有拆机的经历啦（愧为计算机人），所以请南门的小哥帮忙装一下（顺便观察一波）。</p><p>最后把固态安装在主硬盘，原来的机械扔在光驱上。然而小新V4000的光驱位很草率，就是一个塑料壳，根本没考虑拓展，于是又从小哥那里买了一个支架。</p><p>回来后就很愉快啦，装了Win10，发现STAT3接口的速度已经足够使用，完全不是瓶颈了。</p><p><img src="/2018/03/26/联想小新V4000安装固态硬盘/硬盘测试.png" alt=""></p><p>不过原装的希捷硬盘貌似应为工作电流较大的原因，经常掉盘。。大概只能买一个盒子当移动硬盘了。</p><p>参考资料主要有：<a href="https://club.lenovo.com.cn/thread-1881162-1-1.html" target="_blank" rel="noopener">完美解决联想小新V4000光驱位无法识别硬盘+加固态最简单教程</a></p>]]></content>
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《操作系统》实验1_操作系统初步</title>
      <link href="/2018/03/15/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E5%AE%9E%E9%AA%8C1-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%88%9D%E6%AD%A5/"/>
      <content type="html"><![CDATA[<h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><p><strong>根据以下代码完成下面的实验。</strong><br><strong>要求：</strong><br><strong>1、编译运行该程序（cpu.c），观察输出结果，说明程序功能。(编译命令： gcc -o cpu cpu.c –Wall)（执行命令：./cpu）</strong><br><strong>2、再次按下面的命令运行并观察结果。程序cpu运行了几次？他们运行的顺序有何特点和规律？你能尝试解释吗？（执行命令：./cpuA &amp; ; ./cpu B &amp; ; ./cpu C &amp; ; ./cpu D &amp;）</strong></p><p>1、 程序功能为每隔一秒输出一次参数<br>2、 我对程序稍加改造如下，将打印的结果输出到文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetTime</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">t</span>;</span></span><br><span class="line"><span class="keyword">int</span> rc=gettimeofday(&amp;t,<span class="literal">NULL</span>);</span><br><span class="line">assert(rc==<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">double</span>)t.tv_sec+(<span class="keyword">double</span>)t.tv_usec/<span class="number">1e6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spin</span><span class="params">(<span class="keyword">int</span> howlong)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> t=GetTime();</span><br><span class="line"><span class="keyword">while</span>((GetTime()-t)&lt;(<span class="keyword">double</span>)howlong);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"usage: cpu &lt;string&gt;\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *str = argv[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; j &lt; <span class="number">60</span>;j++) &#123;</span><br><span class="line">spin(<span class="number">1</span>);</span><br><span class="line">FILE *stream = fopen(<span class="string">"log.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(stream, <span class="string">"%d %s\n"</span>, i, str);</span><br><span class="line">fclose(stream);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, i++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">&#125;</span><br><span class="line">FILE *stream = fopen(<span class="string">"log.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(stream, <span class="string">"******************\n"</span>);</span><br><span class="line">fclose(stream);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终ABCD四个程序分别运行了60次，其中部分输出如下：<br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/1521129185256.png" alt=""><br>可见4个程序在每一轮循环中轮流执行，并没有发现特别的规律。<br>解释：对于4个完全相同的程序，CPU的优先级是相同的，因此会随机地顺序执行。<br>之后通过命令行去随机化：<br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/1.png" alt=""><br>以相同的方式再次运行程序，可以得到以下结果：<br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/2.png" alt=""><img src="/2018/03/15/《操作系统》实验1-操作系统初步/2.png" alt=""><img src="/2018/03/15/《操作系统》实验1-操作系统初步/3.png" alt=""><br>可以看到，除了第0-2循环，其他均以“DACB”的顺序打印，可见此时CPU已经不再使用之前的随机算法。</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p><strong>根据以下代码完成实验。</strong><br><strong>要求：</strong><br><strong>1、阅读并编译运行该程序(mem.c)，观察输出结果，说明程序功能。(命令： gcc -o mem mem.c –Wall)</strong><br><strong>2、再次按下面的命令运行并观察结果。两个分别运行的程序分配的内存地址是否相同？是否为同一块内存区域？为什么？命令：./mem &amp;; ./mem &amp;</strong></p><p>1、 程序功能为打印指针p指向的内存地址，以及每隔一秒将指针加一后打印指针的相对地址。<br>2、 我对程序稍加改造如下，将打印的结果输出到文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetTime</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">t</span>;</span></span><br><span class="line"><span class="keyword">int</span> rc=gettimeofday(&amp;t,<span class="literal">NULL</span>);</span><br><span class="line">assert(rc==<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>(<span class="keyword">double</span>)t.tv_sec+(<span class="keyword">double</span>)t.tv_usec/<span class="number">1e6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spin</span><span class="params">(<span class="keyword">int</span> howlong)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> t=GetTime();</span><br><span class="line"><span class="keyword">while</span>((GetTime()-t)&lt;(<span class="keyword">double</span>)howlong);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// a1</span></span><br><span class="line">assert(p != <span class="literal">NULL</span>);</span><br><span class="line">FILE *stream = fopen(<span class="string">"2log.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(stream, <span class="string">"(%d) address pointed to by p: %p\n"</span>,getpid(), p); <span class="comment">// a2</span></span><br><span class="line">fclose(stream);</span><br><span class="line">*p = <span class="number">0</span>; <span class="comment">// a3</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( ; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">Spin(<span class="number">1</span>);</span><br><span class="line">*p = *p + <span class="number">1</span>;</span><br><span class="line">FILE *stream = fopen(<span class="string">"2log.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(stream, <span class="string">"(%d) p: %d\n"</span>, getpid(), *p); <span class="comment">// a4</span></span><br><span class="line">fclose(stream);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>最终输出如下：<br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/5.png" alt=""><br>可见两次指针p指向的地址并不相同，并不是同一内存区域。<br>解释：操作系统为不同的指针分配不同的地址，同时为了避免指针之间的冲突，所以不能把不同的指针指向同一内存区域。</p><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><p><strong>根据以下代码完成实验。</strong><br><strong>要求：</strong><br><strong>1、阅读并编译运行该程序，观察输出结果，说明程序功能。（编译命令：gcc -o thread thread.c -Wall –pthread）（执行命令1：./thread 1000）</strong><br><strong>2、尝试其他输入参数并执行，并总结执行结果的有何规律？你能尝试解释它吗？（例如执行命令2：./thread 100000）（或者其他参数。）</strong></p><p>1、 程序功能为并发两个线程对同一变量进行若干次加一操作，并输出变量初值与终值。<br>2、 实验说明中的代码在我这里并不能执行，修改程序如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> loops;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">worker</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; loops; i++) &#123;</span><br><span class="line">counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"usage: threads &lt;value&gt;\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">loops = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">pthread_t</span> p1, p2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Initial value : %d\n"</span>, counter);</span><br><span class="line"></span><br><span class="line">pthread_create(&amp;p1, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">pthread_create(&amp;p2, <span class="literal">NULL</span>, worker, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(p1, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(p2, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Final value : %d\n"</span>, counter);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下，其中pthread由于不是标准库所以编译语句要加上-pthread：<br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/6.png" alt=""><br>可见终值与初值的差为输入参数的两倍。<br>解释：虽然开了两个线程，但是两个线程均对同一变量进行加一操作，参数即为循环的次数，所以为输入参数的两倍。</p><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p><strong>系统调用实验，了解系统调用不同的封装形式。</strong><br><strong>要求：参考下列网址中的程序。阅读分别运行用API接口函数getpid()直接调用和汇编中断调用两种方式调用Linux操作系统的同一个系统调用getpid的程序。请问getpid的系统调用号是多少？系统调用的中断向量号是多少？你可以采用汇编中断调用形式调用其他的系统调用吗？</strong><br><strong><a href="http://hgdcg14.blog.163.com/blog/static/23325005920152257504165/" target="_blank" rel="noopener">http://hgdcg14.blog.163.com/blog/static/23325005920152257504165/</a></strong></p><p>仿照博客里的代码，我编写并编译执行了两个C文件getpid_c.c和getpid_huibina.c如下：<br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/7.png" alt=""><br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/8.png" alt=""><br>getpid的系统调用号为0x14，中断向量为0x80。<br>可以调用其他系统函数，64位系统内核内函数的具体实现和系统调用函数之间的对应关系通过如下文件syscall_64.tbl来记录，就可以使用汇编调用。<br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/9.png" alt=""><br>我尝试了open函数的嵌入式汇编的调用，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> file = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span>* src = <span class="string">"log.txt"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">"mov $0, %%ebx\n\t"</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">"mov $0x5, %%eax\n\t"</span>   <span class="comment">//open的系统调用号为0x5</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">"mov %1, %%ebx\n\t"</span>     <span class="comment">//将文件地址赋给第一个参数</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">"mov $0002, %%ecx\n\t"</span>  <span class="comment">//立即数2表示O_RDWR，即可读可写</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">"mov $0644, %%edx\n\t"</span>  <span class="comment">//立即数0644表示文件的访问权限。</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">"int $0x80\n\t"</span>          <span class="comment">//中断，系统调用</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">"mov %%eax, %0\n\t"</span>     </span></span></span><br><span class="line"><span class="function"><span class="params">:<span class="string">"=m"</span>(file)</span></span></span><br><span class="line">:"b"(src)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"file: %d\n"</span>, file);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而直接编译会有报错如下：<br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/10.png" alt=""><br>原因是我的虚拟机是64位的Ubuntu，mov是一个32位的api，因此需要在asm_open.c之前加上-m32的配置。同时由于缺少部分C语言的库，还需要通过指令sudo apt-get install build-essential libc6-dev libc6-dev-i386命令完成安装，整个过程如下<br><img src="/2018/03/15/《操作系统》实验1-操作系统初步/11.png" alt=""><br>可见file的值变为了-14，成功进行了系统调用。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>通过本次实验，我初次体验了Linux环境下CPU、内存、进程和系统调用，并通过查阅资料在给定代码的基础上进行一定程度的修改，完成预定的实验任务，相信对于操作系统进一步的学习有积极的影响。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] Ubuntu关闭地址空间随机化(ASLR)的方法 <a href="http://www.xuebuyuan.com/1571079.html" target="_blank" rel="noopener">http://www.xuebuyuan.com/1571079.html</a><br>[2] Linux下undefinedreference to ‘pthread_create’问题解决 <a href="http://blog.csdn.net/jiangxinyu/article/details/7778864" target="_blank" rel="noopener">http://blog.csdn.net/jiangxinyu/article/details/7778864</a><br>[3] 系统调用的两种实现方法及对系统调用的理解 <a href="http://hgdcg14.blog.163.com/blog/static/23325005920152257504165/" target="_blank" rel="noopener">http://hgdcg14.blog.163.com/blog/static/23325005920152257504165/</a><br>[4] 使用嵌入汇编调用open系统调用 <a href="http://blog.csdn.net/u013511711/article/details/50933854" target="_blank" rel="noopener">http://blog.csdn.net/u013511711/article/details/50933854</a><br>[5] gcc嵌入汇编Error:unsupported for `mov’ 错误解决方法 <a href="http://mblog.sigma.me/2012/11/26/gcc%E5%B5%8C%E5%85%A5%E6%B1%87%E7%BC%96error-unsupported-for-mov-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html" target="_blank" rel="noopener">http://mblog.sigma.me/2012/11/26/gcc%E5%B5%8C%E5%85%A5%E6%B1%87%E7%BC%96error-unsupported-for-mov-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</a><br>[6] ubuntu x64下编译出现找不到 cdefs.h / c++config.h的问题 <a href="http://blog.csdn.net/sfdazsdf/article/details/48625545" target="_blank" rel="noopener">http://blog.csdn.net/sfdazsdf/article/details/48625545</a></p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《计算机组成原理》课外阅读-《编码》</title>
      <link href="/2018/03/02/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E3%80%8B%E8%AF%BE%E5%A4%96%E9%98%85%E8%AF%BB-%E3%80%8A%E7%BC%96%E7%A0%81%E3%80%8B/"/>
      <content type="html"><![CDATA[<p>​    <a href="https://mp.weixin.qq.com/s?__biz=MzI2MjIyMTA1Nw==&amp;mid=2247483667&amp;idx=1&amp;sn=bd995e7422051f9635774c56d98ae345&amp;chksm=ea4f3d7ddd38b46b64651226632a7c19f9cf126882e702df26f17a36a98bc530dd9bfae6d27f&amp;mpshare=1&amp;scene=2&amp;srcid=0220qzAEScI5opw0L2Bqfh1J&amp;from=timeline#rd" target="_blank" rel="noopener">荐书：《编码：隐匿在计算机软硬件背后的语言》</a></p><p>​    我是因为有优秀的学长在朋友圈里转发了上文才买了这本书的。寒假的时候看了一部分，开学又看了另一部分。和上文作者一样，一不小心读到了凌晨2点，100多页。</p><p>​    这是我第一次认真读完一本国外作者的计算机书籍。讲道理，这本书适合非计算机专业的学生或者计算机专业新生，书中涉及的计算机组成原理、操作系统、系统结构等方面的内容都是比较基础的。但是这并不能磨灭这本书的价值。</p><p>​    记得听人说过，我国的教科书式继承了苏联的风格，上来就是一堆概念，让人摸不着头脑。而欧美国家的教科书则是从生活、从起源讲起，一步一步深入到最新的技术。总体来说，苏联风格的书本在那个时代是有价值的，它可以快速地让读者了解新的概念；然而这样的教科书，即便是做到了严谨，的确让人难以提起兴趣，也让人难以深入到本质。</p><p>​    历史，history，它的故事，没有这些的知识学习，可能是一种虚无主义吧。</p><p>​    以前我们没有能力编写这样的教材，导致中文知识库的严重匮乏，希望今后能够有所改变吧。</p><p>​    </p>]]></content>
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-百度翻译API</title>
      <link href="/2018/02/20/%E7%AC%94%E8%AE%B0-%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91API/"/>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>翻译常用汉语词汇为英语和日语学习</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>一开始还想自己写爬虫，</p><p>但考虑到是百度，以及个人水平，还是算了。</p><p>但意外注意到一个东西：</p><a id="more"></a><p><img src="/2018/02/20/笔记-百度翻译API/截图2018-02-28_23-51-15.png" alt="截图2018-02-28_23-51-15"></p><p>点开大喜，原来百度已经提供了API在<a href="http://api.fanyi.baidu.com/api/trans/product/index" target="_blank" rel="noopener">翻译开放平台</a>，</p><p>每个月有200万字符的免费通用翻译，真心良心了。</p><p>剩下的就很简单啦，官网里文档支持都很详细。</p><p>python版本我用requests库又写了一个函数，官网的示例有些老旧了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baidu_traslate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    q=<span class="string">'apple'</span>,toLang=<span class="string">'zh'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    fromLang=<span class="string">'auto'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    appid=<span class="string">'****************'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    secretKey=<span class="string">'****************'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    url = <span class="string">'http://api.fanyi.baidu.com/api/trans/vip/translate'</span></span><br><span class="line">    salt = random.randint(<span class="number">32768</span>, <span class="number">65536</span>)</span><br><span class="line"></span><br><span class="line">    sign = appid + q + str(salt) + secretKey</span><br><span class="line">    m = hashlib.md5(sign.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    sign = m.hexdigest()</span><br><span class="line"></span><br><span class="line">    url = url + \</span><br><span class="line">          <span class="string">'?appid='</span> + appid + \</span><br><span class="line">          <span class="string">'&amp;q='</span> + q + \</span><br><span class="line">          <span class="string">'&amp;from='</span> + fromLang + \</span><br><span class="line">          <span class="string">'&amp;to='</span> + toLang + \</span><br><span class="line">          <span class="string">'&amp;salt='</span> + str(salt) + <span class="string">'&amp;sign='</span> + sign</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        text = requests.get(url).text</span><br><span class="line">        ret_dict = json.loads(text)</span><br><span class="line">        ret_dict[<span class="string">'src'</span>] = ret_dict[<span class="string">'trans_result'</span>][<span class="number">0</span>][<span class="string">'src'</span>]</span><br><span class="line">        ret_dict[<span class="string">'dst'</span>] = ret_dict[<span class="string">'trans_result'</span>][<span class="number">0</span>][<span class="string">'dst'</span>]</span><br><span class="line">        ret_dict.pop(<span class="string">'trans_result'</span>)</span><br><span class="line">        <span class="keyword">return</span> ret_dict</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'error!'</span>)</span><br></pre></td></tr></table></figure><p>初步接触了md5加密，以前完全没有概念。</p><h1 id="对百度翻译API的改进建议"><a href="#对百度翻译API的改进建议" class="headerlink" title="对百度翻译API的改进建议"></a>对百度翻译API的改进建议</h1><p><strong>返回的内容太简略啦！</strong></p><p><img src="/2018/02/20/笔记-百度翻译API/截图2018-03-01_00-05-54.png" alt="截图2018-03-01_00-05-54"></p><p>本来是想得到常用词汇的日语翻译，结果发现全是汉字又不知道读音，GG。</p><p>相比之下，有道就好得多，返回信息很丰富：</p><p><img src="/2018/02/20/笔记-百度翻译API/截图2018-03-01_00-10-07.png" alt="截图2018-03-01_00-10-07"></p><p>不过虽然送了100元，但是完全不免费。。</p><p><img src="/2018/02/20/笔记-百度翻译API/截图2018-03-01_00-12-48.png" alt="截图2018-03-01_00-12-48"></p><p>啊，总之没有日语注音的事情。</p><p>末了发一下反馈，嘿咻~</p><p><img src="/2018/02/20/笔记-百度翻译API/截图2018-03-01_00-27-33.png" alt="截图2018-03-01_00-27-33"></p>]]></content>
      
      <categories>
          
          <category> 虚拟化与云计算 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>小米6连接三星gear手表</title>
      <link href="/2018/02/16/%E5%B0%8F%E7%B1%B36%E8%BF%9E%E6%8E%A5%E4%B8%89%E6%98%9Fgear%E6%89%8B%E8%A1%A8/"/>
      <content type="html"><![CDATA[<h1 id="连接手机"><a href="#连接手机" class="headerlink" title="连接手机"></a>连接手机</h1><p>这并不是件容易的事情！<br>需要在Google play下载一堆东西如下，其中</p><p><code>Gear S Plugin</code>和<code>Samsung Accessory Service</code>以及<code>Samsung Push Service</code>是保证Gear和手机互联的基本组件。</p><p><code>Samsung Gear</code>是用来连接和设置的应用软件。</p><p><code>三星健康</code>是查看健康数据以及进行相关设置的应用软件。</p><a id="more"></a><p><img src="/2018/02/16/小米6连接三星gear手表/Screenshot_2018-02-28-18-36-44-620_com.miui.securitycenter - 副本.png" alt=""></p><p><img src="/2018/02/16/小米6连接三星gear手表/Screenshot_2018-02-28-23-17-24-685_com.miui.securitycenter.png" alt="Screenshot_2018-02-28-23-17-24-685_com.miui.securitycenter"></p><p><img src="/2018/02/16/小米6连接三星gear手表/Screenshot_2018-02-28-23-18-02-043_com.miui.securitycenter.png" alt="Screenshot_2018-02-28-23-18-02-043_com.miui.securitycenter"></p><p><img src="/2018/02/16/小米6连接三星gear手表/Screenshot_2018-02-28-18-36-44-620_com.miui.securitycenter.png" alt="Screenshot_2018-02-28-18-36-44-620_com.miui.securitycenter"></p><p><img src="/2018/02/16/小米6连接三星gear手表/Screenshot_2018-02-28-18-36-54-622_com.miui.securitycenter.png" alt="Screenshot_2018-02-28-18-36-54-622_com.miui.securitycenter"></p><p>除此之外，还要打开<code>Samsung Accessory Service</code>和<code>Gear S Plugin</code>的自启动管理权限：</p><p><img src="/2018/02/16/小米6连接三星gear手表/Screenshot_2018-02-28-23-33-11-079_com.miui.securitycenter.png" alt="Screenshot_2018-02-28-23-33-11-079_com.miui.securitycenter"></p><p>才能打开<code>Samsung Gear</code>见到如下界面：</p><p><img src="/2018/02/16/小米6连接三星gear手表/Screenshot_2018-02-28-18-37-22-645_com.samsung.android.gearoplugin.png" alt="Screenshot_2018-02-28-18-37-22-645_com.samsung.android.gearoplugin"></p><h1 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h1><p>一段时间用下来，电池正常可以撑2天，马马虎虎啦。</p><p>应用不少，甚至有游戏，但是都是鸡肋啦。</p><p>不过数据记录得详细准确，支持的运动模式特别丰富，能想到的都有，赞。</p><p>比如之前的小米运动不显示我午睡的情况，</p><p>还会自动记录走路的情况！</p><p>唯一的缺陷是可以加一下esim技术，类似于华为watch2，不过价格可能就上天了吧？</p>]]></content>
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-gurobi</title>
      <link href="/2018/02/05/%E7%AC%94%E8%AE%B0-gurobi/"/>
      <content type="html"><![CDATA[<h1 id="提高速度的奇技淫巧"><a href="#提高速度的奇技淫巧" class="headerlink" title="提高速度的奇技淫巧"></a>提高速度的奇技淫巧</h1><h2 id="适当降低精度"><a href="#适当降低精度" class="headerlink" title="适当降低精度"></a>适当降低精度</h2><p>gurobi默认的优化精度为1e-4</p><p>然而实际工程中可能并不需要</p><p>为了大幅减少优化时间，可以通过设置以tolerance为关键词的参数减少精度。</p><a id="more"></a><p>例如在一个MIP模型中，通过语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m = Model()</span><br><span class="line"></span><br><span class="line">m.Params.MIPGap = <span class="number">0.1</span></span><br></pre></td></tr></table></figure><p>就可以将精度设置为1e-1。</p><p>查了一下手册，相关参数如下：</p><p><img src="/2018/02/05/笔记-gurobi/截图2018-02-05_12-32-42.png" alt=""></p><h2 id="减少逻辑约束"><a href="#减少逻辑约束" class="headerlink" title="减少逻辑约束"></a>减少逻辑约束</h2><p>比如这样的一个约束</p><script type="math/tex; mode=display">x=0 \quad or \quad a<=x<=b</script><p>不做处理是设置一个二进制变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = m.addVar(vtype=GRB.INTEGER, name=<span class="string">'x'</span>)</span><br><span class="line">binary = m.addVar(vtype=GRB.BINARY, name=<span class="string">'binary'</span>)</span><br><span class="line">m.addGenConstrIndicator(binary, <span class="keyword">True</span>, x==<span class="number">0</span>)</span><br><span class="line">m.addGenConstrIndicator(binary, <span class="keyword">False</span>, x&lt;=b)</span><br><span class="line">m.addGenConstrIndicator(binary, <span class="keyword">False</span>, x&gt;=a)</span><br></pre></td></tr></table></figure><p>但貌似indicator方法是比较慢的，所以将<code>约束(1)</code>改写为</p><script type="math/tex; mode=display">x<=b</script><script type="math/tex; mode=display">a*bin<=x<=bin*inf</script><p>其中<code>bin</code>是一个二进制变量，<code>inf</code>是一个足够大的常量，于是代码改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = m.addVar(vtype=GRB.INTEGER, name=<span class="string">'x'</span>)</span><br><span class="line">binary = m.addVar(vtype=GRB.BINARY, name=<span class="string">'binary'</span>)</span><br><span class="line">inf = int(<span class="string">'inf)</span></span><br><span class="line"><span class="string">m.addConstr(x &lt;= b)</span></span><br><span class="line"><span class="string">m.addConstr(a * binary &lt;= x &lt;= binary * inf)</span></span><br></pre></td></tr></table></figure><h2 id="让足够大的数尽量小"><a href="#让足够大的数尽量小" class="headerlink" title="让足够大的数尽量小"></a>让足够大的数尽量小</h2><p>上面的代码可以进一步优化，让<code>inf</code>足够小，减小搜索空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = m.addVars(nodes, vtype=GRB.INTEGER, name=<span class="string">'x'</span>)</span><br><span class="line">binary = m.addVars(nodes, vtype=GRB.BINARY, name=<span class="string">'binary'</span>)</span><br><span class="line">m.addConstrs(x[node] &lt;= b[node] <span class="keyword">for</span> node <span class="keyword">in</span> nodes)</span><br><span class="line">m.addConstrs(a[node] * binary[node] &lt;= x[node] &lt;= binary[node] * max(b) <span class="keyword">for</span> node <span class="keyword">in</span> nodes)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> gurobi </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-论文撰写</title>
      <link href="/2018/02/04/%E7%AC%94%E8%AE%B0-%E8%AE%BA%E6%96%87%E6%92%B0%E5%86%99/"/>
      <content type="html"><![CDATA[<h1 id="期刊"><a href="#期刊" class="headerlink" title="期刊"></a>期刊</h1><p><code>语言</code></p><p>中文或英文，通常即便中文期刊也要写英文的标题摘要关键字，有的要求参考文献有英文翻译</p><p><code>数据库</code></p><p>所谓某某期刊，就是指该期刊被对应的数据库收录。</p><p>有SCI、SSCI、EI、北大核心、南大核心、中国科学引文资料库等等。</p><p>具体参考知乎问题<a href="https://www.zhihu.com/question/20037578" target="_blank" rel="noopener">学术期刊有哪些种类</a></p><p>很多地方可以查，例如<a href="http://www.xueshu.com/" target="_blank" rel="noopener">学术之家</a>、<a href="http://muchong.com/journal.php" target="_blank" rel="noopener">小木虫</a></p><p><code>影响因子</code></p><p>概念比较复杂，总的来说被引用的次数越多越高</p><p>具体含义参考百度百科词条<a href="https://baike.baidu.com/item/%E5%BD%B1%E5%93%8D%E5%9B%A0%E5%AD%90/574727?fr=aladdin" target="_blank" rel="noopener">影响因子</a>以及知乎专栏<a href="https://zhuanlan.zhihu.com/p/24763700" target="_blank" rel="noopener">我国学术期刊的影响力和差距分析</a></p><p><code>发行周期</code></p><p>分为旬刊（10天）、半月刊、月刊、双月刊、季刊、半年刊、年刊。</p><p>可能影响录用的速度。</p><p><code>其他事项</code></p><p>确定刊物之前一定要去官网下载<strong>投稿须知</strong>，</p><p>一些刊物是不接受本科生乃至研究生为第一作者投稿的，可能还有别的需求，一定要打电话问清楚！！！</p><p>顺便下载论文模板和其他资料</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><ul><li><p>部分期刊的关键词是有要求的</p></li><li><p><code>中图分类号</code>可以到<a href="http://ztflh.xhma.com/" target="_blank" rel="noopener">分类号网站</a>查询</p></li><li><p><code>文献标识码</code>参考百度百科词条<a href="https://baike.baidu.com/item/%E6%96%87%E7%8C%AE%E6%A0%87%E8%AF%86%E7%A0%81/8289448?fr=aladdin" target="_blank" rel="noopener">文献标识码</a></p></li><li><p>切忌口语化</p></li><li><p>问题描述、事实陈述要有依据</p></li><li><p>要使用严谨的科学用语，避免个人杜撰的词汇</p></li><li><p>要重视引言、问题背景的撰写，并不一定要求颠覆的、全新的创新，但一定要讲清楚意义何在</p></li><li><p>参考文献要有领域权威、国外代表，技术类应该有相当比重</p></li><li><p>数据可以插入excel对象，节约字数</p></li><li><p>注意期刊对参考文献数量、图片宽度、图片内格式的要求</p></li><li><p>在word里插入一个excel对象，如果是新建的，可能显示不完全，最好通过已有的excel表生成。</p></li><li><p>excel在<code>视图-页面布局</code>中可以按照<code>厘米</code>设置单元格大小。</p></li><li><p>为保证Visio对象内的字体在word中不失真，需要在Visio中设定页面大小，可以裁剪图片</p></li><li><p>对象内的内容不算字数</p></li><li><p>word中分栏要一次性完成，其中需要单栏的另外设置</p><p>​</p></li></ul><h1 id="数学公式——Mathtype的坑"><a href="#数学公式——Mathtype的坑" class="headerlink" title="数学公式——Mathtype的坑"></a>数学公式——Mathtype的坑</h1><p>很多人说Mathtype好用，我是没感觉到，丑啊不适配高分屏且不说，其他也有让人心烦的地方。</p><p>然而部分期刊强制要求使用mathtype输入数学公式，只好忍着恶心继续用了。</p><p>有官方的<a href="http://www.mathtype.cn/jiqiao/" target="_blank" rel="noopener">使用技巧</a>和<a href="http://www.mathtype.cn/wenti/" target="_blank" rel="noopener">常见问题</a>，以下列一些：</p><ul><li><a href="http://www.mathtype.cn/wenti/biaoqian-jieshao.html" target="_blank" rel="noopener">介绍MathType标签栏</a></li><li><a href="http://www.mathtype.cn/wenti/baocun-changyong.html" target="_blank" rel="noopener">MathType如何保存常用公式</a></li></ul><ul><li><a href="http://www.mathtype.cn/jiqiao/shuru-kongbai.html" target="_blank" rel="noopener">如何在MathType输入空格</a></li><li><a href="http://www.mathtype.cn/wenti/tiaozheng-hangju.html" target="_blank" rel="noopener">插入MathType公式行距变大的解决方法</a></li><li><a href="http://www.mathtype.cn/wenti/shiyong-qi.html" target="_blank" rel="noopener">MathType30天试用期过了怎么办？</a></li><li><a href="http://www.mathtype.cn/wenti/zifu-qubie.html" target="_blank" rel="noopener">易混淆的MathType希腊字母介绍</a></li><li><a href="http://www.mathtype.cn/jiqiao/yinyong-gongshi-bianhao-gongneng.html" target="_blank" rel="noopener">详解MathType引用公式编号功能</a></li><li><a href="http://www.mathtype.cn/jiqiao/neizhi-yangshi.html" target="_blank" rel="noopener">如何选择MathType内置样式</a></li></ul><p>另外，给整个方程组编一个号的方法一直没有找到，现在的解决方法是在word里用1行2列的表格，或者用不带框的文本框。</p><p>插入公式改变行距的话，把小的公式的行距改为固定值16磅。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>一般论文模板里会有说明，不过<a href="http://www.cnki.net/" target="_blank" rel="noopener">中国知网</a>是支持导出的！</p><p><img src="/2018/02/04/笔记-论文撰写/截图2018-02-05_00-11-00.png" alt="截图2018-02-05_00-11-00"></p><p>对于一些特殊的例如政府文件，可以参考<a href="http://bbs.pinggu.org/thread-2736005-1-1.html" target="_blank" rel="noopener">学位论文中引用国家政策文件是否需要标注到参考文献中？格式是什么？</a></p><p>如果需要英文版参考文献，优先去看原文。</p><p>中文文献在知网搜就行，但是外文还是要用图书馆系统。</p><h1 id="投稿流程"><a href="#投稿流程" class="headerlink" title="投稿流程"></a>投稿流程</h1><ol><li><p>除了准备好稿件以外，还可能需要准备一份<code>版权协议</code>，要有所有作者的签字以及所属单位的盖章，袋盖长这样：</p><p><img src="/2018/02/04/笔记-论文撰写/1520438054094.png" alt="1520438054094"></p></li><li><p>要考虑所属的学科以及对应的学科分类号，<a href="https://wenku.baidu.com/view/006766c8804d2b160b4ec0e2.html" target="_blank" rel="noopener">百度文库免费的链接</a></p></li><li><p>要考虑推荐审稿人及其基本信息（姓名、职称、单位、通讯地址、emil等等）</p></li><li><p>第一次投稿申请一个ORCID，介绍参考<a href="http://blog.sciencenet.cn/blog-213646-896726.html" target="_blank" rel="noopener">科学网博客</a>，注册网站为<a href="http://iauthor.cn/welcome/index" target="_blank" rel="noopener">中国科学家在线</a></p></li></ol>]]></content>
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-hexo</title>
      <link href="/2018/01/30/%E7%AC%94%E8%AE%B0-hexo/"/>
      <content type="html"><![CDATA[<h1 id="搭建hexo-github"><a href="#搭建hexo-github" class="headerlink" title="搭建hexo+github"></a>搭建hexo+github</h1><p>怀着好奇心，想看看大神们究竟在干些什么，于是跟着教程，搭出现在的博客。虽然遇到些问题，但是还算顺利，一共三个小时吧，按照步骤来就行~<br> <a id="more"></a><br>以下是链接：<br><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="noopener">简书教程</a></p><p>以下是遇到的“坑”：</p><ol><li>“localhost:4000/”本地地址需要在“Git Bash”上输入“hexo s”（服务）后才能访问，且只有自己能看到。</li><li>“uername.github.io”是托管在Github上的网站。需要本地更新后在“Git Bash”上输入“hexo g”（生成）和“hexo d”（提交）才能查看到更新</li><li>发现网速不够就用一下加速器咯</li></ol><p>以下是我的配置文件（_config.yml），作为参考，在个性化里会有简单介绍，注意冒号后的空格哦~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: 王子泰</span><br><span class="line">subtitle: 哭也欢乐，悲也潇洒</span><br><span class="line">description: [学习，日记，杂谈]</span><br><span class="line">author: wang22ti</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://wang22ti.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md </span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: true</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"># Archives</span><br><span class="line">2: 开启分页</span><br><span class="line">1: 禁用分页</span><br><span class="line">0: 全部禁用</span><br><span class="line">archive: 2</span><br><span class="line">category: 2</span><br><span class="line">tag: 2</span><br><span class="line"># Server #本地服务器</span><br><span class="line">port: 4000 #端口号</span><br><span class="line">server_ip: localhost #IP 地址</span><br><span class="line">logger: false</span><br><span class="line">logger_format: dev</span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line"># deploy:</span><br><span class="line">#   type: git</span><br><span class="line">#   repo: https://github.com/wang22ti/wang22ti.github.io.git</span><br><span class="line">#   branch: master</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">      github: git@github.com:wang22ti/wang22ti.github.io.git,master</span><br><span class="line">      coding: git@git.coding.net:wang22ti/wang22ti.git,master</span><br><span class="line"></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line"></span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 # 提交最新的一个链接</span><br><span class="line">  host: wang22ti.com # 在百度站长平台中注册的域名</span><br><span class="line">  token: ********** # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><h1 id="个性化——next"><a href="#个性化——next" class="headerlink" title="个性化——next"></a>个性化——next</h1><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ol><li>下载一个喜欢的主题（ <a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">知乎：有哪些好看的 Hexo 主题？</a>）放到theme文件夹下</li><li>改一下全局配置文件_config.yml中的theme字段为步骤1中的文件夹的名字</li><li>运行git bash，键入hexo g</li></ol><p>当然了，如果有兴趣还可以参考配置文档，例如 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next主题</a></p><!--more--><h2 id="添加分类标签"><a href="#添加分类标签" class="headerlink" title="添加分类标签"></a>添加分类标签</h2><p>next默认是没有分类<code>categories</code>和标签<code>tags</code>页面的，需要手动开启。</p><p>（很奇怪为什么这么基础的功能不默认打开）</p><p><a href="http://theme-next.iissnan.com/theme-settings.html#author-sites" target="_blank" rel="noopener">官方文档</a>就有配置方法，很详细，不赘述。</p><p>另外还有站点建立时间、打赏、微信公众号、背景动画、搜索等等。</p><p><del>我只是搬运工</del></p><h2 id="统计文章字数"><a href="#统计文章字数" class="headerlink" title="统计文章字数"></a>统计文章字数</h2><p> 按照大多数网上的教程设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true         # 单篇 字数统计</span><br><span class="line">  min2read: true          # 单篇 阅读时长</span><br><span class="line">  totalcount: false       # 网站 字数统计</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure><p>之后，会发现虽然出现了统计的组件，但是根本没有数字信息，需要在git bash输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>安装字数统计的插件。</p><p>具体操作参加博客<a href="https://www.jianshu.com/p/baea8c95e39b" target="_blank" rel="noopener">Hexo添加字数统计、阅读时长</a></p><h2 id="统计访问次数"><a href="#统计访问次数" class="headerlink" title="统计访问次数"></a>统计访问次数</h2><p> 统计访问次数需要借助第三方应用，应该属于比较新的功能吧，因为针对旧的版本有<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanClou" target="_blank" rel="noopener">官方指南</a></p><p><strong>不过——</strong></p><p>新的版本里面已经集成了相关的文件，所以只需要修改配置文件即可（可坑死我了，按照指南配了一遍又删了一遍）</p><p>相关指南很多啦，不做赘述，选<a href="http://blog.csdn.net/ganzhilin520/article/details/79048021" target="_blank" rel="noopener">一个比较简洁的博客</a>（里面还有将阅读次数修改为热度的奇技淫巧）</p><p>此外，还有<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>，只需要两行代码，似乎也很棒。这是前人的<a href="https://www.jianshu.com/p/8a8f880f40c0" target="_blank" rel="noopener">使用指南</a>。</p><p><strong>真是够了！</strong></p><p>LeanCloud只是看起来还不错，但是经过两天我自己的访问，已经用完了免费的次数。</p><p>太少了！</p><p>还是用不蒜子吧！何况新的版本已经集成了！配置很简单，其中标签<code>i</code>的string可以随意修改。</p><p><code>pv</code>有一次就会计算一次，<code>uv</code>同一个用户访问多次只记录一次。</p><p><img src="/2018/01/30/笔记-hexo/1516807006820.png" alt=""></p><p>不过如果用本地服务器登录，站点的访问次数会很高，大概是不蒜子的服务器没有区分吧。提交到GitHub后通过互联网访问就正常了。</p><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>嗯，这里面的坑实在大。</p><p><code>多说</code>和<code>网易云</code>跟帖已经停止服务了。</p><p><code>畅言</code>需要备案，很复杂的样子。``</p><p><code>disqus</code>被墙了，很烦人。</p><p><code>valine</code>需要使用leancloud，免费的可能根本不够用。</p><p>啊啊，最后用了<a href="https://livere.com/" target="_blank" rel="noopener"><code>来必力</code></a>，不得不吐槽这糟糕的翻译，是一个韩国的服务器。</p><p>要用邮箱注册，会向注册邮箱发一个验证码。槽点在于：</p><p><strong>验证过程中可能遇到韩文！！！</strong></p><p><img src="/2018/01/30/笔记-hexo/1516812886623.png" alt=""></p><p><img src="/2018/01/30/笔记-hexo/1516813084208.png" alt=""></p><p>好吧，没事，只要知道需要输入的是验证码就行，虽然反应超级慢。</p><hr><p>不过安装的过程还是比较好的，</p><p>选一个city版，会显示 安装代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"lv-container"</span> data-id=<span class="string">"city"</span> data-uid=<span class="string">"*****************"</span>&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   (<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span><br><span class="line">       j.async = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/</span>noscript&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- City版安装代码已完成 --&gt;</span></span><br></pre></td></tr></table></figure><p>由于next集成了来必力，所以只需要将<code>data-uid</code>粘贴到配置文件就行，不必把代码都粘过去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="line">livere_uid: *****************</span><br></pre></td></tr></table></figure><p>还可以再登录官网管理评论，就不赘述了，要关掉其他的评论插件。</p><h2 id="绑定域名和被百度搜索到"><a href="#绑定域名和被百度搜索到" class="headerlink" title="绑定域名和被百度搜索到"></a>绑定域名和被百度搜索到</h2><p>!@#$%^&amp;*()_+</p><h1 id="markdown和tex渲染问题"><a href="#markdown和tex渲染问题" class="headerlink" title="markdown和tex渲染问题"></a>markdown和tex渲染问题</h1><p>hexo博客的正文都是使用markdown的格式存储的，</p><p>默认使用<code>hexo-renderer-marked</code>将markdown转为html（渲染）。</p><p>但是由于markdown不是同一的标准，所以使用编辑器预览的效果和hexo实际渲染的效果并完全相同。</p><p>比如hexo要求<code>#</code>之后必须有空格才能渲染为标题。</p><p>而对于tex公式的渲染则是惨不忍睹：</p><p>不能换行，有些符号无法渲染</p><p>还好有大神解决了问题<a href="https://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="noopener">在Hexo中渲染MathJax数学公式</a></p><p>改用<code>hexo-renderer-kramed</code>渲染即可。</p><h1 id="template-error"><a href="#template-error" class="headerlink" title="template_error"></a>template_error</h1><p>学了一晚上吴恩达老师的机器学习，结果一早起来post却遇到了问题<code>Template render error: expected variable end</code>：</p><p><img src="/2018/01/30/笔记-hexo/Snipaste_2018-05-28_08-57-27.png" alt=""></p><p>啊，这是什么鬼啊！我什么都没动啊！</p><p>初步搜索发现是特殊符号的问题，比如<a href="https://www.jianshu.com/p/738ebe02029b" target="_blank" rel="noopener">这位兄弟</a>就提到是特殊符号没有被转义的问题，然而我搜了半天并没有找到一样的情况。最终手动用二分法查找，终于找到了万恶之源：</p><p><img src="/2018/01/30/笔记-hexo/1.png" alt=""></p><hr><p>仔细观察上面的公式，虽然Typora渲染出来了，但是却因为多了一对大括号，hexo渲染不出来！！emmmm，气得想换一个博客，长见识了。</p><p>为了避免莫名其妙的错误，转一个大佬的博客</p><p><a href="https://blog.csdn.net/chwshuang/article/details/52350559" target="_blank" rel="noopener">Hexo在Github中搭建博客系统(6)异常处理</a></p><p>以及hexo官网对于错误的解释</p><p><a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="noopener">问题解答</a></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记-数学建模美赛</title>
      <link href="/2018/01/26/%E7%AC%94%E8%AE%B0-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%BE%8E%E8%B5%9B/"/>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>分为<code>MCM(数学建模竞赛)</code>和<code>ICM(交叉学科建模竞赛)</code>，前者题目开放，蓝色电子版证书；后者封闭，红色。</p><p>最佳3人一队，必须同一学校，强调团队合作精神。</p><a id="more"></a><p>成员可以来自任何专业，指导老师可以为任何人。</p><p>前些年竞赛题和解答论文可以参考<a href="www.mathmodels.org">www.mathmodels.org</a></p><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>注册需要交100美元，有系统分配的控制号（参赛队号）才算报名成功，是队伍唯一的标志，包括提交文件都需要。交大找王兵团老师，纸质版的。</p><h1 id="题目发布"><a href="#题目发布" class="headerlink" title="题目发布"></a>题目发布</h1><p>美国东部时间下午5点，北京时间2月9号上午6点，发布题目，除了第一个其他是镜像</p><ol><li><a href="www.comap.com/undergraduate/contents/mcm">www.comap.com/undergraduate/contents/mcm</a></li><li><a href="www.comap-math.com/mcm/index.html">www.comap-math.com/mcm/index.html</a></li><li><a href="www.comap-math.com/mcm/index.html">www.comap-math.com/mcm/index.html</a></li><li><a href="www.mathismore.net/mcm/index.html">www.mathismore.net/mcm/index.html</a></li><li><a href="www.mathportals.net/mcm/index.html">www.mathportals.net/mcm/index.html</a></li><li><a href="www.immchallenge.org/mcm/index.html">www.immchallenge.org/mcm/index.html</a></li></ol><p>选题时间不超过1天半（有些人找老婆需要一辈子，有些人只需要一眼）</p><p>题目网上有翻译，最好看原文。</p><p>需要了解MCM和ICM的差异，一共6道题目</p><p><code>MCM</code>连续A、离散B、数据分析C</p><p><code>ICM</code>运筹学/网络科学D、环境科学E、政策研究F</p><p>每个题都有不同的获奖比例，对于难题获奖比例高，并不一定要做完，做完也不一定得奖，比的是相对能力。并不是用一个数学方法解决了就能得奖。一等奖论文一般至少有20页，尽量丰富。</p><h1 id="论文撰写与提交"><a href="#论文撰写与提交" class="headerlink" title="论文撰写与提交"></a>论文撰写与提交</h1><p>比赛过程中是不应该有任何队员以外的人的介入，包括指导老师。</p><p>结论需要数据，数学处理。比的就是想法，把实际问题转化为数学模型、数学描述，不是结论获得的过程，因此论文中无非论文的支撑材料例如程序、软件，可以有算法描述。</p><p>主要内容为公式、图表，甚至占到比三分之一还高，部分中国的阅卷老师受制于英文水平，重点看公式。外国的阅卷老师一般只看特等奖或一等奖。另外，不要放太多的图表，要选一部分写出结论。</p><p>比赛过程中，如果发现题目有不完善的地方，会在网站上更新。也可以发送邮件到<a href="">mcm@comap.com</a>反馈，其中要包括参赛号。</p><p>英文，字体不小于12p，纸张不大于a4页眉必须有参赛号<code>Team#*****</code>和页码数，<code>summary sheet</code>不需要页眉，只能写1页，解答从第2页开始。</p><p>论文中不能出现除参赛号以外的任何个人信息，如果需要写信，<code>sincerely, Team #******</code></p><p>论文文件格式为pdf或word，文件名为参赛号，发送到邮箱<a href="">solutions@comap.com</a>，主题为<code>COMAP 参赛号</code>，不要重复发送，附件小于17MB，不要使用云附件或超大附件。</p><p>控制页要签名，选好题才能有，打印拍好，以pdf或图像格式发送到<a href="">forms@comap.com</a>，其他要求同上。</p><p>提交48小时后，如果论文电子版状态显示<code>Received</code>就OK，如果是<code>not yet received</code>就得重发</p><h1 id="评审与奖项"><a href="#评审与奖项" class="headerlink" title="评审与奖项"></a>评审与奖项</h1><p>评审在3月到4月完成，结果4月30号之前公布，分为</p><p><code>不合格Disqualified</code>：违反竞赛规则，取消资格</p><p><code>不超过参赛Unsuccessful</code>：没完成基本问题</p><p><code>成功参赛Successful Participant</code>：完成基本要求，给出结果</p><p><code>优秀Honorable Mention</code>：包含建模和问题解决的全部要素，超过平均水平</p><p><code>优异Meritorious</code>：全部要素，很多方面优秀，表述清晰</p><p><code>优胜提名Finalist</code>：进入最后一轮评审，2%</p><p><code>优胜Outstanding Winner</code>：公开出版</p><p>官网<code>download certification</code>下载电子版证书，随时都可以下载。</p><p>Media Contest，参赛者免费的多媒体竞赛</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>性别混合队伍，女生可以进男生宿舍，男生不能进女生。从2月8号可以进。</p><p><code>公共邮箱</code><a href="">xxdswbt@163.com</a></p><p><code>密码</code>认识我的直接找我要吧</p><h1 id="数学建模论文的9个部分"><a href="#数学建模论文的9个部分" class="headerlink" title="数学建模论文的9个部分"></a>数学建模论文的9个部分</h1><h2 id="1-摘要summary"><a href="#1-摘要summary" class="headerlink" title="1. 摘要summary"></a>1. 摘要<code>summary</code></h2><p>   第一页的后2/3，论文的压缩总结，10-15分，用来在大规模论文中进行初选。</p><h2 id="2-问题叙述introduction-amp-background"><a href="#2-问题叙述introduction-amp-background" class="headerlink" title="2. 问题叙述introduction&amp;background"></a>2. 问题叙述<code>introduction</code>&amp;<code>background</code></h2><p>   把题目用自己的话叙述一下</p><h2 id="3-模型假设与符号说明assumption-amp-description"><a href="#3-模型假设与符号说明assumption-amp-description" class="headerlink" title="3. 模型假设与符号说明assumption&amp;description"></a>3. 模型假设与符号说明<code>assumption</code>&amp;<code>description</code></h2><p>   选取问题的主要矛盾，简化次要矛盾，美赛当中可能还需要概念说明。</p><h2 id="4-模型的建立"><a href="#4-模型的建立" class="headerlink" title="4. 模型的建立"></a>4. 模型的建立</h2><p>   主体，不要指望用现成的模型求解问题就得奖</p><p>   可以通过不同的角度提出不同的问题并加以建模</p><h2 id="5-模型的求解solution"><a href="#5-模型的求解solution" class="headerlink" title="5. 模型的求解solution"></a>5. 模型的求解<code>solution</code></h2><p>   软件能算出来当然ok，然而可能算不出来。这时要用数学处理简化求解过程（数值分析）</p><p>   一般来说结果只要不是太离谱，都默认是对的。由于假设不同，很有可能相同题目的结果并不一样，但这并不重要，关键在于建模的过程。</p><h2 id="6-模型检验与误差分析"><a href="#6-模型检验与误差分析" class="headerlink" title="6. 模型检验与误差分析"></a>6. 模型检验与误差分析</h2><p>   近似方法的可用性，占分并不高</p><h2 id="7-模型评价strength-amp-weakness"><a href="#7-模型评价strength-amp-weakness" class="headerlink" title="7. 模型评价strength&amp;weakness"></a>7. 模型评价<code>strength</code>&amp;<code>weakness</code></h2><p>   不重要但是必须得有。由于文化的差异，不要谦虚了，坚信自己不是”微小的工作“。</p><p>   毛病可以写，但是不要写本质的毛病。 </p><h2 id="8-参考文献reference"><a href="#8-参考文献reference" class="headerlink" title="8. 参考文献reference"></a>8. 参考文献<code>reference</code></h2><p>   很重要，使用了别人的方法没注明参考文献会被认为抄袭，列出来不会影响结果。</p><p>   中文的翻译为英文，网页也是可以有的</p><h2 id="9-附录appendix"><a href="#9-附录appendix" class="headerlink" title="9. 附录appendix"></a>9. 附录<code>appendix</code></h2><p>   可有可无，不要放代码！代码优劣可以放在算法描述中。</p>]]></content>
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>极好的markdown编辑器Typora</title>
      <link href="/2018/01/24/%E6%9E%81%E5%A5%BD%E7%9A%84markdown%E7%BC%96%E8%BE%91%E5%99%A8Typora/"/>
      <content type="html"><![CDATA[<p> 本来是想抽空学一下markdown的基础语法的，因为之前没法想优秀的markdown编辑器。</p><p>然而恰好搜到了Typora，所见即所得啊！</p><a id="more"></a><p>真心好用，这是<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora官网</a></p><p>具体使用方法早有人写好啦，就不赘述啦，<a href="https://www.jianshu.com/p/092de536d948" target="_blank" rel="noopener">参见</a></p><p>早知道这样，造什么自动转换的轮子</p><p>另外因为是博客，插入图片比较困难，这是<a href="http://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">优秀操作</a></p><p><del>（感觉我就是搬运工）</del></p><p>值得说明的是，通过命令<code>hexo n</code>默认生成文件中的字段<code>tags</code>会被Typora当做标题处理，感觉不是很棒。</p><p>所以需要修改默认模板文件<code>scaffolds\post.md</code>如下（其实就是加了一个回车）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><del>我不是搬运工啦</del></p>]]></content>
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>班助寄语</title>
      <link href="/2017/07/31/%E7%8F%AD%E5%8A%A9%E5%AF%84%E8%AF%AD/"/>
      <content type="html"><![CDATA[<h1 id="高考后暑假学点啥1"><a href="#高考后暑假学点啥1" class="headerlink" title="高考后暑假学点啥1"></a>高考后暑假学点啥1</h1><p>&quot;古今多少事，都付笑谈中。&quot;古来多少状元，如今为人所知的又有几个呢？小的时候跌倒过很多次才学会走路，如今还记得的又有几次？今人视古人，不过历史，鲜有精彩过小说；未来的自己看现在的自己，不过是稚嫩的少年，更波澜壮阔的人生还早着呢。</p><p>所谓&quot;活到老，学到老&quot;。我们来看看计算机类的同学们在度过了刚考完后的狂欢可以学些啥。<br> <a id="more"></a><br>我们应该对自己的选择充满自信，无论是就业前景还是网上浩如烟海的免费资源，和其他专业相比，我们都很有优势。</p><p>如果是对编程感兴趣，不畏惧枯燥的语法而又希望所学对课程有所帮助，推荐学习浙江大学翁恺老师的《C语言程序设计》，网址是 <a href="http://study.163.com/curricula/cs.htm" target="_blank" rel="noopener">http://study.163.com/curricula/cs.htm</a>，点开有惊喜。当然，光看视频是没什么用的，必须在电脑上一个一个程序实现才行。嗯，买电脑的好理由。</p><p>人们常说&quot;兴趣是最好的老师&quot;，没有兴趣怎么办？当然是培养兴趣啦。Python是一门容易的编程语言，语法很接近平常人们说话。不仅入门后利用扩展包便可以轻易写出许多有趣的小程序，还是当今许多例如人工智能领域的热门语言。北京理工大学嵩天老师的课程 <a href="http://www.icourses.cn/gjjpkc/sy/yw/20170120/t_10443.html" target="_blank" rel="noopener">http://www.icourses.cn/gjjpkc/sy/yw/20170120/t_10443.html</a>比较系统。嗯，就听这个吧，估计看书的概率比较小。</p><p>类似的学习网站很多，尤其计算机相关的。比如慕课网（ <a href="http://www.imooc.com/" target="_blank" rel="noopener">http://www.imooc.com/</a>）牛客网（ <a href="https://www.nowcoder.com" target="_blank" rel="noopener">https://www.nowcoder.com</a>）萌码（ <a href="http://www.mengma.com/" target="_blank" rel="noopener">http://www.mengma.com/</a>）等等，大把大把免费却又并不廉价的知识等着你去学呢！知识改变命运，至少现在并不过时。</p><p>所谓&quot;知行&quot;（哈哈，交大的校训），学习理论的同时要带有目的性地设计一些小程序，比如一个简单的计算器，一个2048游戏，一个扫雷游戏乃至更复杂的。据说某些大神平时玩的游戏都是自己写的。遇到技术上的困难就在网上搜，一些博客平台例如CSDN（ <a href="http://www.csdn.net/?ref=toolbar" target="_blank" rel="noopener">http://www.csdn.net/?ref=toolbar</a>）博客园（ <a href="https://www.cnblogs.com/" target="_blank" rel="noopener">https://www.cnblogs.com/</a>）里的文章都是不错的。当然还有Github（ <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>），那便是高端玩家了，大多数同学现在还用不到。</p><p>以上。</p><p>2017年7月16日星期日 于北京交通大学嘉园 王子泰</p><h1 id="高考后暑假学点啥2"><a href="#高考后暑假学点啥2" class="headerlink" title="高考后暑假学点啥2"></a>高考后暑假学点啥2</h1><p>在交大，课程可以大致分为三类：基础课，专业课，任选课。专业课又分必修、选修，主要安排在大二大三；任选课五花八门，一言难尽；本文主要谈一下计算机学院的基础课。在此之前，还得先说明学分、绩点和学业警示，从一个故事开始吧。故事中所有的数据都是我随意拟定的，但可以说明问题。</p><p> 故事的主角可以叫小明。</p><p>他第一学期要上三门课A、B、C，每门课的学分分别是2、3、4。刚上大学的小明放纵了思想，怠惰了身体，一个学期下来三门课的成绩为58、68、61。根据他所在年级的折算方法（改革中，每年的算法并不一致），三门课对应的绩点是0、1.5、1。由于没有通过课程A，他获得的学分为3+4=7，获得的平均绩点（GPA，绩点按照学分的加权平均）为（3*1.5+4*1）/（3+4）=1.07。很遗憾，按照学校的规定，学分不足8，小明将受到一次学业警示。</p><p>这不行啊，受到多次学业警示将受到留级、退学的惩罚！辛辛苦苦几十年，总不至于一夜回到解放前吧？接下来的一学期，小明获得了不错的成绩。三门学分为2、3、3的课程成绩分别为86、91、96，对应的绩点为3、3.5、4。学分为2+3+3=8，平均绩点为（3*1.5+4*1+2*3+3.5*3+4*3）/（3+4+2+3+3）=2.47。嗯，没有学业警示了，但是和同学3以上的绩点还是有很大差距。</p><p>嗯，不骄不躁，继续努力。又过了两年，小明完成了史诗般的逆袭，绩点达到3.3，在100人的专业中排名第7。原本按照规定，前15%的同学可以保研，可是又有&quot;挂科不保研&quot;的规定，想上研究生的小明只好加入考研的大军。&quot;一失足成千古恨，再回首已百年身&quot;，大抵如此。</p><p>小明的故事到此结束，下面终于到本文的重点，基础课。</p><p> 基础课每年略有变化，例如16级加入了《工科化学》和《电工基础》，据说17级会加入《项目管理》。但是无论如何变化，最为重要的仍然是《微积分》、《大学英语》两门。为什么呢？</p><p> 其一，两门课程的学分很高，也就是在计算绩点的时候权重很大。两门课程分别上2、2学期，学分分别为11、12。和其他课程3到4的学分相比，是绝对的巨无霸、巨头。</p><p> 其二，两门课程的确很重要。大二大三的课程例如电路分析、模拟电路、概率论，都需要微积分作为基础，大一的疏忽很容易导致雪崩式的灾难；想要研究当下流行的人工智能等方面的技术，需要深厚的微积分作为功底。如果想从事科学研究，必须阅读英文文献；想要出国深造，对英语的要求仍然很高。</p><p> 微积分怎么学？一是需要扎实的导数知识作为预备；二是重视老师布置的课后习题。至于是否需要另买习题，取决于个人需求吧。</p><p> 刚开学的时候会有英语的分级测试。根据排名会将同学们分到2、3、4级班。4级班大一上学期就可以参加大学英语四级考试，大一下学期就可以参加六级考试；而2、3级班的同学则需要相应延后1、2个学期。考虑到高考后是大家英语水平的一个巅峰，暑假还是有必要认真准备一下的，四六级的分数可以折算为12学分的英语课成绩。听力和很多省份不一样，题目由听力给出，试卷上只有答案，语速蛮快。有单项选择题，一些省份的同学要注意一下啦。单词量近似于四级，和高考也差不多，推荐使用《扇贝单词》保持单词量。依稀记得没有作文。</p><p> 以上。</p><p>2017年7月20日 于北京交通大学红果园宾馆 王子泰</p><h1 id="计算机新生如何买电脑"><a href="#计算机新生如何买电脑" class="headerlink" title="计算机新生如何买电脑"></a>计算机新生如何买电脑</h1><p>作为计算机专业的同学，怎能没有电脑？鉴于很多同学完全小白，本文将说明计算机的主要部件及其功能，并对不同情况的同学给出购机建议（非专业）。<br> <!--more--> </p><ol><li>1、中央处理器（CPU）</li></ol><p>控制指令（就是告诉其他部件什么时候应该干什么）和执行算数逻辑计算（加减乘除等等），是计算机的核心部件。</p><p>主要参数为主频（即每秒处理的数量，越多越好）和缓存容量（暂时解释比较困难，越多越好）。</p><p>现在主流的处理器为英特尔（Intel）的酷睿i系列，从入门到高端分别为i3、i5、i7，每个层次又分U、HQ、K等等版本。举个例子，i7 7500U表示该款处理器为i系列的第七代（7500的7）降频（U）的高端处理器。</p><p>详细的CPU天梯图如下，网上找一个就行啦。</p><ol><li>5、接口</li></ol><p>电脑发展的趋势是统一接口，而Type-C是目前比较好的解决方案。推荐购买带有Type-C的电脑。而支持thunderbolt3的Type-C接口集充电、高速数据传输、视频传输为一体，是高端机型的配置。</p><p>其他接口不做赘述，尽量买接口多一点的。</p><ol><li>6、键盘</li></ol><p>现在主流的笔记本键盘都是巧克力键盘。主要参数就是键程，指按下一个键它所走的路程。长短取决于个人喜好，大多数人倾向较长的键程，但这又与机身厚度相冲突。最新的Macbook Pro键程有点太短。</p><ol><li>7、触控板</li></ol><p>MacBook有着绝大多数其他电脑无法比拟的触控板，手势操作花样繁多。</p><p>购买windows电脑的时候强烈推荐带有精确式触控板，其大多数操作不输于MacBook。对于常常带电脑出门的计算机学院同学，一个好的触控板可以节约一个鼠标的空间。</p><ol><li>8、风扇</li></ol><p>一般来说，只要是i5及以上CPU的电脑，都最好带有风扇。虽然可能有些声音，但至少可以保证散热。</p><p>10、系统</p><p>常见的系统就是windows和Mac OS了。作为程序员推荐使用windows，毕竟兼容性极好而且为主流。但买了MacBook也可以装windows，虽然偶尔会崩，但也不失为一个选择。</p><p>在我们挑选电脑的时候，一定要避免陷入追求参数的误区，综合需求与预算才是正解。</p><ol><li>1、预算极端充足（无上限）</li></ol><p>这就很好买了嘛，土豪的世界。不用考虑需求，买两台，一台顶配的游戏本或者台式机放在宿舍，牌子很多不赘述，大概3、4万；一台超极本或者二合一用作便携，例如微软的surface、戴尔的xps、联想的miix、戴尔的灵耀等等，顶配大概1、2万。实在不行再买台顶配的MacBook Pro，也就2万多，不到10万就可以满足一切需求，对于土豪来说真不算什么。</p><p>然而绝多数同学并不是土豪。</p><ol><li>2、预算充足（9千-2万）</li></ol><p>这也比较好买，因为这个价位的电脑不算多。</p><p>不太建议买游戏本，虽然往往性能不错，但极差的便携性（极大影响外出自习积极性）外观往往像暴发户（纯个人观点）。何况大学生不好好学习整天打什么游戏？？</p><p>就算要打游戏，也要买一个带雷电3的电脑，再买一个独立显卡才显得是高端玩家。</p><p>推荐购买超极本、二合一或是MacBook，这个价位的性能都不是问题，具体参数取舍看上面的介绍。二合一可以满足触屏的需求，装上凤凰OS（桌面端的安卓）体验还不错；MacBook可以满足颜值、续航等需求。</p><ol><li>3、预算正常（4千-9千）</li></ol><p>这个价位不太推荐买MacBook了，不过这个价位也几乎没有MacBook。</p><p>这个预算一般都是U系列的处理器，I5和i7差距貌似不大，但个人还是推荐i7。</p><p>推荐买8G内存的，4G现在不太够用，要跑虚拟机或者大型软件就要16G，或者买8G电脑再插内存条。</p><p>推荐买混合硬盘的，例如128G固态+1T机械。</p><p>推荐买带精确式触控板触控板的。</p><p>指纹识别其实并不重要。</p><p>屏幕1080的就可以了，色域达到72% NTSC就行。</p><p>对便携性不是很高可以考虑游戏本，毕竟各项参数比较均衡。</p><ol><li>4、预算紧张（4千以下）</li></ol><p>处理器i5吧，不能再低。</p><p>内存还是要8G。</p><p>硬盘估计用不了固态了，最多128G但可能有点不足，512G或1T机械吧。</p><p>其他参数往往只能满足一两个优秀，自己取舍吧，各个品牌应该都差不多。</p><p>说了那么多，如果懒得根据参数选择呢？那我推荐一下吧（未提到的品牌是因为不了解）。</p><ol><li>1、预算充足</li></ol><p>1.</p><ol><li>1Dell XPS系列（特别推荐XPS13顶配版）</li><li>2联想MIIX5Pro系列（我正在用）、ThinkPad X1系列</li><li>3MacBook系列</li><li>4微软Surface系列（性价比略低）</li><li>2、预算正常</li></ol><p>2.1 不推荐充足预算的乞丐版</p><p>2.2 联想小新系列、YOGA系列</p><p>2.3 戴尔燃系列</p><p>2.4 华硕灵耀系列</p><p>2.5 华为MateBook X系列（仅限X系列）</p><p>2.6 小米笔记本系列</p><p>对了，如果想买matebook的可以和我说，可以便宜些。</p><p>2017年7月31日 于台北飞北京航班 王子泰</p><p>若有不足，还请斧正。</p>]]></content>
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
